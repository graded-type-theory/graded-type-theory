-- Proof that consistent negative axioms do not jeopardize canonicity.
-- https://www.cs.bham.ac.uk/~mhe/papers/negative-axioms.pdf

{-# OPTIONS --without-K --safe #-}

open import Definition.Modality.Instances.Erasure
open import Definition.Modality.Instances.Erasure.Modality (_‚â§ œâ)
open import Application.NegativeAxioms.NegativeErasedContext ErasureModality (Œª ())
open import Definition.Typed Erasure‚Ä≤
open import Definition.Untyped Erasure hiding (_‚à∑_; ‚Ñï‚â¢B)

open import Tools.Empty

module Application.NegativeAxioms.Canonicity.NegativeErased {m} {Œì : Con Term m} {Œ≥}
  (nŒìŒ≥ : NegativeErasedContext Œì Œ≥) (consistent : ‚àÄ{t} ‚Üí Œì ‚ä¢ t ‚à∑ Empty ‚Üí ‚ä•) where

open import Definition.Modality.Instances.Erasure.Properties (_‚â§ œâ)
open import Definition.Modality.Context ErasureModality
open import Definition.Modality.Usage ErasureModality
open import Definition.Modality.Usage.Inversion ErasureModality
open import Definition.Modality.FullReduction ErasureModality greatest-elem

open import Application.NegativeAxioms.NegativeType Erasure‚Ä≤
open import Erasure.SucRed Erasure‚Ä≤

open import Definition.Typed.Properties Erasure‚Ä≤
open import Definition.Typed.Usage ErasureModality
open import Definition.Typed.Consequences.Consistency Erasure‚Ä≤
open import Definition.Typed.Consequences.Inequality Erasure‚Ä≤
open import Definition.Typed.Consequences.Injectivity Erasure‚Ä≤
open import Definition.Typed.Consequences.Inversion Erasure‚Ä≤
open import Definition.Typed.Consequences.Reduction Erasure‚Ä≤
open import Definition.Typed.Consequences.Syntactic Erasure‚Ä≤

open import Definition.Conversion.FullReduction Erasure‚Ä≤ hiding (fullRedTerm)

open import Tools.Nat
import Tools.PropositionalEquality as PE
open import Tools.Product
open import Tools.Sum using (_‚äé_; inj‚ÇÅ; inj‚ÇÇ)


-- Preliminaries
---------------------------------------------------------------------------

private
  Ty  = Term
  Cxt = Con Ty
  variable
    A B C : Term m
    t u   : Term m


-- Main results
---------------------------------------------------------------------------

-- Lemma: A neutral has negative type in a consistent negative/erased context.

neNeg : (d : Œì ‚ä¢ u ‚à∑ A) (n : Neutral u) (f : Œ≥ ‚ñ∏ u) ‚Üí NegativeType Œì A
neNeg (var ‚ä¢Œì h          ) (var x      ) Œ≥‚ñ∏u =
  let Œ≥‚â§Œ≥‚Ä≤ = inv-usage-var Œ≥‚ñ∏u
      Œ≥‚ü®x‚ü©‚â§ùüô = PE.subst (Œª p ‚Üí Œ≥ ‚ü® x ‚ü© ‚â§ p) (update-lookup {Œ≥ = ùüò·∂ú} x)
                        (lookup-monotone x Œ≥‚â§Œ≥‚Ä≤)
  in  lookupNegative ‚ä¢Œì nŒìŒ≥ h Œ≥‚ü®x‚ü©‚â§ùüô
neNeg (d ‚àò‚±º ‚ä¢t           ) (‚àò‚Çô n       ) Œ≥‚ñ∏u =
  let invUsageApp Œ¥‚ñ∏g Œ∑‚ñ∏a Œ≥‚â§Œ≥‚Ä≤ = inv-usage-app Œ≥‚ñ∏u
  in  appNeg (neNeg d n (sub Œ¥‚ñ∏g (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (+·∂ú-decreasingÀ° _ _))))
             (refl (syntacticTerm d)) ‚ä¢t
neNeg (fst‚±º ‚ä¢A A‚ä¢B d     ) (fst‚Çô n     ) Œ≥‚ñ∏u =
  let invUsageProj Œ¥‚ñ∏t Œ≥‚â§Œ¥ = inv-usage-fst Œ≥‚ñ∏u
  in  fstNeg (neNeg d n (sub Œ¥‚ñ∏t Œ≥‚â§Œ¥))
             (refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B))
neNeg (snd‚±º ‚ä¢A A‚ä¢B d     ) (snd‚Çô n     ) Œ≥‚ñ∏u =
  let invUsageProj Œ¥‚ñ∏t Œ≥‚â§Œ¥ = inv-usage-snd Œ≥‚ñ∏u
  in  sndNeg (neNeg d n (sub Œ¥‚ñ∏t Œ≥‚â§Œ¥))
             (refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B)) (fst‚±º ‚ä¢A A‚ä¢B d)
neNeg (natrec‚±º _ _ _ d   ) (natrec‚Çô n  ) Œ≥‚ñ∏u =
  let invUsageNatrec _ _ Œ¥‚ñ∏n Œ≥‚â§Œ≥‚Ä≤ = inv-usage-natrec Œ≥‚ñ∏u
      ‚ä¢‚Ñï = refl (‚Ñï‚±º (wfTerm d))
      Œ≥‚ñ∏n = sub Œ¥‚ñ∏n (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (‚â§·∂ú-trans (‚äõ·∂ú-ineq‚ÇÇ _ _ _) (‚àß·∂ú-decreasing ≥ _ _)))
  in  ‚ä•-elim (¬¨neg‚Ñï (neNeg d n Œ≥‚ñ∏n) ‚ä¢‚Ñï)
neNeg (prodrec‚±º ‚ä¢A A‚ä¢B _ d _) (prodrec‚Çô n ) Œ≥‚ñ∏u =
  let invUsageProdrec Œ¥‚ñ∏t Œ∑‚ñ∏u p‚â§œâ Œ≥‚â§Œ≥‚Ä≤ = inv-usage-prodrec Œ≥‚ñ∏u
      Œ≥‚ñ∏t = sub Œ¥‚ñ∏t (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (‚â§·∂ú-trans (+·∂ú-decreasingÀ° _ _)
                              (‚â§·∂ú-trans (¬∑·∂ú-monotoneÀ° p‚â§œâ) (‚â§·∂ú-reflexive (¬∑·∂ú-identityÀ° _)))))
      ‚ä¢Œ£ = refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B)
  in  ‚ä•-elim (¬¨negŒ£·µ£ (neNeg d n Œ≥‚ñ∏t) ‚ä¢Œ£)
neNeg (Emptyrec‚±º _ d     ) (Emptyrec‚Çô n) Œ≥‚ñ∏u = ‚ä•-elim (consistent d)
neNeg (conv d c          ) n             Œ≥‚ñ∏u = conv (neNeg d n Œ≥‚ñ∏u) c

-- Lemma: A normal form of type ‚Ñï is a numeral in a consistent negative context.

nfN : (d : Œì ‚ä¢ u ‚à∑ A)
    ‚Üí (m : Œ≥ ‚ñ∏ u)
    ‚Üí (n : Nf u)
    ‚Üí (c : Œì ‚ä¢ A ‚â° ‚Ñï)
    ‚Üí Numeral u

-- Case: neutrals. The type cannot be ‚Ñï since it must be negative.
nfN d Œ≥‚ñ∏u (ne n) c = ‚ä•-elim (¬¨neg‚Ñï (neNeg d (nfNeutral n) Œ≥‚ñ∏u) c)

-- Case: numerals.
nfN (zero‚±º x) Œ≥‚ñ∏u zero‚Çô   c = zero‚Çô
nfN (suc‚±º d) Œ≥‚ñ∏u (suc‚Çô n) c =
  let invUsageSuc Œ¥‚ñ∏n Œ≥‚â§Œ¥ = inv-usage-suc Œ≥‚ñ∏u
  in  suc‚Çô (nfN d (sub Œ¥‚ñ∏n Œ≥‚â§Œ¥) n c)

-- Case: conversion.
nfN (conv d c) Œ≥‚ñ∏u n c' = nfN d Œ≥‚ñ∏u n (trans c c')

-- Impossible cases: type is not ‚Ñï.

-- * Canonical types
nfN (Œ†‚±º _ ‚ñπ _)       Œ≥‚ñ∏u (Œ†‚Çô _ _)   c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Œ£‚±º _ ‚ñπ _)       Œ≥‚ñ∏u (Œ£‚Çô _ _)   c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (‚Ñï‚±º _)           Œ≥‚ñ∏u ‚Ñï‚Çô         c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Empty‚±º _)       Œ≥‚ñ∏u Empty‚Çô     c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Unit‚±º _)        Œ≥‚ñ∏u Unit‚Çô      c = ‚ä•-elim (U‚â¢‚Ñï c)

-- * Canonical forms
nfN (lam‚±º _ _)      Œ≥‚ñ∏u (lam‚Çô _)    c = ‚ä•-elim (‚Ñï‚â¢Œ† (sym c))
nfN (prod‚±º _ _ _ _) Œ≥‚ñ∏u (prod‚Çô _ _) c = ‚ä•-elim (‚Ñï‚â¢Œ£ (sym c))
nfN (star‚±º _)       Œ≥‚ñ∏u star‚Çô       c = ‚ä•-elim (‚Ñï‚â¢Unit‚±º (sym c))
-- q.e.d

-- Canonicity theorem: Any well-typed term Œì ‚ä¢ t : ‚Ñï is convertible to a numeral.

thm : (‚ä¢t : Œì ‚ä¢ t ‚à∑ ‚Ñï) ‚Üí (Œ≥‚ñ∏t : Œ≥ ‚ñ∏ t) ‚Üí ‚àÉ Œª u ‚Üí Numeral u √ó Œì ‚ä¢ t ‚â° u ‚à∑ ‚Ñï
thm ‚ä¢t Œ≥‚ñ∏t with fullRedTerm ‚ä¢t Œ≥‚ñ∏t
... | u , nf , eq , Œ≥‚ñ∏u =
  u , nfN (proj‚ÇÇ (proj‚ÇÇ (syntacticEqTerm eq))) Œ≥‚ñ∏u nf (refl (‚Ñï‚±º (wfTerm ‚ä¢t))) , eq

-- Any well-typed term Œì ‚ä¢ t : ‚Ñï WH-reduces to zero or suc u for some u

lem : Œì ‚ä¢ t ‚à∑ A ‚Üí Œ≥ ‚ñ∏ t ‚Üí (NegativeType Œì A ‚Üí ‚ä•)
    ‚Üí ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A √ó Whnf u √ó (Neutral u ‚Üí ‚ä•)
lem ‚ä¢t Œ≥‚ñ∏t ¬¨negA =
  let u , whnfU , d = whNormTerm ‚ä¢t
      Œ≥‚ñ∏u = usagePres*Term Œ≥‚ñ∏t (red‚Çú d)
  in  u , red‚Çú d , whnfU , Œª x ‚Üí ¬¨negA (neNeg (‚ä¢u-red‚Çú d) x Œ≥‚ñ∏u)

-- Canonicity theorem: Any well-typed term Œì ‚ä¢ t : ‚Ñï WH-reduces to zero or suc u for some u

thm‚Ä≤ : Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí Œ≥ ‚ñ∏ t ‚Üí (Œì ‚ä¢ t ‚áí* zero ‚à∑ ‚Ñï) ‚äé ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* suc u ‚à∑ ‚Ñï
thm‚Ä≤ ‚ä¢t Œ≥‚ñ∏t with lem ‚ä¢t Œ≥‚ñ∏t (Œª x ‚Üí ¬¨neg‚Ñï x (refl (‚Ñï‚±º (wfTerm ‚ä¢t))))
-- True cases
... | _ , d , zero‚Çô , ¬¨neU = inj‚ÇÅ d
... | _ , d , suc‚Çô , ¬¨neU = inj‚ÇÇ (_ , d)
-- False cases
... | _ , d , U‚Çô , ¬¨neU = ‚ä•-elim (redU*Term d)
... | _ , d , Œ†‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢Œ† = syntacticRedTerm d
      _ , _ , ‚Ñï‚â°U = inversion-Œ† ‚ä¢Œ†
  in  ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
... | _ , d , Œ£‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢Œ£ = syntacticRedTerm d
      _ , _ , ‚Ñï‚â°U = inversion-Œ£ ‚ä¢Œ£
  in  ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
... | _ , d , ‚Ñï‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢‚Ñï = syntacticRedTerm d
      ‚Ñï‚â°U = inversion-‚Ñï ‚ä¢‚Ñï
  in  ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
... | _ , d , Unit‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢Unit = syntacticRedTerm d
      ‚Ñï‚â°U = inversion-Unit ‚ä¢Unit
  in  ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
... | _ , d , Empty‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢Empty = syntacticRedTerm d
      ‚Ñï‚â°U = inversion-Empty ‚ä¢Empty
  in  ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
... | _ , d , lam‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢lam = syntacticRedTerm d
      _ , _ , _ , _ , _ , ‚Ñï‚â°Œ† = inversion-lam ‚ä¢lam
  in  ‚ä•-elim (‚Ñï‚â¢B BŒ†! ‚Ñï‚â°Œ†)
... | _ , d , star‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢star = syntacticRedTerm d
      ‚Ñï‚â°Unit = inversion-star ‚ä¢star
  in  ‚ä•-elim (‚Ñï‚â¢Unit‚±º ‚Ñï‚â°Unit)
... | _ , d , prod‚Çô , ¬¨neU =
  let _ , _ , ‚ä¢prod = syntacticRedTerm d
      _ , _ , _ , _ , _ , _ , _ , ‚Ñï‚â°Œ£ = inversion-prod ‚ä¢prod
  in  ‚ä•-elim (‚Ñï‚â¢B BŒ£! ‚Ñï‚â°Œ£)
... | _ , d , ne x , ¬¨neU = ‚ä•-elim (¬¨neU x)

-- Canonicity theorem: Any well-typed term Œì ‚ä¢ t ‚à∑ ‚Ñï, Œ≥ ‚ñ∏ t
-- reduces to a numeral under the ‚áíÀ¢* reduction.

lem‚Ä≤ : Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí Œ≥ ‚ñ∏ t ‚Üí Œì ‚ä¢ t ‚â° u ‚à∑ ‚Ñï ‚Üí Numeral u
     ‚Üí ‚àÉ Œª v ‚Üí Numeral v √ó Œì ‚ä¢ t ‚áíÀ¢* v ‚à∑‚Ñï
lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t t‚â°u num with thm‚Ä≤ ‚ä¢t Œ≥‚ñ∏t
lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t t‚â°u zero‚Çô | inj‚ÇÅ x = zero , zero‚Çô , whred* x
lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t t‚â°0 zero‚Çô | inj‚ÇÇ (u , t‚áísucu) =
  ‚ä•-elim (zero‚â¢suc (trans (sym t‚â°0) (subset*Term t‚áísucu)))
lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t t‚â°sucu (suc‚Çô num) | inj‚ÇÅ t‚áí0 =
  ‚ä•-elim (zero‚â¢suc (trans (sym (subset*Term t‚áí0)) t‚â°sucu))
lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t t‚â°suct‚Ä≤ (suc‚Çô numT) | inj‚ÇÇ (u , t‚áísucu) =
  let sucu‚â°suct‚Ä≤ = trans (sym (subset*Term t‚áísucu)) t‚â°suct‚Ä≤
      u‚â°t‚Ä≤ = suc-injectivity sucu‚â°suct‚Ä≤
      _ , _ , ‚ä¢sucu = syntacticRedTerm t‚áísucu
      ‚ä¢u , _ = inversion-suc ‚ä¢sucu
      Œ≥‚ñ∏sucu = usagePres*Term Œ≥‚ñ∏t t‚áísucu
      invUsageSuc Œ¥‚ñ∏u Œ≥‚â§Œ¥ = inv-usage-suc Œ≥‚ñ∏sucu
      Œ≥‚ñ∏u = sub Œ¥‚ñ∏u Œ≥‚â§Œ¥
      v , numV , t‚áív = lem‚Ä≤ ‚ä¢u Œ≥‚ñ∏u u‚â°t‚Ä≤ numT
  in  suc v , suc‚Çô numV , ‚áíÀ¢*‚à∑‚Ñï-trans (whred* t‚áísucu) (sucred* t‚áív)

thm‚Ä≥ : Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí Œ≥ ‚ñ∏ t ‚Üí ‚àÉ Œª u ‚Üí Numeral u √ó Œì ‚ä¢ t ‚áíÀ¢* u ‚à∑‚Ñï
thm‚Ä≥ ‚ä¢t Œ≥‚ñ∏t with thm ‚ä¢t Œ≥‚ñ∏t
... | u , num , eq = lem‚Ä≤ ‚ä¢t Œ≥‚ñ∏t eq num

-- Q.E.D. 2023-01-24
