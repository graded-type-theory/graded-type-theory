-- Proof that consistent negative axioms do not jeopardize canonicity.
-- https://www.cs.bham.ac.uk/~mhe/papers/negative-axioms.pdf

{-# OPTIONS --without-K --safe #-}

open import Definition.Modality.Instances.Erasure
open import Definition.Modality.Instances.Erasure.Modality NoErasedMatching
open import Application.NegativeAxioms.NegativeErasedContext ErasureModality (Œª ())
open import Definition.Typed Erasure‚Ä≤
open import Definition.Untyped Erasure hiding (_‚à∑_; ‚Ñï‚â¢B)
open import Definition.Typed.EqRelInstance Erasure‚Ä≤

open import Tools.Empty

module Application.NegativeAxioms.Canonicity.NegativeErased {m} {Œì : Con Term m} {Œ≥}
  (nŒìŒ≥ : NegativeErasedContext Œì Œ≥) (consistent : ‚àÄ{t} ‚Üí Œì ‚ä¢ t ‚à∑ Empty ‚Üí ‚ä•) where

open import Definition.Modality.Instances.Erasure.Properties NoErasedMatching
open import Definition.Modality.Context ErasureModality
open import Definition.Modality.Usage ErasureModality
open import Definition.Modality.Usage.Inversion ErasureModality

open import Application.NegativeAxioms.NegativeType Erasure‚Ä≤
open import Erasure.SucRed Erasure‚Ä≤

open import Definition.Typed.Properties Erasure‚Ä≤
open import Definition.Typed.Usage ErasureModality
open import Definition.Typed.Consequences.Inequality Erasure‚Ä≤
open import Definition.Typed.Consequences.Reduction Erasure‚Ä≤
open import Definition.Typed.Consequences.Syntactic Erasure‚Ä≤

open import Definition.Conversion.FullReduction Erasure‚Ä≤ hiding (fullRedTerm)
open import Definition.LogicalRelation Erasure‚Ä≤
open import Definition.LogicalRelation.Irrelevance Erasure‚Ä≤
open import Definition.LogicalRelation.Fundamental.Reducibility Erasure‚Ä≤

import Tools.PropositionalEquality as PE
open import Tools.Product


-- Preliminaries
---------------------------------------------------------------------------

private
  Ty  = Term
  Cxt = Con Ty
  variable
    A B C : Term m
    t u   : Term m


-- Main results
---------------------------------------------------------------------------

-- Lemma: A neutral has negative type in a consistent negative/erased context.

neNeg : (d : Œì ‚ä¢ u ‚à∑ A) (n : Neutral u) (f : Œ≥ ‚ñ∏ u) ‚Üí NegativeType Œì A
neNeg (var ‚ä¢Œì h          ) (var x      ) Œ≥‚ñ∏u =
  let Œ≥‚â§Œ≥‚Ä≤ = inv-usage-var Œ≥‚ñ∏u
      Œ≥‚ü®x‚ü©‚â§ùüô = PE.subst (Œª p ‚Üí Œ≥ ‚ü® x ‚ü© ‚â§ p) (update-lookup {Œ≥ = ùüò·∂ú} x)
                        (lookup-monotone x Œ≥‚â§Œ≥‚Ä≤)
  in  lookupNegative ‚ä¢Œì nŒìŒ≥ h Œ≥‚ü®x‚ü©‚â§ùüô
neNeg (d ‚àò‚±º ‚ä¢t           ) (‚àò‚Çô n       ) Œ≥‚ñ∏u =
  let invUsageApp Œ¥‚ñ∏g Œ∑‚ñ∏a Œ≥‚â§Œ≥‚Ä≤ = inv-usage-app Œ≥‚ñ∏u
  in  appNeg (neNeg d n (sub Œ¥‚ñ∏g (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (+·∂ú-decreasingÀ° _ _))))
             (refl (syntacticTerm d)) ‚ä¢t
neNeg (fst‚±º ‚ä¢A A‚ä¢B d     ) (fst‚Çô n     ) Œ≥‚ñ∏u =
  let invUsageProj Œ¥‚ñ∏t Œ≥‚â§Œ¥ = inv-usage-fst Œ≥‚ñ∏u
  in  fstNeg (neNeg d n (sub Œ¥‚ñ∏t Œ≥‚â§Œ¥))
             (refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B))
neNeg (snd‚±º ‚ä¢A A‚ä¢B d     ) (snd‚Çô n     ) Œ≥‚ñ∏u =
  let invUsageProj Œ¥‚ñ∏t Œ≥‚â§Œ¥ = inv-usage-snd Œ≥‚ñ∏u
  in  sndNeg (neNeg d n (sub Œ¥‚ñ∏t Œ≥‚â§Œ¥))
             (refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B)) (fst‚±º ‚ä¢A A‚ä¢B d)
neNeg (natrec‚±º _ _ _ d   ) (natrec‚Çô n  ) Œ≥‚ñ∏u =
  let invUsageNatrec _ _ Œ¥‚ñ∏n _ Œ≥‚â§Œ≥‚Ä≤ = inv-usage-natrec Œ≥‚ñ∏u
      ‚ä¢‚Ñï = refl (‚Ñï‚±º (wfTerm d))
      Œ≥‚ñ∏n = sub Œ¥‚ñ∏n (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (‚â§·∂ú-trans (‚äõ·∂ú-ineq‚ÇÇ _ _ _) (‚àß·∂ú-decreasing ≥ _ _)))
  in  ‚ä•-elim (¬¨neg‚Ñï (neNeg d n Œ≥‚ñ∏n) ‚ä¢‚Ñï)
neNeg (prodrec‚±º ‚ä¢A A‚ä¢B _ d _) (prodrec‚Çô n ) Œ≥‚ñ∏u
  with inv-usage-prodrec Œ≥‚ñ∏u
... | invUsageProdrec Œ¥‚ñ∏t Œ∑‚ñ∏u _ PE.refl Œ≥‚â§Œ≥‚Ä≤ =
  let Œ≥‚ñ∏t = sub Œ¥‚ñ∏t (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (‚â§·∂ú-trans (+·∂ú-decreasingÀ° _ _)
                              (‚â§·∂ú-reflexive (¬∑·∂ú-identityÀ° _))))
      ‚ä¢Œ£ = refl (Œ£‚±º ‚ä¢A ‚ñπ A‚ä¢B)
  in  ‚ä•-elim (¬¨negŒ£·µ£ (neNeg d n Œ≥‚ñ∏t) ‚ä¢Œ£)
neNeg (Emptyrec‚±º _ d     ) (Emptyrec‚Çô n) Œ≥‚ñ∏u = ‚ä•-elim (consistent d)
neNeg (conv d c          ) n             Œ≥‚ñ∏u = conv (neNeg d n Œ≥‚ñ∏u) c

-- Lemma: A normal form of type ‚Ñï is a numeral in a consistent negative context.

nfN : (d : Œì ‚ä¢ u ‚à∑ A)
    ‚Üí (m : Œ≥ ‚ñ∏ u)
    ‚Üí (n : Nf u)
    ‚Üí (c : Œì ‚ä¢ A ‚â° ‚Ñï)
    ‚Üí Numeral u

-- Case: neutrals. The type cannot be ‚Ñï since it must be negative.
nfN d Œ≥‚ñ∏u (ne n) c = ‚ä•-elim (¬¨neg‚Ñï (neNeg d (nfNeutral n) Œ≥‚ñ∏u) c)

-- Case: numerals.
nfN (zero‚±º x) Œ≥‚ñ∏u zero‚Çô   c = zero‚Çô
nfN (suc‚±º d) Œ≥‚ñ∏u (suc‚Çô n) c =
  let invUsageSuc Œ¥‚ñ∏n Œ≥‚â§Œ¥ = inv-usage-suc Œ≥‚ñ∏u
  in  suc‚Çô (nfN d (sub Œ¥‚ñ∏n Œ≥‚â§Œ¥) n c)

-- Case: conversion.
nfN (conv d c) Œ≥‚ñ∏u n c' = nfN d Œ≥‚ñ∏u n (trans c c')

-- Impossible cases: type is not ‚Ñï.

-- * Canonical types
nfN (Œ†‚±º _ ‚ñπ _)       Œ≥‚ñ∏u (Œ†‚Çô _ _)   c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Œ£‚±º _ ‚ñπ _)       Œ≥‚ñ∏u (Œ£‚Çô _ _)   c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (‚Ñï‚±º _)           Œ≥‚ñ∏u ‚Ñï‚Çô         c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Empty‚±º _)       Œ≥‚ñ∏u Empty‚Çô     c = ‚ä•-elim (U‚â¢‚Ñï c)
nfN (Unit‚±º _)        Œ≥‚ñ∏u Unit‚Çô      c = ‚ä•-elim (U‚â¢‚Ñï c)

-- * Canonical forms
nfN (lam‚±º _ _)      Œ≥‚ñ∏u (lam‚Çô _)    c = ‚ä•-elim (‚Ñï‚â¢Œ† (sym c))
nfN (prod‚±º _ _ _ _) Œ≥‚ñ∏u (prod‚Çô _ _) c = ‚ä•-elim (‚Ñï‚â¢Œ£ (sym c))
nfN (star‚±º _)       Œ≥‚ñ∏u star‚Çô       c = ‚ä•-elim (‚Ñï‚â¢Unit‚±º (sym c))
-- q.e.d

-- Terms of non-negative types reduce to non-neutrals

¬¨NeutralNf : Œì ‚ä¢ t ‚à∑ A ‚Üí Œ≥ ‚ñ∏ t ‚Üí (NegativeType Œì A ‚Üí ‚ä•)
           ‚Üí ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A √ó Whnf u √ó (Neutral u ‚Üí ‚ä•)
¬¨NeutralNf ‚ä¢t Œ≥‚ñ∏t ¬¨negA =
  let u , whnfU , d = whNormTerm ‚ä¢t
      Œ≥‚ñ∏u = usagePres*Term Œ≥‚ñ∏t (red‚Çú d)
  in  u , red‚Çú d , whnfU , Œª x ‚Üí ¬¨negA (neNeg (‚ä¢u-red‚Çú d) x Œ≥‚ñ∏u)

-- Canonicity theorem: Any well-typed term Œì ‚ä¢ t ‚à∑ ‚Ñï, Œ≥ ‚ñ∏ t
-- reduces to a numeral under the ‚áíÀ¢* reduction.

canonicityRed‚Ä≤ : ‚àÄ {l} ‚Üí (‚ä¢Œì : ‚ä¢ Œì) ‚Üí Œ≥ ‚ñ∏ t
               ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï / ‚Ñï·µ£ (idRed:*: (‚Ñï‚±º ‚ä¢Œì))
               ‚Üí ‚àÉ Œª v ‚Üí Numeral v √ó Œì ‚ä¢ t ‚áíÀ¢* v ‚à∑‚Ñï
canonicityRed‚Ä≤ {l = l} ‚ä¢Œì Œ≥‚ñ∏t (‚Ñï‚Çú _ d n‚â°n (suc·µ£ x)) =
  let invUsageSuc Œ¥‚ñ∏n Œ≥‚â§Œ¥ = inv-usage-suc (usagePres*Term Œ≥‚ñ∏t (red‚Çú d))
      v , numV , d‚Ä≤ = canonicityRed‚Ä≤ {l = l} ‚ä¢Œì (sub Œ¥‚ñ∏n Œ≥‚â§Œ¥) x
  in  suc v , suc‚Çô numV , ‚áíÀ¢*‚à∑‚Ñï-trans (whred* (red‚Çú d)) (sucred* d‚Ä≤)
canonicityRed‚Ä≤ ‚ä¢Œì Œ≥‚ñ∏t (‚Ñï‚Çú _ d n‚â°n zero·µ£) =
  zero , zero‚Çô , whred* (red‚Çú d)
canonicityRed‚Ä≤ ‚ä¢Œì Œ≥‚ñ∏t (‚Ñï‚Çú n d n‚â°n (ne (neNf‚Çú neK ‚ä¢k k‚â°k))) =
  let u , d‚Ä≤ , whU , ¬¨neU = ¬¨NeutralNf (‚ä¢t-red‚Çú d) Œ≥‚ñ∏t Œª neg‚Ñï ‚Üí ¬¨neg‚Ñï neg‚Ñï (refl (‚Ñï‚±º ‚ä¢Œì))
  in  ‚ä•-elim (¬¨neU (PE.subst Neutral (whrDet*Term (red‚Çú d , ne neK) (d‚Ä≤ , whU)) neK))

canonicityRed : Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí Œ≥ ‚ñ∏ t ‚Üí ‚àÉ Œª u ‚Üí Numeral u √ó Œì ‚ä¢ t ‚áíÀ¢* u ‚à∑‚Ñï
canonicityRed ‚ä¢t Œ≥‚ñ∏t with reducibleTerm ‚ä¢t
... | [‚Ñï] , [t] =
  let ‚ä¢Œì = wfTerm ‚ä¢t
      [‚Ñï]‚Ä≤ = ‚Ñï·µ£ {l = ¬π} (idRed:*: (‚Ñï‚±º ‚ä¢Œì))
      [t]‚Ä≤ = irrelevanceTerm [‚Ñï] [‚Ñï]‚Ä≤ [t]
  in  canonicityRed‚Ä≤ {l = ¬π} ‚ä¢Œì Œ≥‚ñ∏t [t]‚Ä≤

-- Canonicity theorem: Any well-typed term Œì ‚ä¢ t : ‚Ñï is convertible to a numeral.

canonicityEq : (‚ä¢t : Œì ‚ä¢ t ‚à∑ ‚Ñï) ‚Üí (Œ≥‚ñ∏t : Œ≥ ‚ñ∏ t) ‚Üí ‚àÉ Œª u ‚Üí Numeral u √ó Œì ‚ä¢ t ‚â° u ‚à∑ ‚Ñï
canonicityEq ‚ä¢t Œ≥‚ñ∏t =
  let u , numU , d = canonicityRed ‚ä¢t Œ≥‚ñ∏t
  in  u , numU , subset*TermÀ¢ d

-- Q.E.D. 2023-01-24
