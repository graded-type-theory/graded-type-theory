------------------------------------------------------------------------
-- The modality structure.
------------------------------------------------------------------------

open import Tools.Level
open import Tools.Relation

module Graded.Modality {a} (M : Set a) where

open import Tools.Algebra M
open import Tools.Bool using (Bool; T)
open import Tools.Product
open import Tools.PropositionalEquality
open import Tools.Reasoning.PropositionalEquality
open import Tools.Sum

open import Graded.Modality.Variant a

private variable
  n n‚ÇÅ n‚ÇÇ p q r z z‚ÇÅ s s‚ÇÅ s‚ÇÇ z‚ÇÇ : M

-- Semiring with meet
record Semiring-with-meet : Set a where
  infixr 40 _+_
  infixr 40 _‚àß_
  infixr 45 _¬∑_
  infix  10 _‚â§_ _<_


  field
    -- A semiring with meet consists of a type M with three binary
    -- operations (addition, multiplication and meet), and three
    -- special elements.
    _+_ _¬∑_ _‚àß_ : Op‚ÇÇ M
    ùüò ùüô œâ       : M

    -- + and ¬∑ form a semiring with ùüô as multiplicative unit and ùüò as zero
    +-¬∑-Semiring  : IsSemiring _+_ _¬∑_ ùüò ùüô
    -- ‚àß forms a semilattice
    ‚àß-Semilattice       : IsMeetSemilattice _‚àß_

    -- Multiplation distributes over meet
    ¬∑-distrib-‚àß         : _¬∑_ DistributesOver _‚àß_
    -- Addition distributes over meet
    +-distrib-‚àß         : _+_ DistributesOver _‚àß_

  -- Semilattice partial ordering relation
  _‚â§_ : Rel M a
  p ‚â§ q = p ‚â° p ‚àß q

  -- A strict variant of the ordering relation.
  _<_ : Rel M a
  p < q = p ‚â§ q √ó p ‚â¢ q

  field
    -- In some modalities the grade œâ stands for "an unlimited number
    -- of uses". This grade must be bounded from above by¬†ùüô.
    œâ‚â§ùüô : œâ ‚â§ ùüô

    -- Furthermore œâ¬†¬∑¬†(p¬†+¬†q) must be bounded by œâ¬†¬∑¬†q.
    œâ¬∑+‚â§œâ¬∑ ≥ : œâ ¬∑ (p + q) ‚â§ œâ ¬∑ q

    -- It is decidable whether a grade is equal to ùüò.
    is-ùüò? : (p : M) ‚Üí Dec (p ‚â° ùüò)

  -- A semiring with meet is said to be trivial if ùüô¬†‚â°¬†ùüò.
  --
  -- This implies that all values of type M are equal, see
  -- Graded.Modality.Properties.Equivalence.‚â°-trivial.

  Trivial : Set a
  Trivial = ùüô ‚â° ùüò

  -- Least-such-that¬†P¬†p means that p is the least value which
  -- satisfies¬†P.

  Least-such-that : (M ‚Üí Set a) ‚Üí M ‚Üí Set a
  Least-such-that P p = P p √ó (‚àÄ q ‚Üí P q ‚Üí p ‚â§ q)

  ¬∑-distribÀ°-‚àß : _¬∑_ DistributesOverÀ° _‚àß_
  ¬∑-distribÀ°-‚àß = proj‚ÇÅ ¬∑-distrib-‚àß

  ¬∑-distrib ≥-‚àß : _¬∑_ DistributesOver ≥ _‚àß_
  ¬∑-distrib ≥-‚àß = proj‚ÇÇ ¬∑-distrib-‚àß

  +-distribÀ°-‚àß : _+_ DistributesOverÀ° _‚àß_
  +-distribÀ°-‚àß = proj‚ÇÅ +-distrib-‚àß

  +-distrib ≥-‚àß : _+_ DistributesOver ≥ _‚àß_
  +-distrib ≥-‚àß = proj‚ÇÇ +-distrib-‚àß

  +-¬∑-Semiring‚Ä≤ : Semiring a a
  +-¬∑-Semiring‚Ä≤ = record
    { Carrier = M
    ; _‚âà_ = _‚â°_
    ; _+_ = _+_
    ; _*_ = _¬∑_
    ; 0# = ùüò
    ; 1# = ùüô
    ; isSemiring = +-¬∑-Semiring
    }

  open IsSemiring +-¬∑-Semiring public
    using (
            +-assoc;
            +-cong;
            +-congÀ°;
            +-cong ≥;
            +-identity;
            +-identityÀ°;
            +-identity ≥;
            +-comm
          )
    renaming (
              *-assoc to ¬∑-assoc;
              *-cong to ¬∑-cong;
              *-congÀ° to ¬∑-congÀ°;
              *-cong ≥ to ¬∑-cong ≥;
              *-identity to ¬∑-identity;
              *-identityÀ° to ¬∑-identityÀ°;
              *-identity ≥ to ¬∑-identity ≥;

              distrib to ¬∑-distrib-+;
              distribÀ° to ¬∑-distribÀ°-+;
              distrib ≥ to ¬∑-distrib ≥-+;
              zero to ¬∑-zero;
              zeroÀ° to ¬∑-zeroÀ°;
              zero ≥ to ¬∑-zero ≥
             )

  open IsMeetSemilattice ‚àß-Semilattice public
    using (‚àß-cong; ‚àß-congÀ°; ‚àß-cong ≥)
    renaming (comm to ‚àß-comm;
              idem to ‚àß-idem;
              assoc to ‚àß-assoc
             )

-- Meet-Semirings with well-behaved zero
record Has-well-behaved-zero (ùïÑ : Semiring-with-meet) : Set a where
  open Semiring-with-meet ùïÑ
  field
    -- ùïÑ is non-trivial.
    non-trivial : ¬¨ Trivial

    -- The following two assumptions are based on assumptions from
    -- Conor McBride's "I Got Plenty o‚Äô Nuttin‚Äô" and Robert Atkey's
    -- "Syntax and Semantics of Quantitative Type Theory".

    -- The semiring has the zero-product property:
    -- if p¬†¬∑¬†q is ùüò, then either p is ùüò or q is ùüò.
    zero-product : {p q : M} ‚Üí p ¬∑ q ‚â° ùüò ‚Üí p ‚â° ùüò ‚äé q ‚â° ùüò

    -- The semiring is positive (with respect to addition and meet):

    -- if p¬†+¬†q is ùüò, then p and q are ùüò. (The statement that p¬†+¬†q¬†‚â°¬†ùüò
    -- implies q¬†‚â°¬†ùüò follows from the one below, see
    -- Definition.Modality.Properties.Has-well-behaved-zero.+-positive ≥.)
    +-positiveÀ° : {p q : M} ‚Üí p + q ‚â° ùüò ‚Üí p ‚â° ùüò

    -- If p¬†‚àß¬†q is equal to ùüò, then p¬†‚â°¬†ùüò.  (The statement that p¬†‚àß¬†q¬†‚â°¬†ùüò
    -- implies q¬†‚â°¬†ùüò follows from the one below, see
    -- Definition.Modality.Properties.Has-well-behaved-zero.‚àß-positive ≥.)
    ‚àß-positiveÀ° : {p q : M} ‚Üí p ‚àß q ‚â° ùüò ‚Üí p ‚â° ùüò

-- The property of having an nr function (a "natrec usage function").
-- Such a function is used in one of the usage rules for natrec.

record Has-nr (ùïÑ : Semiring-with-meet) : Set a where
  open Semiring-with-meet ùïÑ

  field
    -- The nr function.
    nr : M ‚Üí M ‚Üí M ‚Üí M ‚Üí M ‚Üí M

    -- The function is monotone in its last three arguments.
    nr-monotone :
      z‚ÇÅ ‚â§ z‚ÇÇ ‚Üí s‚ÇÅ ‚â§ s‚ÇÇ ‚Üí n‚ÇÅ ‚â§ n‚ÇÇ ‚Üí
      nr p r z‚ÇÅ s‚ÇÅ n‚ÇÅ ‚â§ nr p r z‚ÇÇ s‚ÇÇ n‚ÇÇ

    -- Multiplication from the right sub-distributes over nr¬†p¬†r.
    nr-¬∑ : nr p r z s n ¬∑ q ‚â§ nr p r (z ¬∑ q) (s ¬∑ q) (n ¬∑ q)

    -- Addition is sub-interchangeable with nr¬†p¬†r.
    nr-+ :
      nr p r z‚ÇÅ s‚ÇÅ n‚ÇÅ + nr p r z‚ÇÇ s‚ÇÇ n‚ÇÇ ‚â§
      nr p r (z‚ÇÅ + z‚ÇÇ) (s‚ÇÅ + s‚ÇÇ) (n‚ÇÅ + n‚ÇÇ)

    -- The value of nr¬†p¬†r¬†ùüò¬†ùüò¬†ùüò is ùüò.
    nr-ùüò : nr p r ùüò ùüò ùüò ‚â° ùüò

    -- If the zero is well-behaved, then nr¬†p¬†r is only ùüò for ùüò, ùüò
    -- and¬†ùüò.
    nr-positive :
      ‚¶É ùüò-well-behaved : Has-well-behaved-zero ùïÑ ‚¶Ñ ‚Üí
      nr p r z s n ‚â° ùüò ‚Üí z ‚â° ùüò √ó s ‚â° ùüò √ó n ‚â° ùüò

    -- If n is bounded by ùüò, then nr¬†p¬†r¬†z¬†s¬†n is bounded by¬†n. This
    -- property is used to prove that the reduction rule natrec-zero
    -- preserves usage.
    nr-zero : n ‚â§ ùüò ‚Üí nr p r z s n ‚â§ z

    -- The value nr¬†p¬†r¬†z¬†s¬†n is bounded by
    -- s¬†+¬†p¬†¬∑¬†n¬†+¬†r¬†¬∑¬†nr¬†p¬†r¬†z¬†s¬†n. This property is used to prove
    -- that the reduction rule natrec-suc preserves usage.
    nr-suc : nr p r z s n ‚â§ s + p ¬∑ n + r ¬∑ nr p r z s n

-- The property of having an nr function that factors in a certain way

record Has-factoring-nr (ùïÑ : Semiring-with-meet) ‚¶É has-nr : Has-nr ùïÑ ‚¶Ñ : Set a where
  open Semiring-with-meet ùïÑ

  open Has-nr has-nr

  field
    nr‚ÇÇ : (p r : M) ‚Üí M

    nr‚ÇÇ‚â¢ùüò : {p r : M} ‚Üí nr‚ÇÇ p r ‚â¢ ùüò
    nr-factoring : {p r z s n : M} ‚Üí nr p r z s n ‚â° nr‚ÇÇ p r ¬∑ n + nr p r z s ùüò


-- The property of having a natrec-star operator.
record Has-star (r : Semiring-with-meet) : Set a where
  open Semiring-with-meet r

  infix 50 _‚äõ_‚ñ∑_

  field
    -- The natrec-star operator.
    _‚äõ_‚ñ∑_ : Op‚ÇÉ M

    -- ‚äõ is a solution to the following system of inequalities
    ‚äõ-ineq : ((p q r : M) ‚Üí p ‚äõ q ‚ñ∑ r ‚â§ q + r ¬∑ p ‚äõ q ‚ñ∑ r)
           √ó ((p q r : M) ‚Üí p ‚äõ q ‚ñ∑ r ‚â§ p)

    -- addition is sub-interchangeable over ‚äõ w.r.t the first two arguments
    +-sub-interchangeable-‚äõ : (r : M) ‚Üí _+_ SubInterchangeable (_‚äõ_‚ñ∑ r) by _‚â§_
    -- multiplication is right sub-distributive over ‚äõ w.r.t the first two arguments
    ¬∑-sub-distrib ≥-‚äõ : (r : M) ‚Üí _¬∑_ SubDistributesOver ≥ (_‚äõ_‚ñ∑ r) by _‚â§_
    -- ‚äõ is sub-distributive over meet w.r.t the first two arguments
    ‚äõ-sub-distrib-‚àß    : (r : M) ‚Üí (_‚äõ_‚ñ∑ r) SubDistributesOver _‚àß_ by _‚â§_

  ‚äõ-ineq‚ÇÅ : (p q r : M) ‚Üí p ‚äõ q ‚ñ∑ r ‚â§ q + r ¬∑ (p ‚äõ q ‚ñ∑ r)
  ‚äõ-ineq‚ÇÅ = proj‚ÇÅ ‚äõ-ineq

  ‚äõ-ineq‚ÇÇ : (p q r : M) ‚Üí p ‚äõ q ‚ñ∑ r ‚â§ p
  ‚äõ-ineq‚ÇÇ = proj‚ÇÇ ‚äõ-ineq

  ‚äõ-sub-distribÀ°-‚àß : (r : M) ‚Üí (_‚äõ_‚ñ∑ r) SubDistributesOverÀ° _‚àß_ by _‚â§_
  ‚äõ-sub-distribÀ°-‚àß r = proj‚ÇÅ (‚äõ-sub-distrib-‚àß r)

  ‚äõ-sub-distrib ≥-‚àß : (r : M) ‚Üí (_‚äõ_‚ñ∑ r) SubDistributesOver ≥ _‚àß_ by _‚â§_
  ‚äõ-sub-distrib ≥-‚àß r = proj‚ÇÇ (‚äõ-sub-distrib-‚àß r)

-- The modality structure
record Modality : Set (lsuc a) where
  field
    -- The modality variant.
    variant            : Modality-variant
    semiring-with-meet : Semiring-with-meet

  open Semiring-with-meet semiring-with-meet public
  open Modality-variant variant public

  field
    -- If the mode ùüò·µê is allowed, then the zero is well-behaved
    ùüò-well-behaved : T ùüò·µê-allowed ‚Üí Has-well-behaved-zero semiring-with-meet

    -- If the modality is supposed to come with a dedicated nr
    -- function, then such a function is available.
    has-nr : Nr-available ‚Üí Has-nr semiring-with-meet
