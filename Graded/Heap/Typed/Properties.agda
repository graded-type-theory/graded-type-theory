------------------------------------------------------------------------
-- Properties of stack and continuation typing
------------------------------------------------------------------------

open import Graded.Modality
open import Graded.Usage.Restrictions
open import Definition.Typed.Restrictions
open import Graded.Usage.Restrictions.Natrec

module Graded.Heap.Typed.Properties
  {a} {M : Set a} {ùïÑ : Modality M}
  (UR : Usage-restrictions ùïÑ)
  (TR : Type-restrictions ùïÑ)
  (open Usage-restrictions UR)
  (factoring-nr :
    ‚¶É has-nr : Nr-available ‚¶Ñ ‚Üí
    Is-factoring-nr M (Natrec-mode-Has-nr ùïÑ has-nr))
  where

open Type-restrictions TR
open Modality ùïÑ

open import Definition.Untyped M
open import Definition.Untyped.Names-below M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Untyped.Whnf M type-variant
open import Definition.Typed TR
open import Definition.Typed.Inversion TR
open import Definition.Typed.Names-below TR
open import Definition.Typed.Properties TR
open import Definition.Typed.Substitution TR
open import Definition.Typed.Syntactic TR
open import Definition.Typed.Consequences.Inequality TR

open import Graded.Heap.Typed UR TR factoring-nr
open import Graded.Heap.Typed.Inversion UR TR factoring-nr
open import Graded.Heap.Untyped type-variant UR factoring-nr
open import Graded.Heap.Untyped.Properties type-variant UR factoring-nr

open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
open import Tools.Relation
import Tools.PropositionalEquality as PE
open import Tools.Sum

private variable
  H : Heap _ _
  ‚àá : DCon (Term 0) _
  Œì Œî : Con Term _
  t u A B : Term _
  l : Universe-level
  c : Cont _
  S : Stack _
  s : State _ _ _
  n : Nat
  x : Fin _
  y : Nat ‚äé Fin _
  œÅ : Wk _ _
  œÉ : Subst _ _
  V : Set a

opaque

  -- Typing of erased heaps

  ‚ä¢erasedHeap : ‚àÄ {n} {Œî : Con Term n} ‚Üí Œµ ¬ª‚ä¢ Œî ‚Üí Œî ‚ä¢ ∞ erasedHeap n ‚à∑ Œî
  ‚ä¢erasedHeap {0} {(Œµ)} ‚ä¢Œî = Œµ
  ‚ä¢erasedHeap {n = 1+ n} {Œî = Œî ‚àô A} (‚àô ‚ä¢A) =
    PE.subst (Œª x ‚Üí Œî ‚àô x ‚ä¢ ∞ _ ‚à∑ Œî ‚àô A)
      (erasedHeap-subst A)
      (‚ä¢erasedHeap (wf ‚ä¢A) ‚àô‚óè ‚ä¢A)

opaque

 -- Typing of the initial state

  ‚ä¢initial : Œµ ¬ª Œî ‚ä¢ t ‚à∑ A ‚Üí Œî ‚ä¢‚Çõ initial t ‚à∑ A
  ‚ä¢initial {Œî} {t} {A} ‚ä¢t =
    ‚ä¢‚Çõ (‚ä¢erasedHeap (wfTerm ‚ä¢t))
      (PE.subst (_ ‚ä¢_‚à∑ _) (lemma t) ‚ä¢t) Œµ
    where
    lemma : ‚àÄ {n} (t : Term n) ‚Üí t PE.‚â° wk id t [ erasedHeap _ ]‚Çï
    lemma t = PE.sym (PE.trans (erasedHeap-subst (wk id t)) (wk-id t))

opaque

  -- Well-typed terms applied to well-typed continuations are
  -- well-typed under a heap substitution.

  ‚ä¢‚¶Ö‚¶Ü·∂ú : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B
      ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A
      ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö c ‚¶Ü·∂ú t [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·∂ú (‚àò‚Çë ‚ä¢u _) ‚ä¢t =
    ‚ä¢t ‚àò‚±º ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·∂ú (fst‚Çë _) ‚ä¢t =
    fst‚±º‚Ä≤ ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (snd‚Çë _) ‚ä¢t =
    snd‚±º‚Ä≤ ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (prodrec‚Çë ‚ä¢u ‚ä¢A) ‚ä¢t =
    prodrec‚±º‚Ä≤ ‚ä¢A ‚ä¢t ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·∂ú (natrec‚Çë ‚ä¢z ‚ä¢s) ‚ä¢t =
    natrec‚±º ‚ä¢z ‚ä¢s ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (unitrec‚Çë ‚ä¢u ‚ä¢A no-Œ∑) ‚ä¢t =
    unitrec‚±º‚Ä≤ ‚ä¢A ‚ä¢t ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·∂ú (emptyrec‚Çë ‚ä¢A) ‚ä¢t =
    emptyrec‚±º ‚ä¢A ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (J‚Çë ‚ä¢u ‚ä¢B) ‚ä¢t =
    J‚±º‚Ä≤ ‚ä¢B ‚ä¢u ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (K‚Çë ‚ä¢u ‚ä¢B ok) ‚ä¢t =
    K‚±º ‚ä¢B ‚ä¢u ‚ä¢t ok
  ‚ä¢‚¶Ö‚¶Ü·∂ú ([]-cong‚Çë ok) ‚ä¢t =
    []-cong‚±º‚Ä≤ ok ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·∂ú (conv ‚ä¢c B‚â°B‚Ä≤) ‚ä¢t =
    conv (‚ä¢‚¶Ö‚¶Ü·∂ú ‚ä¢c ‚ä¢t) B‚â°B‚Ä≤

opaque

  -- Well-typed terms applied to well-typed stacks are
  -- well-typed under a heap substitution.

  ‚ä¢‚¶Ö‚¶ÜÀ¢ : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
      ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A
      ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö S ‚¶ÜÀ¢ t [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶ÜÀ¢ Œµ ‚ä¢t = ‚ä¢t
  ‚ä¢‚¶Ö‚¶ÜÀ¢ {H} {S = c ‚àô S} {t} (‚ä¢c ‚àô ‚ä¢S) ‚ä¢t =
    ‚ä¢‚¶Ö‚¶ÜÀ¢ ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú ‚ä¢c ‚ä¢t)

opaque

  -- Well-typed states are well-typed when translated into terms

  ‚ä¢‚¶Ö‚¶Ü : Œî ‚ä¢‚Çõ s ‚à∑ A ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚à∑ A
  ‚ä¢‚¶Ö‚¶Ü (‚ä¢‚Çõ _ ‚ä¢t ‚ä¢S) = ‚ä¢‚¶Ö‚¶ÜÀ¢ ‚ä¢S ‚ä¢t

opaque

  -- Equal terms are equal when applied to continuations under
  -- heap substitutions.

  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
           ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö c ‚¶Ü·∂ú t [ H ]‚Çï ‚â° ‚¶Ö c ‚¶Ü·∂ú u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (‚àò‚Çë ‚ä¢u _) t‚â°u =
    app-cong t‚â°u (refl ‚ä¢u)
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (fst‚Çë _) t‚â°u =
    fst-cong‚Ä≤ t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (snd‚Çë _) t‚â°u =
    snd-cong‚Ä≤ t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (prodrec‚Çë ‚ä¢v ‚ä¢A) t‚â°u =
    prodrec-cong‚Ä≤ (refl ‚ä¢A) t‚â°u (refl ‚ä¢v)
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (natrec‚Çë ‚ä¢z ‚ä¢s) t‚â°u =
    natrec-cong (refl (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢s))) (refl ‚ä¢z) (refl ‚ä¢s) t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑) t‚â°u =
    unitrec-cong‚Ä≤ (refl ‚ä¢A) t‚â°u (refl ‚ä¢v)
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (emptyrec‚Çë ‚ä¢A) t‚â°u =
    emptyrec-cong (refl ‚ä¢A) t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (J‚Çë ‚ä¢u ‚ä¢B) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢v) ‚Üí
    J-cong‚Ä≤ (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢B) (refl ‚ä¢u) (refl ‚ä¢v) t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (K‚Çë ‚ä¢u ‚ä¢B ok) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    K-cong (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢B) (refl ‚ä¢u) t‚â°u ok
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong ([]-cong‚Çë ok) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    []-cong-cong (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢u) t‚â°u ok
  ‚ä¢‚¶Ö‚¶Ü·∂ú-cong (conv ‚ä¢c B‚â°B‚Ä≤) t‚â°u =
    conv (‚ä¢‚¶Ö‚¶Ü·∂ú-cong ‚ä¢c t‚â°u) B‚â°B‚Ä≤

opaque

  -- Equal terms are equal when applied to stacks under
  -- heap substitutions.

  ‚ä¢‚¶Ö‚¶ÜÀ¢-cong : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
           ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö S ‚¶ÜÀ¢ t [ H ]‚Çï ‚â° ‚¶Ö S ‚¶ÜÀ¢ u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶ÜÀ¢-cong Œµ t‚â°u = t‚â°u
  ‚ä¢‚¶Ö‚¶ÜÀ¢-cong {H} {S = c ‚àô S} (‚ä¢c ‚àô ‚ä¢S) t‚â°u =
    ‚ä¢‚¶Ö‚¶ÜÀ¢-cong ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú-cong ‚ä¢c t‚â°u)

opaque

  -- Applying terms to continuations respects reduction

  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B
            ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚áí u [ H ]‚Çï ‚à∑ A
            ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö c ‚¶Ü·∂ú t [ H ]‚Çï ‚áí ‚¶Ö c ‚¶Ü·∂ú u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (‚àò‚Çë ‚ä¢u _) d =
    app-subst d ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (fst‚Çë _) d =
    fst-subst‚Ä≤ d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (snd‚Çë _) d =
    snd-subst‚Ä≤ d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (prodrec‚Çë ‚ä¢u ‚ä¢A) d =
    prodrec-subst‚Ä≤ ‚ä¢A ‚ä¢u d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (natrec‚Çë ‚ä¢z ‚ä¢s) d =
    natrec-subst ‚ä¢z ‚ä¢s d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (unitrec‚Çë ‚ä¢u ‚ä¢A no-Œ∑) d =
    unitrec-subst‚Ä≤ ‚ä¢A ‚ä¢u d no-Œ∑
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (emptyrec‚Çë ‚ä¢A) d =
    emptyrec-subst ‚ä¢A d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (J‚Çë ‚ä¢u ‚ä¢B) d =
    J-subst‚Ä≤ ‚ä¢B ‚ä¢u d
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (K‚Çë ‚ä¢u ‚ä¢B ok) d =
    K-subst ‚ä¢B ‚ä¢u d ok
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst ([]-cong‚Çë ok) d =
    []-cong-subst‚Ä≤ d ok
  ‚ä¢‚¶Ö‚¶Ü·∂ú-subst (conv ‚ä¢c B‚â°B‚Ä≤) d =
    conv (‚ä¢‚¶Ö‚¶Ü·∂ú-subst ‚ä¢c d) B‚â°B‚Ä≤

opaque

  -- Applying terms to stacks respects reduction

  ‚ä¢‚¶Ö‚¶ÜÀ¢-subst : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
            ‚Üí Œµ ¬ª Œî ‚ä¢ (t [ H ]‚Çï) ‚áí (u [ H ]‚Çï) ‚à∑ A
            ‚Üí Œµ ¬ª Œî ‚ä¢ ‚¶Ö S ‚¶ÜÀ¢ t [ H ]‚Çï ‚áí ‚¶Ö S ‚¶ÜÀ¢ u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶ÜÀ¢-subst Œµ d = d
  ‚ä¢‚¶Ö‚¶ÜÀ¢-subst (‚ä¢c ‚àô ‚ä¢S) d =
    ‚ä¢‚¶Ö‚¶ÜÀ¢-subst ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú-subst ‚ä¢c d)

opaque

  -- Conversion of the head term in continuations typing

  ‚ä¢·∂ú-conv‚Çú : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
           ‚Üí Œî ‚®æ H ‚ä¢·∂ú c ‚ü® u ‚ü©‚à∑ A ‚Üù B
  ‚ä¢·∂ú-conv‚Çú (‚àò‚Çë {A} {B} ‚ä¢v ‚ä¢B) t‚â°u =
    ‚àò‚Çë {A = A} {B} ‚ä¢v ‚ä¢B
  ‚ä¢·∂ú-conv‚Çú (fst‚Çë ‚ä¢B) t‚â°u =
    fst‚Çë ‚ä¢B
  ‚ä¢·∂ú-conv‚Çú (snd‚Çë ‚ä¢B) t‚â°u =
    conv (snd‚Çë ‚ä¢B)
      (substTypeEq (refl ‚ä¢B) (fst-cong‚Ä≤ (sym‚Ä≤ t‚â°u)))
  ‚ä¢·∂ú-conv‚Çú (prodrec‚Çë {B} {C} ‚ä¢v ‚ä¢A) t‚â°u =
    conv (prodrec‚Çë {B = B} {C} ‚ä¢v ‚ä¢A)
      (substTypeEq (refl ‚ä¢A) (sym‚Ä≤ t‚â°u))
  ‚ä¢·∂ú-conv‚Çú (natrec‚Çë ‚ä¢z ‚ä¢s) t‚â°u =
    conv (natrec‚Çë ‚ä¢z ‚ä¢s)
      (substTypeEq (refl (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢s))) (sym‚Ä≤ t‚â°u))
  ‚ä¢·∂ú-conv‚Çú (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑) t‚â°u =
    conv (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑)
      (substTypeEq (refl ‚ä¢A) (sym‚Ä≤ t‚â°u))
  ‚ä¢·∂ú-conv‚Çú (emptyrec‚Çë ‚ä¢A) t‚â°u =
    emptyrec‚Çë ‚ä¢A
  ‚ä¢·∂ú-conv‚Çú {Œî} {H} {t} {u} (J‚Çë ‚ä¢u ‚ä¢B) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢v) ‚Üí
    case PE.subst (_ ‚ä¢ _ ‚à∑_) (PE.sym (subst-id _)) ‚ä¢v of Œª
      ‚ä¢v‚Ä≤ ‚Üí
    case PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
           (PE.sym (PE.cong‚ÇÇ (Œª A t ‚Üí Id A t _)
             (wk1-sgSubst _ _) (wk1-sgSubst _ _))) t‚â°u of Œª
      t‚â°u‚Ä≤ ‚Üí
    conv (J‚Çë ‚ä¢u ‚ä¢B)
      (substTypeEq‚ÇÇ (refl ‚ä¢B) (refl ‚ä¢v) (sym‚Ä≤ t‚â°u‚Ä≤))
  ‚ä¢·∂ú-conv‚Çú {H} {t} {u} (K‚Çë ‚ä¢u ‚ä¢B ok) t‚â°u =
    conv (K‚Çë ‚ä¢u ‚ä¢B ok)
      (substTypeEq (refl ‚ä¢B) (sym‚Ä≤ t‚â°u))
  ‚ä¢·∂ú-conv‚Çú {H} {t} {u} ([]-cong‚Çë ok) t‚â°u =
    []-cong‚Çë ok
  ‚ä¢·∂ú-conv‚Çú (conv ‚ä¢c B‚â°B‚Ä≤) t‚â°u =
    conv (‚ä¢·∂ú-conv‚Çú ‚ä¢c t‚â°u) B‚â°B‚Ä≤

opaque

  -- Conversion of the head term in stack typing

  ‚ä¢À¢-conv‚Çú : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
          ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
          ‚Üí Œî ‚®æ H ‚ä¢ S ‚ü® u ‚ü©‚à∑ A ‚Üù B
  ‚ä¢À¢-conv‚Çú Œµ t‚â°u = Œµ
  ‚ä¢À¢-conv‚Çú (‚ä¢c ‚àô ‚ä¢S) t‚â°u =
    ‚ä¢·∂ú-conv‚Çú ‚ä¢c t‚â°u ‚àô ‚ä¢À¢-conv‚Çú ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú-cong ‚ä¢c t‚â°u)

opaque

  -- If a term applied to a continuation is in whnf then the term was
  -- neutral and the applied continuation is also neutral.

  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® u ‚ü©‚à∑ A ‚Üù B
          ‚Üí Whnf ‚àá (‚¶Ö c ‚¶Ü·∂ú t)
          ‚Üí Neutral‚Å∫ ‚àá t √ó Neutral‚Å∫ ‚àá (‚¶Ö c ‚¶Ü·∂ú t)
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (‚àò‚Çë x x‚ÇÅ) (ne (‚àò‚Çô n)) = n , ‚àò‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (fst‚Çë _) (ne (fst‚Çô n)) = n , fst‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (snd‚Çë _) (ne (snd‚Çô n)) = n , snd‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (prodrec‚Çë x x‚ÇÅ) (ne (prodrec‚Çô n)) = n , prodrec‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (natrec‚Çë _ _) (ne (natrec‚Çô n)) = n , natrec‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (unitrec‚Çë x x‚ÇÅ x‚ÇÇ) (ne (unitrec‚Çô no-Œ∑ n)) = n , unitrec‚Çô no-Œ∑ n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (emptyrec‚Çë x) (ne (emptyrec‚Çô n)) = n , emptyrec‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (J‚Çë x x‚ÇÅ) (ne (J‚Çô n)) = n , J‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (K‚Çë x x‚ÇÅ x‚ÇÇ) (ne (K‚Çô n)) = n , K‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú ([]-cong‚Çë x) (ne ([]-cong‚Çô n)) = n , []-cong‚Çô n
  ‚ä¢whnf‚¶Ö‚¶Ü·∂ú (conv ‚ä¢c x) w = ‚ä¢whnf‚¶Ö‚¶Ü·∂ú ‚ä¢c w

opaque

  -- If a term applied to a stack is in whnf then the term was in whnf.

  ‚ä¢whnf‚¶Ö‚¶ÜÀ¢ : Œî ‚®æ H ‚ä¢ S ‚ü® u ‚ü©‚à∑ A ‚Üù B
          ‚Üí Whnf ‚àá (‚¶Ö S ‚¶ÜÀ¢ t)
          ‚Üí Whnf ‚àá t
  ‚ä¢whnf‚¶Ö‚¶ÜÀ¢ Œµ w = w
  ‚ä¢whnf‚¶Ö‚¶ÜÀ¢ (‚ä¢c ‚àô ‚ä¢S) w =
    ne (‚ä¢whnf‚¶Ö‚¶Ü·∂ú ‚ä¢c (‚ä¢whnf‚¶Ö‚¶ÜÀ¢ ‚ä¢S w) .proj‚ÇÅ)


opaque

  -- If a term applied to a non-empty stack is in whnf then the term
  -- was neutral and the applied stack is also neutral.

  ‚ä¢whnf‚¶Ö‚¶ÜÀ¢‚Ä≤ : Œî ‚®æ H ‚ä¢ c ‚àô S ‚ü® u ‚ü©‚à∑ A ‚Üù B
           ‚Üí Whnf ‚àá (‚¶Ö c ‚àô S ‚¶ÜÀ¢ t)
           ‚Üí Neutral‚Å∫ ‚àá t
  ‚ä¢whnf‚¶Ö‚¶ÜÀ¢‚Ä≤ (‚ä¢c ‚àô ‚ä¢S) w =
    ‚ä¢whnf‚¶Ö‚¶Ü·∂ú ‚ä¢c (‚ä¢whnf‚¶Ö‚¶ÜÀ¢ ‚ä¢S w) .proj‚ÇÅ

opaque

  -- Applying a term that is neutral at a variable to a continuation
  -- gives a term that is neutral at the same variable.

  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt : Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B
                ‚Üí NeutralAt V ‚àá y t
                ‚Üí NeutralAt V ‚àá y (‚¶Ö c ‚¶Ü·∂ú t)
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (‚àò‚Çë _ _) n = ‚àò‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (fst‚Çë _) n = fst‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (snd‚Çë _) n = snd‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (prodrec‚Çë _ _) n = prodrec‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (natrec‚Çë _ _) n = natrec‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (unitrec‚Çë _ _ x) n = unitrec‚Çô x n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (emptyrec‚Çë _) n = emptyrec‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (J‚Çë _ _) n = J‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (K‚Çë _ _ _) n = K‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt ([]-cong‚Çë _) n = []-cong‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt (conv ‚ä¢c x) n = ‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt ‚ä¢c n

opaque

  -- Applying a term that is neutral at a variable to a non-empty stack
  -- gives a term that is neutral at the same variable.

  ‚ä¢‚¶Ö‚¶ÜÀ¢-NeutralAt : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
                ‚Üí NeutralAt V ‚àá y t
                ‚Üí NeutralAt V ‚àá y (‚¶Ö S ‚¶ÜÀ¢ t)
  ‚ä¢‚¶Ö‚¶ÜÀ¢-NeutralAt Œµ n = n
  ‚ä¢‚¶Ö‚¶ÜÀ¢-NeutralAt (‚ä¢c ‚àô ‚ä¢S) n =
    ‚ä¢‚¶Ö‚¶ÜÀ¢-NeutralAt ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú-NeutralAt ‚ä¢c n)

opaque

  -- In a constistent context, there is no well-typed stack and head of
  -- matching type containing emptyrec¬†ùüò

  ‚ä¢À¢emptyrec‚ÇÄ‚àâS :
    Consistent (Œµ ¬ª Œî) ‚Üí Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B ‚Üí Œµ ¬ª Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A ‚Üí
    emptyrec ùüò ‚àà S ‚Üí ‚ä•
  ‚ä¢À¢emptyrec‚ÇÄ‚àâS _          Œµ        _  ()
  ‚ä¢À¢emptyrec‚ÇÄ‚àâS consistent (‚ä¢c ‚àô _) ‚ä¢t here =
    case inversion-emptyrec‚Çë ‚ä¢c of Œª {
      (_ , PE.refl , _) ‚Üí
    consistent _ ‚ä¢t}
  ‚ä¢À¢emptyrec‚ÇÄ‚àâS consistent (‚ä¢c ‚àô ‚ä¢S) ‚ä¢t (there d) =
    ‚ä¢À¢emptyrec‚ÇÄ‚àâS consistent ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·∂ú ‚ä¢c ‚ä¢t) d

opaque

  -- A version of the property above for well-typed states

  ‚ä¢emptyrec‚ÇÄ‚àâS :
    Consistent (Œµ ¬ª Œî) ‚Üí Œî ‚ä¢‚Çõ ‚ü® H , t , œÅ , S ‚ü© ‚à∑ A ‚Üí emptyrec ùüò ‚àà S ‚Üí ‚ä•
  ‚ä¢emptyrec‚ÇÄ‚àâS consistent (‚ä¢‚Çõ _ ‚ä¢t ‚ä¢S) x = ‚ä¢À¢emptyrec‚ÇÄ‚àâS consistent ‚ä¢S ‚ä¢t x

opaque

  -- A continuation's "hole type" is not definitionally equal to U¬†l
  -- (given a certain assumption).

  hole-type-not-U :
    ‚¶É ok : No-equality-reflection or-empty Œì ‚¶Ñ ‚Üí
    Œî ‚®æ H ‚ä¢·∂ú c ‚ü® t ‚ü©‚à∑ A ‚Üù B ‚Üí ¬¨ Œµ ¬ª Œì ‚ä¢ A ‚â° U l
  hole-type-not-U (‚àò‚Çë _ _)         = U‚â¢Œ†Œ£‚±º ‚àò‚Üí sym
  hole-type-not-U (fst‚Çë _)         = U‚â¢Œ†Œ£‚±º ‚àò‚Üí sym
  hole-type-not-U (snd‚Çë _)         = U‚â¢Œ†Œ£‚±º ‚àò‚Üí sym
  hole-type-not-U (prodrec‚Çë _ _)   = U‚â¢Œ†Œ£‚±º ‚àò‚Üí sym
  hole-type-not-U (natrec‚Çë _ _)    = U‚â¢‚Ñï ‚àò‚Üí sym
  hole-type-not-U (unitrec‚Çë _ _ _) = U‚â¢Unit‚±º ‚àò‚Üí sym
  hole-type-not-U (emptyrec‚Çë _)    = U‚â¢Empty‚±º ‚àò‚Üí sym
  hole-type-not-U (J‚Çë _ _)         = Id‚â¢U
  hole-type-not-U (K‚Çë _ _ _)       = Id‚â¢U
  hole-type-not-U ([]-cong‚Çë _)     = Id‚â¢U
  hole-type-not-U (conv ‚ä¢c _)      = hole-type-not-U ‚ä¢c

private opaque

  -- A variant of ‚ä¢‚à∑‚ÜíNames<.

  ‚ä¢‚à∑‚ÜíNames<‚Ä≤ :
    {‚àá : DCon (Term 0) n} ‚Üí
    ‚àá ¬ª Œì ‚ä¢ wk œÅ t [ œÉ ] ‚à∑ A ‚Üí Names< n t
  ‚ä¢‚à∑‚ÜíNames<‚Ä≤ = Names<-wk‚Üí ‚àò‚Üí Names<-[]‚Üí ‚àò‚Üí ‚ä¢‚à∑‚ÜíNames<

opaque

  -- Well-formed heaps do not contain names.

  ‚ä¢ ∞‚ÜíNo-names ∞ : Œî ‚ä¢ ∞ H ‚à∑ Œì ‚Üí No-names ∞ H
  ‚ä¢ ∞‚ÜíNo-names ∞ Œµ =
    Œµ
  ‚ä¢ ∞‚ÜíNo-names ∞ (‚ä¢H ‚àô ‚ä¢t) =
    ‚ä¢ ∞‚ÜíNo-names ∞ ‚ä¢H ‚àô ‚ä¢‚à∑‚ÜíNames<‚Ä≤ ‚ä¢t
  ‚ä¢ ∞‚ÜíNo-names ∞ (‚ä¢H ‚àô‚óè ‚ä¢A) =
    ‚ä¢ ∞‚ÜíNo-names ∞ ‚ä¢H ‚àô‚óè

opaque

  -- If Œî¬†‚ä¢‚Çõ¬†s¬†‚à∑¬†A holds, then No-names‚Çõ‚Ä≤¬†s holds.

  ‚ä¢‚Çõ‚ÜíNo-names‚Çõ‚Ä≤ : Œî ‚ä¢‚Çõ s ‚à∑ A ‚Üí No-names‚Çõ‚Ä≤ s
  ‚ä¢‚Çõ‚ÜíNo-names‚Çõ‚Ä≤ (‚ä¢‚Çõ ‚ä¢H ‚ä¢t _) =
    ‚ä¢ ∞‚ÜíNo-names ∞ ‚ä¢H , ‚ä¢‚à∑‚ÜíNames<‚Ä≤ ‚ä¢t
