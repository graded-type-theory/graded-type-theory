------------------------------------------------------------------------
-- Properties of meet.
------------------------------------------------------------------------

open import Graded.Modality

module Graded.Context.Properties.Meet
  {a} {M : Set a} (ùïÑ : Modality M) where

open import Graded.Context ùïÑ
open import Graded.Context.Properties.Equivalence ùïÑ
open import Graded.Context.Properties.PartialOrder ùïÑ
open import Graded.Modality.Properties ùïÑ

open import Tools.Nat using (Nat)

open Modality ùïÑ

private
  variable
    n : Nat
    Œ≥ Œ≥‚Ä≤ Œ¥ Œ¥‚Ä≤ Œ∑ : Con‚Çò n

-- Meet is idempotent
-- Œ≥ ‚àß·∂ú Œ≥ ‚âà·∂ú Œ≥

‚àß·∂ú-idem : (Œ≥ : Con‚Çò n) ‚Üí Œ≥ ‚àß·∂ú Œ≥ ‚âà·∂ú Œ≥
‚àß·∂ú-idem Œµ = ‚âà·∂ú-refl
‚àß·∂ú-idem (Œ≥ ‚àô p) = (‚àß·∂ú-idem Œ≥) ‚àô (‚àß-idem p)

-- Meet is commutative
-- Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ¥ ‚àß·∂ú Œ≥

‚àß·∂ú-comm : (Œ≥ Œ¥ : Con‚Çò n) ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ¥ ‚àß·∂ú Œ≥
‚àß·∂ú-comm Œµ Œµ = ‚âà·∂ú-refl
‚àß·∂ú-comm  (Œ≥ ‚àô p) (Œ¥ ‚àô q) = (‚àß·∂ú-comm Œ≥ Œ¥) ‚àô (‚àß-comm p q)

-- Meet is associative
-- (Œ≥ ‚àß·∂ú Œ¥) ‚àß·∂ú Œ∑ ‚âà·∂ú Œ≥ ‚àß·∂ú (Œ¥ ‚àß·∂ú Œ∑)

‚àß·∂ú-assoc : (Œ≥ Œ¥ Œ∑ : Con‚Çò n) ‚Üí (Œ≥ ‚àß·∂ú Œ¥) ‚àß·∂ú Œ∑ ‚âà·∂ú Œ≥ ‚àß·∂ú (Œ¥ ‚àß·∂ú Œ∑)
‚àß·∂ú-assoc Œµ Œµ Œµ = ‚âà·∂ú-refl
‚àß·∂ú-assoc (Œ≥ ‚àô p) (Œ¥ ‚àô q) (Œ∑ ‚àô r) = (‚àß·∂ú-assoc Œ≥ Œ¥ Œ∑) ‚àô (‚àß-assoc p q r)

-- Congruence of ‚àß·∂ú
-- If Œ≥ ‚âà·∂ú Œ≥‚Ä≤ and Œ¥ ‚âà·∂ú Œ¥‚Ä≤ then Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥‚Ä≤ ‚àß·∂ú Œ¥‚Ä≤

‚àß·∂ú-cong : Œ≥ ‚âà·∂ú Œ≥‚Ä≤ ‚Üí Œ¥ ‚âà·∂ú Œ¥‚Ä≤ ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥‚Ä≤ ‚àß·∂ú Œ¥‚Ä≤
‚àß·∂ú-cong Œµ Œµ = ‚âà·∂ú-refl
‚àß·∂ú-cong (Œ≥‚âà·∂úŒ≥‚Ä≤ ‚àô p‚â°p‚Ä≤) (Œ¥‚âà·∂úŒ¥‚Ä≤ ‚àô q‚â°q‚Ä≤) =
  ‚àß·∂ú-cong Œ≥‚âà·∂úŒ≥‚Ä≤ Œ¥‚âà·∂úŒ¥‚Ä≤ ‚àô ‚àß-cong p‚â°p‚Ä≤ q‚â°q‚Ä≤

-- Congruence of ‚àß·∂ú on the left
-- If Œ¥ ‚âà·∂ú Œ¥‚Ä≤ then Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥ ‚àß·∂ú Œ¥‚Ä≤

‚àß·∂ú-congÀ° : Œ¥ ‚âà·∂ú Œ¥‚Ä≤ ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥ ‚àß·∂ú Œ¥‚Ä≤
‚àß·∂ú-congÀ° Œ¥‚âà·∂úŒ¥‚Ä≤ = ‚àß·∂ú-cong ‚âà·∂ú-refl Œ¥‚âà·∂úŒ¥‚Ä≤

-- Congruence of ‚àß·∂ú on the right
-- If Œ≥ ‚âà·∂ú Œ≥‚Ä≤ then Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥‚Ä≤ ‚àß·∂ú Œ¥

‚àß·∂ú-cong ≥ : Œ≥ ‚âà·∂ú Œ≥‚Ä≤ ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚âà·∂ú Œ≥‚Ä≤ ‚àß·∂ú Œ¥
‚àß·∂ú-cong ≥ Œ≥‚âà·∂úŒ≥‚Ä≤ = ‚àß·∂ú-cong Œ≥‚âà·∂úŒ≥‚Ä≤ ‚âà·∂ú-refl

-- Meet on the left is monotone
-- If Œ≥ ‚â§·∂ú Œ¥ then Œ≥ ‚àß·∂ú Œ∑ ‚â§·∂ú Œ¥ ‚àß·∂ú Œ∑

‚àß·∂ú-monotoneÀ° : Œ≥ ‚â§·∂ú Œ¥ ‚Üí Œ≥ ‚àß·∂ú Œ∑ ‚â§·∂ú Œ¥ ‚àß·∂ú Œ∑
‚àß·∂ú-monotoneÀ° {Œ≥ = Œµ} {Œµ} {Œµ} Œµ = ‚â§·∂ú-refl
‚àß·∂ú-monotoneÀ° {Œ≥ = Œ≥ ‚àô p} {Œ¥ ‚àô q} {Œ∑ ‚àô r} (Œ≥‚â§Œ¥ ‚àô p‚â§q) =
  (‚àß·∂ú-monotoneÀ° Œ≥‚â§Œ¥) ‚àô (‚àß-monotoneÀ° p‚â§q)

-- Meet on the right is monotone
-- If Œ≥ ‚â§·∂ú Œ¥ then Œ≥ ‚àß·∂ú Œ∑ ‚â§·∂ú Œ¥ ‚àß·∂ú Œ∑

‚àß·∂ú-monotone ≥ : Œ≥ ‚â§·∂ú Œ¥ ‚Üí Œ∑ ‚àß·∂ú Œ≥ ‚â§·∂ú Œ∑ ‚àß·∂ú Œ¥
‚àß·∂ú-monotone ≥ {Œ≥ = Œµ} {Œµ} {Œµ} ÃãŒµ = ‚â§·∂ú-refl
‚àß·∂ú-monotone ≥ {Œ≥ = Œ≥ ‚àô p} {Œ¥ ‚àô q} {Œ∑ ‚àô r} (Œ≥‚â§Œ¥ ‚àô p‚â§q) =
  (‚àß·∂ú-monotone ≥ Œ≥‚â§Œ¥) ‚àô (‚àß-monotone ≥ p‚â§q)

-- Meet is monotone
-- If Œ≥ ‚â§·∂ú Œ≥‚Ä≤ and Œ¥ ‚â§·∂ú Œ¥‚Ä≤ then Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ≥‚Ä≤ ‚àß·∂ú Œ¥‚Ä≤

‚àß·∂ú-monotone : Œ≥ ‚â§·∂ú Œ≥‚Ä≤ ‚Üí Œ¥ ‚â§·∂ú Œ¥‚Ä≤ ‚Üí (Œ≥ ‚àß·∂ú Œ¥) ‚â§·∂ú (Œ≥‚Ä≤ ‚àß·∂ú Œ¥‚Ä≤)
‚àß·∂ú-monotone Œ≥‚â§Œ≥‚Ä≤ Œ¥‚â§Œ¥‚Ä≤ = ‚â§·∂ú-trans (‚àß·∂ú-monotoneÀ° Œ≥‚â§Œ≥‚Ä≤) (‚àß·∂ú-monotone ≥ Œ¥‚â§Œ¥‚Ä≤)

-- Meet on the left is a decreasing function
-- Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ≥

‚àß·∂ú-decreasingÀ° : (Œ≥ Œ¥ : Con‚Çò n) ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ≥
‚àß·∂ú-decreasingÀ° Œµ Œµ = ‚â§·∂ú-refl
‚àß·∂ú-decreasingÀ° (Œ≥ ‚àô p) (Œ¥ ‚àô q) = (‚àß·∂ú-decreasingÀ° Œ≥ Œ¥) ‚àô (‚àß-decreasingÀ° p q)

-- Meet on the right is a decreasing function
-- Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ¥

‚àß·∂ú-decreasing ≥ : (Œ≥ Œ¥ : Con‚Çò n) ‚Üí Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ¥
‚àß·∂ú-decreasing ≥ Œµ Œµ = ‚â§·∂ú-refl
‚àß·∂ú-decreasing ≥ (Œ≥ ‚àô p) (Œ¥ ‚àô q) = (‚àß·∂ú-decreasing ≥ Œ≥ Œ¥) ‚àô (‚àß-decreasing ≥ p q)

-- The result of the meet operation is a greatest lower bound of its
-- two arguments.

‚àß·∂ú-greatest-lower-bound : Œ≥ ‚â§·∂ú Œ¥ ‚Üí Œ≥ ‚â§·∂ú Œ∑ ‚Üí Œ≥ ‚â§·∂ú Œ¥ ‚àß·∂ú Œ∑
‚àß·∂ú-greatest-lower-bound {Œ≥ = Œµ} {Œ¥ = Œµ} {Œ∑ = Œµ} Œµ Œµ =
  Œµ
‚àß·∂ú-greatest-lower-bound
  {Œ≥ = _ ‚àô _} {Œ¥ = _ ‚àô _} {Œ∑ = _ ‚àô _} (Œ≥‚â§Œ¥ ‚àô p‚â§q) (Œ≥‚â§Œ∑ ‚àô p‚â§r) =
  ‚àß·∂ú-greatest-lower-bound Œ≥‚â§Œ¥ Œ≥‚â§Œ∑ ‚àô ‚àß-greatest-lower-bound p‚â§q p‚â§r

-- If _+_ is pointwise bounded by _‚àß_, then _+·∂ú_ is pointwise bounded
-- by _‚àß·∂ú_.

+·∂ú‚â§·∂ú‚àß·∂ú :
  (‚àÄ p q ‚Üí p + q ‚â§ p ‚àß q) ‚Üí
  Œ≥ +·∂ú Œ¥ ‚â§·∂ú Œ≥ ‚àß·∂ú Œ¥
+·∂ú‚â§·∂ú‚àß·∂ú {Œ≥ = Œµ}     {Œ¥ = Œµ}     _   = Œµ
+·∂ú‚â§·∂ú‚àß·∂ú {Œ≥ = _ ‚àô _} {Œ¥ = _ ‚àô _} +‚â§‚àß = +·∂ú‚â§·∂ú‚àß·∂ú +‚â§‚àß ‚àô +‚â§‚àß _ _

-- If _‚àß_ is pointwise bounded by _+_, then _‚àß·∂ú_ is pointwise bounded
-- by _+·∂ú_.

‚àß·∂ú‚â§·∂ú+·∂ú :
  (‚àÄ p q ‚Üí p ‚àß q ‚â§ p + q) ‚Üí
  Œ≥ ‚àß·∂ú Œ¥ ‚â§·∂ú Œ≥ +·∂ú Œ¥
‚àß·∂ú‚â§·∂ú+·∂ú {Œ≥ = Œµ}     {Œ¥ = Œµ}     _   = Œµ
‚àß·∂ú‚â§·∂ú+·∂ú {Œ≥ = _ ‚àô _} {Œ¥ = _ ‚àô _} ‚àß‚â§+ = ‚àß·∂ú‚â§·∂ú+·∂ú ‚àß‚â§+ ‚àô ‚àß‚â§+ _ _
