------------------------------------------------------------------------
-- "Forward" instances related to morphisms
------------------------------------------------------------------------

open import Graded.Modality
open import Graded.Usage.Restrictions
open import Graded.Modality.Morphism.Usage-restrictions

module Graded.Modality.Morphism.Forward-instances
  {a‚ÇÅ a‚ÇÇ} {M‚ÇÅ : Set a‚ÇÅ} {M‚ÇÇ : Set a‚ÇÇ}
  {ùïÑ‚ÇÅ : Modality M‚ÇÅ} {ùïÑ‚ÇÇ : Modality M‚ÇÇ}
  {R‚ÇÅ : Usage-restrictions ùïÑ‚ÇÅ}
  {R‚ÇÇ : Usage-restrictions ùïÑ‚ÇÇ}
  (cp : Common-properties R‚ÇÅ R‚ÇÇ)
  where

open Common-properties cp

module R‚ÇÅ = Usage-restrictions R‚ÇÅ
module R‚ÇÇ = Usage-restrictions R‚ÇÇ

instance

  -- If the source modality uses the usage rule for natrec with
  -- an nr function then so does the target one.

  nr-in-second-if-in-first‚Ä≤ :
    ‚¶É has-nr : R‚ÇÅ.Nr-available ‚¶Ñ ‚Üí R‚ÇÇ.Nr-available
  nr-in-second-if-in-first‚Ä≤ = nr-in-second-if-in-first

  -- If the source modality uses the usage rule for natrec with
  -- inequalities then so does the target one.

  no-nr-in-second-if-in-first‚Ä≤ :
    ‚¶É no-nr : R‚ÇÅ.Nr-not-available ‚¶Ñ ‚Üí R‚ÇÇ.Nr-not-available
  no-nr-in-second-if-in-first‚Ä≤ = no-nr-in-second-if-in-first

  -- If the source modality uses the usage rule for natrec with
  -- the greatest lower bound of an nr·µ¢ sequence then so does the
  -- target one.

  no-nr-glb-in-second-if-in-first‚Ä≤ :
    ‚¶É no-nr : R‚ÇÅ.Nr-not-available-GLB ‚¶Ñ ‚Üí R‚ÇÇ.Nr-not-available-GLB
  no-nr-glb-in-second-if-in-first‚Ä≤ = no-nr-glb-in-second-if-in-first
