------------------------------------------------------------------------
-- Bounded, distributive lattices can be turned into modalities
------------------------------------------------------------------------

module Graded.Modality.Instances.Bounded-distributive-lattice
  {a} (M : Set a)
  where

open import Graded.Modality M
import Graded.Modality.Instances.LowerBounded as L
open import Graded.Mode.Restrictions

open import Tools.Algebra M
open import Tools.Bool using (false)
open import Tools.Product
open import Tools.PropositionalEquality hiding (‚ä•)
import Tools.Reasoning.PropositionalEquality

-- Bounded, distributive lattices over M.

record Bounded-distributive-lattice : Set a where
  infixr 40 _‚àß_ _‚à®_
  field
    -- Meet.
    _‚àß_ : M ‚Üí M ‚Üí M

    -- Join.
    _‚à®_ : M ‚Üí M ‚Üí M

    -- The least element.
    ‚ä• : M

    -- The greatest element.
    ‚ä§ : M

    -- Join and meet form a distributive lattice.
    is-distributive-lattice : IsDistributiveLattice _‚à®_ _‚àß_

  open IsDistributiveLattice is-distributive-lattice public
  open DistributiveLattice is-distributive-lattice public

  -- An induced ordering relation.

  _‚â§_ : M ‚Üí M ‚Üí Set a
  p ‚â§ q = p ‚â° p ‚àß q

  field
    -- ‚ä• is the least element.
    ‚ä•‚â§ : ‚àÄ p ‚Üí ‚ä• ‚â§ p

    -- ‚ä§ is the greatest element.
    ‚â§‚ä§ : ‚àÄ p ‚Üí p ‚â§ ‚ä§

-- Bounded, distributive lattices can be turned into "semirings with
-- meet".

semiring-with-meet :
  Bounded-distributive-lattice ‚Üí Semiring-with-meet
semiring-with-meet bl = record
  { _+_           = _‚àß_
  ; _¬∑_           = _‚à®_
  ; _‚àß_           = _‚àß_
  ; ùüò             = ‚ä§
  ; ùüô             = ‚ä•
  ; +-¬∑-Semiring  = record
    { isSemiringWithoutAnnihilatingZero = record
      { +-isCommutativeMonoid = record
        { isMonoid = record
          { isSemigroup = ‚àß-isSemigroup
          ; identity    = ‚àß-identityÀ° , comm+idÀ°‚áíid ≥ ‚àß-comm ‚àß-identityÀ°
          }
        ; comm = ‚àß-comm
        }
      ; *-isMonoid = record
        { isSemigroup = ‚à®-isSemigroup
        ; identity    = ‚à®-identityÀ° , comm+idÀ°‚áíid ≥ ‚à®-comm ‚à®-identityÀ°
        }
      ; distrib = ‚à®-distrib-‚àß
      }
    ; zero = ‚à®-zeroÀ° , comm+zeÀ°‚áíze ≥ ‚à®-comm ‚à®-zeroÀ°
    }
  ; ‚àß-Semilattice = ‚àß-isSemilattice
  ; ¬∑-distrib-‚àß   = ‚à®-distrib-‚àß
  ; +-distrib-‚àß   =
      ‚àß-distribÀ°-‚àß , comm+distrÀ°‚áídistr ≥ ‚àß-comm ‚àß-distribÀ°-‚àß
  }
  where
  open Bounded-distributive-lattice bl
  open Tools.Reasoning.PropositionalEquality

  ‚àß-distribÀ°-‚àß : _‚àß_ DistributesOverÀ° _‚àß_
  ‚àß-distribÀ°-‚àß p q r =
    p ‚àß (q ‚àß r)        ‚â°Àò‚ü® cong (_‚àß _) (‚àß-idem _) ‚ü©
    (p ‚àß p) ‚àß (q ‚àß r)  ‚â°‚ü® ‚àß-assoc _ _ _ ‚ü©
    p ‚àß (p ‚àß (q ‚àß r))  ‚â°Àò‚ü® cong (_ ‚àß_) (‚àß-assoc _ _ _) ‚ü©
    p ‚àß ((p ‚àß q) ‚àß r)  ‚â°Àò‚ü® ‚àß-assoc _ _ _ ‚ü©
    (p ‚àß (p ‚àß q)) ‚àß r  ‚â°‚ü® cong (_‚àß _) (‚àß-comm _ _) ‚ü©
    ((p ‚àß q) ‚àß p) ‚àß r  ‚â°‚ü® ‚àß-assoc _ _ _ ‚ü©
    (p ‚àß q) ‚àß (p ‚àß r)  ‚àé

  ‚àß-identityÀ° : LeftIdentity ‚ä§ _‚àß_
  ‚àß-identityÀ° p =
    ‚ä§ ‚àß p  ‚â°‚ü® ‚àß-comm _ _ ‚ü©
    p ‚àß ‚ä§  ‚â°Àò‚ü® ‚â§‚ä§ _ ‚ü©
    p      ‚àé

  ‚à®-identityÀ° : LeftIdentity ‚ä• _‚à®_
  ‚à®-identityÀ° p =
    ‚ä• ‚à® p        ‚â°‚ü® cong (_‚à® _) (‚ä•‚â§ _) ‚ü©
    (‚ä• ‚àß p) ‚à® p  ‚â°‚ü® cong (_‚à® _) (‚àß-comm _ _) ‚ü©
    (p ‚àß ‚ä•) ‚à® p  ‚â°‚ü® ‚à®-comm _ _ ‚ü©
    p ‚à® (p ‚àß ‚ä•)  ‚â°‚ü® ‚à®-absorbs-‚àß _ _ ‚ü©
    p            ‚àé

  ‚à®-zeroÀ° : LeftZero ‚ä§ _‚à®_
  ‚à®-zeroÀ° p =
    ‚ä§ ‚à® p        ‚â°‚ü® cong (_ ‚à®_) (‚â§‚ä§ _) ‚ü©
    ‚ä§ ‚à® (p ‚àß ‚ä§)  ‚â°‚ü® cong (_ ‚à®_) (‚àß-comm _ _) ‚ü©
    ‚ä§ ‚à® (‚ä§ ‚àß p)  ‚â°‚ü® ‚à®-absorbs-‚àß _ _ ‚ü©
    ‚ä§            ‚àé

-- Bounded, distributive lattices can be turned into modalities.

modality : Bounded-distributive-lattice ‚Üí Modality
modality bl = L.isModality
  (semiring-with-meet bl)
  ‚ä•
  ‚ä•‚â§
  (ùüò·µê-allowed-if false)
  (Œª ())
  where
  open Bounded-distributive-lattice bl
