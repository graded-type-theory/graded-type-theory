------------------------------------------------------------------------
-- Properties of the partial order relation.
------------------------------------------------------------------------

open import Graded.Modality

module Graded.Modality.Properties.PartialOrder
  {a} {M : Set a} (ùïÑ : Semiring-with-meet M) where

open Semiring-with-meet ùïÑ

open import Tools.Empty
open import Tools.Function
open import Tools.Product
open import Tools.PropositionalEquality as PE
open import Tools.Relation

private
  variable
    p p‚Ä≤ q q‚Ä≤ r r‚Ä≤ : M


-- ‚â§ is reflexive
-- p ‚â§ p

‚â§-refl : p ‚â§ p
‚â§-refl {p} = sym (‚àß-idem p)

-- ‚â§ is transitive
-- If p ‚â§ q and q ‚â§ r then p ‚â§ r

‚â§-trans : p ‚â§ q ‚Üí q ‚â§ r ‚Üí p ‚â§ r
‚â§-trans {p} {q} {r} p‚â§q q‚â§r = trans p‚â§q
  (trans (‚àß-congÀ° q‚â§r)
     (sym (trans (‚àß-cong ≥ p‚â§q) (‚àß-assoc p q r))))

-- The relation _‚â§_ is antisymmetric.

‚â§-antisym : p ‚â§ q ‚Üí q ‚â§ p ‚Üí p ‚â° q
‚â§-antisym {p} {q} p‚â§q q‚â§p = trans p‚â§q (trans (‚àß-comm p q) (sym q‚â§p))

-- The relation _‚â§_ is a non-strict ordering relation.

‚â§-reflexive : p ‚â° q ‚Üí p ‚â§ q
‚â§-reflexive {p} p‚â°q = trans (sym (‚àß-idem p)) (‚àß-congÀ° p‚â°q)

-- ‚â§ is a preorder relation

‚â§-preorder : IsPreorder _‚â°_ _‚â§_
‚â§-preorder = record
  { isEquivalence = PE.isEquivalence
  ; reflexive     = ‚â§-reflexive
  ; trans         = ‚â§-trans
  }

-- ‚â§ is a partial ordering relation

‚â§-partial : IsPartialOrder _‚â°_ _‚â§_
‚â§-partial = record
  { isPreorder = ‚â§-preorder
  ; antisym    = ‚â§-antisym
  }

-- (M, ‚â§) is a poset

‚â§-poset : Poset _ _ _
‚â§-poset = record
  { Carrier        = M
  ; _‚âà_            = _‚â°_
  ; _‚â§_            = _‚â§_
  ; isPartialOrder = ‚â§-partial
  }

-- If _‚â°_ is decidable (for M), then _‚â§_ is decidable.

‚â°-decidable‚Üí‚â§-decidable : Decidable (_‚â°_ {A = M}) ‚Üí Decidable _‚â§_
‚â°-decidable‚Üí‚â§-decidable _‚â°?_ p q = p ‚â°? (p ‚àß q)

-- If _‚â°_ is decidable (for M), then _<_ is decidable.

‚â°-decidable‚Üí<-decidable : Decidable (_‚â°_ {A = M}) ‚Üí Decidable _<_
‚â°-decidable‚Üí<-decidable _‚â°?_ p q with ‚â°-decidable‚Üí‚â§-decidable _‚â°?_ p q
‚Ä¶ | no p‚â∞q  = no (p‚â∞q ‚àò‚Üí proj‚ÇÅ)
‚Ä¶ | yes p‚â§q with p ‚â°? q
‚Ä¶   | no p‚â¢q  = yes (p‚â§q , p‚â¢q)
‚Ä¶   | yes p‚â°q = no ((_$ p‚â°q) ‚àò‚Üí proj‚ÇÇ)

-- If p is strictly below q, then q is not bounded by p.

<‚Üí‚â∞ : p < q ‚Üí ¬¨ q ‚â§ p
<‚Üí‚â∞ (p‚â§q , p‚â¢q) q‚â§p = p‚â¢q (‚â§-antisym p‚â§q q‚â§p)

opaque

  -- A kind of transitivity for _<_.

  <‚â§-trans : p < q ‚Üí q ‚â§ r ‚Üí p < r
  <‚â§-trans {p} {q} {r} (p‚â§q , p‚â¢q) q‚â§r =
      ‚â§-trans p‚â§q q‚â§r
    , (p ‚â° r  ‚Üí‚ü® flip (subst (_ ‚â§_)) q‚â§r ‚àò‚Üí sym ‚ü©
       q ‚â§ p  ‚Üí‚ü® ‚â§-antisym p‚â§q ‚ü©
       p ‚â° q  ‚Üí‚ü® p‚â¢q ‚ü©
       ‚ä•      ‚ñ°)

opaque

  -- Another kind of transitivity for _<_.

  ‚â§<-trans : p ‚â§ q ‚Üí q < r ‚Üí p < r
  ‚â§<-trans {p} {q} {r} p‚â§q (q‚â§r , q‚â¢r) =
      ‚â§-trans p‚â§q q‚â§r
    , (p ‚â° r  ‚Üí‚ü® flip (subst (_‚â§ _)) p‚â§q ‚ü©
       r ‚â§ q  ‚Üí‚ü® ‚â§-antisym q‚â§r ‚ü©
       q ‚â° r  ‚Üí‚ü® q‚â¢r ‚ü©
       ‚ä•      ‚ñ°)
