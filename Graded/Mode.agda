------------------------------------------------------------------------
-- Modes
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

import Graded.Modality

module Graded.Mode
  {a} {M : Set a}
  (open Graded.Modality M)
  (­ЮЋё : Modality)
  where

open Modality ­ЮЋё

open import Graded.Context ­ЮЋё
open import Graded.Modality.Nr-instances
open import Graded.Modality.Properties ­ЮЋё
open import Tools.Algebra
open import Tools.Bool as B using (Bool; true; false; T)
open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
open import Tools.PropositionalEquality as PE
open import Tools.Unit
import Tools.Reasoning.PartialOrder
import Tools.Reasoning.PropositionalEquality
open import Tools.Relation
open import Tools.Sum

private variable
  A          : Set _
  n          : Nat
  p q r s z  : M
  ╬│ ╬┤ ╬и      : ConРѓў n
  b          : Bool
  ok okРѓЂ okРѓѓ : T b

------------------------------------------------------------------------
-- The mode type

-- Modes.

data Mode : Set where
  ­ЮЪўрхљ : РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ Mode
  ­ЮЪЎрхљ : Mode

pattern ­ЮЪўрхљ[_] ok = ­ЮЪўрхљ РдЃ ok = ok Рдё

private variable
  m mРѓЂ mРѓЂРђ▓ mРѓѓ mРѓѓРђ▓ mРѓЃ : Mode

------------------------------------------------------------------------
-- Some eliminators or similar principles

private

  -- A lemma used in the implementation of ­ЮЪўрхљ-allowed-elim.

  ­ЮЪўрхљ-allowed-elim-helper :
    Рѕђ {p} {P : Set p} (b : Bool) Рєњ
    (T b Рєњ P) Рєњ
    ((not-ok : ┬г T b) Рєњ P) Рєњ
    P
  ­ЮЪўрхљ-allowed-elim-helper true  t f = t _
  ­ЮЪўрхљ-allowed-elim-helper false t f = f (╬╗ ())

-- One can prove that a predicate holds for ­ЮЪўрхљ-allowed by proving that
-- it holds given that T┬а­ЮЪўрхљ-allowed is inhabited, and that it holds
-- given that T┬а­ЮЪўрхљ-allowed is not inhabited.

­ЮЪўрхљ-allowed-elim :
  Рѕђ {p} {P : Set p} Рєњ
  (T ­ЮЪўрхљ-allowed Рєњ P) Рєњ
  ((not-ok : ┬г T ­ЮЪўрхљ-allowed) Рєњ P) Рєњ
  P
­ЮЪўрхљ-allowed-elim = ­ЮЪўрхљ-allowed-elim-helper ­ЮЪўрхљ-allowed

-- An eliminator for modes.

Mode-elim :
  Рѕђ {p} (P : Mode Рєњ Set p) Рєњ
  (РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ P ­ЮЪўрхљ[ ok ]) Рєњ
  P ­ЮЪЎрхљ Рєњ
  Рѕђ m Рєњ P m
Mode-elim _ z o = ╬╗ where
  ­ЮЪўрхљ[ ok ] Рєњ z РдЃ ok = ok Рдё
  ­ЮЪЎрхљ       Рєњ o

------------------------------------------------------------------------
-- Properties related to ­ЮЪўрхљ-allowed

-- Any two applications of ­ЮЪўрхљ[_] are equal.

­ЮЪўрхљ-cong : ­ЮЪўрхљ[ okРѓЂ ] РЅА ­ЮЪўрхљ[ okРѓѓ ]
­ЮЪўрхљ-cong = PE.cong ­ЮЪўрхљ[_] B.T-propositional

-- If ­ЮЪўрхљ is not allowed, then every mode is equal to ­ЮЪЎрхљ.

only-­ЮЪЎрхљ-without-­ЮЪўрхљ : ┬г T ­ЮЪўрхљ-allowed Рєњ m РЅА ­ЮЪЎрхљ
only-­ЮЪЎрхљ-without-­ЮЪўрхљ {m = ­ЮЪўрхљ[ ok ]} not-ok = РіЦ-elim (not-ok ok)
only-­ЮЪЎрхљ-without-­ЮЪўрхљ {m = ­ЮЪЎрхљ}       _      = PE.refl

-- If ­ЮЪўрхљ is not allowed, then all modes are equal.

Mode-propositional-without-­ЮЪўрхљ : ┬г T ­ЮЪўрхљ-allowed Рєњ mРѓЂ РЅА mРѓѓ
Mode-propositional-without-­ЮЪўрхљ {mРѓЂ = mРѓЂ} {mРѓѓ = mРѓѓ} not-ok =
  mРѓЂ  РЅАРЪе only-­ЮЪЎрхљ-without-­ЮЪўрхљ not-ok РЪЕ
  ­ЮЪЎрхљ  РЅА╦ўРЪе only-­ЮЪЎрхљ-without-­ЮЪўрхљ not-ok РЪЕ
  mРѓѓ  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If the modality is trivial, then all modes are equal.

Mode-propositional-if-trivial : Trivial Рєњ mРѓЂ РЅА mРѓѓ
Mode-propositional-if-trivial ­ЮЪЎРЅА­ЮЪў =
  Mode-propositional-without-­ЮЪўрхљ (flip ­ЮЪўрхљ.non-trivial ­ЮЪЎРЅА­ЮЪў)

------------------------------------------------------------------------
-- ­ЮЪўрхљ? and ­ЮЪЎрхљРђ▓

-- A mode that is ­ЮЪўрхљ[┬аsomething┬а] if ­ЮЪўрхљ-allowed is true, and otherwise
-- ­ЮЪЎрхљ.

­ЮЪўрхљ? : Mode
­ЮЪўрхљ? = ­ЮЪўрхљ-allowed-elim ­ЮЪўрхљ[_] (╬╗ _ Рєњ ­ЮЪЎрхљ)

-- One can prove that a predicate holds for ­ЮЪўрхљ? by proving that it
-- holds for ­ЮЪўрхљ[┬аok┬а] (for any ok) and that it holds for ­ЮЪЎрхљ (under the
-- assumption that T┬а­ЮЪўрхљ-allowed is not inhabited).

­ЮЪўрхљ?-elim :
  Рѕђ {p} (P : Mode Рєњ Set p) Рєњ
  (РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ P ­ЮЪўрхљ) Рєњ
  (┬г T ­ЮЪўрхљ-allowed Рєњ P ­ЮЪЎрхљ) Рєњ
  P ­ЮЪўрхљ?
­ЮЪўрхљ?-elim P = lemma _ refl
  where
  lemma :
    Рѕђ b (eq : b РЅА ­ЮЪўрхљ-allowed)
    (z : РдЃ ok : T b Рдё Рєњ P ­ЮЪўрхљ[ subst T eq ok ])
    (o : ┬г T b Рєњ P ­ЮЪЎрхљ) Рєњ
    P (­ЮЪўрхљ-allowed-elim-helper b (╬╗ ok Рєњ ­ЮЪўрхљ[ subst T eq ok ]) (╬╗ _ Рєњ ­ЮЪЎрхљ))
  lemma true  _ z _ = z РдЃ ok = _ Рдё
  lemma false _ _ o = o (╬╗ ())

-- ­ЮЪўрхљ? is equal to ­ЮЪўрхљ[┬аok┬а].

­ЮЪўрхљ?РЅА­ЮЪўрхљ : ­ЮЪўрхљ? РЅА ­ЮЪўрхљ[ ok ]
­ЮЪўрхљ?РЅА­ЮЪўрхљ {ok = ok} = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ m РЅА ­ЮЪўрхљ[ ok ])
  ­ЮЪўрхљ-cong
  (╬╗ not-ok Рєњ РіЦ-elim (not-ok ok))

-- A variant of ­ЮЪЎрхљ.

­ЮЪЎрхљРђ▓ : Mode
­ЮЪЎрхљРђ▓ = ­ЮЪўрхљ-allowed-elim (╬╗ _ Рєњ ­ЮЪЎрхљ) (╬╗ _ Рєњ ­ЮЪЎрхљ)

-- ­ЮЪЎрхљРђ▓ is equal to ­ЮЪЎрхљ.

­ЮЪЎрхљРђ▓РЅА­ЮЪЎрхљ : ­ЮЪЎрхљРђ▓ РЅА ­ЮЪЎрхљ
­ЮЪЎрхљРђ▓РЅА­ЮЪЎрхљ with ­ЮЪўрхљ-allowed
Рђд | true  = refl
Рђд | false = refl

-- ­ЮЪЎрхљРђ▓ is not equal to ­ЮЪўрхљ[┬аok┬а].

­ЮЪЎрхљРђ▓РЅб­ЮЪўрхљ : ­ЮЪЎрхљРђ▓ РЅб ­ЮЪўрхљ[ ok ]
­ЮЪЎрхљРђ▓РЅб­ЮЪўрхљ ­ЮЪЎрхљРђ▓РЅА­ЮЪўрхљ =
  case
    ­ЮЪЎрхљ       РЅА╦ўРЪе ­ЮЪЎрхљРђ▓РЅА­ЮЪЎрхљ РЪЕ
    ­ЮЪЎрхљРђ▓      РЅАРЪе ­ЮЪЎрхљРђ▓РЅА­ЮЪўрхљ РЪЕ
    ­ЮЪўрхљ[ _ ]  Рѕј
  of ╬╗ ()
  where
  open Tools.Reasoning.PropositionalEquality

------------------------------------------------------------------------
-- Some basic definitions

-- The join of two modes.

infixr 40 _Рѕерхљ_

_Рѕерхљ_ : Mode Рєњ Mode Рєњ Mode
­ЮЪўрхљ Рѕерхљ m = m
­ЮЪЎрхљ Рѕерхљ m = ­ЮЪЎрхљ

-- Multiplication of modes.

infixr 45 _┬ирхљ_

_┬ирхљ_ : Mode Рєњ Mode Рєњ Mode
­ЮЪўрхљ ┬ирхљ _ = ­ЮЪўрхљ
­ЮЪЎрхљ ┬ирхљ m = m

-- Modes can be translated to quantities.

Рїю_РїЮ : Mode Рєњ M
Рїю ­ЮЪўрхљ РїЮ = ­ЮЪў
Рїю ­ЮЪЎрхљ РїЮ = ­ЮЪЎ

private

  -- A function used in the implementation of Рїъ_РїЪ.

  Рїъ_РїЪРђ▓ : M Рєњ T ­ЮЪўрхљ-allowed Рєњ Mode
  Рїъ p РїЪРђ▓ ok = case ­ЮЪўрхљ.is-­ЮЪў? ok p of ╬╗ where
    (yes _) Рєњ ­ЮЪўрхљ[ ok ]
    (no _)  Рєњ ­ЮЪЎрхљ

-- Quantities can be translated to modes (in a potentially lossy way).

Рїъ_РїЪ : M Рєњ Mode
Рїъ p РїЪ = ­ЮЪўрхљ-allowed-elim Рїъ p РїЪРђ▓ (╬╗ _ Рєњ ­ЮЪЎрхљ)

-- Modes can be scaled by quantities.
--
-- This definition is based on the typing rule for application in
-- Robert Atkey's "Syntax and Semantics of Quantitative Type Theory".

infixr 45 _рхљ┬и_

_рхљ┬и_ : Mode Рєњ M Рєњ Mode
­ЮЪўрхљ рхљ┬и _ = ­ЮЪўрхљ
­ЮЪЎрхљ рхљ┬и p = Рїъ p РїЪ

-- Equality of modes is decidable.

infix 4 _РЅЪ_

_РЅЪ_ : (mРѓЂ mРѓѓ : Mode) Рєњ Dec (mРѓЂ РЅА mРѓѓ)
­ЮЪЎрхљ РЅЪ ­ЮЪЎрхљ = yes refl
­ЮЪўрхљ РЅЪ ­ЮЪўрхљ = yes ­ЮЪўрхљ-cong
­ЮЪЎрхљ РЅЪ ­ЮЪўрхљ = no (╬╗ ())
­ЮЪўрхљ РЅЪ ­ЮЪЎрхљ = no (╬╗ ())

------------------------------------------------------------------------
-- Mode vectors

-- Mode vectors of the given length.

Mode-vector : Nat Рєњ Set
Mode-vector n = Fin n Рєњ Mode

private variable
  ms : Mode-vector n

-- An empty mode vector.

nilрхљ : Mode-vector 0
nilрхљ ()

-- Adds an element to the mode vector.

consрхљ : Mode Рєњ Mode-vector n Рєњ Mode-vector (1+ n)
consрхљ m ¤Ђ x0     = m
consрхљ m ¤Ђ (x +1) = ¤Ђ x

-- The head of the mode vector.

headрхљ : Mode-vector (1+ n) Рєњ Mode
headрхљ ¤Ђ = ¤Ђ x0

-- The tail of the mode vector.

tailрхљ : Mode-vector (1+ n) Рєњ Mode-vector n
tailрхљ ¤Ђ x = ¤Ђ (x +1)

-- A constant vector.

replicateрхљ : Mode Рєњ Mode-vector n
replicateрхљ m _ = m

-- Converts usage contexts to mode vectors.

Рїъ_РїЪрХю : ConРѓў n Рєњ Mode-vector n
Рїъ ╬│ РїЪрХю x = Рїъ ╬│ РЪе x РЪЕ РїЪ

-- Converts mode vectors to usage contexts.

Рїю_РїЮрХю : Mode-vector n Рєњ ConРѓў n
Рїю_РїЮрХю {n = 0}    _ = ╬х
Рїю_РїЮрХю {n = 1+ _} ¤Ђ = Рїю tailрхљ ¤Ђ РїЮрХю РѕЎ Рїю headрхљ ¤Ђ РїЮ

------------------------------------------------------------------------
-- Properties related to _Рѕерхљ_ and _┬ирхљ_

-- The multiplication operation is idempotent.

┬ирхљ-idem : m ┬ирхљ m РЅА m
┬ирхљ-idem {m = ­ЮЪўрхљ} = PE.refl
┬ирхљ-idem {m = ­ЮЪЎрхљ} = PE.refl

-- If mРѓЂ ┬ирхљ mРѓѓ РЅА ­ЮЪЎрхљ then mРѓЂ РЅА ­ЮЪЎрхљ

┬ирхљ-­ЮЪЎ╦А : mРѓЂ ┬ирхљ mРѓѓ РЅА ­ЮЪЎрхљ Рєњ mРѓЂ РЅА ­ЮЪЎрхљ
┬ирхљ-­ЮЪЎ╦А {mРѓЂ = ­ЮЪЎрхљ} eq = PE.refl

-- If mРѓЂ ┬ирхљ mРѓѓ РЅА ­ЮЪЎрхљ then mРѓѓ РЅА ­ЮЪЎрхљ

┬ирхљ-­ЮЪЎ╩│ : mРѓЂ ┬ирхљ mРѓѓ РЅА ­ЮЪЎрхљ Рєњ mРѓѓ РЅА ­ЮЪЎрхљ
┬ирхљ-­ЮЪЎ╩│ {mРѓЂ = ­ЮЪЎрхљ} eq = eq


-- The operations _Рѕерхљ_ and _┬ирхљ_, along with the values ­ЮЪўрхљ? and ­ЮЪЎрхљ,
-- form a commutative semiring.

Рѕерхљ-┬ирхљ-is-commutative-semiring :
  IsCommutativeSemiring Mode _Рѕерхљ_ _┬ирхљ_ ­ЮЪўрхљ? ­ЮЪЎрхљ
Рѕерхљ-┬ирхљ-is-commutative-semiring = record
  { isSemiring = record
    { isSemiringWithoutAnnihilatingZero = record
      { +-isCommutativeMonoid = record
        { isMonoid = record
          { isSemigroup = record
            { isMagma = record
              { isEquivalence = PE.isEquivalence
              ; РѕЎ-cong        = congРѓѓ _Рѕерхљ_
              }
            ; assoc = ╬╗ where
                ­ЮЪўрхљ _ _ Рєњ PE.refl
                ­ЮЪЎрхљ _ _ Рєњ PE.refl
            }
          ; identity =
                (╬╗ where
                   ­ЮЪўрхљ[ ok ] Рєњ
                     ­ЮЪўрхљ? Рѕерхљ ­ЮЪўрхљ  РЅАРЪе PE.cong (_Рѕерхљ _) (­ЮЪўрхљ?РЅА­ЮЪўрхљ {ok = ok}) РЪЕ
                     ­ЮЪўрхљ Рѕерхљ ­ЮЪўрхљ   РЅАРЪеРЪЕ
                     ­ЮЪўрхљ         Рѕј
                   ­ЮЪЎрхљ Рєњ ­ЮЪўрхљ?-elim
                     (╬╗ m Рєњ m Рѕерхљ ­ЮЪЎрхљ РЅА ­ЮЪЎрхљ)
                     PE.refl
                     (╬╗ _ Рєњ PE.refl))
              , (╬╗ where
                   ­ЮЪўрхљ Рєњ ­ЮЪўрхљ?РЅА­ЮЪўрхљ
                   ­ЮЪЎрхљ Рєњ PE.refl)
          }
        ; comm = ╬╗ where
            ­ЮЪўрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
            ­ЮЪўрхљ ­ЮЪЎрхљ Рєњ PE.refl
            ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ PE.refl
            ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
        }
        ; *-cong = congРѓѓ _┬ирхљ_
        ; *-assoc = ╬╗ where
            ­ЮЪўрхљ _ _ Рєњ PE.refl
            ­ЮЪЎрхљ _ _ Рєњ PE.refl
        ; *-identity =
              (╬╗ _ Рєњ PE.refl)
            , (╬╗ where
                 ­ЮЪўрхљ Рєњ PE.refl
                 ­ЮЪЎрхљ Рєњ PE.refl)
      ; distrib =
            (╬╗ where
               ­ЮЪўрхљ _ _ Рєњ PE.refl
               ­ЮЪЎрхљ _ _ Рєњ PE.refl)
          , (╬╗ where
               ­ЮЪўрхљ ­ЮЪўрхљ _  Рєњ PE.refl
               ­ЮЪўрхљ ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
               ­ЮЪўрхљ ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
               ­ЮЪЎрхљ ­ЮЪўрхљ _  Рєњ PE.refl
               ­ЮЪЎрхљ ­ЮЪЎрхљ _  Рєњ PE.refl)
      }
    ; zero =
          (╬╗ where
             ­ЮЪўрхљ Рєњ
               ­ЮЪўрхљ? ┬ирхљ ­ЮЪўрхљ  РЅАРЪе PE.cong (_┬ирхљ _) ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
               ­ЮЪўрхљ ┬ирхљ ­ЮЪўрхљ   РЅАРЪеРЪЕ
               ­ЮЪўрхљ         РЅА╦ўРЪе ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
               ­ЮЪўрхљ?        Рѕј
             ­ЮЪЎрхљ Рєњ ­ЮЪўрхљ?-elim
               (╬╗ m Рєњ m ┬ирхљ ­ЮЪЎрхљ РЅА m)
               PE.refl
               (╬╗ _ Рєњ PE.refl))
        , (╬╗ where
             ­ЮЪўрхљ Рєњ PE.sym ­ЮЪўрхљ?РЅА­ЮЪўрхљ
             ­ЮЪЎрхљ Рєњ PE.refl)
    }
  ; *-comm = ╬╗ where
      ­ЮЪўрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
      ­ЮЪўрхљ ­ЮЪЎрхљ Рєњ PE.refl
      ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ PE.refl
      ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
  }
  where
  open Tools.Reasoning.PropositionalEquality

open IsCommutativeSemiring Mode Рѕерхљ-┬ирхљ-is-commutative-semiring
  public
  using
    ()
  renaming
    ( *-assoc       to ┬ирхљ-assoc
    ; *-identity    to ┬ирхљ-identity
    ; *-identity╩│   to ┬ирхљ-identity╩│
    ; *-identity╦А   to ┬ирхљ-identity╦А
    ; *-comm        to ┬ирхљ-comm
    ; +-assoc       to Рѕерхљ-assoc
    ; +-comm        to Рѕерхљ-comm
    ; +-identity    to Рѕерхљ-identity
    ; +-identity╩│   to Рѕерхљ-identity╩│
    ; +-identity╦А   to Рѕерхљ-identity╦А
    ; distrib       to ┬ирхљ-distrib-Рѕерхљ
    ; distrib╩│      to ┬ирхљ-distrib╩│-Рѕерхљ
    ; distrib╦А      to ┬ирхљ-distrib╦А-Рѕерхљ
    ; zero          to ┬ирхљ-zero
    ; zero╩│         to ┬ирхљ-zero╩│
    ; zero╦А         to ┬ирхљ-zero╦А
    )

-- ­ЮЪўрхљ is a right zero for _┬ирхљ_.

┬ирхљ-zero╩│-­ЮЪўрхљ : m ┬ирхљ ­ЮЪўрхљ[ ok ] РЅА ­ЮЪўрхљ[ ok ]
┬ирхљ-zero╩│-­ЮЪўрхљ {m = ­ЮЪўрхљ} = ­ЮЪўрхљ-cong
┬ирхљ-zero╩│-­ЮЪўрхљ {m = ­ЮЪЎрхљ} = refl

------------------------------------------------------------------------
-- Properties related to Рїю_РїЮ and Рїю_РїЮрХю

-- Рїю_РїЮ commutes with _┬и_/_┬ирхљ_.

Рїю┬ирхљРїЮ : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ РЅА Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ
Рїю┬ирхљРїЮ {mРѓѓ = mРѓѓ} ­ЮЪўрхљ = begin
  ­ЮЪў           РЅА╦ўРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў ┬и Рїю mРѓѓ РїЮ  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
Рїю┬ирхљРїЮ {mРѓѓ = mРѓѓ} ­ЮЪЎрхљ = begin
  Рїю mРѓѓ РїЮ      РЅА╦ўРЪе ┬и-identity╦А _ РЪЕ
  ­ЮЪЎ ┬и Рїю mРѓѓ РїЮ  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A form of commutativity.

РїюРїЮ-┬и-comm : Рѕђ m Рєњ Рїю m РїЮ ┬и p РЅА p ┬и Рїю m РїЮ
РїюРїЮ-┬и-comm {p = p} ­ЮЪўрхљ = begin
  ­ЮЪў ┬и p  РЅАРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў      РЅА╦ўРЪе ┬и-zero╩│ _ РЪЕ
  p ┬и ­ЮЪў  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
РїюРїЮ-┬и-comm {p = p} ­ЮЪЎрхљ = begin
  ­ЮЪЎ ┬и p  РЅАРЪе ┬и-identity╦А _ РЪЕ
  p      РЅА╦ўРЪе ┬и-identity╩│ _ РЪЕ
  p ┬и ­ЮЪЎ  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A form of associativity.

┬ирхљ-┬и-assoc : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬и p РЅА Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ ┬и p
┬ирхљ-┬и-assoc {mРѓѓ = mРѓѓ} {p = p} mРѓЂ = begin
  Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬и p       РЅАРЪе ┬и-cong╩│ (Рїю┬ирхљРїЮ mРѓЂ) РЪЕ
  (Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ) ┬и p  РЅАРЪе ┬и-assoc _ _ _ РЪЕ
  Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ ┬и p    Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A form of associativity.

┬ирхљ-┬ирХю-assoc : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬ирХю ╬│ РЅѕрХю Рїю mРѓЂ РїЮ ┬ирХю Рїю mРѓѓ РїЮ ┬ирХю ╬│
┬ирхљ-┬ирХю-assoc {╬│ = ╬х}     mРѓЂ = ╬х
┬ирхљ-┬ирХю-assoc {╬│ = _ РѕЎ _} mРѓЂ = ┬ирхљ-┬ирХю-assoc mРѓЂ РѕЎ ┬ирхљ-┬и-assoc mРѓЂ

-- Рїю┬аm┬аРїЮ┬а┬и_ distributes over _РіЏ_Рќи┬аr from the left.

РїюРїЮ-┬и-distrib╦А-РіЏ :
  РдЃ has-star : Has-star semiring-with-meet Рдё Рєњ
  Рѕђ m Рєњ Рїю m РїЮ ┬и p РіЏ q Рќи r РЅА (Рїю m РїЮ ┬и p) РіЏ Рїю m РїЮ ┬и q Рќи r
РїюРїЮ-┬и-distrib╦А-РіЏ {p = p} {q = q} {r = r} ­ЮЪЎрхљ = begin
  ­ЮЪЎ ┬и p РіЏ q Рќи r        РЅАРЪе ┬и-identity╦А _ РЪЕ
  p РіЏ q Рќи r            РЅА╦ўРЪе РіЏрхБ-cong (┬и-identity╦А _) (┬и-identity╦А _) РЪЕ
  (­ЮЪЎ ┬и p) РіЏ ­ЮЪЎ ┬и q Рќи r  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
РїюРїЮ-┬и-distrib╦А-РіЏ {p = p} {q = q} {r = r} ­ЮЪўрхљ =
  let open Tools.Reasoning.PropositionalEquality in begin
  ­ЮЪў ┬и p РіЏ q Рќи r        РЅАРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў                    РЅА╦ўРЪе РіЏ-idem-­ЮЪў _ РЪЕ
  ­ЮЪў РіЏ ­ЮЪў Рќи r            РЅА╦ўРЪе РіЏрхБ-cong (┬и-zero╦А _) (┬и-zero╦А _) РЪЕ
  (­ЮЪў ┬и p) РіЏ ­ЮЪў ┬и q Рќи r  Рѕј

-- Рїю┬аm┬аРїЮ┬а┬ирХю_ distributes over _РіЏрХю_Рќи┬аr from the left.

РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю :
  РдЃ has-star : Has-star semiring-with-meet Рдё Рєњ
  Рѕђ m Рєњ Рїю m РїЮ ┬ирХю ╬│ РіЏрХю ╬┤ Рќи r РЅѕрХю (Рїю m РїЮ ┬ирХю ╬│) РіЏрХю Рїю m РїЮ ┬ирХю ╬┤ Рќи r
РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю {╬│ = ╬х}     {╬┤ = ╬х}     _ = ╬х
РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю {╬│ = _ РѕЎ _} {╬┤ = _ РѕЎ _} m =
  РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю m РѕЎ РїюРїЮ-┬и-distrib╦А-РіЏ m

-- Multiplication from the left with values of the form Рїю┬аm┬аРїЮ
-- distributes over nr┬аp┬аr.

РїюРїЮ-┬и-distrib╦А-nr :
  РдЃ has-nr : Has-nr semiring-with-meet Рдё Рєњ
  Рѕђ {n} m Рєњ
  Рїю m РїЮ ┬и nr p r z s n РЅА nr p r (Рїю m РїЮ ┬и z) (Рїю m РїЮ ┬и s) (Рїю m РїЮ ┬и n)
РїюРїЮ-┬и-distrib╦А-nr {p = p} {r = r} {z = z} {s = s} {n = n} ­ЮЪЎрхљ =
  ­ЮЪЎ ┬и nr p r z s n                РЅАРЪе ┬и-identity╦А _ РЪЕ
  nr p r z s n                    РЅА╦ўРЪе congРѓѓ (nr _ _ _) (┬и-identity╦А _) (┬и-identity╦А _) РЪЕ
  nr p r z (­ЮЪЎ ┬и s) (­ЮЪЎ ┬и n)        РЅА╦ўРЪе cong (╬╗ z Рєњ nr _ _ z _ _) (┬и-identity╦А _) РЪЕ
  nr p r (­ЮЪЎ ┬и z) (­ЮЪЎ ┬и s) (­ЮЪЎ ┬и n)  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
РїюРїЮ-┬и-distrib╦А-nr {p = p} {r = r} {z = z} {s = s} {n = n} ­ЮЪўрхљ =
  ­ЮЪў ┬и nr p r z s n                РЅАРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў                               РЅА╦ўРЪе nr-­ЮЪў РЪЕ
  nr p r ­ЮЪў ­ЮЪў ­ЮЪў                    РЅА╦ўРЪе congРѓѓ (nr _ _ _) (┬и-zero╦А _) (┬и-zero╦А _) РЪЕ
  nr p r ­ЮЪў (­ЮЪў ┬и s) (­ЮЪў ┬и n)        РЅА╦ўРЪе cong (╬╗ z Рєњ nr _ _ z (_ ┬и _) (_ ┬и _)) (┬и-zero╦А _) РЪЕ
  nr p r (­ЮЪў ┬и z) (­ЮЪў ┬и s) (­ЮЪў ┬и n)  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- Multiplication from the left with values of the form Рїю┬аm┬аРїЮ
-- distributes over nrрХю┬аp┬аr.

РїюРїЮрХю-┬ирХю-distrib╦А-nrрХю :
  РдЃ has-nr : Has-nr semiring-with-meet Рдё Рєњ
  Рѕђ m Рєњ
  Рїю m РїЮ ┬ирХю nrрХю p r ╬│ ╬┤ ╬и РЅѕрХю
  nrрХю p r (Рїю m РїЮ ┬ирХю ╬│) (Рїю m РїЮ ┬ирХю ╬┤) (Рїю m РїЮ ┬ирХю ╬и)
РїюРїЮрХю-┬ирХю-distrib╦А-nrрХю {╬│ = ╬х}     {╬┤ = ╬х}     {╬и = ╬х}     _ = ╬х
РїюРїЮрХю-┬ирХю-distrib╦А-nrрХю {╬│ = _ РѕЎ _} {╬┤ = _ РѕЎ _} {╬и = _ РѕЎ _} m =
  РїюРїЮрХю-┬ирХю-distrib╦А-nrрХю m РѕЎ РїюРїЮ-┬и-distrib╦А-nr m

-- The result of looking up the x-th entry in Рїю┬аms┬аРїЮрХю is Рїю┬аms┬аx┬аРїЮ.

РїюРїЮрХюРЪеРЪЕ : (x : Fin n) Рєњ Рїю ms РїЮрХю РЪе x РЪЕ РЅА Рїю ms x РїЮ
РїюРїЮрХюРЪеРЪЕ x0     = PE.refl
РїюРїЮрХюРЪеРЪЕ (x +1) = РїюРїЮрХюРЪеРЪЕ x

-- If ­ЮЪўрхљ is allowed, then Рїю┬а­ЮЪўрхљ?┬аРїЮ is equal to ­ЮЪў.

Рїю­ЮЪўрхљ?РїЮРЅА­ЮЪў : T ­ЮЪўрхљ-allowed Рєњ Рїю ­ЮЪўрхљ? РїЮ РЅА ­ЮЪў
Рїю­ЮЪўрхљ?РїЮРЅА­ЮЪў ok =
  Рїю ­ЮЪўрхљ? РїЮ       РЅАРЪе cong Рїю_РїЮ (­ЮЪўрхљ?РЅА­ЮЪўрхљ {ok = ok}) РЪЕ
  Рїю ­ЮЪўрхљ[ ok ] РїЮ  РЅАРЪеРЪЕ
  ­ЮЪў             Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- Multiplication is idempotent for Рїю┬аm┬аРїЮ.

┬и-idem-РїюРїЮ : Рѕђ m Рєњ Рїю m РїЮ ┬и Рїю m РїЮ РЅА Рїю m РїЮ
┬и-idem-РїюРїЮ ­ЮЪўрхљ = ┬и-zero╩│ _
┬и-idem-РїюРїЮ ­ЮЪЎрхљ = ┬и-identity╩│ _

------------------------------------------------------------------------
-- Properties related to Рїъ_РїЪ and Рїъ_РїЪрХю

-- The function Рїъ_РїЪ preserves "equality".

РїъРїЪ-cong : p РЅА q Рєњ Рїъ p РїЪ РЅА Рїъ q РїЪ
РїъРїЪ-cong refl = refl

-- The function Рїъ_РїЪрХю preserves "equality".

РїъРїЪрХю-cong : ╬│ РЅѕрХю ╬┤ Рєњ Рѕђ x Рєњ Рїъ ╬│ РїЪрХю x РЅА Рїъ ╬┤ РїЪрХю x
РїъРїЪрХю-cong (╬│РЅѕрХю╬┤ РѕЎ pРЅАq) = ╬╗ where
  x0     Рєњ РїъРїЪ-cong pРЅАq
  (x +1) Рєњ РїъРїЪрХю-cong ╬│РЅѕрХю╬┤ x

-- A view for Рїъ_РїЪ.

data РїъРїЪ-view (p : M) (m : Mode) : Set a where
  ­ЮЪўрхљ-not-allowed : ┬г T ­ЮЪўрхљ-allowed                Рєњ m РЅА ­ЮЪЎрхљ Рєњ РїъРїЪ-view p m
  ­ЮЪЎрхљ             : РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ p РЅб ­ЮЪў Рєњ m РЅА ­ЮЪЎрхљ Рєњ РїъРїЪ-view p m
  ­ЮЪўрхљ             : РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ p РЅА ­ЮЪў Рєњ m РЅА ­ЮЪўрхљ Рєњ РїъРїЪ-view p m

opaque

  -- The view is total.

  РїъРїЪ-view-total : Рѕђ p Рєњ РїъРїЪ-view p Рїъ p РїЪ
  РїъРїЪ-view-total p = lemma _ refl
    where
    lemma :
      Рѕђ b (eq : b РЅА ­ЮЪўрхљ-allowed) Рєњ
      РїъРїЪ-view p
        (­ЮЪўрхљ-allowed-elim-helper b
           (╬╗ ok Рєњ Рїъ p РїЪРђ▓ (subst T eq ok))
           (╬╗ _ Рєњ ­ЮЪЎрхљ))
    lemma false refl = ­ЮЪўрхљ-not-allowed idрХа refl
    lemma true  refl with ­ЮЪўрхљ.is-­ЮЪў? tt p
    Рђд | no pРЅб­ЮЪў  = ­ЮЪЎрхљ РдЃ ok = _ Рдё pРЅб­ЮЪў refl
    Рђд | yes pРЅА­ЮЪў = ­ЮЪўрхљ РдЃ ok = _ Рдё pРЅА­ЮЪў refl

opaque

  -- The value of Рїъ┬аp┬аРїЪ is ­ЮЪЎрхљ if and only if
  -- * ­ЮЪўрхљ┬аis not allowed, or
  -- * ­ЮЪўрхљ┬аis allowed and p is not equal to┬а­ЮЪў.

  РїъРїЪРЅА­ЮЪЎрхљРЄћРЅб­ЮЪў : Рїъ p РїЪ РЅА ­ЮЪЎрхљ РЄћ (┬г T ­ЮЪўрхљ-allowed Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅб ­ЮЪў)
  РїъРїЪРЅА­ЮЪЎрхљРЄћРЅб­ЮЪў = case РїъРїЪ-view-total _ of ╬╗ where
    (­ЮЪўрхљ-not-allowed not-ok РЅА­ЮЪЎрхљ) Рєњ (╬╗ _ Рєњ injРѓЂ not-ok) , (╬╗ _ Рєњ РЅА­ЮЪЎрхљ)
    (­ЮЪЎрхљ РдЃ ok Рдё РЅб­ЮЪў РЅА­ЮЪЎрхљ)          Рєњ (╬╗ _ Рєњ injРѓѓ (ok , РЅб­ЮЪў)) , (╬╗ _ Рєњ РЅА­ЮЪЎрхљ)
    (­ЮЪўрхљ РдЃ ok Рдё РЅА­ЮЪў РЅА­ЮЪўрхљ)          Рєњ
        (╬╗ РЅА­ЮЪЎрхљ Рєњ injРѓѓ (ok , (case trans (PE.sym РЅА­ЮЪўрхљ) РЅА­ЮЪЎрхљ of ╬╗ ())))
      , (╬╗ where
           (injРѓЂ not-ok)   Рєњ РіЦ-elim $ not-ok ok
           (injРѓѓ (_ , РЅб­ЮЪў)) Рєњ РіЦ-elim $ РЅб­ЮЪў РЅА­ЮЪў)

opaque

  -- The value of Рїъ┬аp┬аРїЪ is ­ЮЪўрхљ[┬аok┬а] if and only if p is┬а­ЮЪў.

  РїъРїЪРЅА­ЮЪўрхљРЄћРЅА­ЮЪў : Рїъ p РїЪ РЅА ­ЮЪўрхљ[ ok ] РЄћ p РЅА ­ЮЪў
  РїъРїЪРЅА­ЮЪўрхљРЄћРЅА­ЮЪў {ok} = case РїъРїЪ-view-total _ of ╬╗ where
    (­ЮЪўрхљ-not-allowed not-ok РЅА­ЮЪЎрхљ) Рєњ РіЦ-elim $ not-ok ok
    (­ЮЪўрхљ РЅА­ЮЪў РЅА­ЮЪўрхљ)                 Рєњ (╬╗ _ Рєњ РЅА­ЮЪў) , (╬╗ _ Рєњ trans РЅА­ЮЪўрхљ ­ЮЪўрхљ-cong)
    (­ЮЪЎрхљ РЅб­ЮЪў РЅА­ЮЪЎрхљ)                 Рєњ
        (╬╗ РЅА­ЮЪўрхљ Рєњ case trans (PE.sym РЅА­ЮЪўрхљ) РЅА­ЮЪЎрхљ of ╬╗ ())
      , (╬╗ РЅА­ЮЪў Рєњ РіЦ-elim $ РЅб­ЮЪў РЅА­ЮЪў)

opaque

  -- The value of Рїъ┬аp┬аРїЪ is ­ЮЪўрхљ? if and only if
  -- * ­ЮЪўрхљ is not allowed or
  -- * ­ЮЪўрхљ is allowed and p is equal to┬а­ЮЪў.

  РїъРїЪРЅА­ЮЪўрхљ?РЄћРЅА­ЮЪў : Рїъ p РїЪ РЅА ­ЮЪўрхљ? РЄћ (┬г T ­ЮЪўрхљ-allowed Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў)
  РїъРїЪРЅА­ЮЪўрхљ?РЄћРЅА­ЮЪў {p} = lemma _ refl
    where
    lemma :
      Рѕђ b (eq : b РЅА ­ЮЪўрхљ-allowed) Рєњ
      ­ЮЪўрхљ-allowed-elim-helper b
        (╬╗ ok Рєњ Рїъ p РїЪРђ▓ (subst T eq ok))
        (╬╗ _ Рєњ ­ЮЪЎрхљ) РЅА
      ­ЮЪўрхљ?
        РЄћ
      (┬г T ­ЮЪўрхљ-allowed Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў)
    lemma false refl =
      ­ЮЪўрхљ?-elim
        (╬╗ m Рєњ
           ­ЮЪЎрхљ РЅА m РЄћ (┬г T ­ЮЪўрхљ-allowed Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў))
        (╬╗ РдЃ ok = ok Рдё Рєњ РіЦ-elim ok)
        (╬╗ _ Рєњ (╬╗ _ Рєњ injРѓЂ idрХа) , (╬╗ _ Рєњ refl))
    lemma true refl with ­ЮЪўрхљ.is-­ЮЪў? tt p
    Рђд | no pРЅб­ЮЪў =
        (╬╗ ())
      , (╬╗ where
           (injРѓЂ ┬гРіц)        Рєњ РіЦ-elim $ ┬гРіц _
           (injРѓѓ (_ , pРЅА­ЮЪў)) Рєњ РіЦ-elim $ pРЅб­ЮЪў pРЅА­ЮЪў)
    Рђд | yes pРЅА­ЮЪў =
        (╬╗ _ Рєњ injРѓѓ (_ , pРЅА­ЮЪў))
      , (╬╗ _ Рєњ refl)

-- If p is equal to ­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а].

РЅА­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ : p РЅА ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪўрхљ[ ok ]
РЅА­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ = РїъРїЪРЅА­ЮЪўрхљРЄћРЅА­ЮЪў .projРѓѓ

-- Рїъ┬а­ЮЪў┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а].

Рїъ­ЮЪўРїЪ : Рїъ ­ЮЪў РїЪ РЅА ­ЮЪўрхљ[ ok ]
Рїъ­ЮЪўРїЪ = РЅА­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ refl

-- Рїъ┬а­ЮЪў┬аРїЪ is equal to ­ЮЪўрхљ?.

Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ? : Рїъ ­ЮЪў РїЪ РЅА ­ЮЪўрхљ?
Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ? = ­ЮЪўрхљ?-elim
  (Рїъ ­ЮЪў РїЪ РЅА_)
  Рїъ­ЮЪўРїЪ
  only-­ЮЪЎрхљ-without-­ЮЪўрхљ

-- If p is equal to ­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ?.

РЅА­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? : p РЅА ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪўрхљ?
РЅА­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? refl = Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ?

-- If Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а], then p is equal to ­ЮЪў.

РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў : Рїъ p РїЪ РЅА ­ЮЪўрхљ[ ok ] Рєњ p РЅА ­ЮЪў
РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў = РїъРїЪРЅА­ЮЪўрхљРЄћРЅА­ЮЪў .projРѓЂ

opaque

  -- If "­ЮЪўрхљ┬аis allowed" implies that p is not equal to┬а­ЮЪў, then Рїъ┬аp┬аРїЪ
  -- is equal to┬а­ЮЪЎрхљ.

  РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓ : (T ­ЮЪўрхљ-allowed Рєњ p РЅб ­ЮЪў) Рєњ Рїъ p РїЪ РЅА ­ЮЪЎрхљ
  РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓ pРЅб­ЮЪў =
    ­ЮЪўрхљ-allowed-elim
      (╬╗ ok Рєњ РїъРїЪРЅА­ЮЪЎрхљРЄћРЅб­ЮЪў .projРѓѓ (injРѓѓ (ok , pРЅб­ЮЪў ok)))
      (╬╗ not-ok Рєњ РїъРїЪРЅА­ЮЪЎрхљРЄћРЅб­ЮЪў .projРѓѓ (injРѓЂ not-ok))

-- A variant of РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓.

РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљ : p РЅб ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪЎрхљ
РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљ pРЅб­ЮЪў = РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓ (╬╗ _ Рєњ pРЅб­ЮЪў)

-- If ­ЮЪўрхљ is allowed and Рїъ┬аp┬аРїЪ is equal to ­ЮЪЎрхљ, then p is not equal to
-- ­ЮЪў.

РїъРїЪРЅА­ЮЪЎрхљРєњРЅб­ЮЪў : T ­ЮЪўрхљ-allowed Рєњ Рїъ p РїЪ РЅА ­ЮЪЎрхљ Рєњ p РЅб ­ЮЪў
РїъРїЪРЅА­ЮЪЎрхљРєњРЅб­ЮЪў ok РЅА­ЮЪЎрхљ = case РїъРїЪРЅА­ЮЪЎрхљРЄћРЅб­ЮЪў .projРѓЂ РЅА­ЮЪЎрхљ of ╬╗ where
  (injРѓЂ not-ok)    Рєњ РіЦ-elim $ not-ok ok
  (injРѓѓ (_ , pРЅб­ЮЪў)) Рєњ pРЅб­ЮЪў

-- Рїъ┬а­ЮЪЎ┬аРїЪ is equal to ­ЮЪЎрхљ.

Рїъ­ЮЪЎРїЪ : Рїъ ­ЮЪЎ РїЪ РЅА ­ЮЪЎрхљ
Рїъ­ЮЪЎРїЪ = РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓ ­ЮЪўрхљ.non-trivial

-- The function taking p to Рїю┬аРїъ┬аp┬аРїЪ┬аРїЮ preserves equivalence.

РїюРїъРїЪРїЮ-cong : p РЅА q Рєњ Рїю Рїъ p РїЪ РїЮ РЅА Рїю Рїъ q РїЪ РїЮ
РїюРїъРїЪРїЮ-cong pРЅАq = cong Рїю_РїЮ (РїъРїЪ-cong pРЅАq)

-- If ­ЮЪЎ┬аРЅц┬а­ЮЪў, then the function taking p to Рїю┬аРїъ┬аp┬аРїЪ┬аРїЮ is monotone.

РїюРїъРїЪРїЮ-monotone : ­ЮЪЎ РЅц ­ЮЪў Рєњ p РЅц q Рєњ Рїю Рїъ p РїЪ РїЮ РЅц Рїю Рїъ q РїЪ РїЮ
РїюРїъРїЪРїЮ-monotone {p = p} {q = q} ­ЮЪЎРЅц­ЮЪў pРЅцq = lemma _ _ refl refl
  where
  lemma : Рѕђ mРѓЂ mРѓѓ Рєњ Рїъ p РїЪ РЅА mРѓЂ Рєњ Рїъ q РїЪ РЅА mРѓѓ Рєњ Рїю mРѓЂ РїЮ РЅц Рїю mРѓѓ РїЮ
  lemma ­ЮЪўрхљ       ­ЮЪўрхљ _      _      = РЅц-refl
  lemma ­ЮЪЎрхљ       ­ЮЪЎрхљ _      _      = РЅц-refl
  lemma ­ЮЪЎрхљ       ­ЮЪўрхљ _      _      = ­ЮЪЎРЅц­ЮЪў
  lemma ­ЮЪўрхљ[ ok ] ­ЮЪЎрхљ РїъpРїЪРЅА­ЮЪўрхљ РїъqРїЪРЅА­ЮЪЎрхљ =
    РіЦ-elim (РїъРїЪРЅА­ЮЪЎрхљРєњРЅб­ЮЪў ok РїъqРїЪРЅА­ЮЪЎрхљ (­ЮЪўрхљ.­ЮЪўРЅ« ok (begin
      ­ЮЪў  РЅѕ╦ўРЪе РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РїъpРїЪРЅА­ЮЪўрхљ РЪЕ
      p  РЅцРЪе pРЅцq РЪЕ
      q  Рѕј)))
    where
    open Tools.Reasoning.PartialOrder РЅц-poset

-- The value p┬а┬и┬аРїю┬аРїъ┬аp┬аРїЪ┬аРїЮ is equal to p.

┬иРїюРїъРїЪРїЮ : p ┬и Рїю Рїъ p РїЪ РїЮ РЅА p
┬иРїюРїъРїЪРїЮ {p = p} = lemma _ refl
  where
  open Tools.Reasoning.PropositionalEquality

  lemma : Рѕђ m Рєњ Рїъ p РїЪ РЅА m Рєњ p ┬и Рїю m РїЮ РЅА p
  lemma ­ЮЪЎрхљ _ =
    p ┬и ­ЮЪЎ  РЅАРЪе ┬и-identity╩│ _ РЪЕ
    p      Рѕј
  lemma ­ЮЪўрхљ РїъpРїЪРЅА­ЮЪўрхљ =
    p ┬и ­ЮЪў  РЅАРЪе ┬и-zero╩│ _ РЪЕ
    ­ЮЪў      РЅА╦ўРЪе РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РїъpРїЪРЅА­ЮЪўрхљ РЪЕ
    p      Рѕј

-- The function Рїъ_РїЪ is a left inverse of Рїю_РїЮ.

РїъРїюРїЮРїЪ : Рѕђ m Рєњ Рїъ Рїю m РїЮ РїЪ РЅА m
РїъРїюРїЮРїЪ ­ЮЪўрхљ = Рїъ­ЮЪўРїЪ
РїъРїюРїЮРїЪ ­ЮЪЎрхљ = Рїъ­ЮЪЎРїЪ

-- A lemma relating _┬ирхљ_, Рїъ_РїЪ and _рхљ┬и_.

┬ирхљРїъРїЪ : m ┬ирхљ Рїъ p РїЪ РЅА m рхљ┬и p
┬ирхљРїъРїЪ {m = ­ЮЪўрхљ} = PE.refl
┬ирхљРїъРїЪ {m = ­ЮЪЎрхљ} = PE.refl

-- A lemma relating Рїъ_РїЪ, _┬и_, Рїю_РїЮ and _рхљ┬и_.

РїъРїюРїЮ┬иРїЪ : Рѕђ m Рєњ Рїъ Рїю m РїЮ ┬и p РїЪ РЅА m рхљ┬и p
РїъРїюРїЮ┬иРїЪ {p = p} ­ЮЪўрхљ =
  Рїъ ­ЮЪў ┬и p РїЪ  РЅАРЪе РїъРїЪ-cong (┬и-zero╦А _) РЪЕ
  Рїъ ­ЮЪў РїЪ      РЅАРЪе Рїъ­ЮЪўРїЪ РЪЕ
  ­ЮЪўрхљ         Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
РїъРїюРїЮ┬иРїЪ {p = p} ­ЮЪЎрхљ =
  Рїъ ­ЮЪЎ ┬и p РїЪ  РЅАРЪе РїъРїЪ-cong (┬и-identity╦А _) РЪЕ
  Рїъ p РїЪ      РЅАРЪеРЪЕ
  ­ЮЪЎрхљ рхљ┬и p    Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- The property "if Рїъ┬аp┬аРїЪ is ­ЮЪЎрхљ then┬аA" is logically equivalent
-- to "A or ­ЮЪўрхљ is allowed and p is┬а­ЮЪў".

РїъРїЪРЅА­ЮЪЎРєњРЄћРіј­ЮЪўрхљ├ЌРЅА­ЮЪў :
  (Рїъ p РїЪ РЅА ­ЮЪЎрхљ Рєњ A) РЄћ
  (A Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў)
РїъРїЪРЅА­ЮЪЎРєњРЄћРіј­ЮЪўрхљ├ЌРЅА­ЮЪў {p = p} {A = A} =
    lemma _ refl
  , ╬╗ where
      (injРѓЂ pРЅА­ЮЪЎ)         Рєњ ╬╗ _ Рєњ pРЅА­ЮЪЎ
      (injРѓѓ (ok , refl)) Рєњ
        Рїъ ­ЮЪў РїЪ РЅА ­ЮЪЎрхљ     РєњРЪе trans (PE.sym Рїъ­ЮЪўРїЪ) РЪЕ
        ­ЮЪўрхљ[ ok ] РЅА ­ЮЪЎрхљ  РєњРЪе (╬╗ ()) РЪЕ
        A              РќА
  where
  lemma :
    Рѕђ m Рєњ Рїъ p РїЪ РЅА m Рєњ (m РЅА ­ЮЪЎрхљ Рєњ A) Рєњ
    A Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў
  lemma = ╬╗ where
    ­ЮЪЎрхљ _ Рєњ
      (­ЮЪЎрхљ РЅА ­ЮЪЎрхљ Рєњ A)             РєњРЪе injРѓЂ РѕўРєњ (_$ refl) РЪЕ
      A Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў  РќА
    ­ЮЪўрхљ[ ok ] Рєњ flip ╬╗ _ Рєњ
      Рїъ p РїЪ РЅА ­ЮЪўрхљ                РєњРЪе injРѓѓ РѕўРєњ (ok ,_) РѕўРєњ РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РЪЕ
      A Ріј T ­ЮЪўрхљ-allowed ├Ќ p РЅА ­ЮЪў  РќА

------------------------------------------------------------------------
-- Properties related to _рхљ┬и_

-- The function m┬архљ┬и_ preserves "equality".

рхљ┬и-cong : Рѕђ m Рєњ p РЅА q Рєњ m рхљ┬и p РЅА m рхљ┬и q
рхљ┬и-cong ­ЮЪўрхљ = ╬╗ _ Рєњ PE.refl
рхљ┬и-cong ­ЮЪЎрхљ = РїъРїЪ-cong

-- ­ЮЪў is a kind of right zero for _рхљ┬и_.

рхљ┬и-zero╩│ : Рѕђ m Рєњ m рхљ┬и ­ЮЪў РЅА ­ЮЪўрхљ?
рхљ┬и-zero╩│ ­ЮЪўрхљ = PE.sym ­ЮЪўрхљ?РЅА­ЮЪўрхљ
рхљ┬и-zero╩│ ­ЮЪЎрхљ = Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ?

-- ­ЮЪўрхљ? is a left zero for _рхљ┬и_.

рхљ┬и-zero╦А : ­ЮЪўрхљ? рхљ┬и p РЅА ­ЮЪўрхљ?
рхљ┬и-zero╦А {p = p} = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ m рхљ┬и p РЅА m)
  PE.refl
  only-­ЮЪЎрхљ-without-­ЮЪўрхљ

-- Рїъ_РїЪ commutes with _┬ирхљ_/_┬и_.

РїъРїЪ┬ирхљ : Рїъ p РїЪ ┬ирхљ Рїъ q РїЪ РЅА Рїъ p ┬и q РїЪ
РїъРїЪ┬ирхљ {p = p} {q = q} = lemma _ _ _ refl refl refl
  where
  open Tools.Reasoning.PropositionalEquality

  lemma :
    Рѕђ mРѓЂ mРѓѓ mРѓЃ Рєњ Рїъ p РїЪ РЅА mРѓЂ Рєњ Рїъ q РїЪ РЅА mРѓѓ Рєњ Рїъ p ┬и q РїЪ РЅА mРѓЃ Рєњ
    mРѓЂ ┬ирхљ mРѓѓ РЅА mРѓЃ
  lemma ­ЮЪўрхљ _ _ РїъpРїЪРЅА­ЮЪўрхљ _ refl =
    ­ЮЪўрхљ         РЅА╦ўРЪе Рїъ­ЮЪўРїЪ РЪЕ
    Рїъ ­ЮЪў РїЪ      РЅА╦ўРЪе cong Рїъ_РїЪ (┬и-zero╦А _) РЪЕ
    Рїъ ­ЮЪў ┬и q РїЪ  РЅА╦ўРЪе cong (╬╗ p Рєњ Рїъ p ┬и _ РїЪ) (РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РїъpРїЪРЅА­ЮЪўрхљ) РЪЕ
    Рїъ p ┬и q РїЪ  Рѕј
  lemma ­ЮЪЎрхљ ­ЮЪўрхљ ­ЮЪўрхљ _ _ _ =
    ­ЮЪўрхљ-cong
  lemma _ ­ЮЪўрхљ ­ЮЪЎрхљ _ РїъqРїЪРЅА­ЮЪўрхљ РїъpqРїЪРЅА­ЮЪЎрхљ =
    case
      ­ЮЪўрхљ         РЅА╦ўРЪе Рїъ­ЮЪўРїЪ РЪЕ
      Рїъ ­ЮЪў РїЪ      РЅА╦ўРЪе cong Рїъ_РїЪ (┬и-zero╩│ _) РЪЕ
      Рїъ p ┬и ­ЮЪў РїЪ  РЅА╦ўРЪе cong (╬╗ q Рєњ Рїъ _ ┬и q РїЪ) (РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РїъqРїЪРЅА­ЮЪўрхљ) РЪЕ
      Рїъ p ┬и q РїЪ  РЅАРЪе РїъpqРїЪРЅА­ЮЪЎрхљ РЪЕ
      ­ЮЪЎрхљ         Рѕј
    of ╬╗ ()
  lemma ­ЮЪЎрхљ ­ЮЪЎрхљ ­ЮЪўрхљ[ ok ] РїъpРїЪРЅА­ЮЪЎрхљ РїъqРїЪРЅА­ЮЪЎрхљ РїъpqРїЪРЅА­ЮЪўрхљ =
    case ­ЮЪўрхљ.zero-product ok (РїъРїЪРЅА­ЮЪўрхљРєњРЅА­ЮЪў РїъpqРїЪРЅА­ЮЪўрхљ) of ╬╗ where
      (injРѓЂ refl) Рєњ
        case
          ­ЮЪўрхљ[ ok ]  РЅА╦ўРЪе Рїъ­ЮЪўРїЪ РЪЕ
          Рїъ ­ЮЪў РїЪ     РЅАРЪе РїъpРїЪРЅА­ЮЪЎрхљ РЪЕ
          ­ЮЪЎрхљ        Рѕј
        of ╬╗ ()
      (injРѓѓ refl) Рєњ
        case
          ­ЮЪўрхљ[ ok ]  РЅА╦ўРЪе Рїъ­ЮЪўРїЪ РЪЕ
          Рїъ ­ЮЪў РїЪ     РЅАРЪе РїъqРїЪРЅА­ЮЪЎрхљ РЪЕ
          ­ЮЪЎрхљ        Рѕј
        of ╬╗ ()
  lemma ­ЮЪЎрхљ ­ЮЪЎрхљ ­ЮЪЎрхљ _ _ _ = refl

-- Рїъ_РїЪ commutes with _┬и┬аq/_рхљ┬и┬аq.

РїъРїЪрхљ┬и : Рїъ p РїЪ рхљ┬и q РЅА Рїъ p ┬и q РїЪ
РїъРїЪрхљ┬и {p = p} {q = q} =
  Рїъ p РїЪ рхљ┬и q      РЅА╦ўРЪе ┬ирхљРїъРїЪ РЪЕ
  Рїъ p РїЪ ┬ирхљ Рїъ q РїЪ  РЅАРЪе РїъРїЪ┬ирхљ РЪЕ
  Рїъ p ┬и q РїЪ       Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A form of associativity.

рхљ┬и-┬и-assoc : Рѕђ m Рєњ (m рхљ┬и p) рхљ┬и q РЅА m рхљ┬и (p ┬и q)
рхљ┬и-┬и-assoc ­ЮЪўрхљ = PE.refl
рхљ┬и-┬и-assoc ­ЮЪЎрхљ = РїъРїЪрхљ┬и

-- A form of associativity.

┬ирхљ-рхљ┬и-assoc : Рѕђ mРѓЂ Рєњ (mРѓЂ ┬ирхљ mРѓѓ) рхљ┬и p РЅА mРѓЂ ┬ирхљ (mРѓѓ рхљ┬и p)
┬ирхљ-рхљ┬и-assoc ­ЮЪўрхљ = PE.refl
┬ирхљ-рхљ┬и-assoc ­ЮЪЎрхљ = PE.refl

-- A form of idempotence for _рхљ┬и_.

РїъРїЪ┬ирхљ-idem : Рїъ p РїЪ рхљ┬и p РЅА Рїъ p РїЪ
РїъРїЪ┬ирхљ-idem {p = p} = lemma _ refl
  where
  lemma : Рѕђ m Рєњ Рїъ p РїЪ РЅА m Рєњ m рхљ┬и p РЅА m
  lemma ­ЮЪўрхљ _      = refl
  lemma ­ЮЪЎрхљ РїъpРїЪРЅА­ЮЪЎрхљ = РїъpРїЪРЅА­ЮЪЎрхљ

-- The function _рхљ┬и┬аp is idempotent.

рхљ┬и-idem : Рѕђ m Рєњ (m рхљ┬и p) рхљ┬и p РЅА m рхљ┬и p
рхљ┬и-idem ­ЮЪўрхљ = PE.refl
рхљ┬и-idem ­ЮЪЎрхљ = РїъРїЪ┬ирхљ-idem

opaque

  -- A lemma relating _рхљ┬и_ and _┬ирхљ_.

  рхљ┬и-┬ирхљ-comm : Рѕђ mРѓЂ Рєњ (mРѓЂ рхљ┬и p) ┬ирхљ mРѓѓ РЅА (mРѓЂ ┬ирхљ mРѓѓ) рхљ┬и p
  рхљ┬и-┬ирхљ-comm               ­ЮЪўрхљ = refl
  рхљ┬и-┬ирхљ-comm {p} {mРѓѓ = ­ЮЪЎрхљ} ­ЮЪЎрхљ =
    Рїъ p РїЪ ┬ирхљ ­ЮЪЎрхљ  РЅАРЪе ┬ирхљ-identity╩│ _ РЪЕ
    Рїъ p РїЪ        Рѕј
    where
    open Tools.Reasoning.PropositionalEquality
  рхљ┬и-┬ирхљ-comm {p} {mРѓѓ = ­ЮЪўрхљ} ­ЮЪЎрхљ =
    Рїъ p РїЪ ┬ирхљ ­ЮЪўрхљ  РЅАРЪе ┬ирхљ-comm Рїъ _ РїЪ _ РЪЕ
    ­ЮЪўрхљ ┬ирхљ Рїъ p РїЪ  РЅАРЪеРЪЕ
    ­ЮЪўрхљ           Рѕј
    where
    open Tools.Reasoning.PropositionalEquality

-- Another lemma relating _рхљ┬и_ and _┬ирхљ_.

рхљ┬и-┬ирхљ : Рѕђ m Рєњ (m рхљ┬и p) ┬ирхљ m РЅА m рхљ┬и p
рхљ┬и-┬ирхљ {p} m =
  (m рхљ┬и p) ┬ирхљ m  РЅАРЪе рхљ┬и-┬ирхљ-comm m РЪЕ
  (m ┬ирхљ m) рхљ┬и p  РЅАРЪе cong (_рхљ┬и _) $ ┬ирхљ-idem {m = m} РЪЕ
  m рхљ┬и p         Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A lemma relating _рхљ┬и_, _┬ирхљ_ and Рїъ_РїЪ.

рхљ┬и-┬ирхљ-РїъРїЪ : Рѕђ m Рєњ (m рхљ┬и p) ┬ирхљ Рїъ p РїЪ РЅА m рхљ┬и p
рхљ┬и-┬ирхљ-РїъРїЪ         ­ЮЪўрхљ = PE.refl
рхљ┬и-┬ирхљ-РїъРїЪ {p = p} ­ЮЪЎрхљ =
  Рїъ p РїЪ ┬ирхљ Рїъ p РїЪ  РЅАРЪе ┬ирхљ-idem РЪЕ
  Рїъ p РїЪ           Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If ­ЮЪЎ┬аРЅц┬а­ЮЪў, then the function taking p to Рїю┬аm┬архљ┬и┬аp┬аРїЮ is monotone for
-- every m.

Рїюрхљ┬иРїЮ-monotone╩│ : ­ЮЪЎ РЅц ­ЮЪў Рєњ Рѕђ m Рєњ p РЅц q Рєњ Рїю m рхљ┬и p РїЮ РЅц Рїю m рхљ┬и q РїЮ
Рїюрхљ┬иРїЮ-monotone╩│ _   ­ЮЪўрхљ = ╬╗ _ Рєњ РЅц-refl
Рїюрхљ┬иРїЮ-monotone╩│ ­ЮЪЎРЅц­ЮЪў ­ЮЪЎрхљ = РїюРїъРїЪРїЮ-monotone ­ЮЪЎРЅц­ЮЪў

-- The value p┬а┬и┬аРїю┬аm┬архљ┬и┬аp┬аРїЮ is equivalent to Рїю┬аm┬аРїЮ┬а┬и┬аp.

┬иРїюрхљ┬иРїЮ : Рѕђ m Рєњ p ┬и Рїю m рхљ┬и p РїЮ РЅА p ┬и Рїю m РїЮ
┬иРїюрхљ┬иРїЮ         ­ЮЪўрхљ = refl
┬иРїюрхљ┬иРїЮ {p = p} ­ЮЪЎрхљ = begin
  p ┬и Рїю Рїъ p РїЪ РїЮ  РЅАРЪе ┬иРїюРїъРїЪРїЮ РЪЕ
  p              РЅА╦ўРЪе ┬и-identity╩│ _ РЪЕ
  p ┬и ­ЮЪЎ          Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

opaque

  -- If "­ЮЪўрхљ┬аis allowed" implies that p is non-zero, then m┬архљ┬и┬аp is
  -- equal to┬аm.

  РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓ : (T ­ЮЪўрхљ-allowed Рєњ p РЅб ­ЮЪў) Рєњ m рхљ┬и p РЅА m
  РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓ {m = ­ЮЪўрхљ} _ = PE.refl
  РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓ {m = ­ЮЪЎрхљ}   = РЅб­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљРђ▓

-- A variant of РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓.

РЅб­ЮЪўРєњрхљ┬иРЅА : p РЅб ­ЮЪў Рєњ m рхљ┬и p РЅА m
РЅб­ЮЪўРєњрхљ┬иРЅА pРЅб­ЮЪў = РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓ (╬╗ _ Рєњ pРЅб­ЮЪў)

-- ­ЮЪЎ is a right identity for _рхљ┬и_.

рхљ┬и-identity╩│ : m рхљ┬и ­ЮЪЎ РЅА m
рхљ┬и-identity╩│ = РЅб­ЮЪўРєњрхљ┬иРЅАРђ▓ ­ЮЪўрхљ.non-trivial
