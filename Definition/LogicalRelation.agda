------------------------------------------------------------------------
-- The logical relation for reducibility
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation
  {a} {Mod : Set a}
  {ùïÑ : Modality Mod}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.LogicalRelation.Weakening.Restricted R
open import Definition.Untyped Mod as U hiding (K)
open import Definition.Untyped.Neutral Mod type-variant
open import Definition.Untyped.Whnf Mod type-variant
open import Definition.Typed.Properties R
open import Definition.Typed R
-- The imported operator _,_ is not "supposed" to be used below, but
-- "," is used in some pattern synonyms, and if this import statement
-- is removed, then some code in
-- Definition.LogicalRelation.Properties.Reduction fails to type-check
-- (at the time of writing).
open import Definition.Typed.Substitution R using (_,_)
open import Definition.Typed.Weakening R
open import Definition.Typed.Weakening.Definition R

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat hiding (_<_; _‚â§_)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Unit

private
  variable
    p q : Mod
    Œ∫ ‚Ñì l : Nat
    ‚àá : DCon (Term 0) Œ∫
    Œì Œî : Con Term ‚Ñì
    Œó : Cons _ _
    t t‚Ä≤ u u‚Ä≤ : Term _
    œÅ : Wk _ _
    s : Strength

Neutral‚Çó : DCon (Term 0) Œ∫ ‚Üí Term ‚Ñì ‚Üí Set a
Neutral‚Çó = Neutral Var-included

var‚Çó : ‚¶É inc : Var-included ‚¶Ñ ‚Üí ‚àÄ x ‚Üí Neutral‚Çó {‚Ñì = ‚Ñì} ‚àá (var x)
var‚Çó ‚¶É inc ‚¶Ñ = var inc

var‚Çó‚Ä≤ :
  ‚àÄ {A} ‚Üí
  ‚¶É inc : Var-included or-empty Œì ‚àô A ‚¶Ñ ‚Üí
  ‚àÄ x ‚Üí Neutral‚Çó {‚Ñì = ‚Ñì} ‚àá (var x)
var‚Çó‚Ä≤ ‚¶É inc = possibly-nonempty ‚¶Ñ = var‚Çó

Type‚Çó : DCon (Term 0) Œ∫ ‚Üí Term ‚Ñì ‚Üí Set a
Type‚Çó = Type Var-included

Function‚Çó : DCon (Term 0) Œ∫ ‚Üí Term ‚Ñì ‚Üí Set a
Function‚Çó = Function Var-included

Product‚Çó : DCon (Term 0) Œ∫ ‚Üí Term ‚Ñì ‚Üí Set a
Product‚Çó = Product Var-included

Identity‚Çó : DCon (Term 0) Œ∫ ‚Üí Term ‚Ñì ‚Üí Set a
Identity‚Çó = Identity Var-included

-- The different cases of the logical relation are spread out through out
-- this file. This is due to them having different dependencies.

-- We will refer to expressions that satisfies the logical relation as reducible.

-- Reducibility of neutral terms:

-- Neutral types

infix 4 _‚ä©ne_

record _‚ä©ne_ (Œì : Cons Œ∫ ‚Ñì) (A : Term ‚Ñì) : Set a where
  no-eta-equality
  pattern
  constructor ne
  field
    K   : Term ‚Ñì
    D   : Œì ‚ä¢ A ‚áí* K
    neK : Neutral‚Çó (Œì .defs) K
    K‚â°K : Œì ‚ä¢‚âÖ K

-- Equality of neutral types

infix 4 _‚ä©ne_‚â°_/_

record _‚ä©ne_‚â°_/_ (Œì : Cons Œ∫ ‚Ñì) (A B : Term ‚Ñì) (‚ä©A : Œì ‚ä©ne A) :
         Set a where
  no-eta-equality
  pattern
  constructor ne‚Çå
  open _‚ä©ne_ ‚ä©A
  field
    M   : Term ‚Ñì
    D‚Ä≤  : Œì ‚ä¢ B ‚áí* M
    neM : Neutral‚Çó (Œì .defs) M
    K‚â°M : Œì ‚ä¢ K ‚âÖ M

-- Neutral term in WHNF

infix 4 _‚ä©neNf_‚à∑_

record _‚ä©neNf_‚à∑_ (Œì : Cons Œ∫ ‚Ñì) (k A : Term ‚Ñì) : Set a where
  inductive
  no-eta-equality
  pattern
  constructor neNf‚Çú
  field
    neK : Neutral‚Çó (Œì .defs) k
    k‚â°k : Œì ‚ä¢~ k ‚à∑ A

-- Term of neutral type

infix 4 _‚ä©ne_‚à∑_/_

record _‚ä©ne_‚à∑_/_ (Œì : Cons Œ∫ ‚Ñì) (t A : Term ‚Ñì) (‚ä©A : Œì ‚ä©ne A) :
         Set a where
  inductive
  no-eta-equality
  pattern
  constructor ne‚Çú
  open _‚ä©ne_ ‚ä©A
  field
    k  : Term ‚Ñì
    d  : Œì ‚ä¢ t ‚áí* k ‚à∑ K
    nf : Œì ‚ä©neNf k ‚à∑ K

-- Neutral term equality in WHNF

infix 4 _‚ä©neNf_‚â°_‚à∑_

record _‚ä©neNf_‚â°_‚à∑_ (Œì : Cons Œ∫ ‚Ñì) (k m A : Term ‚Ñì) : Set a where
  inductive
  no-eta-equality
  pattern
  constructor neNf‚Çú‚Çå
  field
    neK : Neutral‚Çó (Œì .defs) k
    neM : Neutral‚Çó (Œì .defs) m
    k‚â°m : Œì ‚ä¢ k ~ m ‚à∑ A

-- Term equality of neutral type

infix 4 _‚ä©ne_‚â°_‚à∑_/_

record _‚ä©ne_‚â°_‚à∑_/_ (Œì : Cons Œ∫ ‚Ñì) (t u A : Term ‚Ñì) (‚ä©A : Œì ‚ä©ne A) :
         Set a where
  no-eta-equality
  pattern
  constructor ne‚Çú‚Çå
  open _‚ä©ne_ ‚ä©A
  field
    k m : Term ‚Ñì
    d   : Œì ‚ä¢ t ‚áí* k ‚à∑ K
    d‚Ä≤  : Œì ‚ä¢ u ‚áí* m ‚à∑ K
    nf  : Œì ‚ä©neNf k ‚â° m ‚à∑ K

-- Reducibility of natural numbers:

-- Natural number type

infix 4 _‚ä©‚Ñï_

_‚ä©‚Ñï_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ñï A = Œì ‚ä¢ A ‚áí* ‚Ñï

-- Natural number type equality

infix 4 _‚ä©‚Ñï_‚â°_

_‚ä©‚Ñï_‚â°_ : Cons Œ∫ ‚Ñì ‚Üí (_ _ : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©‚Ñï A ‚â° B = Œì ‚ä¢ B ‚áí* ‚Ñï

mutual
  -- Natural number term

  infix 4 _‚ä©‚Ñï_‚à∑‚Ñï

  record _‚ä©‚Ñï_‚à∑‚Ñï (Œì : Cons Œ∫ ‚Ñì) (t : Term ‚Ñì) : Set a where
    inductive
    no-eta-equality
    pattern
    constructor ‚Ñï‚Çú
    field
      n : Term ‚Ñì
      d : Œì ‚ä¢ t ‚áí* n ‚à∑ ‚Ñï
      n‚â°n : Œì ‚ä¢‚âÖ n ‚à∑ ‚Ñï
      prop : Natural-prop Œì n

  -- WHNF property of natural number terms
  data Natural-prop (Œì : Cons Œ∫ ‚Ñì) : (n : Term ‚Ñì) ‚Üí Set a where
    suc·µ£  : ‚àÄ {n} ‚Üí Œì ‚ä©‚Ñï n ‚à∑‚Ñï ‚Üí Natural-prop Œì (suc n)
    zero·µ£ : Natural-prop Œì zero
    ne    : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ ‚Ñï ‚Üí Natural-prop Œì n

mutual
  -- Natural number term equality

  infix 4 _‚ä©‚Ñï_‚â°_‚à∑‚Ñï

  record _‚ä©‚Ñï_‚â°_‚à∑‚Ñï (Œì : Cons Œ∫ ‚Ñì) (t u : Term ‚Ñì) : Set a where
    inductive
    no-eta-equality
    pattern
    constructor ‚Ñï‚Çú‚Çå
    field
      k k‚Ä≤ : Term ‚Ñì
      d : Œì ‚ä¢ t ‚áí* k  ‚à∑ ‚Ñï
      d‚Ä≤ : Œì ‚ä¢ u ‚áí* k‚Ä≤ ‚à∑ ‚Ñï
      k‚â°k‚Ä≤ : Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ ‚Ñï
      prop : [Natural]-prop Œì k k‚Ä≤

  -- WHNF property of Natural number term equality
  data [Natural]-prop (Œì : Cons Œ∫ ‚Ñì) : (_ _ : Term ‚Ñì) ‚Üí Set a where
    suc·µ£  : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©‚Ñï n ‚â° n‚Ä≤ ‚à∑‚Ñï ‚Üí
            [Natural]-prop Œì (suc n) (suc n‚Ä≤)
    zero·µ£ : [Natural]-prop Œì zero zero
    ne    : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ ‚Ñï ‚Üí [Natural]-prop Œì n n‚Ä≤

-- Reducibility of Empty

-- Empty type

infix 4 _‚ä©Empty_

_‚ä©Empty_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©Empty A = Œì ‚ä¢ A ‚áí* Empty

-- Empty type equality

infix 4 _‚ä©Empty_‚â°_

_‚ä©Empty_‚â°_ : Cons Œ∫ ‚Ñì ‚Üí (_ _ : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Empty A ‚â° B = Œì ‚ä¢ B ‚áí* Empty

-- WHNF property of absurd terms
data Empty-prop (Œì : Cons Œ∫ ‚Ñì) : Term ‚Ñì ‚Üí Set a where
  ne : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ Empty ‚Üí Empty-prop Œì n

-- Empty term

infix 4 _‚ä©Empty_‚à∑Empty

record _‚ä©Empty_‚à∑Empty (Œì : Cons Œ∫ ‚Ñì) (t : Term ‚Ñì) : Set a where
  inductive
  no-eta-equality
  pattern
  constructor Empty‚Çú
  field
    n : Term ‚Ñì
    d : Œì ‚ä¢ t ‚áí* n ‚à∑ Empty
    n‚â°n : Œì ‚ä¢‚âÖ n ‚à∑ Empty
    prop : Empty-prop Œì n

data [Empty]-prop (Œì : Cons Œ∫ ‚Ñì) : (_ _ : Term ‚Ñì) ‚Üí Set a where
  ne : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ Empty ‚Üí [Empty]-prop Œì n n‚Ä≤

-- Empty term equality

infix 4 _‚ä©Empty_‚â°_‚à∑Empty

record _‚ä©Empty_‚â°_‚à∑Empty (Œì : Cons Œ∫ ‚Ñì) (t u : Term ‚Ñì) : Set a where
  inductive
  no-eta-equality
  pattern
  constructor Empty‚Çú‚Çå
  field
    k k‚Ä≤ : Term ‚Ñì
    d : Œì ‚ä¢ t ‚áí* k  ‚à∑ Empty
    d‚Ä≤ : Œì ‚ä¢ u ‚áí* k‚Ä≤ ‚à∑ Empty
    k‚â°k‚Ä≤ : Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ Empty
    prop : [Empty]-prop Œì k k‚Ä≤

-- Reducibility of Unit

-- Unit type

infix 4 _‚ä©Unit‚ü®_,_‚ü©_

record _‚ä©Unit‚ü®_,_‚ü©_
         (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (s : Strength)
         (A : Term ‚Ñì) : Set a where
  no-eta-equality
  pattern
  constructor Unit‚Çú
  field
    ‚áí*-Unit : Œì ‚ä¢ A ‚áí* Unit s l
    ok      : Unit-allowed s

-- Unit type equality

infix 4 _‚ä©Unit‚ü®_,_‚ü©_‚â°_

_‚ä©Unit‚ü®_,_‚ü©_‚â°_ :
  Cons Œ∫ ‚Ñì ‚Üí Universe-level ‚Üí Strength ‚Üí (_ _ : Term ‚Ñì) ‚Üí Set a
Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚â° B = Œì ‚ä¢ B ‚áí* Unit s l

data Unit-prop (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (s : Strength) :
       Term ‚Ñì ‚Üí Set a where
  star·µ£ : Unit-prop Œì l s (star s l)
  ne    : ‚àÄ {n} ‚Üí Œì ‚ä©neNf n ‚à∑ Unit s l ‚Üí Unit-prop Œì l s n

infix 4 _‚ä©Unit‚ü®_,_‚ü©_‚à∑Unit

record _‚ä©Unit‚ü®_,_‚ü©_‚à∑Unit
         (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (s : Strength)
         (t : Term ‚Ñì) : Set a where
  inductive
  no-eta-equality
  pattern
  constructor Unit‚Çú
  field
    n : Term ‚Ñì
    d : Œì ‚ä¢ t ‚áí* n ‚à∑ Unit s l
    n‚â°n : Œì ‚ä¢‚âÖ n ‚à∑ Unit s l
    prop : Unit-prop Œì l s n

-- Unit term equality

data [Unit ∑]-prop (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) :
       (_ _ : Term ‚Ñì) ‚Üí Set a where
  star·µ£ : [Unit ∑]-prop Œì l (star ∑ l) (star ∑ l)
  ne    : ‚àÄ {n n‚Ä≤} ‚Üí Œì ‚ä©neNf n ‚â° n‚Ä≤ ‚à∑ Unit ∑ l ‚Üí [Unit ∑]-prop Œì l n n‚Ä≤

infix 4 _‚ä©Unit‚ü®_,_‚ü©_‚â°_‚à∑Unit

data _‚ä©Unit‚ü®_,_‚ü©_‚â°_‚à∑Unit (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) :
       Strength ‚Üí (_ _ : Term ‚Ñì) ‚Üí Set a where
  Unit‚Çú‚ÇåÀ¢ :
    Œì ‚ä¢ t ‚à∑ Unit s l ‚Üí
    Œì ‚ä¢ u ‚à∑ Unit s l ‚Üí
    Unit-with-Œ∑ s ‚Üí
    Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑Unit
  Unit‚Çú‚Çå ∑ :
    (k k‚Ä≤ : Term ‚Ñì) ‚Üí
    Œì ‚ä¢ t ‚áí* k  ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä¢ u ‚áí* k‚Ä≤ ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä¢ k ‚âÖ k‚Ä≤ ‚à∑ Unit ∑ l ‚Üí
    [Unit ∑]-prop Œì l k k‚Ä≤ ‚Üí
    ¬¨ Unit ∑-Œ∑ ‚Üí
    Œì ‚ä©Unit‚ü® l , ùï® ‚ü© t ‚â° u ‚à∑Unit


-- Logical relation
-- Exported interface
record LogRelKit : Set (lsuc a) where
  no-eta-equality
  pattern
  constructor Kit
  infix 4 _‚ä©U_ _‚ä©B‚ü®_‚ü©_ _‚ä©Id_ _‚ä©_ _‚ä©_‚â°_/_ _‚ä©_‚à∑_/_ _‚ä©_‚â°_‚à∑_/_
  field
    _‚ä©U_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©B‚ü®_‚ü©_ : Cons Œ∫ ‚Ñì ‚Üí BindingType ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©Id_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a

    _‚ä©_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Set a
    _‚ä©_‚â°_/_ : (Œì : Cons Œ∫ ‚Ñì) (A _ : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a
    _‚ä©_‚â°_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä© A ‚Üí Set a

module LogRel
  (l : Universe-level) (rec : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ <·µò l ‚Üí LogRelKit)
  where

  -- Reducibility of Universe:

  -- Universe type

  infix 4 _‚ä©‚ÇÅU_

  record _‚ä©‚ÇÅU_ (Œì : Cons Œ∫ ‚Ñì) (A : Term ‚Ñì) : Set a where
    no-eta-equality
    pattern
    constructor U·µ£
    field
      l‚Ä≤  : Universe-level
      l‚Ä≤< : l‚Ä≤ <·µò l
      ‚áí*U : Œì ‚ä¢ A ‚áí* U l‚Ä≤

  -- Universe type equality

  infix 4 _‚ä©‚ÇÅU‚â°_/_

  _‚ä©‚ÇÅU‚â°_/_ : Cons Œ∫ ‚Ñì ‚Üí Term ‚Ñì ‚Üí Universe-level ‚Üí Set a
  Œì ‚ä©‚ÇÅU‚â° B / l‚Ä≤ = Œì ‚ä¢ B ‚áí* U l‚Ä≤


  -- Universe term

  infix 4 _‚ä©‚ÇÅU_‚à∑U/_

  record _‚ä©‚ÇÅU_‚à∑U/_ {l‚Ä≤} (Œì : Cons Œ∫ ‚Ñì) (t : Term ‚Ñì) (l< : l‚Ä≤ <·µò l) :
           Set a where
    no-eta-equality
    pattern
    constructor U‚Çú
    open LogRelKit (rec l<)
    field
      A     : Term ‚Ñì
      d     : Œì ‚ä¢ t ‚áí* A ‚à∑ U l‚Ä≤
      typeA : Type‚Çó (Œì .defs) A
      A‚â°A   : Œì ‚ä¢‚âÖ A ‚à∑ U l‚Ä≤
      [t]   : Œì ‚ä© t

  -- Universe term equality

  infix 4 _‚ä©‚ÇÅU_‚â°_‚à∑U/_

  record _‚ä©‚ÇÅU_‚â°_‚à∑U/_ {l‚Ä≤} (Œì : Cons Œ∫ ‚Ñì) (t u : Term ‚Ñì) (l< : l‚Ä≤ <·µò l) :
           Set a where
    no-eta-equality
    pattern
    constructor U‚Çú‚Çå
    open LogRelKit (rec l<)
    field
      A B   : Term ‚Ñì
      d     : Œì ‚ä¢ t ‚áí* A ‚à∑ U l‚Ä≤
      d‚Ä≤    : Œì ‚ä¢ u ‚áí* B ‚à∑ U l‚Ä≤
      typeA : Type‚Çó (Œì .defs) A
      typeB : Type‚Çó (Œì .defs) B
      A‚â°B   : Œì ‚ä¢ A ‚âÖ B ‚à∑ U l‚Ä≤
      [t]   : Œì ‚ä© t
      [u]   : Œì ‚ä© u
      [t‚â°u] : Œì ‚ä© t ‚â° u / [t]



  mutual

    -- Reducibility of Binding types (Œ†, Œ£):

    -- B-type

    infix 4 _‚ä©‚ÇóB‚ü®_‚ü©_

    record _‚ä©‚ÇóB‚ü®_‚ü©_ (Œì : Cons Œ∫ ‚Ñì) (W : BindingType) (A : Term ‚Ñì) :
             Set a where
      inductive
      no-eta-equality
      pattern
      constructor B·µ£
      field
        F : Term ‚Ñì
        G : Term (1+ ‚Ñì)
        D : Œì ‚ä¢ A ‚áí* ‚ü¶ W ‚üß F ‚ñπ G
        A‚â°A : Œì ‚ä¢‚âÖ ‚ü¶ W ‚üß F ‚ñπ G
        [F] : ‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá : DCon (Term 0) Œ∫‚Ä≤}
            ‚Üí Œæ ¬ª ‚àá ‚äá Œì .defs
            ‚Üí ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} ‚Üí ‚àá ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì .vars
            ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó U.wk œÅ F
        [G] : ‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá : DCon (Term 0) Œ∫‚Ä≤}
            ‚Üí ([Œæ] : Œæ ¬ª ‚àá ‚äá Œì .defs)
            ‚Üí ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a : Term m}
            ‚Üí ([œÅ] : ‚àá ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì .vars)
            ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ]
            ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ
        G-ext : ‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá : DCon (Term 0) Œ∫‚Ä≤}
              ‚Üí ([Œæ] : Œæ ¬ª ‚àá ‚äá Œì .defs)
              ‚Üí ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b}
              ‚Üí ([œÅ] : ‚àá ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì .vars)
              ‚Üí ([a] : ‚àá ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
              ‚Üí ([b] : ‚àá ¬ª Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
              ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ]
              ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â° U.wk (lift œÅ) G [ b ]‚ÇÄ /
                  [G] [Œæ] [œÅ] [a]
        ok : BindingType-allowed W

    -- B-type equality

    infix 4 _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_

    record _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_ (Œì : Cons Œ∫ ‚Ñì) (W : BindingType) (A B : Term ‚Ñì)
             ([A] : Œì ‚ä©‚ÇóB‚ü® W ‚ü© A) : Set a where
      inductive
      no-eta-equality
      pattern
      constructor B‚Çå
      open _‚ä©‚ÇóB‚ü®_‚ü©_ [A]
      field
        F‚Ä≤     : Term ‚Ñì
        G‚Ä≤     : Term (1+ ‚Ñì)
        D‚Ä≤     : Œì ‚ä¢ B ‚áí* ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        A‚â°B    : Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤
        [F‚â°F‚Ä≤] : ‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá : DCon (Term 0) Œ∫‚Ä≤}
               ‚Üí ([Œæ] : Œæ ¬ª ‚àá ‚äá Œì .defs)
               ‚Üí ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m}
               ‚Üí ([œÅ] : ‚àá ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì .vars)
               ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó U.wk œÅ F ‚â° U.wk œÅ F‚Ä≤ / [F] [Œæ] [œÅ]
        [G‚â°G‚Ä≤] : ‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá : DCon (Term 0) Œ∫‚Ä≤}
               ‚Üí ([Œæ] : Œæ ¬ª ‚àá ‚äá Œì .defs)
               ‚Üí ‚àÄ {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a}
               ‚Üí ([œÅ] : ‚àá ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì .vars)
               ‚Üí ([a] : ‚àá ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
               ‚Üí ‚àá ¬ª Œî ‚ä©‚Çó U.wk (lift œÅ) G [ a ]‚ÇÄ ‚â°
                   U.wk (lift œÅ) G‚Ä≤ [ a ]‚ÇÄ / [G] [Œæ] [œÅ] [a]

    -- Term reducibility of Œ†-type

    infix 4 _‚ä©‚ÇóŒ†_‚à∑_/_

    _‚ä©‚ÇóŒ†_‚à∑_/_ :
      {Œ∫ ‚Ñì : Nat} {p q : Mod}
      (Œì : Cons Œ∫ ‚Ñì) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚à∑_/_
      {Œ∫} {‚Ñì} {p} {q} (‚àá ¬ª Œì) t A (B·µ£ F G D A‚â°A [F] [G] G-ext _) =
      ‚àÉ Œª f ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó Function‚Çó ‚àá f
            √ó ‚àá ¬ª Œì ‚ä¢‚âÖ f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
            √ó (‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá‚Ä≤ : DCon (Term 0) Œ∫‚Ä≤} ([Œæ] : Œæ ¬ª ‚àá‚Ä≤ ‚äá ‚àá)
              {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a b} ([œÅ] : ‚àá‚Ä≤ ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì)
              ([a] : ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
              ([b] : ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó b ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
              ([a‚â°b] : ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó a ‚â° b ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ])
              ‚Üí ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ f ‚àò‚ü® p ‚ü© b ‚à∑
                  U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [Œæ] [œÅ] [a])
            √ó (‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá‚Ä≤ : DCon (Term 0) Œ∫‚Ä≤} ([Œæ] : Œæ ¬ª ‚àá‚Ä≤ ‚äá ‚àá)
               {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ([œÅ] : ‚àá‚Ä≤ ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì)
               ([a] : ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ]) ‚Üí
               ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚à∑ U.wk (lift œÅ) G [ a ]‚ÇÄ /
                 [G] [Œæ] [œÅ] [a])
              {- NOTE(WN): Last 2 fields could be refactored to a single forall.
                           But touching this definition is painful, so only do it
                           if you have to change it anyway. -}
    -- Issue: Agda complains about record use not being strictly positive.
    --        Therefore we have to use √ó

    -- Term equality of Œ†-type

    infix 4 _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_

    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_ :
      {Œ∫ ‚Ñì : Nat} {p q : Mod}
      (Œì : Cons Œ∫ ‚Ñì) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóB‚ü® BŒ† p q ‚ü© A ‚Üí Set a
    _‚ä©‚ÇóŒ†_‚â°_‚à∑_/_
      {Œ∫} {‚Ñì} {p} {q} (‚àá ¬ª Œì) t u A [A]@(B·µ£ F G D A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª f g ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* f ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó ‚àá ¬ª Œì ‚ä¢ u ‚áí* g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó Function‚Çó ‚àá f
               √ó Function‚Çó ‚àá g
               √ó ‚àá ¬ª Œì ‚ä¢ f ‚âÖ g ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
               √ó ‚àá ¬ª Œì ‚ä©‚ÇóŒ† t ‚à∑ A / [A]
               √ó ‚àá ¬ª Œì ‚ä©‚ÇóŒ† u ‚à∑ A / [A]
               √ó (‚àÄ {Œ∫‚Ä≤} {Œæ : DExt _ Œ∫‚Ä≤ Œ∫} {‚àá‚Ä≤ : DCon (Term 0) Œ∫‚Ä≤} ([Œæ] : Œæ ¬ª ‚àá‚Ä≤ ‚äá ‚àá)
                  {m} {œÅ : Wk m ‚Ñì} {Œî : Con Term m} {a} ([œÅ] : ‚àá‚Ä≤ ¬ª œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì)
                  ([a] : ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó a ‚à∑ U.wk œÅ F / [F] [Œæ] [œÅ]) ‚Üí
                  ‚àá‚Ä≤ ¬ª Œî ‚ä©‚Çó U.wk œÅ f ‚àò‚ü® p ‚ü© a ‚â° U.wk œÅ g ‚àò‚ü® p ‚ü© a ‚à∑
                    U.wk (lift œÅ) G [ a ]‚ÇÄ / [G] [Œæ] [œÅ] [a])
    -- Issue: Same as above.


    -- Term reducibility of Œ£-type

    infix 4 _‚ä©‚ÇóŒ£_‚à∑_/_

    _‚ä©‚ÇóŒ£_‚à∑_/_ :
      {p q : Mod} {m : Strength}
      (Œì : Cons Œ∫ ‚Ñì) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚à∑_/_ {p} {q} {m} Œì t A [A]@(B·µ£ F G _ _ _ _ _ _) =
      ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œì ‚ä¢‚âÖ u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
            √ó Œ£ (Product‚Çó (Œì .defs) u) Œª pProd ‚Üí Œ£-prop m u Œì [A] pProd

    Œ£-prop :
      ‚àÄ {A p q} (m : Strength) (t : Term ‚Ñì) (Œì : Cons Œ∫ ‚Ñì) ‚Üí
      Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A ‚Üí Product‚Çó (Œì .defs) t ‚Üí Set a
    Œ£-prop {p} ùï§ t Œì (B·µ£ F G _ A‚â°A [F] [G] _ _) _ =
      let id-Œì = id (wfEq (‚âÖ-eq A‚â°A)) in
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id id-Œì) Œª [fst] ‚Üí
      Œì ‚ä©‚Çó snd p t ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ / [G] id id-Œì [fst]
    Œ£-prop
      {p} ùï® t Œì (B·µ£ F G _ A‚â°A [F] [G] _ _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ} {s = m}) =
           let id-Œì = id (wfEq (‚âÖ-eq A‚â°A)) in
           p PE.‚â° p‚Ä≤ √ó
           Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id id-Œì) Œª [p‚ÇÅ]
           ‚Üí Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id id-Œì [p‚ÇÅ]
           √ó m PE.‚â° ùï®
    Œ£-prop {p} {q} ùï® t Œì (B·µ£ F G _ _ _ _ _ _) (ne _) =
      Œì ‚ä¢~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Term equality of Œ£-type

    infix 4 _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_

    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_ :
      {p q : Mod} {m : Strength}
      (Œì : Cons Œ∫ ‚Ñì) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A ‚Üí Set a
    _‚ä©‚ÇóŒ£_‚â°_‚à∑_/_
      {p} {q} {m} Œì t u A
      [A]@(B·µ£ F G D A‚â°A [F] [G] G-ext _) =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí Œì ‚ä¢ t ‚áí* t‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ u ‚áí* u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä¢ t‚Ä≤ ‚âÖ u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
                 √ó Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / [A]
                 √ó Œì ‚ä©‚ÇóŒ£ u ‚à∑ A / [A]
                 √ó Œ£ (Product‚Çó (Œì .defs) t‚Ä≤) Œª pProd
                 ‚Üí Œ£ (Product‚Çó (Œì .defs) u‚Ä≤) Œª rProd
                 ‚Üí [Œ£]-prop m t‚Ä≤ u‚Ä≤ Œì [A] pProd rProd

    [Œ£]-prop :
      ‚àÄ {A p q}
      (m : Strength) (t r : Term ‚Ñì) (Œì : Cons Œ∫ ‚Ñì) ‚Üí
      Œì ‚ä©‚ÇóB‚ü® BŒ£ m p q ‚ü© A ‚Üí
      Product‚Çó (Œì .defs) t ‚Üí Product‚Çó (Œì .defs) r ‚Üí Set a
    [Œ£]-prop {p} ùï§ t r Œì (B·µ£ F G D A‚â°A [F] [G] G-ext _) _ _ =
      let id-Œì = id (wfEq (‚âÖ-eq A‚â°A)) in
      Œ£ (Œì ‚ä©‚Çó fst p t ‚à∑ U.wk id F / [F] id id-Œì) Œª [fstp]
      ‚Üí Œì ‚ä©‚Çó fst p r ‚à∑ U.wk id F / [F] id id-Œì
      √ó Œì ‚ä©‚Çó fst p t ‚â° fst p r ‚à∑ U.wk id F / [F] id id-Œì
      √ó Œì ‚ä©‚Çó snd p t ‚â° snd p r ‚à∑ U.wk (lift id) G [ fst p t ]‚ÇÄ
        / [G] id id-Œì [fstp]
    [Œ£]-prop
      {p} ùï® _ _ Œì (B·µ£ F G _ A‚â°A [F] [G] _ _)
      (prod‚Çô {p = p‚Ä≤} {t = p‚ÇÅ} {u = p‚ÇÇ})
      (prod‚Çô {p = p‚Ä≥} {t = r‚ÇÅ} {u = r‚ÇÇ}) =
        let id-Œì = id (wfEq (‚âÖ-eq A‚â°A)) in
        p PE.‚â° p‚Ä≤ √ó p PE.‚â° p‚Ä≥ √ó
        Œ£ (Œì ‚ä©‚Çó p‚ÇÅ ‚à∑ U.wk id F / [F] id id-Œì) Œª [p‚ÇÅ] ‚Üí
        Œ£ (Œì ‚ä©‚Çó r‚ÇÅ ‚à∑ U.wk id F / [F] id id-Œì) Œª [r‚ÇÅ]
        ‚Üí (Œì ‚ä©‚Çó p‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id id-Œì [p‚ÇÅ])
        √ó (Œì ‚ä©‚Çó r‚ÇÇ ‚à∑ U.wk (lift id) G [ r‚ÇÅ ]‚ÇÄ / [G] id id-Œì [r‚ÇÅ])
        √ó (Œì ‚ä©‚Çó p‚ÇÅ ‚â° r‚ÇÅ ‚à∑ U.wk id F / [F] id id-Œì)
        √ó (Œì ‚ä©‚Çó p‚ÇÇ ‚â° r‚ÇÇ ‚à∑ U.wk (lift id) G [ p‚ÇÅ ]‚ÇÄ / [G] id id-Œì [p‚ÇÅ])
    [Œ£]-prop ùï® _ _ _ (B·µ£ _ _ _ _ _ _ _ _) prod‚Çô (ne _) =
      Lift a ‚ä•
    [Œ£]-prop ùï® _ _ _ (B·µ£ _ _ _ _ _ _ _ _) (ne _) prod‚Çô =
      Lift a ‚ä•
    [Œ£]-prop {p} {q} ùï® t r Œì (B·µ£ F G _ _ _ _ _ _) (ne _) (ne _) =
      Œì ‚ä¢ t ~ r ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G

    -- Reducibility for identity types.

    -- Well-formed identity types.

    infix 4 _‚ä©‚ÇóId_

    record _‚ä©‚ÇóId_ (Œì : Cons Œ∫ ‚Ñì) (A : Term ‚Ñì) : Set a where
      inductive
      no-eta-equality
      pattern
      constructor Id·µ£
      field
        Ty lhs rhs : Term ‚Ñì
        ‚áí*Id       : Œì ‚ä¢ A ‚áí* Id Ty lhs rhs
        ‚ä©Ty        : Œì ‚ä©‚Çó Ty
        ‚ä©lhs       : Œì ‚ä©‚Çó lhs ‚à∑ Ty / ‚ä©Ty
        ‚ä©rhs       : Œì ‚ä©‚Çó rhs ‚à∑ Ty / ‚ä©Ty

    -- Well-formed identity type equality.

    infix 4 _‚ä©‚ÇóId_‚â°_/_

    record _‚ä©‚ÇóId_‚â°_/_ (Œì : Cons Œ∫ ‚Ñì) (A B : Term ‚Ñì) (‚ä©A : Œì ‚ä©‚ÇóId A) :
             Set a where
      inductive
      no-eta-equality
      pattern
      constructor Id‚Çå

      open _‚ä©‚ÇóId_ ‚ä©A

      field
        Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ : Term ‚Ñì
        ‚áí*Id‚Ä≤         : Œì ‚ä¢ B ‚áí* Id Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤
        Ty‚â°Ty‚Ä≤        : Œì ‚ä©‚Çó Ty ‚â° Ty‚Ä≤ / ‚ä©Ty
        lhs‚â°lhs‚Ä≤      : Œì ‚ä©‚Çó lhs ‚â° lhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty
        rhs‚â°rhs‚Ä≤      : Œì ‚ä©‚Çó rhs ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty

        -- The fact that the types of the following two fields are
        -- inhabited follows from symmetry, transitivity and the
        -- previous two fields, see
        -- Definition.LogicalRelation.Properties.Transitivity.Id‚Çå‚Ä≤.
        -- The fields are used in
        -- Definition.LogicalRelation.Properties.Conversion, which is
        -- imported from
        -- Definition.LogicalRelation.Properties.Transitivity.
        lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ : Œì ‚ä©‚Çó lhs  ‚â° rhs  ‚à∑ Ty / ‚ä©Ty ‚Üí
                            Œì ‚ä©‚Çó lhs‚Ä≤ ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty
        lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs : Œì ‚ä©‚Çó lhs‚Ä≤ ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty ‚Üí
                            Œì ‚ä©‚Çó lhs  ‚â° rhs  ‚à∑ Ty / ‚ä©Ty

    -- Well-formed identity terms.

    infix 4 _‚ä©‚ÇóId_‚à∑_/_

    _‚ä©‚ÇóId_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Set a
    Œì ‚ä©‚ÇóId t ‚à∑ A / ‚ä©A =
      ‚àÉ Œª u ‚Üí
      Œì ‚ä¢ t ‚áí* u ‚à∑ Id Ty lhs rhs √ó
      ‚àÉ Œª (u-id : Identity‚Çó (Œì .defs) u) ‚Üí
      case u-id of Œª where
        (ne _) ‚Üí Œì ‚ä¢~ u ‚à∑ Id Ty lhs rhs
        rfl‚Çô   ‚Üí Œì ‚ä©‚Çó lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty
      where
      open _‚ä©‚ÇóId_ ‚ä©A

    -- Well-formed identity term equality.

    infix 4 _‚ä©‚ÇóId_‚â°_‚à∑_/_

    _‚ä©‚ÇóId_‚â°_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Set a
    Œì ‚ä©‚ÇóId t ‚â° u ‚à∑ A / ‚ä©A =
      ‚àÉ‚ÇÇ Œª t‚Ä≤ u‚Ä≤ ‚Üí
      Œì ‚ä¢ t ‚áí* t‚Ä≤ ‚à∑ Id Ty lhs rhs √ó
      Œì ‚ä¢ u ‚áí* u‚Ä≤ ‚à∑ Id Ty lhs rhs √ó
      ‚àÉ Œª (t‚Ä≤-id : Identity‚Çó (Œì .defs) t‚Ä≤) ‚Üí
      ‚àÉ Œª (u‚Ä≤-id : Identity‚Çó (Œì .defs) u‚Ä≤) ‚Üí
      Identity-rec t‚Ä≤-id
        (Identity-rec u‚Ä≤-id
           (Œì ‚ä©‚Çó lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
           (Lift _ ‚ä•))
        (Identity-rec u‚Ä≤-id
           (Lift _ ‚ä•)
           (Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs))
      where
      open _‚ä©‚ÇóId_ ‚ä©A

    -- Logical relation definition

    infix 4 _‚ä©‚Çó_

    data _‚ä©‚Çó_ (Œì : Cons Œ∫ ‚Ñì) : Term ‚Ñì ‚Üí Set a where
      U·µ£     : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇÅU A ‚Üí Œì ‚ä©‚Çó A
      ‚Ñï·µ£     : ‚àÄ {A} ‚Üí Œì ‚ä©‚Ñï A ‚Üí Œì ‚ä©‚Çó A
      Empty·µ£ : ‚àÄ {A} ‚Üí Œì ‚ä©Empty A ‚Üí Œì ‚ä©‚Çó A
      Unit·µ£  : ‚àÄ {A} {s : Strength} ‚Üí Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚Üí Œì ‚ä©‚Çó A
      ne     : ‚àÄ {A} ‚Üí Œì ‚ä©ne A ‚Üí Œì ‚ä©‚Çó A
      B·µ£     : ‚àÄ {A} W ‚Üí Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚Üí Œì ‚ä©‚Çó A
      Id·µ£    : ‚àÄ {A} ‚Üí Œì ‚ä©‚ÇóId A ‚Üí Œì ‚ä©‚Çó A
      emb    : ‚àÄ {A l‚Ä≤} (l< : l‚Ä≤ <·µò l) (let open LogRelKit (rec l<))
               ([A] : Œì ‚ä© A) ‚Üí Œì ‚ä©‚Çó A

    infix 4 _‚ä©‚Çó_‚â°_/_

    _‚ä©‚Çó_‚â°_/_ : (Œì : Cons Œ∫ ‚Ñì) (A _ : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó A ‚â° B / U·µ£ ‚ä©A = Œì ‚ä©‚ÇÅU‚â° B / _‚ä©‚ÇÅU_.l‚Ä≤ ‚ä©A
    Œì ‚ä©‚Çó A ‚â° B / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / Empty·µ£ D = Œì ‚ä©Empty A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / Unit·µ£ {s = s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© A ‚â° B
    Œì ‚ä©‚Çó A ‚â° B / ne neA = Œì ‚ä©ne A ‚â° B / neA
    Œì ‚ä©‚Çó A ‚â° B / B·µ£ W BA = Œì ‚ä©‚ÇóB‚ü® W ‚ü© A ‚â° B / BA
    Œì ‚ä©‚Çó A ‚â° B / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId A ‚â° B / ‚ä©A
    Œì ‚ä©‚Çó A ‚â° B / emb l< [A] = Œì ‚ä© A ‚â° B / [A]
      where open LogRelKit (rec l<)

    infix 4 _‚ä©‚Çó_‚à∑_/_

    _‚ä©‚Çó_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚à∑ A / U·µ£ p = Œì ‚ä©‚ÇÅU t ‚à∑U/ _‚ä©‚ÇÅU_.l‚Ä≤< p
    Œì ‚ä©‚Çó t ‚à∑ A / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï t ‚à∑‚Ñï
    Œì ‚ä©‚Çó t ‚à∑ A / Empty·µ£ D = Œì ‚ä©Empty t ‚à∑Empty
    Œì ‚ä©‚Çó t ‚à∑ A / Unit·µ£ {s = s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit
    Œì ‚ä©‚Çó t ‚à∑ A / ne neA = Œì ‚ä©ne t ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ†! Œ†A  = Œì ‚ä©‚ÇóŒ† t ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚à∑ A / Œ£A
    Œì ‚ä©‚Çó t ‚à∑ A / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId t ‚à∑ A / ‚ä©A
    Œì ‚ä©‚Çó t ‚à∑ A / emb l< [A] = Œì ‚ä© t ‚à∑ A / [A]
      where open LogRelKit (rec l<)

    infix 4 _‚ä©‚Çó_‚â°_‚à∑_/_

    _‚ä©‚Çó_‚â°_‚à∑_/_ : (Œì : Cons Œ∫ ‚Ñì) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚Çó A ‚Üí Set a
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / U·µ£ ‚ä©A = Œì ‚ä©‚ÇÅU t ‚â° u ‚à∑U/ _‚ä©‚ÇÅU_.l‚Ä≤< ‚ä©A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / ‚Ñï·µ£ D = Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Empty·µ£ D = Œì ‚ä©Empty t ‚â° u ‚à∑Empty
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Unit·µ£ {s} D = Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑Unit
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / ne neA = Œì ‚ä©ne t ‚â° u ‚à∑ A / neA
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ†! Œ†A = Œì ‚ä©‚ÇóŒ† t ‚â° u ‚à∑ A / Œ†A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / B·µ£ BŒ£! Œ£A  = Œì ‚ä©‚ÇóŒ£ t ‚â° u ‚à∑ A / Œ£A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A = Œì ‚ä©‚ÇóId t ‚â° u ‚à∑ A / ‚ä©A
    Œì ‚ä©‚Çó t ‚â° u ‚à∑ A / emb l< [A] = Œì ‚ä© t ‚â° u ‚à∑ A / [A]
      where open LogRelKit (rec l<)

    kit : LogRelKit
    kit = Kit _‚ä©‚ÇÅU_ _‚ä©‚ÇóB‚ü®_‚ü©_ _‚ä©‚ÇóId_
              _‚ä©‚Çó_ _‚ä©‚Çó_‚â°_/_ _‚ä©‚Çó_‚à∑_/_ _‚ä©‚Çó_‚â°_‚à∑_/_

open LogRel public
  using
    (U·µ£; ‚Ñï·µ£; Empty·µ£; Unit·µ£; ne; B·µ£; B‚Çå; Id·µ£; Id‚Çå; emb; U‚Çú; U‚Çú‚Çå;
     module _‚ä©‚ÇÅU_; module _‚ä©‚ÇÅU_‚à∑U/_; module _‚ä©‚ÇÅU_‚â°_‚à∑U/_;
     module _‚ä©‚ÇóB‚ü®_‚ü©_; module _‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_;
     module _‚ä©‚ÇóId_; module _‚ä©‚ÇóId_‚â°_/_)

-- Patterns for the non-records of Œ†
pattern Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ = f , d , funcF , f‚â°f , [f] , [f]‚ÇÅ
pattern Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g] = f , g , d , d‚Ä≤ , funcF , funcG , f‚â°g , [f] , [g] , [f‚â°g]
pattern Œ£‚Çú p d p‚â°p pProd prop =  p , d , p‚â°p , pProd , prop
pattern Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] prop = p , r , d , d‚Ä≤ , p‚âÖr , [t] , [u] , pProd , rProd , prop

pattern U·µ£‚Ä≤ a b c = U·µ£ (U·µ£ a b c)
pattern ne‚Ä≤ a b c d = ne (ne a b c d)
pattern B·µ£‚Ä≤ W a b c d e f g h = B·µ£ W (B·µ£ a b c d e f g h)
pattern Œ†·µ£‚Ä≤ a b c d e f g h = B·µ£‚Ä≤ BŒ†! a b c d e f g h
pattern Œ£·µ£‚Ä≤ a b c d e f g h = B·µ£‚Ä≤ BŒ£! a b c d e f g h

mutual

  -- A LogRelKit for the given Universe-level.

  kit : Universe-level ‚Üí LogRelKit
  kit ‚Ñì = LogRel.kit ‚Ñì kit‚Ä≤

  -- A LogRelKit for¬†m.

  kit‚Ä≤ : {n m : Universe-level} ‚Üí m <·µò n ‚Üí LogRelKit
  kit‚Ä≤ {m = m} ‚â§·µò-refl = kit m
  kit‚Ä≤ (‚â§·µò-step p) = kit‚Ä≤ p

infix 4 _‚ä©‚Ä≤‚ü®_‚ü©U_

_‚ä©‚Ä≤‚ü®_‚ü©U_ : Cons Œ∫ ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©U A = Œì ‚ä©U A
  where
  open LogRelKit (kit l)

infix 4 _‚ä©‚Ä≤‚ü®_‚ü©B‚ü®_‚ü©_

_‚ä©‚Ä≤‚ü®_‚ü©B‚ü®_‚ü©_ : Cons Œ∫ ‚Ñì ‚Üí Universe-level ‚Üí BindingType ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® W ‚ü© A = Œì ‚ä©B‚ü® W ‚ü© A
  where
  open LogRelKit (kit l)

infix 4 _‚ä©‚Ä≤‚ü®_‚ü©Id_

_‚ä©‚Ä≤‚ü®_‚ü©Id_ : Cons Œ∫ ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A = Œì ‚ä©Id A
  where
  open LogRelKit (kit l)

-- Reducibility of types

infix 4 _‚ä©‚ü®_‚ü©_

_‚ä©‚ü®_‚ü©_ : Cons Œ∫ ‚Ñì ‚Üí Universe-level ‚Üí Term ‚Ñì ‚Üí Set a
Œì ‚ä©‚ü® l ‚ü© A = Œì ‚ä© A
  where
  open LogRelKit (kit l)

-- Equality of reducibile types

infix 4 _‚ä©‚ü®_‚ü©_‚â°_/_

_‚ä©‚ü®_‚ü©_‚â°_/_ :
  (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (A _ : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A = Œì ‚ä© A ‚â° B / ‚ä©A
  where
  open LogRelKit (kit l)

-- Reducibility of terms

infix 4 _‚ä©‚ü®_‚ü©_‚à∑_/_

_‚ä©‚ü®_‚ü©_‚à∑_/_ :
  (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (_ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A = Œì ‚ä© t ‚à∑ A / ‚ä©A
  where
  open LogRelKit (kit l)

-- Equality of reducibile terms

infix 4 _‚ä©‚ü®_‚ü©_‚â°_‚à∑_/_

_‚ä©‚ü®_‚ü©_‚â°_‚à∑_/_ :
  (Œì : Cons Œ∫ ‚Ñì) (l : Universe-level) (_ _ A : Term ‚Ñì) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí
  Set a
Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A = Œì ‚ä© t ‚â° u ‚à∑ A / ‚ä©A
  where
  open LogRelKit (kit l)

------------------------------------------------------------------------
-- Some definitions related to the identity type

-- A view of parts of _‚ä©‚ÇóId_‚à∑_/_.

data ‚ä©Id‚à∑-view
  {A : Term ‚Ñì} (‚ä©A : Œó ‚ä©‚Ä≤‚ü® l ‚ü©Id A) :
  ‚àÄ t ‚Üí Identity‚Çó (Œó .defs) t ‚Üí Set a where
  rfl·µ£ : let open _‚ä©‚ÇóId_ ‚ä©A in
         Œó ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty ‚Üí
         ‚ä©Id‚à∑-view ‚ä©A rfl rfl‚Çô
  ne   : let open _‚ä©‚ÇóId_ ‚ä©A in
         (u-n : Neutral‚Çó (Œó .defs) u) ‚Üí
         Œó ‚ä¢~ u ‚à∑ Id Ty lhs rhs ‚Üí
         ‚ä©Id‚à∑-view ‚ä©A u (ne u-n)

-- The view is inhabited for well-formed identity terms.

‚ä©Id‚à∑-view-inhabited :
  ‚àÄ {A} {‚ä©A : Œó ‚ä©‚Ä≤‚ü® l ‚ü©Id A}
  ((u , _ , u-id , _) : Œó ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚ä©Id‚à∑-view ‚ä©A u u-id
‚ä©Id‚à∑-view-inhabited = Œª where
  (_ , _ , rfl‚Çô , lhs‚â°rhs) ‚Üí rfl·µ£ lhs‚â°rhs
  (_ , _ , ne u-n , u~u)   ‚Üí ne u-n u~u

-- A view of parts of _‚ä©‚ÇóId_‚â°_‚à∑_/_.

data ‚ä©Id‚â°‚à∑-view
  {Œì : Cons Œ∫ ‚Ñì} (lhs rhs {Ty} : Term ‚Ñì) (‚ä©Ty : Œì ‚ä©‚ü® l ‚ü© Ty) :
  ‚àÄ t ‚Üí Identity‚Çó (Œì .defs) t ‚Üí ‚àÄ u ‚Üí Identity‚Çó (Œì .defs) u ‚Üí Set a
  where
  rfl‚Çå : (lhs‚â°rhs : Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty) ‚Üí
         ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty rfl rfl‚Çô rfl rfl‚Çô
  ne   : (t‚Ä≤-n : Neutral‚Çó (Œì .defs) t‚Ä≤) (u‚Ä≤-n : Neutral‚Çó (Œì .defs) u‚Ä≤) ‚Üí
         Œì ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs ‚Üí
         ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty t‚Ä≤ (ne t‚Ä≤-n) u‚Ä≤ (ne u‚Ä≤-n)

-- The view is inhabited for instances of "well-formed identity term
-- equality".

‚ä©Id‚â°‚à∑-view-inhabited :
  ‚àÄ {A}
  (‚ä©A : Œó ‚ä©‚Ä≤‚ü® l ‚ü©Id A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  ((t‚Ä≤ , u‚Ä≤ , _ , _ , t‚Ä≤-id , u‚Ä≤-id , _) :
   Œó ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚ä©Id‚â°‚à∑-view lhs rhs ‚ä©Ty t‚Ä≤ t‚Ä≤-id u‚Ä≤ u‚Ä≤-id
‚ä©Id‚â°‚à∑-view-inhabited _ = Œª where
  (_ , _ , _ , _ , rfl‚Çô , rfl‚Çô , lhs‚â°rhs) ‚Üí
    rfl‚Çå lhs‚â°rhs
  (_ , _ , _ , _ , ne t‚Ä≤-n , ne u‚Ä≤-n , t‚Ä≤~u‚Ä≤) ‚Üí
    ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤
  (_ , _ , _ , _ , rfl‚Çô , ne _ , ())
  (_ , _ , _ , _ , ne _ , rfl‚Çô , ())

-- A kind of constructor for _‚ä©‚ÇóId_‚â°_‚à∑_/_.

‚ä©Id‚â°‚à∑ :
  ‚àÄ {A} {‚ä©A : Œó ‚ä©‚Ä≤‚ü® l ‚ü©Id A} ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  ((t‚Ä≤ , _ , t‚Ä≤-id , _) : Œó ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A)
  ((u‚Ä≤ , _ , u‚Ä≤-id , _) : Œó ‚ä©‚ü® l ‚ü© u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  Identity-rec t‚Ä≤-id
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä§)
       (Lift _ ‚ä•))
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä•)
       (Œó ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs)) ‚Üí
  Œó ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A
‚ä©Id‚â°‚à∑ ‚ä©t@(t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , _) ‚ä©u@(u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , _) rest =
    t‚Ä≤ , u‚Ä≤ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , t‚Ä≤-id , u‚Ä≤-id
  , (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
       (rfl·µ£ lhs‚â°rhs) ‚Üí case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (rfl·µ£ _) ‚Üí lhs‚â°rhs
         (ne _ _) ‚Üí case rest of Œª ()
       (ne _ _) ‚Üí case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (rfl·µ£ _) ‚Üí case rest of Œª ()
         (ne _ _) ‚Üí rest)

-- A kind of inverse of ‚ä©Id‚â°‚à∑.

‚ä©Id‚â°‚à∑‚Åª¬π :
  ‚àÄ {A}
  (‚ä©A : Œó ‚ä©‚Ä≤‚ü® l ‚ü©Id A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  Œó ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / Id·µ£ ‚ä©A ‚Üí
  ‚àÉ Œª (‚ä©t@(t‚Ä≤ , _ , t‚Ä≤-id , _) : Œó ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  ‚àÉ Œª (‚ä©u@(u‚Ä≤ , _ , u‚Ä≤-id , _) : Œó ‚ä©‚ü® l ‚ü© u ‚à∑ A / Id·µ£ ‚ä©A) ‚Üí
  Identity-rec t‚Ä≤-id
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä§)
       (Lift _ ‚ä•))
    (Identity-rec u‚Ä≤-id
       (Lift _ ‚ä•)
       (Œó ‚ä¢ t‚Ä≤ ~ u‚Ä≤ ‚à∑ Id Ty lhs rhs))
‚ä©Id‚â°‚à∑‚Åª¬π ‚ä©A t‚â°u@(t‚Ä≤ , u‚Ä≤ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , t‚Ä≤-id , u‚Ä≤-id , rest) =
  case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
    (rfl‚Çå lhs‚â°rhs) ‚Üí
        (t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , lhs‚â°rhs)
      , (u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , lhs‚â°rhs)
      , _
    (ne _ _ t‚Ä≤~u‚Ä≤) ‚Üí
      let ~t‚Ä≤ , ~u‚Ä≤ = wf-‚ä¢~‚à∑ t‚Ä≤~u‚Ä≤ in
        (t‚Ä≤ , t‚áí*t‚Ä≤ , t‚Ä≤-id , ~t‚Ä≤)
      , (u‚Ä≤ , u‚áí*u‚Ä≤ , u‚Ä≤-id , ~u‚Ä≤)
      , t‚Ä≤~u‚Ä≤
