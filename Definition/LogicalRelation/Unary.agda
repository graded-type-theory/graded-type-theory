------------------------------------------------------------------------
-- Unary variants of some relations
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Unary
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Whnf R
open import Definition.LogicalRelation.Weakening.Restricted R

open import Definition.Typed R
open import Definition.Typed.Properties R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Sum

private variable
  n              : Nat
  Œì              : Con Term _
  A B t t‚ÇÅ t‚ÇÇ t‚Ä≤ : Term _
  l l‚Ä≤           : Universe-level
  l‚Ä≤<l           : _ <·µò _
  s              : Strength
  t-prod t-prod‚Ä≤ : Product _
  t-id           : Identity _
  p q            : M

------------------------------------------------------------------------
-- Neutral terms

-- Unary reducibility for neutral terms.

record _‚ä©neNf_‚à∑_ (Œì : Con Term n) (k A : Term n) : Set a where
  no-eta-equality
  pattern
  constructor neNf‚Çú
  field
    neutrals-included : Neutrals-included
    neK               : Neutral k
    k‚â°k               : Œì ‚ä¢~ k ‚à∑ A

opaque

  -- The relation _‚ä©neNf_‚à∑_ is pointwise logically equivalent to the
  -- diagonal of _‚ä©neNf_‚â°_‚à∑_.

  ‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ : Œì ‚ä©neNf t ‚à∑ B ‚áî Œì ‚ä©neNf t ‚â° t ‚à∑ B
  ‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ =
      (Œª where
         (neNf‚Çú a b c) ‚Üí neNf‚Çú‚Çå a b b c)
    , (Œª where
         (neNf‚Çú‚Çå a b _ c) ‚Üí neNf‚Çú a b c)

-- Unary reducibility for terms that reduce to neutral terms.

record _‚ä©ne_‚à∑_/_ (Œì : Con Term n) (t A : Term n) (‚ä©A : Œì ‚ä©ne A) :
         Set a where
  no-eta-equality
  pattern
  constructor ne‚Çú
  open _‚ä©ne_ ‚ä©A
  field
    k  : Term n
    d  : Œì ‚ä¢ t ‚áí* k ‚à∑ K
    nf : Œì ‚ä©neNf k ‚à∑ K

opaque

  -- The relation _‚ä©ne_‚à∑_/_ is pointwise logically equivalent to the
  -- diagonal of _‚ä©ne_‚â°_‚à∑_.

  ‚ä©ne‚à∑‚áî‚ä©ne‚â°‚à∑ : ‚àÄ {‚ä©B} ‚Üí Œì ‚ä©ne t ‚à∑ B / ‚ä©B ‚áî Œì ‚ä©ne t ‚â° t ‚à∑ B / ‚ä©B
  ‚ä©ne‚à∑‚áî‚ä©ne‚â°‚à∑ =
      (Œª where
         (ne‚Çú _ t‚áíu ‚ä©u) ‚Üí ne‚Çú‚Çå _ _ t‚áíu t‚áíu (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÅ ‚ä©u))
    , (Œª where
         (ne‚Çú‚Çå _ _ t‚áíu t‚áív u‚â°v@(neNf‚Çú‚Çå _ u-ne v-ne _)) ‚Üí
           ne‚Çú _ t‚áíu
             (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÇ $
              PE.subst (flip (_‚ä©neNf_‚â°_‚à∑_ _ _) _)
                (whrDet*Term (t‚áív , ne v-ne) (t‚áíu , ne u-ne)) u‚â°v))

------------------------------------------------------------------------
-- U

-- Unary reducibility for universe terms.

record _‚ä©U_‚à∑U/_ (Œì : Con Term n) (t : Term n) (l‚Ä≤<l : l‚Ä≤ <·µò l) :
         Set a where
  no-eta-equality
  pattern
  constructor U‚Çú
  open LogRelKit (kit‚Ä≤ l‚Ä≤<l)
  field
    C      : Term n
    ‚áí*C    : Œì ‚ä¢ t ‚áí* C ‚à∑ U l‚Ä≤
    C-type : Type C
    ‚âÖC     : Œì ‚ä¢‚âÖ C ‚à∑ U l‚Ä≤
    ‚ä©t     : Œì ‚ä© t

opaque

  -- The relation _‚ä©U_‚à∑U/_ is pointwise logically equivalent to
  -- the diagonal of a certain relation.

  ‚ä©U‚à∑U‚áî‚ä©U‚â°‚à∑U : Œì ‚ä©U t ‚à∑U/ l‚Ä≤<l ‚áî LogRel._‚ä©‚ÇÅU_‚â°_‚à∑U/_ _ kit‚Ä≤ Œì t t l‚Ä≤<l
  ‚ä©U‚à∑U‚áî‚ä©U‚â°‚à∑U {l‚Ä≤<l} =
      (Œª where
         (U‚Çú _ t‚áíA A-type ‚âÖA ‚ä©t) ‚Üí
           U‚Çú‚Çå _ _ t‚áíA t‚áíA A-type A-type ‚âÖA ‚ä©t ‚ä©t
             (‚ä©<‚â°‚áî‚ä©‚â° l‚Ä≤<l .proj‚ÇÇ $ reflEq $ ‚ä©<‚áî‚ä© l‚Ä≤<l .proj‚ÇÅ ‚ä©t))
    , (Œª where
         (U‚Çú‚Çå _ _ t‚áíA t‚áíB A-type B-type A‚âÖB ‚ä©t _ _) ‚Üí
           U‚Çú _ t‚áíA A-type
             (PE.subst (flip (_‚ä¢_‚âÖ_‚à∑_ _ _) _)
                (whrDet*Term (t‚áíB , typeWhnf B-type)
                   (t‚áíA , typeWhnf A-type))
                A‚âÖB)
             ‚ä©t)

------------------------------------------------------------------------
-- Empty

-- A property for terms of the empty type in WHNF.

data Empty-prop (Œì : Con Term n) (t : Term n) : Set a where
  ne : Œì ‚ä©neNf t ‚à∑ Empty ‚Üí Empty-prop Œì t

opaque

  -- The relation Empty-prop is pointwise logically equivalent to the
  -- diagonal of [Empty]-prop.

  Empty-prop‚áî[Empty]-prop : Empty-prop Œì t ‚áî [Empty]-prop Œì t t
  Empty-prop‚áî[Empty]-prop =
      (Œª { (ne ‚ä©t) ‚Üí ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÅ ‚ä©t) })
    , (Œª { (ne ‚ä©t) ‚Üí ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÇ ‚ä©t) })

opaque

  -- If t satisfies Empty-prop¬†Œì, then t is a neutral term (a specific
  -- kind of WHNF).

  empty : Empty-prop Œì t ‚Üí Neutral t
  empty (ne (neNf‚Çú _ t-ne _)) = t-ne

-- Unary reducibility for terms of the empty type.

record _‚ä©Empty_‚à∑Empty (Œì : Con Term n) (t : Term n) : Set a where
  no-eta-equality
  pattern
  constructor Empty‚Çú
  field
    u    : Term n
    ‚áí*u  : Œì ‚ä¢ t ‚áí* u ‚à∑ Empty
    ‚âÖu   : Œì ‚ä¢‚âÖ u ‚à∑ Empty
    prop : Empty-prop Œì u

opaque

  -- The relation _‚ä©Empty_‚à∑Empty is pointwise logically equivalent to
  -- the diagonal of _‚ä©Empty_‚â°_‚à∑Empty.

  ‚ä©Empty‚à∑Empty‚áî‚ä©Empty‚â°‚à∑Empty : Œì ‚ä©Empty t ‚à∑Empty ‚áî Œì ‚ä©Empty t ‚â° t ‚à∑Empty
  ‚ä©Empty‚à∑Empty‚áî‚ä©Empty‚â°‚à∑Empty =
      (Œª where
         (Empty‚Çú _ ‚áíu ‚âÖu u-prop) ‚Üí
           Empty‚Çú‚Çå _ _ ‚áíu ‚áíu ‚âÖu
             (Empty-prop‚áî[Empty]-prop .proj‚ÇÅ u-prop))
    , (Œª where
         (Empty‚Çú‚Çå u v t‚áíu t‚áív u‚âÖv u-v-prop) ‚Üí
           let u-ne , v-ne = esplit u-v-prop
               v‚â°u         = whrDet*Term (t‚áív , ne v-ne) (t‚áíu , ne u-ne)
           in
           Empty‚Çú _ t‚áíu (PE.subst (flip (_‚ä¢_‚âÖ_‚à∑_ _ _) _) v‚â°u u‚âÖv)
             (Empty-prop‚áî[Empty]-prop .proj‚ÇÇ $
              PE.subst ([Empty]-prop _ _) v‚â°u u-v-prop))

------------------------------------------------------------------------
-- Unit

-- A property for terms of unit type in WHNF.

data Unit-prop‚Ä≤ (Œì : Con Term n) (l : Universe-level) (s : Strength) :
       Term n ‚Üí Set a where
  star·µ£ : Unit-prop‚Ä≤ Œì l s (star s l)
  ne    : Œì ‚ä©neNf t ‚à∑ Unit s l ‚Üí Unit-prop‚Ä≤ Œì l s t

opaque

  -- The relation Unit-prop‚Ä≤¬†Œì¬†l¬†ùï® is pointwise logically equivalent
  -- to the diagonal of [Unit ∑]-prop¬†Œì¬†l.

  Unit-prop‚Ä≤-ùï®‚áî[Unit ∑]-prop : Unit-prop‚Ä≤ Œì l ùï® t ‚áî [Unit ∑]-prop Œì l t t
  Unit-prop‚Ä≤-ùï®‚áî[Unit ∑]-prop =
      (Œª where
         star·µ£   ‚Üí star·µ£
         (ne ‚ä©t) ‚Üí ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÅ ‚ä©t))
    , flip lemma PE.refl
    where
    lemma : [Unit ∑]-prop Œì l t t‚Ä≤ ‚Üí t PE.‚â° t‚Ä≤ ‚Üí Unit-prop‚Ä≤ Œì l ùï® t
    lemma star·µ£ _         = star·µ£
    lemma (ne ‚ä©t) PE.refl = ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÇ ‚ä©t)

-- A property for terms of unit type in WHNF.

data Unit-prop (Œì : Con Term n) (l : Universe-level) :
       Strength ‚Üí Term n ‚Üí Set a where
  Unit‚Çú ∑ : Unit-prop‚Ä≤ Œì l ùï® t ‚Üí ¬¨ Unit ∑-Œ∑ ‚Üí Unit-prop Œì l ùï® t
  Unit‚ÇúÀ¢ : Unit-with-Œ∑ s ‚Üí Unit-prop Œì l s t

opaque

  -- The relation Unit-prop is pointwise logically equivalent to the
  -- diagonal of [Unit]-prop.

  Unit-prop‚áî[Unit]-prop : Unit-prop Œì l s t ‚áî [Unit]-prop Œì l s t t
  Unit-prop‚áî[Unit]-prop =
      (Œª where
         (Unit‚Çú ∑ prop no-Œ∑) ‚Üí
           Unit‚Çú‚Çå ∑ (Unit-prop‚Ä≤-ùï®‚áî[Unit ∑]-prop .proj‚ÇÅ prop) no-Œ∑
         (Unit‚ÇúÀ¢ Œ∑) ‚Üí Unit‚Çú‚ÇåÀ¢ Œ∑)
    , (Œª where
         (Unit‚Çú‚Çå ∑ prop no-Œ∑) ‚Üí
           Unit‚Çú ∑ (Unit-prop‚Ä≤-ùï®‚áî[Unit ∑]-prop .proj‚ÇÇ prop) no-Œ∑
         (Unit‚Çú‚ÇåÀ¢ Œ∑) ‚Üí Unit‚ÇúÀ¢ Œ∑)

opaque

  -- A "smart constructor" for Unit-prop.

  Unit-prop‚Ä≤‚ÜíUnit-prop :
    Unit-prop‚Ä≤ Œì l s t ‚Üí
    Unit-prop Œì l s t
  Unit-prop‚Ä≤‚ÜíUnit-prop {s} prop =
    case Unit-with-Œ∑? s of Œª where
      (inj‚ÇÅ Œ∑)                ‚Üí Unit‚ÇúÀ¢ Œ∑
      (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí Unit‚Çú ∑ prop no-Œ∑

-- Unary reducibility for terms of unit type.

record _‚ä©Unit‚ü®_,_‚ü©_‚à∑Unit
         (Œì : Con Term n) (l : Universe-level) (s : Strength)
         (t : Term n) :
         Set a where
  no-eta-equality
  pattern
  constructor Unit‚Çú
  field
    u    : Term n
    ‚Üòu   : Œì ‚ä¢ t ‚Üò u ‚à∑ Unit s l
    prop : Unit-prop Œì l s u

opaque

  -- The relation _‚ä©Unit‚ü®_,_‚ü©_‚à∑Unit is pointwise logically equivalent
  -- to the diagonal of _‚ä©Unit‚ü®_,_‚ü©_‚â°_‚à∑Unit.

  ‚ä©Unit‚à∑Unit‚áî‚ä©Unit‚â°‚à∑Unit :
    Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit ‚áî Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° t ‚à∑Unit
  ‚ä©Unit‚à∑Unit‚áî‚ä©Unit‚â°‚à∑Unit =
      (Œª (Unit‚Çú _ ‚Üòu prop) ‚Üí
         Unit‚Çú‚Çå _ _ ‚Üòu ‚Üòu (Unit-prop‚áî[Unit]-prop .proj‚ÇÅ prop))
    , (Œª (Unit‚Çú‚Çå _ _ ‚Üòu ‚Üòv prop) ‚Üí
         Unit‚Çú _ ‚Üòu
           (Unit-prop‚áî[Unit]-prop .proj‚ÇÇ $
            PE.subst ([Unit]-prop _ _ _ _) (whrDet*Term ‚Üòv ‚Üòu) prop))

------------------------------------------------------------------------
-- Œ†

-- Unary term reducibility for Œ†-types.

record _‚ä©‚ü®_‚ü©Œ†_‚à∑_/_ (Œì : Con Term n) (l : Universe-level) (t A : Term n)
         (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© A) :
         Set a where
  no-eta-equality
  pattern
  constructor Œ†‚Çú
  open _‚ä©‚ÇóB‚ü®_‚ü©_ ‚ä©A
  field
    u     : Term n
    ‚áí*u   : Œì ‚ä¢ t ‚áí* u ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
    u-fun : Function u
    ‚âÖu    : Œì ‚ä¢‚âÖ u ‚à∑ Œ† p , q ‚ñ∑ F ‚ñπ G
    ‚ä©u    : ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v w}
            (Œî‚äáŒì : œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì)
            (‚ä©v : Œî ‚ä©‚ü® l ‚ü© v ‚à∑ wk œÅ F / [F] Œî‚äáŒì) ‚Üí
            Œî ‚ä©‚ü® l ‚ü© w ‚à∑ wk œÅ F / [F] Œî‚äáŒì ‚Üí
            Œî ‚ä©‚ü® l ‚ü© v ‚â° w ‚à∑ wk œÅ F / [F] Œî‚äáŒì ‚Üí
            Œî ‚ä©‚ü® l ‚ü© wk œÅ u ‚àò‚ü® p ‚ü© v ‚â° wk œÅ u ‚àò‚ü® p ‚ü© w ‚à∑
              wk (lift œÅ) G [ v ]‚ÇÄ / [G] Œî‚äáŒì ‚ä©v

opaque

  -- The relation _‚ä©‚ü®_‚ü©Œ†_‚à∑_/_ is pointwise logically equivalent to the
  -- diagonal of a certain relation.

  ‚ä©Œ†‚à∑‚áî‚ä©Œ†‚â°‚à∑ :
    (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü©Œ† t ‚à∑ A / ‚ä©A ‚áî
    LogRel._‚ä©‚ÇóŒ†_‚â°_‚à∑_/_ l kit‚Ä≤ Œì t t A ‚ä©A
  ‚ä©Œ†‚à∑‚áî‚ä©Œ†‚â°‚à∑ record{} =
      (Œª (Œ†‚Çú _ t‚áíu u-fun ‚âÖu ‚ä©u) ‚Üí
         _ , _ , t‚áíu , t‚áíu , u-fun , u-fun , ‚âÖu , ‚ä©u)
    , (Œª (_ , _ , t‚áíu , t‚áív , u-fun , v-fun , u‚âÖv , u‚â°v) ‚Üí
         case whrDet*Term (t‚áíu , functionWhnf u-fun)
                (t‚áív , functionWhnf v-fun) of Œª {
           PE.refl ‚Üí
         Œ†‚Çú _ t‚áíu u-fun u‚âÖv (Œª {_ _ _ _} ‚Üí u‚â°v) })

------------------------------------------------------------------------
-- Œ£

-- A property for terms of Œ£-type in WHNF.

data Œ£-prop (Œì : Con Term n) :
  (t : Term n) (s : Strength) ‚Üí Product t ‚Üí
  Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A ‚Üí Set a where
  ùï§ :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© A} ‚Üí
    let open _‚ä©‚ÇóB‚ü®_‚ü©_ ‚ä©A
        id-Œì = id (wfEq (‚âÖ-eq A‚â°A))
    in
    (t-prod : Product t) ‚Üí
    (‚ä©fst : Œì ‚ä©‚ü® l ‚ü© fst p t ‚à∑ wk id F / [F] id-Œì) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© snd p t ‚à∑ wk (lift id) G [ fst p t ]‚ÇÄ / [G] id-Œì ‚ä©fst ‚Üí
    Œ£-prop Œì t ùï§ t-prod ‚ä©A
  ùï®-prod‚Çô :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ ùï® p q ‚ü© A} ‚Üí
    let open _‚ä©‚ÇóB‚ü®_‚ü©_ ‚ä©A
        id-Œì = id (wfEq (‚âÖ-eq A‚â°A))
    in
    (‚ä©t‚ÇÅ : Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚à∑ wk id F / [F] id-Œì) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÇ ‚à∑ wk (lift id) G [ t‚ÇÅ ]‚ÇÄ / [G] id-Œì ‚ä©t‚ÇÅ ‚Üí
    Œ£-prop Œì (prod ∑ p t‚ÇÅ t‚ÇÇ) ùï® prod‚Çô ‚ä©A
  ùï®-ne :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ ùï® p q ‚ü© A} ‚Üí
    let open _‚ä©‚ÇóB‚ü®_‚ü©_ ‚ä©A in
    Neutrals-included ‚Üí
    (t-ne : Neutral t) ‚Üí
    Œì ‚ä¢~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G ‚Üí
    Œ£-prop Œì t ùï® (ne t-ne) ‚ä©A

opaque

  private

    -- Some lemmas used below.

    [Œ£]-prop‚ÜíŒ£-prop :
      ‚àÄ s t-prod t-prod‚Ä≤ (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A) ‚Üí
      LogRel.[Œ£]-prop l kit‚Ä≤ s t t Œì ‚ä©A t-prod t-prod‚Ä≤ ‚Üí
      Œ£-prop Œì t s t-prod ‚ä©A
    [Œ£]-prop‚ÜíŒ£-prop ùï§ t-prod _ record{} (‚ä©fst , _ , _ , ‚ä©snd) =
      ùï§ t-prod ‚ä©fst ‚ä©snd
    [Œ£]-prop‚ÜíŒ£-prop
      ùï® prod‚Çô prod‚Çô record{}
      (PE.refl , PE.refl , PE.refl , _ , ‚ä©t‚ÇÅ , _ , _ , ‚ä©t‚ÇÇ) =
      ùï®-prod‚Çô ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ
    [Œ£]-prop‚ÜíŒ£-prop ùï® (ne t-ne) (ne _) record{} (inc , ~t) =
      ùï®-ne inc t-ne ~t
    [Œ£]-prop‚ÜíŒ£-prop ùï® prod‚Çô  (ne _) record{} ()
    [Œ£]-prop‚ÜíŒ£-prop ùï® (ne _) prod‚Çô  record{} ()

    Œ£-prop‚Üí[Œ£]-prop :
      (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A) ‚Üí
      ‚àÄ t-prod‚Ä≤ ‚Üí
      Œ£-prop Œì t s t-prod ‚ä©A ‚Üí
      LogRel.[Œ£]-prop l kit‚Ä≤ s t t Œì ‚ä©A t-prod t-prod‚Ä≤
    Œ£-prop‚Üí[Œ£]-prop record{} _ (ùï§ _ ‚ä©fst ‚ä©snd) =
      ‚ä©fst , ‚ä©fst , ‚ä©fst , ‚ä©snd
    Œ£-prop‚Üí[Œ£]-prop record{} prod‚Çô (ùï®-prod‚Çô ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ) =
      PE.refl , PE.refl , PE.refl , PE.refl ,
      ‚ä©t‚ÇÅ , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ
    Œ£-prop‚Üí[Œ£]-prop record{} (ne _) (ùï®-ne inc _ ~t) =
      inc , ~t
    Œ£-prop‚Üí[Œ£]-prop record{} (ne ()) (ùï®-prod‚Çô _ _)
    Œ£-prop‚Üí[Œ£]-prop record{} prod‚Çô (ùï®-ne _ () _)

  -- A variant of Œ£-prop‚áî[Œ£]-prop (which is defined below).

  Œ£-prop‚áî[Œ£]-prop‚Ä≤ :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A} ‚Üí
    Œ£-prop Œì t s t-prod ‚ä©A ‚áî
    LogRel.[Œ£]-prop l kit‚Ä≤ s t t Œì ‚ä©A t-prod t-prod‚Ä≤
  Œ£-prop‚áî[Œ£]-prop‚Ä≤ = Œ£-prop‚Üí[Œ£]-prop _ _ , [Œ£]-prop‚ÜíŒ£-prop _ _ _ _

  -- The relation Œ£-prop is pointwise logically equivalent to a
  -- certain relation.

  Œ£-prop‚áî[Œ£]-prop :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A} ‚Üí
    Œ£-prop Œì t s t-prod ‚ä©A ‚áî
    LogRel.[Œ£]-prop l kit‚Ä≤ s t t Œì ‚ä©A t-prod t-prod
  Œ£-prop‚áî[Œ£]-prop = Œ£-prop‚áî[Œ£]-prop‚Ä≤

-- Unary term reducibility for Œ£-types.

record _‚ä©‚ü®_‚ü©Œ£_‚à∑_/_ (Œì : Con Term n) (l : Universe-level) (t A : Term n)
         (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A) :
         Set a where
  no-eta-equality
  pattern
  constructor Œ£‚Çú
  open _‚ä©‚ÇóB‚ü®_‚ü©_ ‚ä©A
  field
    u      : Term n
    ‚áí*u    : Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ F ‚ñπ G
    u-prod : Product u
    ‚âÖu     : Œì ‚ä¢‚âÖ u ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ F ‚ñπ G
    prop   : Œ£-prop Œì u s u-prod ‚ä©A

opaque

  -- The relation _‚ä©‚ü®_‚ü©Œ£_‚à∑_/_ is pointwise logically equivalent to the
  -- diagonal of a certain relation.

  ‚ä©Œ£‚à∑‚áî‚ä©Œ£‚â°‚à∑ :
    (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©B‚ü® BŒ£ s p q ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü©Œ£ t ‚à∑ A / ‚ä©A ‚áî
    LogRel._‚ä©‚ÇóŒ£_‚â°_‚à∑_/_ l kit‚Ä≤ Œì t t A ‚ä©A
  ‚ä©Œ£‚à∑‚áî‚ä©Œ£‚â°‚à∑ record{} =
      (Œª (Œ£‚Çú _ t‚áíu u-prod ‚âÖu prop) ‚Üí
         _ , _ , t‚áíu , t‚áíu , ‚âÖu , u-prod , u-prod ,
         Œ£-prop‚áî[Œ£]-prop .proj‚ÇÅ prop)
    , (Œª (_ , _ , t‚áíu , t‚áív , u‚âÖv , u-prod , v-prod , prop) ‚Üí
         case whrDet*Term (t‚áíu , productWhnf u-prod)
                (t‚áív , productWhnf v-prod) of Œª {
           PE.refl ‚Üí
         Œ£‚Çú _ t‚áíu u-prod u‚âÖv (Œ£-prop‚áî[Œ£]-prop‚Ä≤ .proj‚ÇÇ prop) })

------------------------------------------------------------------------
-- ‚Ñï

mutual

  -- Unary reducibility for natural number terms.

  record _‚ä©‚Ñï_‚à∑‚Ñï (Œì : Con Term n) (t : Term n) : Set a where
    inductive
    no-eta-equality
    pattern
    constructor ‚Ñï‚Çú
    field
      u    : Term n
      ‚áí*u  : Œì ‚ä¢ t ‚áí* u ‚à∑ ‚Ñï
      ‚âÖu   : Œì ‚ä¢‚âÖ u ‚à∑ ‚Ñï
      prop : Natural-prop Œì u

  -- A property for natural number terms in WHNF.

  data Natural-prop (Œì : Con Term n) : Term n ‚Üí Set a where
    suc·µ£  : Œì ‚ä©‚Ñï t ‚à∑‚Ñï ‚Üí Natural-prop Œì (suc t)
    zero·µ£ : Natural-prop Œì zero
    ne    : Œì ‚ä©neNf t ‚à∑ ‚Ñï ‚Üí Natural-prop Œì t

private

  -- Some lemmas used below.

  opaque mutual

    ‚ä©‚Ñï‚à∑‚Ñï‚Üí‚ä©‚Ñï‚â°‚à∑‚Ñï : Œì ‚ä©‚Ñï t ‚à∑‚Ñï ‚Üí Œì ‚ä©‚Ñï t ‚â° t ‚à∑‚Ñï
    ‚ä©‚Ñï‚à∑‚Ñï‚Üí‚ä©‚Ñï‚â°‚à∑‚Ñï (‚Ñï‚Çú _ t‚áíu ‚âÖu u-prop) =
      ‚Ñï‚Çú‚Çå _ _ t‚áíu t‚áíu ‚âÖu (Natural-prop‚Üí[Natural]-prop u-prop)

    Natural-prop‚Üí[Natural]-prop :
      Natural-prop Œì t ‚Üí [Natural]-prop Œì t t
    Natural-prop‚Üí[Natural]-prop = Œª where
      (suc·µ£ ‚ä©t) ‚Üí suc·µ£ (‚ä©‚Ñï‚à∑‚Ñï‚Üí‚ä©‚Ñï‚â°‚à∑‚Ñï ‚ä©t)
      zero·µ£     ‚Üí zero·µ£
      (ne ‚ä©t)   ‚Üí ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÅ ‚ä©t)

  opaque mutual

    ‚ä©‚Ñï‚â°‚à∑‚Ñï‚Üí‚ä©‚Ñï‚à∑‚Ñï : Œì ‚ä©‚Ñï t ‚â° t ‚à∑‚Ñï ‚Üí Œì ‚ä©‚Ñï t ‚à∑‚Ñï
    ‚ä©‚Ñï‚â°‚à∑‚Ñï‚Üí‚ä©‚Ñï‚à∑‚Ñï (‚Ñï‚Çú‚Çå _ _ t‚áíu t‚áív u‚âÖv u-v-prop) =
      let u-nat , v-nat = split u-v-prop
          v‚â°u           = whrDet*Term (t‚áív , naturalWhnf v-nat)
                            (t‚áíu , naturalWhnf u-nat)
      in
      ‚Ñï‚Çú _ t‚áíu (PE.subst (flip (_‚ä¢_‚âÖ_‚à∑_ _ _) _) v‚â°u u‚âÖv)
        ([Natural]-prop‚ÜíNatural-prop v‚â°u u-v-prop)

    [Natural]-prop‚ÜíNatural-prop :
      t‚Ä≤ PE.‚â° t ‚Üí [Natural]-prop Œì t t‚Ä≤ ‚Üí Natural-prop Œì t
    [Natural]-prop‚ÜíNatural-prop PE.refl = Œª where
      (suc·µ£ ‚ä©t) ‚Üí suc·µ£ (‚ä©‚Ñï‚â°‚à∑‚Ñï‚Üí‚ä©‚Ñï‚à∑‚Ñï ‚ä©t)
      zero·µ£     ‚Üí zero·µ£
      (ne ‚ä©t)   ‚Üí ne (‚ä©neNf‚à∑‚áî‚ä©neNf‚â°‚à∑ .proj‚ÇÇ ‚ä©t)

opaque

  -- The relation _‚ä©‚Ñï_‚à∑‚Ñï is pointwise logically equivalent to the
  -- diagonal of _‚ä©‚Ñï_‚â°_‚à∑‚Ñï.

  ‚ä©‚Ñï‚à∑‚Ñï‚áî‚ä©‚Ñï‚â°‚à∑‚Ñï : Œì ‚ä©‚Ñï t ‚à∑‚Ñï ‚áî Œì ‚ä©‚Ñï t ‚â° t ‚à∑‚Ñï
  ‚ä©‚Ñï‚à∑‚Ñï‚áî‚ä©‚Ñï‚â°‚à∑‚Ñï = ‚ä©‚Ñï‚à∑‚Ñï‚Üí‚ä©‚Ñï‚â°‚à∑‚Ñï , ‚ä©‚Ñï‚â°‚à∑‚Ñï‚Üí‚ä©‚Ñï‚à∑‚Ñï

opaque

  -- The relation Natural-prop is pointwise logically equivalent to
  -- the diagonal of [Natural]-prop.

  Natural-prop‚áî[Natural]-prop : Natural-prop Œì t ‚áî [Natural]-prop Œì t t
  Natural-prop‚áî[Natural]-prop =
    Natural-prop‚Üí[Natural]-prop , [Natural]-prop‚ÜíNatural-prop PE.refl

opaque

  -- If t satisfies Natural-prop¬†Œì, then t is a "Natural" (a specific
  -- kind of WHNF).

  natural : Natural-prop Œì t ‚Üí Natural t
  natural (suc·µ£ _)              = suc‚Çô
  natural zero·µ£                 = zero‚Çô
  natural (ne (neNf‚Çú _ t-ne _)) = ne t-ne

------------------------------------------------------------------------
-- Id

opaque

  -- A variant of ‚ä©Id‚à∑-view‚áî (which is defined below).

  ‚ä©Id‚à∑-view‚áî‚Ä≤ :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A}
    {t-id t-id‚Ä≤ : Identity t} ‚Üí
    let open _‚ä©‚ÇóId_ ‚ä©A in
    ‚ä©Id‚à∑-view ‚ä©A t t-id ‚áî
    Identity-rec t-id
      (Identity-rec t-id‚Ä≤
         (Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
         (Lift _ ‚ä•))
      (Identity-rec t-id‚Ä≤
         (Lift _ ‚ä•)
         (Neutrals-included √ó
          Œì ‚ä¢~ t ‚à∑ Id Ty lhs rhs))
  ‚ä©Id‚à∑-view‚áî‚Ä≤ {Œì} {l} {A} {t} {‚ä©A} = lemma‚ÇÅ _ , lemma‚ÇÇ _ _
    where
    open _‚ä©‚ÇóId_ ‚ä©A

    lemma‚ÇÅ :
      (t-id‚Ä≤ : Identity t) ‚Üí
      ‚ä©Id‚à∑-view ‚ä©A t t-id ‚Üí
      Identity-rec t-id
        (Identity-rec t-id‚Ä≤
           (Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
           (Lift _ ‚ä•))
        (Identity-rec t-id‚Ä≤
           (Lift _ ‚ä•)
           (Neutrals-included √ó
            Œì ‚ä¢~ t ‚à∑ Id Ty lhs rhs))
    lemma‚ÇÅ rfl‚Çô    (rfl·µ£ lhs‚â°rhs) = lhs‚â°rhs
    lemma‚ÇÅ (ne _)  (ne inc _ ~t)  = inc , ~t
    lemma‚ÇÅ rfl‚Çô    (ne _ () _)
    lemma‚ÇÅ (ne ()) (rfl·µ£ _)

    lemma‚ÇÇ :
      (t-id t-id‚Ä≤ : Identity t) ‚Üí
      Identity-rec t-id
        (Identity-rec t-id‚Ä≤
           (Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
           (Lift _ ‚ä•))
        (Identity-rec t-id‚Ä≤
           (Lift _ ‚ä•)
           (Neutrals-included √ó
            Œì ‚ä¢~ t ‚à∑ Id Ty lhs rhs)) ‚Üí
      ‚ä©Id‚à∑-view ‚ä©A t t-id
    lemma‚ÇÇ rfl‚Çô      rfl‚Çô    lhs‚â°rhs    = rfl·µ£ lhs‚â°rhs
    lemma‚ÇÇ (ne t-ne) (ne _)  (inc , ~t) = ne inc t-ne ~t
    lemma‚ÇÇ rfl‚Çô      (ne ())
    lemma‚ÇÇ (ne ())   rfl‚Çô

  -- The relation ‚ä©Id‚à∑-view is pointwise logically equivalent to a
  -- certain relation.

  ‚ä©Id‚à∑-view‚áî :
    {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A} ‚Üí
    let open _‚ä©‚ÇóId_ ‚ä©A in
    ‚ä©Id‚à∑-view ‚ä©A t t-id ‚áî
    Identity-rec t-id
      (Identity-rec t-id
         (Œì ‚ä©‚ü® l ‚ü© lhs ‚â° rhs ‚à∑ Ty / ‚ä©Ty)
         (Lift _ ‚ä•))
      (Identity-rec t-id
         (Lift _ ‚ä•)
         (Neutrals-included √ó
          Œì ‚ä¢~ t ‚à∑ Id Ty lhs rhs))
  ‚ä©Id‚à∑-view‚áî = ‚ä©Id‚à∑-view‚áî‚Ä≤

-- Unary term reducibility for identity types.

record _‚ä©‚ü®_‚ü©Id_‚à∑_/_ (Œì : Con Term n) (l : Universe-level) (t A : Term n)
         (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A) :
         Set a where
  no-eta-equality
  pattern
  constructor Id‚Çú
  open _‚ä©‚ÇóId_ ‚ä©A
  field
    u    : Term n
    ‚áí*u  : Œì ‚ä¢ t ‚áí* u ‚à∑ Id Ty lhs rhs
    u-id : Identity u
    prop : ‚ä©Id‚à∑-view ‚ä©A u u-id

opaque

  -- The relation _‚ä©‚ü®_‚ü©Id_‚à∑_/_ is pointwise logically equivalent to
  -- the diagonal of a certain relation.

  ‚ä©Id‚à∑‚áî‚ä©Id‚â°‚à∑ :
    (‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü©Id t ‚à∑ A / ‚ä©A ‚áî
    LogRel._‚ä©‚ÇóId_‚â°_‚à∑_/_ l kit‚Ä≤ Œì t t A ‚ä©A
  ‚ä©Id‚à∑‚áî‚ä©Id‚â°‚à∑ _ =
      (Œª ‚ä©t ‚Üí
         let open _‚ä©‚ü®_‚ü©Id_‚à∑_/_ ‚ä©t in
         _ , _ , ‚áí*u , ‚áí*u , u-id , u-id , ‚ä©Id‚à∑-view‚áî .proj‚ÇÅ prop)
    , (Œª (u , v , t‚áíu , t‚áív , u-id , v-id , rest) ‚Üí
         record
           { ‚áí*u  = t‚áíu
           ; u-id = u-id
           ; prop =
               case whrDet*Term (t‚áíu , identityWhnf u-id)
                      (t‚áív , identityWhnf v-id) of Œª {
                 PE.refl ‚Üí
               ‚ä©Id‚à∑-view‚áî‚Ä≤ .proj‚ÇÇ rest }
           })
