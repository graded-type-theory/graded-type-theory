------------------------------------------------------------------------
-- Helper functions for working with kit of the Logical Relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Kit
  {a} {Mod : Set a}
  {ùïÑ : Modality Mod}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped Mod as U hiding (K)
open import Definition.Untyped.Neutral Mod type-variant
open import Definition.Typed.Properties R
open import Definition.Typed R
open import Definition.Typed.Weakening R
open import Definition.LogicalRelation R

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat using
  (Nat; 1+; _<‚Ä≤_; ‚â§‚Ä≤-step; ‚â§‚Ä≤-refl; _‚äî_; _‚â§‚Ä≤_;
    <‚áí<‚Ä≤; s‚â§s; ‚â§‚Ä≤‚áí‚â§; ‚â§‚áí‚â§‚Ä≤; ‚â§‚áípred‚â§; m‚â§n‚áím‚â§n‚äîo‚Ä≤;
    m‚â§n‚áím‚â§o‚äîn‚Ä≤; ‚â§‚Üí<s)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Unit

private
  variable
    p q : Mod
    ‚Ñì l n : Nat
    Œì Œî : Con Term ‚Ñì
    t t‚Ä≤ u u‚Ä≤ : Term _
    œÅ : Wk _ _
    s : Strength

emb-‚ä© : {l‚Ä≤ l : TypeLevel} {Œì : Con Term ‚Ñì} {A : Term ‚Ñì} ‚Üí l‚Ä≤ < l ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
emb-‚ä© p A = emb p (lemma p A)
  where
  lemma : {l‚Ä≤ l : TypeLevel} {Œì : Con Term ‚Ñì} {A : Term ‚Ñì} ‚Üí (p : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì A
  lemma ‚â§‚Ä≤-refl A = A
  lemma (‚â§‚Ä≤-step p) A = lemma p A

emb-‚ä©‚â§ : {l‚Ä≤ l : TypeLevel} {Œì : Con Term ‚Ñì} {A : Term ‚Ñì} ‚Üí l‚Ä≤ ‚â§ l ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
emb-‚ä©‚â§ ‚â§‚Ä≤-refl A = A
emb-‚ä©‚â§ (‚â§‚Ä≤-step p) A = emb (‚â§‚Üí<s p) (lemma (‚â§‚Üí<s p) A)
  where
  lemma : {l‚Ä≤ l : TypeLevel} {Œì : Con Term ‚Ñì} {A : Term ‚Ñì} ‚Üí (p : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì A
  lemma ‚â§‚Ä≤-refl A = A
  lemma (‚â§‚Ä≤-step p) A = lemma p A

opaque

  -- If l‚Ä≤<l¬†:¬†l‚Ä≤¬†<¬†l, then kit¬†l‚Ä≤ is equal to kit‚Ä≤¬†l‚Ä≤<l.

  kit‚â°kit‚Ä≤ : ‚àÄ {l‚Ä≤} (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí kit l‚Ä≤ PE.‚â° kit‚Ä≤ l‚Ä≤<l
  kit‚â°kit‚Ä≤ ‚â§‚Ä≤-refl = PE.refl
  kit‚â°kit‚Ä≤ (‚â§‚Ä≤-step p) = kit‚â°kit‚Ä≤ p

opaque
  kitIneq : {Œì : Con Term n} {t : Term n} {l l' l'' : TypeLevel} (p : l < l')
    ‚Üí (q : l < l'') ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì t ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ q) Œì t
  kitIneq  ‚â§‚Ä≤-refl ‚â§‚Ä≤-refl t = t
  kitIneq p (‚â§‚Ä≤-step q) t = kitIneq p q t
  kitIneq (‚â§‚Ä≤-step p) q t = kitIneq p q t

opaque
  unfolding kitIneq

  kitIneqEq : {Œì : Con Term n} {t u : Term n} {l l' l'' : TypeLevel} (p : l < l')
      ‚Üí (q : l < l'') ([t] : LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì t) ‚Üí LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ p) Œì t u [t]
      ‚Üí LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ q) Œì t u (kitIneq p q [t])
  kitIneqEq ‚â§‚Ä≤-refl ‚â§‚Ä≤-refl [t] eq = eq
  kitIneqEq (‚â§‚Ä≤-step p) ‚â§‚Ä≤-refl [t] eq = kitIneqEq p ‚â§‚Ä≤-refl [t] eq
  kitIneqEq ‚â§‚Ä≤-refl (‚â§‚Ä≤-step q) [t] eq = kitIneqEq ‚â§‚Ä≤-refl q [t] eq
  kitIneqEq (‚â§‚Ä≤-step p) (‚â§‚Ä≤-step q) [t] eq = kitIneqEq (‚â§‚Ä≤-step p) q [t] eq

kitToLogRel : {l‚Ä≤ l : TypeLevel} {Œì : Con Term n} {A : Term n}
              ‚Üí (p : l‚Ä≤ < l) ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì A  ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
kitToLogRel ‚â§‚Ä≤-refl A = A
kitToLogRel (‚â§‚Ä≤-step p) A = kitToLogRel p A
