------------------------------------------------------------------------
-- Equality in the logical relation is reflexive
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Reflexivity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open import Definition.Untyped M hiding (_‚à∑_; K)
open import Definition.Typed R
open import Definition.Typed.Weakening R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R

open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n

reflNatural-prop : ‚àÄ {n}
                 ‚Üí Natural-prop Œì n
                 ‚Üí [Natural]-prop Œì n n
reflNatural-prop (suc·µ£ (‚Ñï‚Çú n d t‚â°t prop)) =
  suc·µ£ (‚Ñï‚Çú‚Çå n n d d t‚â°t
            (reflNatural-prop prop))
reflNatural-prop zero·µ£ = zero·µ£
reflNatural-prop (ne (neNf‚Çú neK ‚ä¢k k‚â°k)) = ne (neNf‚Çú‚Çå neK neK k‚â°k)

reflEmpty-prop : ‚àÄ {n}
                 ‚Üí Empty-prop Œì n
                 ‚Üí [Empty]-prop Œì n n
reflEmpty-prop (ne (neNf‚Çú neK ‚ä¢k k‚â°k)) = ne (neNf‚Çú‚Çå neK neK k‚â°k)

reflUnit ∑-prop : ‚àÄ {t}
               ‚Üí Unit-prop Œì Œ£·µ£ t
               ‚Üí [Unit ∑]-prop Œì t t
reflUnit ∑-prop star·µ£ = star·µ£
reflUnit ∑-prop (ne (neNf‚Çú neK ‚ä¢k k‚â°k)) = ne (neNf‚Çú‚Çå neK neK k‚â°k)


-- Reflexivity of reducible types.
reflEq : ‚àÄ {l A} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° A / [A]

-- Reflexivity of reducible terms.
reflEqTerm : ‚àÄ {l A t} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A / [A]

reflEq (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) = PE.refl
reflEq (‚Ñï·µ£ D) = red D
reflEq (Empty·µ£ D) = red D
reflEq (Unit·µ£ (Unit‚Çú D _)) = red D
reflEq (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) =
   ne‚Çå _ [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K
reflEq (B·µ£‚Ä≤ _ _ _ [ _ , _ , D ] _ _ A‚â°A [F] [G] _ _) =
   B‚Çå _ _ D A‚â°A
      (Œª œÅ ‚ä¢Œî ‚Üí reflEq ([F] œÅ ‚ä¢Œî))
      (Œª œÅ ‚ä¢Œî [a] ‚Üí reflEq ([G] œÅ ‚ä¢Œî [a]))
reflEq (Id·µ£ ‚ä©A) = record
  { ‚áí*Id‚Ä≤             = ‚áí*Id
  ; Ty‚â°Ty‚Ä≤            = reflEq ‚ä©Ty
  ; lhs‚â°lhs‚Ä≤          = reflEqTerm ‚ä©Ty ‚ä©lhs
  ; rhs‚â°rhs‚Ä≤          = reflEqTerm ‚ä©Ty ‚ä©rhs
  ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ = id·∂†
  ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs = id·∂†
  }
  where
  open _‚ä©‚ÇóId_ ‚ä©A
reflEq (emb 0<1 [A]) = reflEq [A]

reflEqTerm (U·µ£‚Ä≤ ‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A d typeA A‚â°A [A]) =
  U‚Çú‚Çå A A d d typeA typeA A‚â°A [A] [A] (reflEq [A])
reflEqTerm (‚Ñï·µ£ D) (‚Ñï‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  ‚Ñï‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢u , d ] [ ‚ä¢t , ‚ä¢u , d ] t‚â°t
      (reflNatural-prop prop)
reflEqTerm (Empty·µ£ D) (Empty‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  Empty‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢u , d ] [ ‚ä¢t , ‚ä¢u , d ] t‚â°t
    (reflEmpty-prop prop)
reflEqTerm (Unit·µ£ {s = Œ£‚Çö} D) (Unit‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  Unit‚Çú‚Çå ‚ä¢t ‚ä¢t
reflEqTerm (Unit·µ£ {s = Œ£·µ£} D) (Unit‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  Unit‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢u , d ] [ ‚ä¢t , ‚ä¢u , d ]
         t‚â°t (reflUnit ∑-prop prop)
reflEqTerm (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú k d (neNf‚Çú neK‚ÇÅ ‚ä¢k k‚â°k)) =
  ne‚Çú‚Çå k k d d (neNf‚Çú‚Çå neK‚ÇÅ neK‚ÇÅ k‚â°k)
reflEqTerm
  (B·µ£‚Ä≤ BŒ†! _ _ _ _ _ _ [F] _ _ _) [t]@(Œ†‚Çú f d funcF f‚â°f [f] _) =
  Œ†‚Çú‚Çå f f d d funcF funcF f‚â°f [t] [t]
      (Œª œÅ ‚ä¢Œî [a] ‚Üí [f] œÅ ‚ä¢Œî [a] [a] (reflEqTerm ([F] œÅ ‚ä¢Œî) [a]))
reflEqTerm
  (B·µ£‚Ä≤ BŒ£‚Çö _ _ _ ‚ä¢F _ _ [F] [G] _ _)
  [t]@(Œ£‚Çú p d p‚âÖp prodP ([fstp] , [sndp])) =
  Œ£‚Çú‚Çå p p d d prodP prodP p‚âÖp [t] [t]
      ([fstp] , [fstp] , reflEqTerm ([F] id (wf ‚ä¢F)) [fstp] , reflEqTerm ([G] id (wf ‚ä¢F) [fstp]) [sndp])
reflEqTerm
  (B·µ£‚Ä≤ BŒ£·µ£ _ _ _ ‚ä¢F _ _ [F] [G] _ _)
  [t]@(Œ£‚Çú p d p‚âÖp prod‚Çô (PE.refl , [p‚ÇÅ] , [p‚ÇÇ] , PE.refl)) =
  Œ£‚Çú‚Çå p p d d prod‚Çô prod‚Çô p‚âÖp [t] [t]
      (PE.refl , PE.refl , [p‚ÇÅ] , [p‚ÇÅ] , [p‚ÇÇ] , [p‚ÇÇ] ,
        reflEqTerm ([F] id (wf ‚ä¢F)) [p‚ÇÅ] ,
        reflEqTerm ([G] id (wf ‚ä¢F) [p‚ÇÅ]) [p‚ÇÇ])
reflEqTerm (B·µ£‚Ä≤ BŒ£·µ£ _ _ _ _ _ _ _ _ _ _) [t]@(Œ£‚Çú p d p‚âÖp (ne x) p~p) =
  Œ£‚Çú‚Çå p p d d (ne x) (ne x) p‚âÖp [t] [t] p~p
reflEqTerm (Id·µ£ _) ‚ä©t =
  ‚ä©Id‚â°‚à∑ ‚ä©t ‚ä©t
    (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
       (rfl·µ£ _)     ‚Üí _
       (ne _ t‚Ä≤~t‚Ä≤) ‚Üí t‚Ä≤~t‚Ä≤)
reflEqTerm (emb 0<1 [A]) t = reflEqTerm [A] t
