------------------------------------------------------------------------
-- Equality in the logical relation is reflexive
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Reflexivity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Kit R

open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÅ; inj‚ÇÇ)

private
  variable
    n : Nat
    l‚Ä≤ l : Universe-level
    A B t : Term _
    Œì : Con Term n


-- Reflexivity of reducible terms.
reflEqTerm : ‚àÄ {l A t} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A / [A]
reflEqTerm _ ‚ä©t = ‚ä©t

-- Reflexivity of reducible types.
reflEq : ‚àÄ {l A} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° A / [A]

private

  -- A lemma used below.

  reflEq-‚ä©< :
    (p : l‚Ä≤ <·µò l) (‚ä©A : Œì ‚ä©<‚ü® p ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° A / emb p ‚ä©A
  reflEq-‚ä©< ‚â§·µò-refl     = reflEq
  reflEq-‚ä©< (‚â§·µò-step p) = reflEq-‚ä©< p

reflEq (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) = ‚ä¢Œì
reflEq (‚Ñï·µ£ D) = D
reflEq (Empty·µ£ D) = D
reflEq (Unit·µ£ (Unit‚Çú D _)) = D
reflEq (ne‚Ä≤ inc _ D neK K‚â°K) = ne‚Çå inc _ D neK K‚â°K
reflEq (B·µ£‚Ä≤ _ _ _ D A‚â°A [F] [G] _ _) =
   B‚Çå _ _ D A‚â°A
      (Œª œÅ ‚Üí reflEq ([F] œÅ))
      (Œª œÅ [a] ‚Üí reflEq ([G] œÅ [a]))
reflEq (Id·µ£ ‚ä©A) = record
  { ‚áí*Id‚Ä≤             = ‚áí*Id
  ; Ty‚â°Ty‚Ä≤            = reflEq ‚ä©Ty
  ; lhs‚â°lhs‚Ä≤          = reflEqTerm ‚ä©Ty ‚ä©lhs
  ; rhs‚â°rhs‚Ä≤          = reflEqTerm ‚ä©Ty ‚ä©rhs
  ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ = id·∂†
  ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs = id·∂†
  }
  where
  open _‚ä©‚ÇóId_ ‚ä©A
reflEq (emb p [A]) = reflEq-‚ä©< p [A]
