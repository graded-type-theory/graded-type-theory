------------------------------------------------------------------------
-- The logical relation is backwards-closed under reductions
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Reduction
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
import Definition.Typed.Weakening R as Wk
open import Definition.Typed.RedSteps R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Universe R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Transitivity R
open import Definition.LogicalRelation.Properties.Whnf R

open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÅ; inj‚ÇÇ)

private
  variable
    n       : Nat
    Œì       : Con Term n
    A B t u : Term n
    l       : TypeLevel

-- Weak head expansion of reducible types.
redSubst* : ‚àÄ {A B : Term n} {l}
          ‚Üí Œì ‚ä¢ A ‚áí* B
          ‚Üí Œì ‚ä©‚ü® l ‚ü© B
          ‚Üí ‚àÉ Œª ([A] : Œì ‚ä©‚ü® l ‚ü© A)
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
redSubst* D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) rewrite redU* D =
  U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì , PE.refl
redSubst* D (‚Ñï·µ£ [ ‚ä¢B , ‚ä¢‚Ñï , D‚Ä≤ ]) =
  let ‚ä¢A = redFirst* D
  in  ‚Ñï·µ£ ([ ‚ä¢A , ‚ä¢‚Ñï , D ‚á®* D‚Ä≤ ]) , D‚Ä≤
redSubst* D (Empty·µ£ [ ‚ä¢B , ‚ä¢Empty , D‚Ä≤ ]) =
  let ‚ä¢A = redFirst* D
  in  Empty·µ£ ([ ‚ä¢A , ‚ä¢Empty , D ‚á®* D‚Ä≤ ]) , D‚Ä≤
redSubst* D (Unit·µ£ (Unit‚Çú [ ‚ä¢B , ‚ä¢Unit , D‚Ä≤ ] ok)) =
  let ‚ä¢A = redFirst* D
  in  Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢Unit , D ‚á®* D‚Ä≤ ] ok) , D‚Ä≤
redSubst* D (ne‚Ä≤ K [ ‚ä¢B , ‚ä¢K , D‚Ä≤ ] neK K‚â°K) =
  let ‚ä¢A = redFirst* D
  in  (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢K , D ‚á®* D‚Ä≤ ] neK K‚â°K)
  ,   (ne‚Çå _ [ ‚ä¢B , ‚ä¢K , D‚Ä≤ ] neK K‚â°K)
redSubst*
  D (B·µ£‚Ä≤ W F G D‚Ä≤@([ _ , ‚ä¢Œ†FG , D‚Ä≥ ]) ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) =
  let ‚ä¢A = redFirst* D
  in  (B·µ£‚Ä≤ W F G [ ‚ä¢A , ‚ä¢Œ†FG , D ‚á®* D‚Ä≥ ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
  ,   (B‚Çå _ _ D‚Ä≤ A‚â°A (Œª œÅ ‚ä¢Œî ‚Üí reflEq ([F] œÅ ‚ä¢Œî))
        (Œª œÅ ‚ä¢Œî [a] ‚Üí reflEq ([G] œÅ ‚ä¢Œî [a])))
redSubst* A‚áí*B (Id·µ£ ‚ä©B) =
  case redFirst* A‚áí*B of Œª {
    ‚ä¢A ‚Üí
    (Id·µ£ record
       { ‚áí*Id  = [ ‚ä¢A , _‚ä¢_:‚áí*:_.‚ä¢B ‚áí*Id , A‚áí*B ‚á®* _‚ä¢_:‚áí*:_.D ‚áí*Id ]
       ; ‚ä©Ty   = ‚ä©Ty
       ; ‚ä©lhs  = ‚ä©lhs
       ; ‚ä©rhs  = ‚ä©rhs
       })
  , Id‚Çå‚Ä≤ ‚áí*Id (reflEq ‚ä©Ty) (reflEqTerm ‚ä©Ty ‚ä©lhs) (reflEqTerm ‚ä©Ty ‚ä©rhs) }
  where
  open _‚ä©‚ÇóId_ ‚ä©B
redSubst* D (emb 0<1 x) with redSubst* D x
redSubst* D (emb 0<1 x) | y , y‚ÇÅ = emb 0<1 y , y‚ÇÅ

-- Weak head expansion of reducible terms.
redSubst*Term : ‚àÄ {A : Term n} {t u l}
              ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A
              ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
              ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / [A]
              ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
              √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
redSubst*Term t‚áíu (U·µ£‚Ä≤ .‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A [ ‚ä¢t , ‚ä¢u , d ] typeA A‚â°A [u]) =
  let [d]  = [ ‚ä¢t , ‚ä¢u , d ]
      [d‚Ä≤] = [ redFirst*Term t‚áíu , ‚ä¢u , t‚áíu ‚á®‚à∑* d ]
      q = redSubst* (univ* t‚áíu) (univEq (U·µ£‚Ä≤ ‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A [d] typeA A‚â°A [u]))
  in U‚Çú A [d‚Ä≤] typeA A‚â°A (proj‚ÇÅ q)
  ,  U‚Çú‚Çå A A [d‚Ä≤] [d] typeA typeA A‚â°A (proj‚ÇÅ q) [u] (proj‚ÇÇ q)
redSubst*Term t‚áíu (‚Ñï·µ£ D) (‚Ñï‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
  let A‚â°‚Ñï  = subset* (red D)
      ‚ä¢t   = conv (redFirst*Term t‚áíu) A‚â°‚Ñï
      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°‚Ñï
  in  ‚Ñï‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] n‚â°n prop
  ,   ‚Ñï‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] [ ‚ä¢u , ‚ä¢n , d ]
          n‚â°n (reflNatural-prop prop)
redSubst*Term t‚áíu (Empty·µ£ D) (Empty‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
  let A‚â°Empty  = subset* (red D)
      ‚ä¢t   = conv (redFirst*Term t‚áíu) A‚â°Empty
      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°Empty
  in  Empty‚Çú n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] n‚â°n prop
  ,   Empty‚Çú‚Çå n n [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ] [ ‚ä¢u , ‚ä¢n , d ]
          n‚â°n (reflEmpty-prop prop)
redSubst*Term
  t‚áíu (Unit·µ£ {s} (Unit‚Çú D _)) (Unit‚Çú n [ ‚ä¢u , ‚ä¢n , d ] n‚â°n prop) =
  let A‚â°Unit  = subset* (red D)
      ‚ä¢t   = conv (redFirst*Term t‚áíu) A‚â°Unit
      t‚áíu‚Ä≤ = conv* t‚áíu A‚â°Unit
      d‚Ä≤ = [ ‚ä¢t , ‚ä¢n , t‚áíu‚Ä≤ ‚á®‚à∑* d ]
  in  Unit‚Çú n d‚Ä≤ n‚â°n prop
  ,   (case Unit-with-Œ∑? s of Œª where
         (inj‚ÇÅ Œ∑)                ‚Üí Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u Œ∑
         (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí
           Unit‚Çú‚Çå ∑ n n d‚Ä≤ [ ‚ä¢u , ‚ä¢n , d ] n‚â°n (reflUnit ∑-prop prop)
             no-Œ∑)
redSubst*Term t‚áíu (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú k [ ‚ä¢t , ‚ä¢u , d ] (neNf‚Çú neK‚ÇÅ ‚ä¢k k‚â°k)) =
  let A‚â°K  = subset* (red D)
      [d]  = [ ‚ä¢t , ‚ä¢u , d ]
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°K , ‚ä¢u , conv* t‚áíu A‚â°K ‚á®‚à∑* d ]
  in  ne‚Çú k [d‚Ä≤] (neNf‚Çú neK‚ÇÅ ‚ä¢k k‚â°k) , ne‚Çú‚Çå k k [d‚Ä≤] [d] (neNf‚Çú‚Çå neK‚ÇÅ neK‚ÇÅ k‚â°k)
redSubst*Term
  {Œì = Œì} {A = A} {t} {u} {l}
  t‚áíu (Œ†·µ£‚Ä≤ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  [u]@(Œ†‚Çú f [d]@([ ‚ä¢t , ‚ä¢u , d ]) funcF f‚â°f [f] [f]‚ÇÅ) =
  let A‚â°Œ†FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ†FG
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°Œ†FG , ‚ä¢u , t‚áíu‚Ä≤ ‚á®‚à∑* d ]
      [u‚Ä≤] = Œ†‚Çú f [d‚Ä≤] funcF f‚â°f [f] [f]‚ÇÅ
  in  [u‚Ä≤]
  ,   Œ†‚Çú‚Çå f f [d‚Ä≤] [d] funcF funcF f‚â°f [u‚Ä≤] [u] Œª [œÅ] ‚ä¢Œî [a] ‚Üí
        [f] [œÅ] ‚ä¢Œî [a] [a] (reflEqTerm ([F] [œÅ] ‚ä¢Œî) [a])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£À¢ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  [u]@(Œ£‚Çú p [d]@([ ‚ä¢t , ‚ä¢u , d ]) p‚âÖp pProd pProp) =

  let A‚â°Œ£FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ£FG
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°Œ£FG , ‚ä¢u , conv* t‚áíu A‚â°Œ£FG ‚á®‚à∑* d ]
      [fstp] , [sndp] = pProp
      [u‚Ä≤] = Œ£‚Çú p [d‚Ä≤] p‚âÖp pProd pProp
  in  [u‚Ä≤] , Œ£‚Çú‚Çå p p [d‚Ä≤] [d] pProd pProd p‚âÖp [u‚Ä≤] [u]
                 ([fstp] , [fstp] , reflEqTerm ([F] Wk.id (wf ‚ä¢F)) [fstp] ,
                   reflEqTerm ([G] Wk.id (wf ‚ä¢F) [fstp]) [sndp])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£ ∑ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  [u]@(Œ£‚Çú p [d]@([ ‚ä¢t , ‚ä¢u , d ]) p‚âÖp prod‚Çô pProp) =
  let A‚â°Œ£FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ£FG
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°Œ£FG , ‚ä¢u , conv* t‚áíu A‚â°Œ£FG ‚á®‚à∑* d ]
      p‚Ä≤‚â°p‚Ä≥ , [p‚ÇÅ] , [p‚ÇÇ] , m‚â°Œ£ ∑ = pProp
      [p‚ÇÅ‚â°p‚ÇÅ] = reflEqTerm ([F] Wk.id (wf ‚ä¢F)) [p‚ÇÅ]
      [p‚ÇÇ‚â°p‚ÇÇ] = reflEqTerm ([G] Wk.id (wf ‚ä¢F) [p‚ÇÅ]) [p‚ÇÇ]
      [u‚Ä≤] = Œ£‚Çú p [d‚Ä≤] p‚âÖp prod‚Çô pProp
  in  [u‚Ä≤] ,
      Œ£‚Çú‚Çå p p [d‚Ä≤] [d] prod‚Çô prod‚Çô p‚âÖp [u‚Ä≤] [u]
        (p‚Ä≤‚â°p‚Ä≥ , p‚Ä≤‚â°p‚Ä≥ , [p‚ÇÅ] , [p‚ÇÅ] , [p‚ÇÇ] , [p‚ÇÇ] , [p‚ÇÅ‚â°p‚ÇÅ] , [p‚ÇÇ‚â°p‚ÇÇ])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£ ∑ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  [u]@(Œ£‚Çú p [d]@([ ‚ä¢t , ‚ä¢u , d ]) p‚âÖp (ne x) p~p) =
  let A‚â°Œ£FG = subset* (red D)
      t‚áíu‚Ä≤  = conv* t‚áíu A‚â°Œ£FG
      [d‚Ä≤] = [ conv (redFirst*Term t‚áíu) A‚â°Œ£FG , ‚ä¢u , conv* t‚áíu A‚â°Œ£FG ‚á®‚à∑* d ]
      [u‚Ä≤] = Œ£‚Çú p [d‚Ä≤] p‚âÖp (ne x) p~p
  in  [u‚Ä≤] , Œ£‚Çú‚Çå p p [d‚Ä≤] [d] (ne x) (ne x) p‚âÖp [u‚Ä≤] [u] p~p
redSubst*Term
  {Œì = Œì} {A = A} {t = t} {l = l} t‚áí*u (Id·µ£ ‚ä©A) ‚ä©u@(u‚Ä≤ , u‚áí*u‚Ä≤ , rest) =
  case subset* (red ‚áí*Id) of Œª {
    A‚â°Id ‚Üí
  let ‚ä©t : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A
      ‚ä©t =
          u‚Ä≤
        , [ conv (redFirst*Term t‚áí*u) A‚â°Id
          , _‚ä¢_:‚áí*:_‚à∑_.‚ä¢u u‚áí*u‚Ä≤
          , conv* t‚áí*u A‚â°Id ‚á®‚à∑* (red‚Çú u‚áí*u‚Ä≤)
          ]
        , rest
  in
    ‚ä©t
  , ‚ä©Id‚â°‚à∑ ‚ä©t ‚ä©u
      (case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (ne _ u‚Ä≤~u‚Ä≤) ‚Üí u‚Ä≤~u‚Ä≤
         (rfl·µ£ _)     ‚Üí _) }
  where
  open _‚ä©‚ÇóId_ ‚ä©A
redSubst*Term t‚áíu (emb 0<1 x) [u] = redSubst*Term t‚áíu x [u]

-- Weak head expansion of reducible types with single reduction step.
redSubst : ‚àÄ {A B : Term n} {l}
         ‚Üí Œì ‚ä¢ A ‚áí B
         ‚Üí Œì ‚ä©‚ü® l ‚ü© B
         ‚Üí ‚àÉ Œª ([A] : Œì ‚ä©‚ü® l ‚ü© A)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
redSubst A‚áíB [B] = redSubst* (A‚áíB ‚á® id (escape [B])) [B]

-- Weak head expansion of reducible terms with single reduction step.
redSubstTerm : ‚àÄ {A t u : Term n} {l}
             ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A
             ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
             ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / [A]
             ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
             √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
redSubstTerm t‚áíu [A] [u] = redSubst*Term (t‚áíu ‚á® id (escapeTerm [A] [u])) [A] [u]

opaque

  -- If A is reducible and reduces to¬†B, then B is reducible and equal
  -- to¬†A.

  redSubst*‚Ä≤ :
    Œì ‚ä¢ A :‚áí*: B ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A
  redSubst*‚Ä≤ A‚áí*B ‚ä©U@(U·µ£‚Ä≤ _ _ _) =
    case whnfRed* (red A‚áí*B) U‚Çô of Œª {
      PE.refl ‚Üí
    ‚ä©U , reflEq ‚ä©U }
  redSubst*‚Ä≤ A‚áí*B (‚Ñï·µ£ A‚áí*‚Ñï) =
    case whrDet:‚áí*: ‚Ñï‚Çô A‚áí*‚Ñï A‚áí*B of Œª
      B‚áí*‚Ñï ‚Üí
    ‚Ñï·µ£ B‚áí*‚Ñï , red B‚áí*‚Ñï
  redSubst*‚Ä≤ A‚áí*B (Empty·µ£ A‚áí*Empty) =
    case whrDet:‚áí*: Empty‚Çô A‚áí*Empty A‚áí*B of Œª
      B‚áí*Empty ‚Üí
    Empty·µ£ B‚áí*Empty , red B‚áí*Empty
  redSubst*‚Ä≤ A‚áí*B (Unit·µ£ (Unit‚Çú A‚áí*Unit ok)) =
    case whrDet:‚áí*: Unit‚Çô A‚áí*Unit A‚áí*B of Œª
      B‚áí*Unit ‚Üí
    Unit·µ£ (Unit‚Çú B‚áí*Unit ok) , red B‚áí*Unit
  redSubst*‚Ä≤ A‚áí*B (ne‚Ä≤ C A‚áí*C C-ne C‚âÖC) =
    case whrDet:‚áí*: (ne C-ne) A‚áí*C A‚áí*B of Œª
      B‚áí*C ‚Üí
    ne‚Ä≤ C B‚áí*C C-ne C‚âÖC , ne‚Çå C B‚áí*C C-ne C‚âÖC
  redSubst*‚Ä≤ A‚áí*B (B·µ£‚Ä≤ W C D A‚áí*Œ†Œ£ ‚ä¢C ‚ä¢D Œ†Œ£‚â°Œ†Œ£ ‚ä©C ‚ä©D D‚â°D ok) =
    case whrDet:‚áí*: ‚ü¶ W ‚üß‚Çô A‚áí*Œ†Œ£ A‚áí*B of Œª
      B‚áí*Œ†Œ£ ‚Üí
      B·µ£‚Ä≤ _ _ _ B‚áí*Œ†Œ£ ‚ä¢C ‚ä¢D Œ†Œ£‚â°Œ†Œ£ ‚ä©C ‚ä©D D‚â°D ok
    , B‚Çå _ _ B‚áí*Œ†Œ£ Œ†Œ£‚â°Œ†Œ£ (Œª _ _ ‚Üí reflEq (‚ä©C _ _))
        (Œª _ _ _ ‚Üí reflEq (‚ä©D _ _ _))
  redSubst*‚Ä≤ A‚áí*B (Id·µ£ (Id·µ£ Ty lhs rhs A‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)) =
    case whrDet:‚áí*: Id‚Çô A‚áí*Id A‚áí*B of Œª
      B‚áí*Id ‚Üí
      Id·µ£ (Id·µ£ Ty lhs rhs B‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)
    , Id‚Çå‚Ä≤ B‚áí*Id (reflEq ‚ä©Ty) (reflEqTerm ‚ä©Ty ‚ä©lhs)
        (reflEqTerm ‚ä©Ty ‚ä©rhs)
  redSubst*‚Ä≤ A‚áí*B (emb 0<1 ‚ä©A) =
    case redSubst*‚Ä≤ A‚áí*B ‚ä©A of Œª
      (‚ä©B , A‚â°B) ‚Üí
    emb 0<1 ‚ä©B , A‚â°B

opaque

  -- If t is reducible and reduces to¬†u, then u is reducible and equal
  -- to¬†t.

  redSubst*Term‚Ä≤ :
    Œì ‚ä¢ t :‚áí*: u ‚à∑ A ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / ‚ä©A √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A
  redSubst*Term‚Ä≤ t‚áí*u ‚ä©U@(U·µ£‚Ä≤ ‚Å∞ 0<1 ‚ä¢Œì) (U‚Çú A t‚áí*A A-type A‚âÖA ‚ä©t) =
    case whrDet:‚áí*:Term (typeWhnf A-type) t‚áí*A t‚áí*u of Œª
      u‚áí*A ‚Üí
    case redSubst*‚Ä≤ (univ:*: t‚áí*u) ‚ä©t of Œª
      (‚ä©u , t‚â°u) ‚Üí
      U‚Çú A u‚áí*A A-type A‚âÖA ‚ä©u
    , U‚Çú‚Çå A A t‚áí*A u‚áí*A A-type A-type A‚âÖA ‚ä©t ‚ä©u t‚â°u
  redSubst*Term‚Ä≤ t‚áí*u (‚Ñï·µ£ A‚áí*‚Ñï) (‚Ñï‚Çú v t‚áí*v v‚âÖv v-ok) =
    case whrDet:‚áí*:Term (naturalWhnf (natural v-ok)) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*‚Ñï))) of Œª
      u‚áí*v ‚Üí
      ‚Ñï‚Çú v u‚áí*v v‚âÖv v-ok
    , ‚Ñï‚Çú‚Çå v v t‚áí*v u‚áí*v v‚âÖv (reflNatural-prop v-ok)
  redSubst*Term‚Ä≤ t‚áí*u (Empty·µ£ A‚áí*Empty) (Empty‚Çú v t‚áí*v v‚âÖv v-ok) =
    case whrDet:‚áí*:Term (ne (empty v-ok)) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*Empty))) of Œª
      u‚áí*v ‚Üí
      Empty‚Çú v u‚áí*v v‚âÖv v-ok
    , Empty‚Çú‚Çå v v t‚áí*v u‚áí*v v‚âÖv (reflEmpty-prop v-ok)
  redSubst*Term‚Ä≤
    t‚áí*u (Unit·µ£ {s} (Unit‚Çú A‚áí*Unit _)) (Unit‚Çú v t‚áí*v v‚âÖv v-ok) =
    case whrDet:‚áí*:Term (unit v-ok) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*Unit))) of Œª
      u‚áí*v ‚Üí
      Unit‚Çú v u‚áí*v v‚âÖv v-ok
    , (case Unit-with-Œ∑? s of Œª where
         (inj‚ÇÅ Œ∑) ‚Üí
           Unit‚Çú‚ÇåÀ¢ (‚ä¢t-red‚Çú t‚áí*v) (‚ä¢t-red‚Çú u‚áí*v) Œ∑
         (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí
           Unit‚Çú‚Çå ∑ v v t‚áí*v u‚áí*v v‚âÖv (reflUnit ∑-prop v-ok) no-Œ∑)
  redSubst*Term‚Ä≤
    t‚áí*u (ne‚Ä≤ B A‚áí*B B-ne B‚âÖB) (ne‚Çú v t‚áí*v v-ok@(neNf‚Çú v-ne _ v~v)) =
    case whrDet:‚áí*:Term (ne v-ne) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*B))) of Œª
      u‚áí*v ‚Üí
      ne‚Çú v u‚áí*v v-ok
    , ne‚Çú‚Çå v v t‚áí*v u‚áí*v (neNf‚Çú‚Çå v-ne v-ne v~v)
  redSubst*Term‚Ä≤
    t‚áí*u ‚ä©A@(B·µ£‚Ä≤ BŒ†! C D A‚áí*Œ† ‚ä¢C ‚ä¢D Œ†‚â°Œ† ‚ä©C ‚ä©D D‚â°D ok)
    ‚ä©t@(v , t‚áí*v , v-fun , v‚âÖv , v‚àò‚â°v‚àò , ‚ä©v‚àò) =
    case whrDet:‚áí*:Term (functionWhnf v-fun) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*Œ†))) of Œª
      u‚áí*v ‚Üí
    case v , u‚áí*v , v-fun , v‚âÖv , v‚àò‚â°v‚àò , ‚ä©v‚àò of Œª
      (‚ä©u : _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©A) ‚Üí
      ‚ä©u
    , ( v , v , t‚áí*v , u‚áí*v , v-fun , v-fun , v‚âÖv , ‚ä©t , ‚ä©u
      , (Œª _ _ _ ‚Üí reflEqTerm (‚ä©D _ _ _) (‚ä©v‚àò _ _ _))
      )
  redSubst*Term‚Ä≤
    t‚áí*u ‚ä©A@(B·µ£‚Ä≤ (BŒ£ s _ _) C D A‚áí*Œ£ ‚ä¢C ‚ä¢D Œ£‚â°Œ£ ‚ä©C ‚ä©D D‚â°D ok)
    ‚ä©t@(v , t‚áí*v , v‚âÖv , v-prod , v-ok) =
    case whrDet:‚áí*:Term (productWhnf v-prod) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*Œ£))) of Œª
      u‚áí*v ‚Üí
    case v , u‚áí*v , v‚âÖv , v-prod , v-ok of Œª
      (‚ä©u : _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©A) ‚Üí
      ‚ä©u
    , ( v , v , t‚áí*v , u‚áí*v , v‚âÖv , ‚ä©t , ‚ä©u , v-prod , v-prod
      , (case PE.singleton s of Œª where
           (ùï§ , PE.refl) ‚Üí
             case v-ok of Œª
               (‚ä©fst , ‚ä©snd) ‚Üí
               ‚ä©fst , ‚ä©fst , reflEqTerm (‚ä©C _ _) ‚ä©fst
             , reflEqTerm (‚ä©D _ _ _) ‚ä©snd
           (ùï® , PE.refl) ‚Üí
             case PE.singleton v-prod of Œª where
               (ne _  , PE.refl) ‚Üí v-ok
               (prod‚Çô , PE.refl) ‚Üí
                 case v-ok of Œª
                   (eq , ‚ä©fst , ‚ä©snd , _) ‚Üí
                   eq , eq , ‚ä©fst , ‚ä©fst , ‚ä©snd , ‚ä©snd
                 , reflEqTerm (‚ä©C _ _) ‚ä©fst
                 , reflEqTerm (‚ä©D _ _ _) ‚ä©snd)
      )
  redSubst*Term‚Ä≤
    t‚áí*u (Id·µ£ (Id·µ£ Ty lhs rhs A‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs))
    (v , t‚áí*v , v-id , v-ok) =
    case whrDet:‚áí*:Term (identityWhnf v-id) t‚áí*v
           (convRed:*: t‚áí*u (subset* (red A‚áí*Id))) of Œª
      u‚áí*v ‚Üí
      (v , u‚áí*v , v-id , v-ok)
    , ( v , v , t‚áí*v , u‚áí*v , v-id , v-id
      , (case PE.singleton v-id of Œª where
           (rfl‚Çô , PE.refl) ‚Üí v-ok
           (ne _ , PE.refl) ‚Üí v-ok)
      )
  redSubst*Term‚Ä≤ t‚áí*u (emb 0<1 ‚ä©A) ‚ä©t =
    redSubst*Term‚Ä≤ t‚áí*u ‚ä©A ‚ä©t
