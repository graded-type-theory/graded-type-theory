------------------------------------------------------------------------
-- The logical relation is backwards-closed under reductions
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Reduction
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
import Definition.Typed.Weakening R as Wk
open import Definition.Typed.Well-formed R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Universe R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Transitivity R
open import Definition.LogicalRelation.Properties.Whnf R

open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÅ; inj‚ÇÇ)

private
  variable
    n       : Nat
    Œì       : Con Term n
    A B t u : Term n
    l       : Universe-level

-- Weak head expansion of reducible types.
redSubst* : ‚àÄ {A B : Term n} {l}
          ‚Üí Œì ‚ä¢ A ‚áí* B
          ‚Üí Œì ‚ä©‚ü® l ‚ü© B
          ‚Üí ‚àÉ Œª ([A] : Œì ‚ä©‚ü® l ‚ü© A)
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
redSubst* D (U·µ£‚Ä≤ l‚Ä≤ l< D‚Ä≤) =
  U·µ£‚Ä≤ l‚Ä≤ l< (D ‚á®* D‚Ä≤) , D‚Ä≤
redSubst* D (‚Ñï·µ£ D‚Ä≤) =
  ‚Ñï·µ£ (D ‚á®* D‚Ä≤) , D‚Ä≤
redSubst* D (Empty·µ£ D‚Ä≤) =
  Empty·µ£ (D ‚á®* D‚Ä≤) , D‚Ä≤
redSubst* D (Unit·µ£ (Unit‚Çú D‚Ä≤ ok)) =
  Unit·µ£ (Unit‚Çú (D ‚á®* D‚Ä≤) ok) , D‚Ä≤
redSubst* D (ne‚Ä≤ _ D‚Ä≤ neK K‚â°K) =
    (ne‚Ä≤ _ (D ‚á®* D‚Ä≤) neK K‚â°K)
  , (ne‚Çå _ D‚Ä≤ neK K‚â°K)
redSubst*
  D (B·µ£‚Ä≤ W F G D‚Ä≤ A‚â°A [F] [G] G-ext ok) =
    B·µ£‚Ä≤ W F G (D ‚á®* D‚Ä≤) A‚â°A [F] [G] G-ext ok
  , B‚Çå _ _ D‚Ä≤ A‚â°A (Œª œÅ ‚Üí reflEq ([F] œÅ)) (Œª œÅ [a] ‚Üí reflEq ([G] œÅ [a]))
redSubst* A‚áí*B (Id·µ£ ‚ä©B) =
    Id·µ£ record
      { ‚áí*Id  = A‚áí*B ‚á®* ‚áí*Id
      ; ‚ä©Ty   = ‚ä©Ty
      ; ‚ä©lhs  = ‚ä©lhs
      ; ‚ä©rhs  = ‚ä©rhs
      }
  , Id‚Çå‚Ä≤ ‚áí*Id (reflEq ‚ä©Ty) (reflEqTerm ‚ä©Ty ‚ä©lhs) (reflEqTerm ‚ä©Ty ‚ä©rhs)
  where
  open _‚ä©‚ÇóId_ ‚ä©B
redSubst* D (emb ‚â§·µò-refl x) with redSubst* D x
redSubst* D (emb ‚â§·µò-refl x) | y , y‚ÇÅ = emb ‚â§·µò-refl y , y‚ÇÅ
redSubst* A‚áí*B (emb (‚â§·µò-step p) ‚ä©B) =
  let ‚ä©A , A‚â°B = redSubst* A‚áí*B (emb p ‚ä©B) in
    emb-<-‚ä© ‚â§·µò-refl ‚ä©A
  , irrelevanceEq ‚ä©A (emb-<-‚ä© ‚â§·µò-refl ‚ä©A) A‚â°B

-- Weak head expansion of reducible terms.
redSubst*Term : ‚àÄ {A : Term n} {t u l}
              ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A
              ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
              ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / [A]
              ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
              √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
redSubst*Term t‚áíu (U·µ£‚Ä≤ l ‚â§·µò-refl D) (U‚Çú A d typeA A‚â°A [u]) =
  let A‚â°K  = subset* D
      d‚Ä≤ = conv* t‚áíu A‚â°K ‚á®‚à∑* d
      q = redSubst* (univ* (conv* t‚áíu A‚â°K))
            (univEq (U·µ£‚Ä≤ l ‚â§·µò-refl (id (wf-‚ä¢‚â° (subset* D) .proj‚ÇÇ)))
               (U‚Çú A d typeA A‚â°A [u]))
  in U‚Çú A d‚Ä≤ typeA A‚â°A (proj‚ÇÅ q) ,
  U‚Çú‚Çå A A d‚Ä≤ d typeA typeA A‚â°A (proj‚ÇÅ q) [u] (proj‚ÇÇ q)
redSubst*Term t‚áíu ‚ä©U@(U·µ£‚Ä≤ l (‚â§·µò-step l<) D) (U‚Çú A D‚Ä≤ typeA A‚â°A [u]) =
  let Un = U·µ£‚Ä≤ l l< D
      y , eq = redSubst*Term t‚áíu Un (U‚Çú A D‚Ä≤ typeA A‚â°A [u])
      y‚Ä≤ = irrelevanceTerm Un ‚ä©U y
  in y‚Ä≤ , irrelevanceEqTerm Un ‚ä©U eq
redSubst*Term t‚áíu (‚Ñï·µ£ D) (‚Ñï‚Çú n d n‚â°n prop) =
  let t‚áíu‚Ä≤ = conv* t‚áíu (subset* D)
  in  ‚Ñï‚Çú n (t‚áíu‚Ä≤ ‚á®‚à∑* d) n‚â°n prop
  ,   ‚Ñï‚Çú‚Çå n n (t‚áíu‚Ä≤ ‚á®‚à∑* d) d n‚â°n (reflNatural-prop prop)
redSubst*Term t‚áíu (Empty·µ£ D) (Empty‚Çú n d n‚â°n prop) =
  let t‚áíu‚Ä≤ = conv* t‚áíu (subset* D)
  in  Empty‚Çú n (t‚áíu‚Ä≤ ‚á®‚à∑* d) n‚â°n prop
  ,   Empty‚Çú‚Çå n n (t‚áíu‚Ä≤ ‚á®‚à∑* d) d n‚â°n (reflEmpty-prop prop)
redSubst*Term t‚áíu (Unit·µ£ {s} (Unit‚Çú D _)) (Unit‚Çú n d n‚â°n prop) =
  let t‚áíu         = conv* t‚áíu (subset* D)
      _ , ‚ä¢t , ‚ä¢u = wf-‚ä¢‚â°‚à∑ (subset*Term t‚áíu)
      d‚Ä≤          = t‚áíu ‚á®‚à∑* d
  in  Unit‚Çú n d‚Ä≤ n‚â°n prop
  ,   (case Unit-with-Œ∑? s of Œª where
         (inj‚ÇÅ Œ∑)                ‚Üí Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u Œ∑
         (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí
           Unit‚Çú‚Çå ∑ n n d‚Ä≤ d n‚â°n (reflUnit ∑-prop prop) no-Œ∑)
redSubst*Term t‚áíu (ne‚Ä≤ _ D neK K‚â°K) (ne‚Çú k d (neNf‚Çú neK‚ÇÅ k‚â°k)) =
  let A‚â°K = subset* D
      d‚Ä≤  = conv* t‚áíu A‚â°K ‚á®‚à∑* d
  in  ne‚Çú k d‚Ä≤ (neNf‚Çú neK‚ÇÅ k‚â°k) , ne‚Çú‚Çå k k d‚Ä≤ d (neNf‚Çú‚Çå neK‚ÇÅ neK‚ÇÅ k‚â°k)
redSubst*Term
  {Œì = Œì} {A = A} {t} {u} {l}
  t‚áíu (Œ†·µ£‚Ä≤ F G D A‚â°A [F] [G] G-ext _) [u]@(Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
  let d‚Ä≤   = conv* t‚áíu (subset* D) ‚á®‚à∑* d
      [u‚Ä≤] = Œ†‚Çú f d‚Ä≤ funcF f‚â°f [f] [f]‚ÇÅ
  in  [u‚Ä≤]
  ,   Œ†‚Çú‚Çå f f d‚Ä≤ d funcF funcF f‚â°f [u‚Ä≤] [u] Œª [œÅ] [a] ‚Üí
        [f] [œÅ] [a] [a] (reflEqTerm ([F] [œÅ]) [a])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£À¢ F G D A‚â°A [F] [G] G-ext _) [u]@(Œ£‚Çú p d p‚âÖp pProd pProp) =

  let d‚Ä≤ = conv* t‚áíu (subset* D) ‚á®‚à∑* d
      [fstp] , [sndp] = pProp
      [u‚Ä≤] = Œ£‚Çú p d‚Ä≤ p‚âÖp pProd pProp
  in  [u‚Ä≤] , Œ£‚Çú‚Çå p p d‚Ä≤ d pProd pProd p‚âÖp [u‚Ä≤] [u]
                 ([fstp] , [fstp] , reflEqTerm ([F] _) [fstp] ,
                   reflEqTerm ([G] _ [fstp]) [sndp])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£ ∑ F G D A‚â°A [F] [G] G-ext _) [u]@(Œ£‚Çú p d p‚âÖp prod‚Çô pProp) =
  let d‚Ä≤ = conv* t‚áíu (subset* D) ‚á®‚à∑* d
      p‚Ä≤‚â°p‚Ä≥ , [p‚ÇÅ] , [p‚ÇÇ] , m‚â°Œ£ ∑ = pProp
      [p‚ÇÅ‚â°p‚ÇÅ] = reflEqTerm ([F] _) [p‚ÇÅ]
      [p‚ÇÇ‚â°p‚ÇÇ] = reflEqTerm ([G] _ [p‚ÇÅ]) [p‚ÇÇ]
      [u‚Ä≤] = Œ£‚Çú p d‚Ä≤ p‚âÖp prod‚Çô pProp
  in  [u‚Ä≤] ,
      Œ£‚Çú‚Çå p p d‚Ä≤ d prod‚Çô prod‚Çô p‚âÖp [u‚Ä≤] [u]
        (p‚Ä≤‚â°p‚Ä≥ , p‚Ä≤‚â°p‚Ä≥ , [p‚ÇÅ] , [p‚ÇÅ] , [p‚ÇÇ] , [p‚ÇÇ] , [p‚ÇÅ‚â°p‚ÇÅ] , [p‚ÇÇ‚â°p‚ÇÇ])
redSubst*Term
  {Œì = Œì} {A} {t} {u} {l}
  t‚áíu (B·µ£‚Ä≤ BŒ£ ∑ F G D A‚â°A [F] [G] G-ext _) [u]@(Œ£‚Çú p d p‚âÖp (ne x) p~p) =
  let d‚Ä≤   = conv* t‚áíu (subset* D) ‚á®‚à∑* d
      [u‚Ä≤] = Œ£‚Çú p d‚Ä≤ p‚âÖp (ne x) p~p
  in  [u‚Ä≤] , Œ£‚Çú‚Çå p p d‚Ä≤ d (ne x) (ne x) p‚âÖp [u‚Ä≤] [u] p~p
redSubst*Term
  {Œì = Œì} {A = A} {t = t} {l = l} t‚áí*u (Id·µ£ ‚ä©A) ‚ä©u@(u‚Ä≤ , u‚áí*u‚Ä≤ , rest) =
  let ‚ä©t : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id·µ£ ‚ä©A
      ‚ä©t =
          u‚Ä≤
        , conv* t‚áí*u (subset* ‚áí*Id) ‚á®‚à∑* u‚áí*u‚Ä≤
        , rest
  in
    ‚ä©t
  , ‚ä©Id‚â°‚à∑ ‚ä©t ‚ä©u
      (case ‚ä©Id‚à∑-view-inhabited ‚ä©u of Œª where
         (ne _ u‚Ä≤~u‚Ä≤) ‚Üí u‚Ä≤~u‚Ä≤
         (rfl·µ£ _)     ‚Üí _)
  where
  open _‚ä©‚ÇóId_ ‚ä©A
redSubst*Term t‚áíu (emb ‚â§·µò-refl     ‚ä©A) = redSubst*Term t‚áíu ‚ä©A
redSubst*Term t‚áíu (emb (‚â§·µò-step p) ‚ä©A) = redSubst*Term t‚áíu (emb p ‚ä©A)

-- Weak head expansion of reducible types with single reduction step.
redSubst : ‚àÄ {A B : Term n} {l}
         ‚Üí Œì ‚ä¢ A ‚áí B
         ‚Üí Œì ‚ä©‚ü® l ‚ü© B
         ‚Üí ‚àÉ Œª ([A] : Œì ‚ä©‚ü® l ‚ü© A)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
redSubst A‚áíB [B] = redSubst* (redMany-‚ä¢ A‚áíB) [B]

-- Weak head expansion of reducible terms with single reduction step.
redSubstTerm : ‚àÄ {A t u : Term n} {l}
             ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A
             ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
             ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / [A]
             ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
             √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
redSubstTerm t‚áíu [A] [u] = redSubst*Term (redMany t‚áíu) [A] [u]

opaque

  -- If A is reducible and reduces to¬†B, then B is reducible and equal
  -- to¬†A.

  redSubst*‚Ä≤ :
    Œì ‚ä¢ A ‚áí* B ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A
  redSubst*‚Ä≤ A‚áí*B ‚ä©U@(U·µ£‚Ä≤ l l< D) =
    case whrDet‚Üò (D , U‚Çô) A‚áí*B of Œª
      B‚áí*U ‚Üí
    U·µ£‚Ä≤ l l< B‚áí*U , B‚áí*U
  redSubst*‚Ä≤ A‚áí*B (‚Ñï·µ£ A‚áí*‚Ñï) =
    case whrDet‚Üò (A‚áí*‚Ñï , ‚Ñï‚Çô) A‚áí*B of Œª
      B‚áí*‚Ñï ‚Üí
    ‚Ñï·µ£ B‚áí*‚Ñï , B‚áí*‚Ñï
  redSubst*‚Ä≤ A‚áí*B (Empty·µ£ A‚áí*Empty) =
    case whrDet‚Üò (A‚áí*Empty , Empty‚Çô) A‚áí*B of Œª
      B‚áí*Empty ‚Üí
    Empty·µ£ B‚áí*Empty , B‚áí*Empty
  redSubst*‚Ä≤ A‚áí*B (Unit·µ£ (Unit‚Çú A‚áí*Unit ok)) =
    case whrDet‚Üò (A‚áí*Unit , Unit‚Çô) A‚áí*B of Œª
      B‚áí*Unit ‚Üí
    Unit·µ£ (Unit‚Çú B‚áí*Unit ok) , B‚áí*Unit
  redSubst*‚Ä≤ A‚áí*B (ne‚Ä≤ C A‚áí*C C-ne C‚âÖC) =
    case whrDet‚Üò (A‚áí*C , ne C-ne) A‚áí*B of Œª
      B‚áí*C ‚Üí
    ne‚Ä≤ C B‚áí*C C-ne C‚âÖC , ne‚Çå C B‚áí*C C-ne C‚âÖC
  redSubst*‚Ä≤ A‚áí*B (B·µ£‚Ä≤ W C D A‚áí*Œ†Œ£ Œ†Œ£‚â°Œ†Œ£ ‚ä©C ‚ä©D D‚â°D ok) =
    case whrDet‚Üò (A‚áí*Œ†Œ£ , ‚ü¶ W ‚üß‚Çô) A‚áí*B of Œª
      B‚áí*Œ†Œ£ ‚Üí
      B·µ£‚Ä≤ _ _ _ B‚áí*Œ†Œ£ Œ†Œ£‚â°Œ†Œ£ ‚ä©C ‚ä©D D‚â°D ok
    , B‚Çå _ _ B‚áí*Œ†Œ£ Œ†Œ£‚â°Œ†Œ£ (Œª _ ‚Üí reflEq (‚ä©C _)) (Œª _ _ ‚Üí reflEq (‚ä©D _ _))
  redSubst*‚Ä≤ A‚áí*B (Id·µ£ (Id·µ£ Ty lhs rhs A‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)) =
    case whrDet‚Üò (A‚áí*Id , Id‚Çô) A‚áí*B of Œª
      B‚áí*Id ‚Üí
      Id·µ£ (Id·µ£ Ty lhs rhs B‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)
    , Id‚Çå‚Ä≤ B‚áí*Id (reflEq ‚ä©Ty) (reflEqTerm ‚ä©Ty ‚ä©lhs)
        (reflEqTerm ‚ä©Ty ‚ä©rhs)
  redSubst*‚Ä≤ A‚áí*B (emb ‚â§·µò-refl ‚ä©A) =
      case redSubst*‚Ä≤ A‚áí*B ‚ä©A of Œª
        (‚ä©B , A‚â°B) ‚Üí (emb ‚â§·µò-refl ‚ä©B) ,
          (irrelevanceEq ‚ä©A (emb ‚â§·µò-refl ‚ä©A) A‚â°B)
  redSubst*‚Ä≤ A‚áí*B (emb (‚â§·µò-step p) ‚ä©A) =
      case redSubst*‚Ä≤ A‚áí*B (emb p ‚ä©A) of Œª
        (‚ä©B , A‚â°B) ‚Üí
        emb-<-‚ä© ‚â§·µò-refl ‚ä©B
      , irrelevanceEq (emb p ‚ä©A) (emb (‚â§·µò-step p) ‚ä©A) A‚â°B

opaque

  -- If t is reducible and reduces to¬†u, then u is reducible and equal
  -- to¬†t.

  redSubst*Term‚Ä≤ :
    Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / ‚ä©A √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A
  redSubst*Term‚Ä≤ t‚áí*u ‚ä©U@(U·µ£‚Ä≤ l ‚â§·µò-refl D) (U‚Çú A t‚áí*A A-type A‚âÖA ‚ä©t) =
    case whrDet‚ÜòTerm (t‚áí*A , typeWhnf A-type)
           (conv* t‚áí*u (subset* D)) of Œª
      u‚áí*A ‚Üí
      case redSubst*‚Ä≤ (univ* (conv* t‚áí*u (subset* D))) ‚ä©t of Œª
        (‚ä©u , t‚â°u) ‚Üí
      U‚Çú A u‚áí*A A-type A‚âÖA ‚ä©u
    , U‚Çú‚Çå A A t‚áí*A u‚áí*A A-type A-type A‚âÖA ‚ä©t ‚ä©u t‚â°u
  redSubst*Term‚Ä≤
    t‚áí*u ‚ä©U@(U·µ£‚Ä≤ l (‚â§·µò-step l<) D) (U‚Çú A t‚áí*A A-type A‚âÖA ‚ä©t) =
    case redSubst*Term‚Ä≤ t‚áí*u (U·µ£‚Ä≤ l l< D) (U‚Çú A t‚áí*A A-type A‚âÖA ‚ä©t) of Œª
      (‚ä©u , t‚â°u) ‚Üí (irrelevanceTerm (U·µ£‚Ä≤ l l< D) ‚ä©U ‚ä©u)
        , irrelevanceEqTerm (U·µ£‚Ä≤ l l< D) ‚ä©U t‚â°u
  redSubst*Term‚Ä≤ t‚áí*u (‚Ñï·µ£ A‚áí*‚Ñï) (‚Ñï‚Çú v t‚áí*v v‚âÖv v-ok) =
    case whrDet‚ÜòTerm (t‚áí*v , naturalWhnf (natural v-ok))
           (conv* t‚áí*u (subset* A‚áí*‚Ñï)) of Œª
      u‚áí*v ‚Üí
      ‚Ñï‚Çú v u‚áí*v v‚âÖv v-ok
    , ‚Ñï‚Çú‚Çå v v t‚áí*v u‚áí*v v‚âÖv (reflNatural-prop v-ok)
  redSubst*Term‚Ä≤ t‚áí*u (Empty·µ£ A‚áí*Empty) (Empty‚Çú v t‚áí*v v‚âÖv v-ok) =
    case whrDet‚ÜòTerm (t‚áí*v , ne (empty v-ok))
           (conv* t‚áí*u (subset* A‚áí*Empty)) of Œª
      u‚áí*v ‚Üí
      Empty‚Çú v u‚áí*v v‚âÖv v-ok
    , Empty‚Çú‚Çå v v t‚áí*v u‚áí*v v‚âÖv (reflEmpty-prop v-ok)
  redSubst*Term‚Ä≤
    t‚áí*u (Unit·µ£ {s} (Unit‚Çú A‚áí*Unit _)) (Unit‚Çú v t‚áí*v v‚âÖv v-ok) =
    let t‚áí*u        = conv* t‚áí*u (subset* A‚áí*Unit)
        u‚áí*v        = whrDet‚ÜòTerm (t‚áí*v , unit v-ok) t‚áí*u
        _ , ‚ä¢t , ‚ä¢u = wf-‚ä¢‚â°‚à∑ (subset*Term t‚áí*u)
    in
      Unit‚Çú v u‚áí*v v‚âÖv v-ok
    , (case Unit-with-Œ∑? s of Œª where
         (inj‚ÇÅ Œ∑)                ‚Üí Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u Œ∑
         (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí
           Unit‚Çú‚Çå ∑ v v t‚áí*v u‚áí*v v‚âÖv (reflUnit ∑-prop v-ok) no-Œ∑)
  redSubst*Term‚Ä≤
    t‚áí*u (ne‚Ä≤ B A‚áí*B B-ne B‚âÖB) (ne‚Çú v t‚áí*v v-ok@(neNf‚Çú v-ne v~v)) =
    case whrDet‚ÜòTerm (t‚áí*v , ne v-ne)
           (conv* t‚áí*u (subset* A‚áí*B)) of Œª
      u‚áí*v ‚Üí
      ne‚Çú v u‚áí*v v-ok
    , ne‚Çú‚Çå v v t‚áí*v u‚áí*v (neNf‚Çú‚Çå v-ne v-ne v~v)
  redSubst*Term‚Ä≤
    t‚áí*u ‚ä©A@(B·µ£‚Ä≤ BŒ†! C D A‚áí*Œ† Œ†‚â°Œ† ‚ä©C ‚ä©D D‚â°D ok)
    ‚ä©t@(v , t‚áí*v , v-fun , v‚âÖv , v‚àò‚â°v‚àò , ‚ä©v‚àò) =
    case whrDet‚ÜòTerm (t‚áí*v , functionWhnf v-fun)
           (conv* t‚áí*u (subset* A‚áí*Œ†)) of Œª
      u‚áí*v ‚Üí
    case v , u‚áí*v , v-fun , v‚âÖv , v‚àò‚â°v‚àò , ‚ä©v‚àò of Œª
      (‚ä©u : _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©A) ‚Üí
      ‚ä©u
    , ( v , v , t‚áí*v , u‚áí*v , v-fun , v-fun , v‚âÖv , ‚ä©t , ‚ä©u
      , (Œª _ _ ‚Üí reflEqTerm (‚ä©D _ _) (‚ä©v‚àò _ _))
      )
  redSubst*Term‚Ä≤
    t‚áí*u ‚ä©A@(B·µ£‚Ä≤ (BŒ£ s _ _) C D A‚áí*Œ£ Œ£‚â°Œ£ ‚ä©C ‚ä©D D‚â°D ok)
    ‚ä©t@(v , t‚áí*v , v‚âÖv , v-prod , v-ok) =
    case whrDet‚ÜòTerm (t‚áí*v , productWhnf v-prod)
           (conv* t‚áí*u (subset* A‚áí*Œ£)) of Œª
      u‚áí*v ‚Üí
    case v , u‚áí*v , v‚âÖv , v-prod , v-ok of Œª
      (‚ä©u : _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©A) ‚Üí
      ‚ä©u
    , ( v , v , t‚áí*v , u‚áí*v , v‚âÖv , ‚ä©t , ‚ä©u , v-prod , v-prod
      , (case PE.singleton s of Œª where
           (ùï§ , PE.refl) ‚Üí
             case v-ok of Œª
               (‚ä©fst , ‚ä©snd) ‚Üí
               ‚ä©fst , ‚ä©fst , reflEqTerm (‚ä©C _) ‚ä©fst
             , reflEqTerm (‚ä©D _ _) ‚ä©snd
           (ùï® , PE.refl) ‚Üí
             case PE.singleton v-prod of Œª where
               (ne _  , PE.refl) ‚Üí v-ok
               (prod‚Çô , PE.refl) ‚Üí
                 case v-ok of Œª
                   (eq , ‚ä©fst , ‚ä©snd , _) ‚Üí
                   eq , eq , ‚ä©fst , ‚ä©fst , ‚ä©snd , ‚ä©snd
                 , reflEqTerm (‚ä©C _) ‚ä©fst
                 , reflEqTerm (‚ä©D _ _) ‚ä©snd)
      )
  redSubst*Term‚Ä≤
    t‚áí*u (Id·µ£ (Id·µ£ Ty lhs rhs A‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs))
    (v , t‚áí*v , v-id , v-ok) =
    case whrDet‚ÜòTerm (t‚áí*v , identityWhnf v-id)
           (conv* t‚áí*u (subset* A‚áí*Id)) of Œª
      u‚áí*v ‚Üí
      (v , u‚áí*v , v-id , v-ok)
    , ( v , v , t‚áí*v , u‚áí*v , v-id , v-id
      , (case PE.singleton v-id of Œª where
           (rfl‚Çô , PE.refl) ‚Üí v-ok
           (ne _ , PE.refl) ‚Üí v-ok)
      )
  redSubst*Term‚Ä≤ t‚áí*u (emb ‚â§·µò-refl ‚ä©A)     = redSubst*Term‚Ä≤ t‚áí*u ‚ä©A
  redSubst*Term‚Ä≤ t‚áí*u (emb (‚â§·µò-step p) ‚ä©A) =
    redSubst*Term‚Ä≤ t‚áí*u (emb p ‚ä©A)
