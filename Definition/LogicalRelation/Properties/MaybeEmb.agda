------------------------------------------------------------------------
-- Embedding of the logical relation into higher type levels
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.MaybeEmb
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M
open import Definition.LogicalRelation R

open import Tools.Nat using (Nat)

private
  variable
    n             : Nat
    Œì             : Con Term n
    A B t u       : Term n
    l l‚ÇÅ l‚ÇÇ l‚ÇÉ l‚Ä≤ : TypeLevel

------------------------------------------------------------------------
-- Some lemmas related to _<_ and _‚â§_

opaque

  -- The relation _<_ is transitive.

  <-trans : l‚ÇÅ < l‚ÇÇ ‚Üí l‚ÇÇ < l‚ÇÉ ‚Üí l‚ÇÅ < l‚ÇÉ
  <-trans 0<1 ()

opaque

  -- The relation _‚â§_ is transitive.

  ‚â§-trans : l‚ÇÅ ‚â§ l‚ÇÇ ‚Üí l‚ÇÇ ‚â§ l‚ÇÉ ‚Üí l‚ÇÅ ‚â§ l‚ÇÉ
  ‚â§-trans refl    q       = q
  ‚â§-trans p       refl    = p
  ‚â§-trans (emb p) (emb q) = emb (<-trans p q)

opaque

  -- The level ‚Å∞ is the lowest level.

  ‚Å∞‚â§ : ‚Å∞ ‚â§ l
  ‚Å∞‚â§ {l = ‚Å∞} = refl
  ‚Å∞‚â§ {l = ¬π} = emb 0<1

opaque

  -- The level ¬π is the highest level.

  ‚â§¬π : l ‚â§ ¬π
  ‚â§¬π {l = ‚Å∞} = emb 0<1
  ‚â§¬π {l = ¬π} = refl

------------------------------------------------------------------------
-- Embedding lemmas

-- Any level can be embedded into the highest level.
maybeEmb : ‚àÄ {l A}
         ‚Üí Œì ‚ä©‚ü® l ‚ü© A
         ‚Üí Œì ‚ä©‚ü® ¬π ‚ü© A
maybeEmb {l = ‚Å∞} [A] = emb 0<1 [A]
maybeEmb {l = ¬π} [A] = [A]

-- The lowest level can be embedded in any level.
maybeEmb‚Ä≤ : ‚àÄ {l A}
          ‚Üí Œì ‚ä©‚ü® ‚Å∞ ‚ü© A
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A
maybeEmb‚Ä≤ {l = ‚Å∞} [A] = [A]
maybeEmb‚Ä≤ {l = ¬π} [A] = emb 0<1 [A]

opaque

  -- A variant of emb.

  emb-‚â§-‚ä© : l ‚â§ l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  emb-‚â§-‚ä© refl      ‚ä©A = ‚ä©A
  emb-‚â§-‚ä© (emb 0<1) ‚ä©A = emb 0<1 ‚ä©A

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚â° :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚â° {l‚â§l‚Ä≤ = refl}    A‚â°B = A‚â°B
  emb-‚â§-‚â° {l‚â§l‚Ä≤ = emb 0<1} A‚â°B = A‚â°B

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚à∑ :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚à∑ {l‚â§l‚Ä≤ = refl}    ‚ä©t = ‚ä©t
  emb-‚â§-‚à∑ {l‚â§l‚Ä≤ = emb 0<1} ‚ä©t = ‚ä©t

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚â°‚à∑ :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚â°‚à∑ {l‚â§l‚Ä≤ = refl}    t‚â°u = t‚â°u
  emb-‚â§-‚â°‚à∑ {l‚â§l‚Ä≤ = emb 0<1} t‚â°u = t‚â°u
