------------------------------------------------------------------------
-- Embedding of the logical relation into higher type levels
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.MaybeEmb
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Kit R
open import Definition.LogicalRelation.Properties.Universe R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Nat using (Nat; 1+; ‚â§‚Ä≤-step; ‚â§‚Ä≤-refl; <‚áí<‚Ä≤; <‚Ä≤‚áí<;  ‚â§‚áí‚â§‚Ä≤; ‚â§‚Ä≤‚áí‚â§; s‚â§s)

private
  variable
    n ‚Ñì            : Nat
    Œì             : Con Term n
    A B t u       : Term n
    l l‚ÇÅ l‚ÇÇ l‚ÇÉ l‚Ä≤ : TypeLevel

------------------------------------------------------------------------
-- Some lemmas related to _<_ and _‚â§_

opaque

  -- The relation _<_ is transitive.

  <-trans : l‚ÇÅ < l‚ÇÇ ‚Üí l‚ÇÇ < l‚ÇÉ ‚Üí l‚ÇÅ < l‚ÇÉ
  <-trans a ‚â§‚Ä≤-refl = ‚â§‚Ä≤-step a
  <-trans a (‚â§‚Ä≤-step b) = ‚â§‚Ä≤-step (<-trans a b)

opaque

  -- The relation _‚â§_ is transitive.

  ‚â§-trans : l‚ÇÅ ‚â§ l‚ÇÇ ‚Üí l‚ÇÇ ‚â§ l‚ÇÉ ‚Üí l‚ÇÅ ‚â§ l‚ÇÉ
  ‚â§-trans p ‚â§‚Ä≤-refl     = p
  ‚â§-trans p (‚â§‚Ä≤-step q) = ‚â§‚Ä≤-step (‚â§-trans p q)

opaque

  -- The level ‚Å∞ is the lowest level.

  ‚Å∞‚â§ : 0 ‚â§ l
  ‚Å∞‚â§ {l = 0} = ‚â§‚Ä≤-refl
  ‚Å∞‚â§ {l = 1+ l} =
    let k = ‚Å∞‚â§ {l} in s k
    where
    s : 0 ‚â§ l ‚Üí 0 ‚â§ 1+ l
    s ‚â§‚Ä≤-refl = ‚â§‚Ä≤-step ‚â§‚Ä≤-refl
    s (‚â§‚Ä≤-step x) = ‚â§‚Ä≤-step (‚â§‚Ä≤-step x)


------------------------------------------------------------------------
-- Embedding lemmas

-- The lowest level can be embedded in any level.
maybeEmb‚Ä≤ : ‚àÄ {l A}
          ‚Üí Œì ‚ä©‚ü® 0 ‚ü© A
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A
maybeEmb‚Ä≤ {l = 0} [A] = [A]
maybeEmb‚Ä≤ {l = 1+ l} [A] = emb {l‚Ä≤ = 0} (‚ÇÄ< {l}) (lemma (‚ÇÄ< {l}) [A])
  where
  lemma : {l‚Ä≤ l : TypeLevel} {Œì : Con Term ‚Ñì} {A : Term ‚Ñì} ‚Üí (p : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚Üí LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì A
  lemma ‚â§‚Ä≤-refl A = A
  lemma (‚â§‚Ä≤-step p) A = lemma p A
  ‚ÇÄ< : ‚àÄ{l} ‚Üí 0 < 1+ l
  ‚ÇÄ< {0} = ‚â§‚Ä≤-refl
  ‚ÇÄ< {1+ l} = ‚â§‚Ä≤-step (‚ÇÄ< {l})

opaque

  -- A variant of emb.

  emb-‚â§-‚ä© : l ‚â§ l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  emb-‚â§-‚ä© ‚â§‚Ä≤-refl      ‚ä©A = ‚ä©A
  emb-‚â§-‚ä© (‚â§‚Ä≤-step p) ‚ä©A  =
    let a = ‚â§‚Ä≤‚áí‚â§ p
    in emb-‚ä© (<‚áí<‚Ä≤ (s‚â§s a)) ‚ä©A

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚â° :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚â° {l‚â§l‚Ä≤ = ‚â§‚Ä≤-refl}  A‚â°B = A‚â°B
  emb-‚â§-‚â° {l‚â§l‚Ä≤ = ‚â§‚Ä≤-step l<} {‚ä©A = ‚ä©A} A‚â°B =
    irrelevanceEq ‚ä©A (emb-‚â§-‚ä© (‚â§‚Ä≤-step l<) ‚ä©A) A‚â°B

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚à∑ :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚à∑ {l‚â§l‚Ä≤ = ‚â§‚Ä≤-refl}    ‚ä©t = ‚ä©t
  emb-‚â§-‚à∑ {l‚â§l‚Ä≤ = ‚â§‚Ä≤-step l<} {‚ä©A = ‚ä©A} ‚ä©t =
    irrelevanceTerm ‚ä©A (emb-‚â§-‚ä© (‚â§‚Ä≤-step l<) ‚ä©A) ‚ä©t

opaque
  unfolding emb-‚â§-‚ä©

  -- A cast lemma related to emb-‚â§-‚ä©.

  emb-‚â§-‚â°‚à∑ :
    {l‚â§l‚Ä≤ : l ‚â§ l‚Ä≤} {‚ä©A : Œì ‚ä©‚ü® l ‚ü© A} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / emb-‚â§-‚ä© l‚â§l‚Ä≤ ‚ä©A
  emb-‚â§-‚â°‚à∑ {l‚â§l‚Ä≤ = ‚â§‚Ä≤-refl}    t‚â°u = t‚â°u
  emb-‚â§-‚â°‚à∑ {l‚â§l‚Ä≤ = ‚â§‚Ä≤-step l<} {‚ä©A = ‚ä©A} t‚â°u =
    irrelevanceEqTerm ‚ä©A (emb-‚â§-‚ä© (‚â§‚Ä≤-step l<) ‚ä©A) t‚â°u
