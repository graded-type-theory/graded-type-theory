------------------------------------------------------------------------
-- Some definitions related to kit and kit‚Ä≤
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Kit
  {a} {Mod : Set a}
  {ùïÑ : Modality Mod}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped Mod as U hiding (K)
open import Definition.Untyped.Neutral Mod type-variant
open import Definition.Untyped.Properties Mod
open import Definition.Typed.Properties R
open import Definition.Typed R
open import Definition.Typed.Weakening R
open import Definition.LogicalRelation R

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Unit

private variable
  l l‚ÇÅ l‚ÇÇ n : Nat
  Œì         : Con Term _
  A B       : Term _

-- A variant of _‚ä©‚ü®_‚ü©_.

infix 4 _‚ä©<‚ü®_‚ü©_

_‚ä©<‚ü®_‚ü©_ : Con Term n ‚Üí l‚ÇÅ <·µò l‚ÇÇ ‚Üí Term n ‚Üí Set a
Œì ‚ä©<‚ü® p ‚ü© A = LogRelKit._‚ä©_ (kit‚Ä≤ p) Œì A

-- A variant of _‚ä©‚ü®_‚ü©_‚â°_/_.

infix 4 _‚ä©<‚ü®_‚ü©_‚â°_/_

_‚ä©<‚ü®_‚ü©_‚â°_/_ :
  (Œì : Con Term n) (p : l‚ÇÅ <·µò l‚ÇÇ) (A _ : Term n) ‚Üí Œì ‚ä©<‚ü® p ‚ü© A ‚Üí Set a
Œì ‚ä©<‚ü® p ‚ü© A ‚â° B / ‚ä©A = LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ p) Œì A B ‚ä©A

-- If p¬†:¬†l‚ÇÅ¬†<·µò¬†l‚ÇÇ, then Œì¬†‚ä©<‚ü®¬†p¬†‚ü©¬†A is logically equivalent to
-- Œì¬†‚ä©‚ü®¬†l‚ÇÅ¬†‚ü©¬†A.

‚ä©<‚áî‚ä© : (p : l‚ÇÅ <·µò l‚ÇÇ) ‚Üí Œì ‚ä©<‚ü® p ‚ü© A ‚áî Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A
‚ä©<‚áî‚ä© ‚â§·µò-refl     = id‚áî
‚ä©<‚áî‚ä© (‚â§·µò-step p) = ‚ä©<‚áî‚ä© p

-- If p¬†:¬†l‚ÇÅ¬†<·µò¬†l‚ÇÇ and ‚ä©A¬†:¬†Œì¬†‚ä©<‚ü®¬†p¬†‚ü©¬†A, then Œì¬†‚ä©<‚ü®¬†p¬†‚ü©¬†A¬†‚â°¬†B¬†/¬†‚ä©A is
-- logically equivalent to Œì¬†‚ä©‚ü®¬†l‚ÇÅ¬†‚ü©¬†A¬†‚â°¬†B¬†/¬†‚ä©<‚áî‚ä©¬†p¬†.proj‚ÇÅ¬†‚ä©A.

‚ä©<‚â°‚áî‚ä©‚â° :
  (p : l‚ÇÅ <·µò l‚ÇÇ) {‚ä©A : Œì ‚ä©<‚ü® p ‚ü© A} ‚Üí
  Œì ‚ä©<‚ü® p ‚ü© A ‚â° B / ‚ä©A ‚áî Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A ‚â° B / ‚ä©<‚áî‚ä© p .proj‚ÇÅ ‚ä©A
‚ä©<‚â°‚áî‚ä©‚â° ‚â§·µò-refl     = id‚áî
‚ä©<‚â°‚áî‚ä©‚â° (‚â§·µò-step p) = ‚ä©<‚â°‚áî‚ä©‚â° p

-- A variant of ‚ä©<‚â°‚áî‚ä©‚â°.

‚ä©<‚â°‚áî‚ä©‚â°‚Ä≤ :
  (p : l‚ÇÅ <·µò l‚ÇÇ) {‚ä©A : Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A} ‚Üí
  Œì ‚ä©<‚ü® p ‚ü© A ‚â° B / ‚ä©<‚áî‚ä© p .proj‚ÇÇ ‚ä©A ‚áî Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A ‚â° B / ‚ä©A
‚ä©<‚â°‚áî‚ä©‚â°‚Ä≤ ‚â§·µò-refl     = id‚áî
‚ä©<‚â°‚áî‚ä©‚â°‚Ä≤ (‚â§·µò-step p) = ‚ä©<‚â°‚áî‚ä©‚â°‚Ä≤ p

-- If l‚ÇÅ¬†<·µò¬†l‚ÇÇ, then Œì¬†‚ä©‚ü®¬†l‚ÇÅ¬†‚ü©¬†A is contained in Œì¬†‚ä©‚ü®¬†l‚ÇÇ¬†‚ü©¬†A.

emb-<-‚ä© : l‚ÇÅ <·µò l‚ÇÇ ‚Üí Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A ‚Üí Œì ‚ä©‚ü® l‚ÇÇ ‚ü© A
emb-<-‚ä© p = emb p ‚àò‚Üí ‚ä©<‚áî‚ä© p .proj‚ÇÇ

opaque

  -- If l‚ÇÅ¬†‚â§·µò¬†l‚ÇÇ, then Œì¬†‚ä©‚ü®¬†l‚ÇÅ¬†‚ü©¬†A is contained in Œì¬†‚ä©‚ü®¬†l‚ÇÇ¬†‚ü©¬†A.

  emb-‚â§-‚ä© : l‚ÇÅ ‚â§·µò l‚ÇÇ ‚Üí Œì ‚ä©‚ü® l‚ÇÅ ‚ü© A ‚Üí Œì ‚ä©‚ü® l‚ÇÇ ‚ü© A
  emb-‚â§-‚ä© ‚â§·µò-refl     = id·∂†
  emb-‚â§-‚ä© (‚â§·µò-step p) = emb (1+‚â§·µò1+ p) ‚àò‚Üí ‚ä©<‚áî‚ä© (1+‚â§·µò1+ p) .proj‚ÇÇ

opaque

  -- If p¬†:¬†l‚ÇÅ¬†<·µò¬†l‚ÇÇ, then kit¬†l‚ÇÅ is equal to kit‚Ä≤¬†p.

  kit‚â°kit‚Ä≤ : (p : l‚ÇÅ <·µò l‚ÇÇ) ‚Üí kit l‚ÇÅ PE.‚â° kit‚Ä≤ p
  kit‚â°kit‚Ä≤ ‚â§·µò-refl     = PE.refl
  kit‚â°kit‚Ä≤ (‚â§·µò-step p) = kit‚â°kit‚Ä≤ p

opaque

  -- Irrelevance for _‚ä©<‚ü®_‚ü©_.

  irrelevance-‚ä©< :
    (p : l <·µò l‚ÇÅ) (q : l <·µò l‚ÇÇ) ‚Üí Œì ‚ä©<‚ü® p ‚ü© A ‚Üí Œì ‚ä©<‚ü® q ‚ü© A
  irrelevance-‚ä©<  ‚â§·µò-refl    ‚â§·µò-refl     = id·∂†
  irrelevance-‚ä©< p           (‚â§·µò-step q) = irrelevance-‚ä©< p q
  irrelevance-‚ä©< (‚â§·µò-step p) q           = irrelevance-‚ä©< p q

opaque
  unfolding irrelevance-‚ä©<

  -- One form of irrelevance for _‚ä©<‚ü®_‚ü©_‚â°_/_.

  irrelevance-‚ä©<‚â° :
    (p : l <·µò l‚ÇÅ) (q : l <·µò l‚ÇÇ) {‚ä©A : Œì ‚ä©<‚ü® p ‚ü© A} ‚Üí
    Œì ‚ä©<‚ü® p ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©<‚ü® q ‚ü© A ‚â° B / irrelevance-‚ä©< p q ‚ä©A
  irrelevance-‚ä©<‚â° ‚â§·µò-refl     ‚â§·µò-refl     = id·∂†
  irrelevance-‚ä©<‚â° (‚â§·µò-step p) ‚â§·µò-refl     = irrelevance-‚ä©<‚â° p ‚â§·µò-refl
  irrelevance-‚ä©<‚â° ‚â§·µò-refl     (‚â§·µò-step q) = irrelevance-‚ä©<‚â° ‚â§·µò-refl q
  irrelevance-‚ä©<‚â° (‚â§·µò-step p) (‚â§·µò-step q) =
    irrelevance-‚ä©<‚â° (‚â§·µò-step p) q
