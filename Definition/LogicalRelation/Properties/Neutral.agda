------------------------------------------------------------------------
-- Neutral terms are in the logical relation (given some assumptions)
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Neutral
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
import Definition.Typed.Weakening R as Wk
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Symmetry R

open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE
import Tools.Sum as ‚äé

private
  variable
    m : Nat
    Œì : Con Term m

-- Neutral reflexive types are reducible.
neu : ‚àÄ {l A} (neA : Neutral A)
    ‚Üí Œì ‚ä¢ A
    ‚Üí Œì ‚ä¢ A ‚âÖ A
    ‚Üí Œì ‚ä©‚ü® l ‚ü© A
neu neA A A~A = ne‚Ä≤ _ (idRed:*: A) neA A~A

  -- Helper function for reducible neutral equality of a specific type of derivation.
neuEq‚Ä≤ : ‚àÄ {l A B} ([A] : Œì ‚ä©‚ü® l ‚ü©ne A)
         (neA : Neutral A)
         (neB : Neutral B)
       ‚Üí Œì ‚ä¢ B
       ‚Üí Œì ‚ä¢ A ‚âÖ B
       ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ne-intr [A]
neuEq‚Ä≤ (noemb (ne K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K)) neA neB B A~B =
  let A‚â°K = whnfRed* D (ne neA)
  in  ne‚Çå _ (idRed:*: B) neB (PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚âÖ _) A‚â°K A~B)
neuEq‚Ä≤ (emb ‚â§·µò-refl x) neB A:‚â°:B = neuEq‚Ä≤ x neB A:‚â°:B
neuEq‚Ä≤ (emb (‚â§·µò-step p) x) neB A:‚â°:B = neuEq‚Ä≤ (emb p x) neB A:‚â°:B

-- Neutrally equal types are of reducible equality.
neuEq : ‚àÄ {l A B} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
        (neA : Neutral A)
        (neB : Neutral B)
      ‚Üí Œì ‚ä¢ B
      ‚Üí Œì ‚ä¢ A ‚âÖ B
      ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
neuEq [A] neA neB B A~B =
  irrelevanceEq (ne-intr (ne-elim neA [A]))
                [A]
                (neuEq‚Ä≤ (ne-elim neA [A]) neA neB B A~B)

mutual

  -- Neutral reflexive terms are reducible.
  neuTerm : ‚àÄ {l A n} ([A] : Œì ‚ä©‚ü® l ‚ü© A) (neN : Neutral n)
          ‚Üí Œì ‚ä¢ n ‚à∑ A
          ‚Üí Œì ‚ä¢ n ~ n ‚à∑ A
          ‚Üí Œì ‚ä©‚ü® l ‚ü© n ‚à∑ A / [A]
  neuTerm (U·µ£‚Ä≤ l ‚â§·µò-refl [ ‚ä¢A , ‚ä¢B , D ]) neN n n~n =
    let A‚â°U  = subset* D
        n‚â°n  = ~-to-‚âÖ‚Çú (~-conv n~n A‚â°U)
    in U‚Çú _ (idRedTerm:*: (conv n A‚â°U)) (ne neN) n‚â°n
      (neu neN (univ (conv n A‚â°U)) (~-to-‚âÖ (~-conv n~n A‚â°U)))
  neuTerm (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U) n-ne ‚ä¢n n~n =
    irrelevanceTerm (U·µ£‚Ä≤ _ p A‚áí*U) (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U)
      (neuTerm (U·µ£‚Ä≤ _ p A‚áí*U) n-ne ‚ä¢n n~n)
  neuTerm (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) neN n n~n =
    let A‚â°‚Ñï  = subset* D
        n~n‚Ä≤ = ~-conv n~n A‚â°‚Ñï
        n‚â°n  = ~-to-‚âÖ‚Çú n~n‚Ä≤
    in  ‚Ñï‚Çú _ (idRedTerm:*: (conv n A‚â°‚Ñï)) n‚â°n (ne (neNf‚Çú neN (conv n A‚â°‚Ñï) n~n‚Ä≤))
  neuTerm (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) neN n n~n =
    let A‚â°Empty  = subset* D
        n~n‚Ä≤ = ~-conv n~n A‚â°Empty
        n‚â°n  = ~-to-‚âÖ‚Çú n~n‚Ä≤
    in  Empty‚Çú _ (idRedTerm:*: (conv n A‚â°Empty)) n‚â°n (ne (neNf‚Çú neN (conv n A‚â°Empty) n~n‚Ä≤))
  neuTerm (Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] _)) neN n n~n =
    let A‚â°Unit  = subset* D
        n~n‚Ä≤ = ~-conv n~n A‚â°Unit
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤
    in  Unit‚Çú _ (idRedTerm:*: (conv n A‚â°Unit)) n‚â°n‚Ä≤
              (ne (neNf‚Çú neN (conv n A‚â°Unit) n~n‚Ä≤))
  neuTerm (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) neN n n~n =
    let A‚â°K = subset* D
    in  ne‚Çú _ (idRedTerm:*: (conv n A‚â°K)) (neNf‚Çú neN (conv n A‚â°K)
            (~-conv n~n A‚â°K))
  neuTerm (Œ†·µ£‚Ä≤ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) neN n n~n =
    let A‚â°Œ†FG = subset* (red D)
    in  Œ†‚Çú _ (idRedTerm:*: (conv n A‚â°Œ†FG)) (ne neN) (~-to-‚âÖ‚Çú (~-conv n~n A‚â°Œ†FG))
           (Œª {_} {œÅ} [œÅ] ‚ä¢Œî [a] [b] [a‚â°b] ‚Üí
              let A‚â°Œ†FG = subset* (red D)
                  œÅA‚â°œÅŒ†FG = Wk.wkEq [œÅ] ‚ä¢Œî (subset* (red D))
                  G[a]‚â°G[b] = escapeEq ([G] [œÅ] ‚ä¢Œî [b])
                                          (symEq ([G] [œÅ] ‚ä¢Œî [a]) ([G] [œÅ] ‚ä¢Œî [b])
                                                 (G-ext [œÅ] ‚ä¢Œî [a] [b] [a‚â°b]))
                  a = escapeTerm ([F] [œÅ] ‚ä¢Œî) [a]
                  b = escapeTerm ([F] [œÅ] ‚ä¢Œî) [b]
                  a‚â°b = escapeTermEq ([F] [œÅ] ‚ä¢Œî) [a‚â°b]
                  ‚ä¢œÅF = Wk.wk [œÅ] ‚ä¢Œî ‚ä¢F
                  ‚ä¢œÅG = Wk.wk (Wk.lift [œÅ]) (‚ä¢Œî ‚àô ‚ä¢œÅF) ‚ä¢G
                  A‚â°Œ†FG‚ÇÅ = trans A‚â°Œ†FG
                             (Œ†Œ£-cong ‚ä¢F (refl ‚ä¢F) (refl ‚ä¢G) ok)
                  œÅA‚â°œÅŒ†FG‚ÇÅ = trans œÅA‚â°œÅŒ†FG
                               (Œ†Œ£-cong ‚ä¢œÅF (refl ‚ä¢œÅF) (refl ‚ä¢œÅG) ok)
                  œÅA‚â°œÅŒ†FG‚ÇÇ = trans œÅA‚â°œÅŒ†FG
                               (Œ†Œ£-cong ‚ä¢œÅF (refl ‚ä¢œÅF) (refl ‚ä¢œÅG) ok)
                  œÅn‚ÇÅ = conv (Wk.wkTerm [œÅ] ‚ä¢Œî n) œÅA‚â°œÅŒ†FG‚ÇÅ
                  œÅn‚ÇÇ = conv (Wk.wkTerm [œÅ] ‚ä¢Œî n) œÅA‚â°œÅŒ†FG‚ÇÇ
                  neN‚àòa = ‚àò‚Çô (wkNeutral œÅ neN)
                  neN‚àòb = ‚àò‚Çô (wkNeutral œÅ neN)
              in  neuEqTerm ([G] [œÅ] ‚ä¢Œî [a]) neN‚àòa neN‚àòb
                            (œÅn‚ÇÅ ‚àò‚±º a) (conv (œÅn‚ÇÇ ‚àò‚±º b) (‚âÖ-eq G[a]‚â°G[b]))
                            (~-app (~-wk [œÅ] ‚ä¢Œî (~-conv n~n A‚â°Œ†FG‚ÇÅ))
                                   a‚â°b))

           (Œª {_} {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
              let œÅA‚â°œÅŒ†FG = Wk.wkEq [œÅ] ‚ä¢Œî (subset* (red D))
                  a = escapeTerm ([F] [œÅ] ‚ä¢Œî) [a]
                  a‚â°a = escapeTermEq ([F] [œÅ] ‚ä¢Œî) (reflEqTerm ([F] [œÅ] ‚ä¢Œî) [a])
                  ‚ä¢œÅF = Wk.wk [œÅ] ‚ä¢Œî ‚ä¢F
                  ‚ä¢œÅG = Wk.wk (Wk.lift [œÅ]) (‚ä¢Œî ‚àô ‚ä¢œÅF) ‚ä¢G
                  A‚â°Œ†FG‚Ä≤ = trans A‚â°Œ†FG
                             (Œ†Œ£-cong ‚ä¢F (refl ‚ä¢F) (refl ‚ä¢G) ok)
                  œÅA‚â°œÅŒ†FG‚Ä≤ = trans œÅA‚â°œÅŒ†FG
                               (Œ†Œ£-cong ‚ä¢œÅF (refl ‚ä¢œÅF) (refl ‚ä¢œÅG) ok)
               in  neuTerm ([G] [œÅ] ‚ä¢Œî [a]) (‚àò‚Çô (wkNeutral œÅ neN))
                           (conv (Wk.wkTerm [œÅ] ‚ä¢Œî n) œÅA‚â°œÅŒ†FG‚Ä≤ ‚àò‚±º a)
                           (~-app (~-wk [œÅ] ‚ä¢Œî (~-conv n~n A‚â°Œ†FG‚Ä≤)) a‚â°a))
  neuTerm (B·µ£‚Ä≤ (BŒ£ ùï§ _ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) neN ‚ä¢n n~n =
    let A‚â°Œ£FG = subset* (red D)
        ‚ä¢Œì = wf ‚ä¢F
        ‚ä¢n = conv ‚ä¢n A‚â°Œ£FG
        n~n = ~-conv n~n A‚â°Œ£FG

        [F] = [F] Wk.id ‚ä¢Œì
        [fst] = neuTerm [F] (fst‚Çô neN)
                        (PE.subst
                          (Œª x ‚Üí _ ‚ä¢ fst _ _ ‚à∑ x)
                          (PE.sym (wk-id F))
                          (fst‚±º ‚ä¢F ‚ä¢G ‚ä¢n))
                        (PE.subst
                          (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                          (PE.sym (wk-id F))
                          (~-fst ‚ä¢F ‚ä¢G n~n))
        [Gfst] = [G] Wk.id ‚ä¢Œì [fst]
        [snd] = neuTerm [Gfst] (snd‚Çô neN)
                        (PE.subst
                          (Œª x ‚Üí _ ‚ä¢ snd _ _ ‚à∑ x)
                          (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ)
                             (PE.sym (wk-lift-id G)))
                          (snd‚±º ‚ä¢F ‚ä¢G ‚ä¢n))
                        (PE.subst
                          (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                          (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ)
                             (PE.sym (wk-lift-id G)))
                          (~-snd ‚ä¢F ‚ä¢G n~n))
    in  Œ£‚Çú _ (idRedTerm:*: ‚ä¢n) (~-to-‚âÖ‚Çú n~n) (ne neN) ([fst] , [snd])
  neuTerm (B·µ£‚Ä≤ (BŒ£ ùï® _ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _) neN ‚ä¢n n~n =
    let A‚â°Œ£FG = subset* (red D)
        ‚ä¢Œì = wf ‚ä¢F
        ‚ä¢n = conv ‚ä¢n A‚â°Œ£FG
        n~n = ~-conv n~n A‚â°Œ£FG
    in  Œ£‚Çú _ (idRedTerm:*: ‚ä¢n) (~-to-‚âÖ‚Çú n~n) (ne neN) n~n
  neuTerm (Id·µ£ ‚ä©A) n-n ‚ä¢n n~n =
    case subset* (red ‚áí*Id) of Œª {
      A‚â°Id ‚Üí
      _
    , idRedTerm:*: (conv ‚ä¢n A‚â°Id)
    , ne n-n
    , ~-conv n~n A‚â°Id }
    where
    open _‚ä©‚ÇóId_ ‚ä©A
  neuTerm (emb ‚â§·µò-refl x) neN n = neuTerm x neN n
  neuTerm (emb (‚â§·µò-step l<) x) neN n = neuTerm (emb l< x) neN n

  -- Neutrally equal terms are of reducible equality.
  neuEqTerm : ‚àÄ {l A n n‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
              (neN : Neutral n) (neN‚Ä≤ : Neutral n‚Ä≤)
            ‚Üí Œì ‚ä¢ n  ‚à∑ A
            ‚Üí Œì ‚ä¢ n‚Ä≤ ‚à∑ A
            ‚Üí Œì ‚ä¢ n ~ n‚Ä≤ ‚à∑ A
            ‚Üí Œì ‚ä©‚ü® l ‚ü© n ‚â° n‚Ä≤ ‚à∑ A / [A]
  neuEqTerm (U·µ£‚Ä≤ l ‚â§·µò-refl [ ‚ä¢A , ‚ä¢B , D ]) neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let A‚â°U = subset* D
        n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°U
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
        nU = univ (conv n A‚â°U)
        nU‚Ä≤ = univ (conv n‚Ä≤ A‚â°U)
        wfn = neu neN nU (~-to-‚âÖ (~-trans n~n‚Ä≤‚ÇÅ (~-sym n~n‚Ä≤‚ÇÅ)))
    in U‚Çú‚Çå _ _ (idRedTerm:*: (conv n A‚â°U)) (idRedTerm:*: (conv n‚Ä≤ A‚â°U)) (ne neN) (ne neN‚Ä≤) n‚â°n‚Ä≤
      wfn (neu neN‚Ä≤ nU‚Ä≤ (~-to-‚âÖ (~-trans (~-sym n~n‚Ä≤‚ÇÅ) n~n‚Ä≤‚ÇÅ)))
      (neuEq wfn neN neN‚Ä≤ nU‚Ä≤ (‚âÖ-univ n‚â°n‚Ä≤))
  neuEqTerm (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U) n-ne n‚Ä≤-ne ‚ä¢n ‚ä¢n‚Ä≤ n~n‚Ä≤ =
    irrelevanceEqTerm (U·µ£‚Ä≤ _ p A‚áí*U) (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U)
      (neuEqTerm (U·µ£‚Ä≤ _ p A‚áí*U) n-ne n‚Ä≤-ne ‚ä¢n ‚ä¢n‚Ä≤ n~n‚Ä≤)
  neuEqTerm (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let A‚â°‚Ñï = subset* D
        n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°‚Ñï
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
    in  ‚Ñï‚Çú‚Çå _ _ (idRedTerm:*: (conv n A‚â°‚Ñï)) (idRedTerm:*: (conv n‚Ä≤ A‚â°‚Ñï))
            n‚â°n‚Ä≤ (ne (neNf‚Çú‚Çå neN neN‚Ä≤ n~n‚Ä≤‚ÇÅ))
  neuEqTerm (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let A‚â°Empty = subset* D
        n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Empty
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
    in  Empty‚Çú‚Çå _ _ (idRedTerm:*: (conv n A‚â°Empty)) (idRedTerm:*: (conv n‚Ä≤ A‚â°Empty))
            n‚â°n‚Ä≤ (ne (neNf‚Çú‚Çå neN neN‚Ä≤ n~n‚Ä≤‚ÇÅ))
  neuEqTerm (Unit·µ£ {s} (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] _)) neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let A‚â°Unit = subset* D
        n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Unit
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
    in  case Unit-with-Œ∑? s of
          ‚äé.[ Unit‚Çú‚ÇåÀ¢ (conv n A‚â°Unit) (conv n‚Ä≤ A‚â°Unit)
            , (Œª where
                 (PE.refl , no-Œ∑) ‚Üí
                   Unit‚Çú‚Çå ∑ _ _ (idRedTerm:*: (conv n A‚â°Unit))
                     (idRedTerm:*: (conv n‚Ä≤ A‚â°Unit)) n‚â°n‚Ä≤
                     (ne (neNf‚Çú‚Çå neN neN‚Ä≤ n~n‚Ä≤‚ÇÅ)) no-Œ∑)
            ]
  neuEqTerm (ne (ne K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K)) neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let A‚â°K = subset* D
    in  ne‚Çú‚Çå _ _ (idRedTerm:*: (conv n A‚â°K)) (idRedTerm:*: (conv n‚Ä≤ A‚â°K))
             (neNf‚Çú‚Çå neN neN‚Ä≤ (~-conv n~n‚Ä≤ A‚â°K))
  neuEqTerm
    (Œ†·µ£‚Ä≤ F G [ ‚ä¢A , ‚ä¢B , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
    neN neN‚Ä≤ n n‚Ä≤ n~n‚Ä≤ =
    let [Œ†FG] = Œ†·µ£‚Ä≤ F G [ ‚ä¢A , ‚ä¢B , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok
        A‚â°Œ†FG = subset* D
        n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Œ†FG
        n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
        n~n = ~-trans n~n‚Ä≤ (~-sym n~n‚Ä≤)
        n‚Ä≤~n‚Ä≤ = ~-trans (~-sym n~n‚Ä≤) n~n‚Ä≤
    in  Œ†‚Çú‚Çå _ _ (idRedTerm:*: (conv n A‚â°Œ†FG)) (idRedTerm:*: (conv n‚Ä≤ A‚â°Œ†FG))
            (ne neN) (ne neN‚Ä≤) n‚â°n‚Ä≤
            (neuTerm [Œ†FG] neN n n~n) (neuTerm [Œ†FG] neN‚Ä≤ n‚Ä≤ n‚Ä≤~n‚Ä≤)
            (Œª {_} {œÅ} [œÅ] ‚ä¢Œî [a] ‚Üí
               let œÅA‚â°œÅŒ†FG = Wk.wkEq [œÅ] ‚ä¢Œî A‚â°Œ†FG
                   œÅn = Wk.wkTerm [œÅ] ‚ä¢Œî n
                   œÅn‚Ä≤ = Wk.wkTerm [œÅ] ‚ä¢Œî n‚Ä≤
                   a = escapeTerm ([F] [œÅ] ‚ä¢Œî) [a]
                   a‚â°a = escapeTermEq ([F] [œÅ] ‚ä¢Œî) (reflEqTerm ([F] [œÅ] ‚ä¢Œî) [a])
                   neN‚àôa   = ‚àò‚Çô (wkNeutral œÅ neN)
                   neN‚Ä≤‚àôa‚Ä≤ = ‚àò‚Çô (wkNeutral œÅ neN‚Ä≤)
                   ‚ä¢œÅF = Wk.wk [œÅ] ‚ä¢Œî ‚ä¢F
                   ‚ä¢œÅG = Wk.wk (Wk.lift [œÅ]) (‚ä¢Œî ‚àô ‚ä¢œÅF) ‚ä¢G
                   œÅA‚â°œÅŒ†p‚ÇÅFG = trans œÅA‚â°œÅŒ†FG
                                 (Œ†Œ£-cong ‚ä¢œÅF (refl ‚ä¢œÅF) (refl ‚ä¢œÅG) ok)
                   œÅA‚â°œÅŒ†p‚ÇÇFG = trans œÅA‚â°œÅŒ†FG
                                 (Œ†Œ£-cong ‚ä¢œÅF (refl ‚ä¢œÅF) (refl ‚ä¢œÅG) ok)
                   Œ†pFG‚â°Œ†p‚ÇÅFG = Œ†Œ£-cong ‚ä¢F (refl ‚ä¢F) (refl ‚ä¢G) ok

               in  neuEqTerm ([G] [œÅ] ‚ä¢Œî [a]) neN‚àôa neN‚Ä≤‚àôa‚Ä≤
                     (conv œÅn œÅA‚â°œÅŒ†p‚ÇÅFG ‚àò‚±º a)
                     (conv œÅn‚Ä≤ œÅA‚â°œÅŒ†p‚ÇÇFG ‚àò‚±º a)
                     (~-app (~-wk [œÅ] ‚ä¢Œî (~-conv n~n‚Ä≤‚ÇÅ Œ†pFG‚â°Œ†p‚ÇÅFG)) a‚â°a))
  neuEqTerm
    [Œ£FG]@(B·µ£‚Ä≤ BŒ£À¢ F G [ ‚ä¢A , ‚ä¢B , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
    neN neN‚Ä≤ ‚ä¢n ‚ä¢n‚Ä≤ n~n‚Ä≤ =
    let A‚â°Œ£FG = subset* D
        n~n = ~-trans n~n‚Ä≤ (~-sym n~n‚Ä≤)
        n‚Ä≤~n‚Ä≤ = ~-trans (~-sym n~n‚Ä≤) n~n‚Ä≤
        ‚ä¢nŒ£ = conv ‚ä¢n A‚â°Œ£FG
        ‚ä¢n‚Ä≤Œ£ = conv ‚ä¢n‚Ä≤ A‚â°Œ£FG
        n~n‚Ä≤Œ£ = ~-conv n~n‚Ä≤ A‚â°Œ£FG
        n~nŒ£ = ~-conv n~n A‚â°Œ£FG
        n‚Ä≤~n‚Ä≤Œ£ = ~-conv n‚Ä≤~n‚Ä≤ A‚â°Œ£FG

        ‚ä¢Œì = wf ‚ä¢F
        [F] = [F] Wk.id ‚ä¢Œì
        ‚ä¢fstnŒ£ = (PE.subst
                (Œª x ‚Üí _ ‚ä¢ fst _ _ ‚à∑ x)
                (PE.sym (wk-id F))
                (fst‚±º ‚ä¢F ‚ä¢G ‚ä¢nŒ£))
        ‚ä¢fstn‚Ä≤Œ£ = (PE.subst
                    (Œª x ‚Üí _ ‚ä¢ fst _ _ ‚à∑ x)
                    (PE.sym (wk-id F))
                    (fst‚±º ‚ä¢F ‚ä¢G ‚ä¢n‚Ä≤Œ£))
        [fstn] = neuTerm [F] (fst‚Çô neN)
                         ‚ä¢fstnŒ£
                         (PE.subst
                           (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                           (PE.sym (wk-id F))
                           (~-fst ‚ä¢F ‚ä¢G n~nŒ£))
        [fstn‚Ä≤] = neuTerm [F] (fst‚Çô neN‚Ä≤)
                          ‚ä¢fstn‚Ä≤Œ£
                          (PE.subst
                            (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                            (PE.sym (wk-id F))
                            (~-fst ‚ä¢F ‚ä¢G n‚Ä≤~n‚Ä≤Œ£))
        [fstn‚â°fstn‚Ä≤] = neuEqTerm [F] (fst‚Çô neN) (fst‚Çô neN‚Ä≤)
                         ‚ä¢fstnŒ£
                         ‚ä¢fstn‚Ä≤Œ£
                         (PE.subst
                           (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                           (PE.sym (wk-id F))
                           (~-fst ‚ä¢F ‚ä¢G n~n‚Ä≤Œ£))
        [Gfstn] = [G] Wk.id ‚ä¢Œì [fstn]
        [Gfstn‚Ä≤] = PE.subst (Œª x ‚Üí _ ‚ä©‚ü® _ ‚ü© x [ fst _ _ ]‚ÇÄ)
                     (wk-lift-id G) ([G] Wk.id ‚ä¢Œì [fstn‚Ä≤])
        [fstn‚Ä≤‚â°fstn] = symEqTerm [F] [fstn‚â°fstn‚Ä≤]
        [Gfstn‚Ä≤‚â°Gfstn] = irrelevanceEq‚Ä≥
          (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (wk-lift-id G))
          (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (wk-lift-id G))
          ([G] Wk.id ‚ä¢Œì [fstn‚Ä≤]) [Gfstn‚Ä≤]
          (G-ext Wk.id ‚ä¢Œì [fstn‚Ä≤] [fstn] [fstn‚Ä≤‚â°fstn])
        Gfstn‚Ä≤‚â°Gfstn = ‚âÖ-eq (escapeEq [Gfstn‚Ä≤] [Gfstn‚Ä≤‚â°Gfstn])
        [sndn‚â°sndn‚Ä≤] = neuEqTerm [Gfstn] (snd‚Çô neN) (snd‚Çô neN‚Ä≤)
          (PE.subst
             (Œª x ‚Üí _ ‚ä¢ snd _ _ ‚à∑ x)
             (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
             (snd‚±º ‚ä¢F ‚ä¢G ‚ä¢nŒ£))
          (PE.subst
             (Œª x ‚Üí _ ‚ä¢ snd _ _ ‚à∑ x)
             (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
             (conv (snd‚±º ‚ä¢F ‚ä¢G ‚ä¢n‚Ä≤Œ£) Gfstn‚Ä≤‚â°Gfstn))
          (PE.subst
             (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
             (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
             (~-snd ‚ä¢F ‚ä¢G n~n‚Ä≤Œ£))
    in  Œ£‚Çú‚Çå _ _ (idRedTerm:*: ‚ä¢nŒ£) (idRedTerm:*: ‚ä¢n‚Ä≤Œ£)
            (ne neN) (ne neN‚Ä≤) (~-to-‚âÖ‚Çú n~n‚Ä≤Œ£)
            (neuTerm [Œ£FG] neN ‚ä¢n n~n) (neuTerm [Œ£FG] neN‚Ä≤ ‚ä¢n‚Ä≤ n‚Ä≤~n‚Ä≤)
            ([fstn] , [fstn‚Ä≤] , [fstn‚â°fstn‚Ä≤] , [sndn‚â°sndn‚Ä≤])
  neuEqTerm
    [Œ£FG]@(B·µ£‚Ä≤ BŒ£ ∑ F G [ ‚ä¢A , ‚ä¢B , D ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
    neN neN‚Ä≤ ‚ä¢n ‚ä¢n‚Ä≤ n~n‚Ä≤ =
    let A‚â°Œ£FG = subset* D
        n~n = ~-trans n~n‚Ä≤ (~-sym n~n‚Ä≤)
        n‚Ä≤~n‚Ä≤ = ~-trans (~-sym n~n‚Ä≤) n~n‚Ä≤
        ‚ä¢nŒ£ = conv ‚ä¢n A‚â°Œ£FG
        ‚ä¢n‚Ä≤Œ£ = conv ‚ä¢n‚Ä≤ A‚â°Œ£FG
        n~n‚Ä≤Œ£ = ~-conv n~n‚Ä≤ A‚â°Œ£FG
        n~nŒ£ = ~-conv n~n A‚â°Œ£FG
        n‚Ä≤~n‚Ä≤Œ£ = ~-conv n‚Ä≤~n‚Ä≤ A‚â°Œ£FG
    in  Œ£‚Çú‚Çå _ _ (idRedTerm:*: ‚ä¢nŒ£) (idRedTerm:*: ‚ä¢n‚Ä≤Œ£)
            (ne neN) (ne neN‚Ä≤) (~-to-‚âÖ‚Çú n~n‚Ä≤Œ£)
            (neuTerm [Œ£FG] neN ‚ä¢n n~n) (neuTerm [Œ£FG] neN‚Ä≤ ‚ä¢n‚Ä≤ n‚Ä≤~n‚Ä≤)
            n~n‚Ä≤Œ£
  neuEqTerm (Id·µ£ ‚ä©A) n-n n‚Ä≤-n ‚ä¢n ‚ä¢n‚Ä≤ n~n‚Ä≤ =
    case subset* (red ‚áí*Id) of Œª {
      A‚â°Id ‚Üí
    case ~-trans n~n‚Ä≤ (~-sym n~n‚Ä≤) of Œª {
      n~n ‚Üí
    case ~-trans (~-sym n~n‚Ä≤) n~n‚Ä≤ of Œª {
      n‚Ä≤~n‚Ä≤ ‚Üí
    ‚ä©Id‚â°‚à∑
      (neuTerm (Id·µ£ ‚ä©A) n-n ‚ä¢n n~n)
      (neuTerm (Id·µ£ ‚ä©A) n‚Ä≤-n ‚ä¢n‚Ä≤ n‚Ä≤~n‚Ä≤)
      (~-conv n~n‚Ä≤ A‚â°Id) }}}
    where
    open _‚ä©‚ÇóId_ ‚ä©A
  neuEqTerm (emb ‚â§·µò-refl     ‚ä©A) = neuEqTerm ‚ä©A
  neuEqTerm (emb (‚â§·µò-step p) ‚ä©A) = neuEqTerm (emb p ‚ä©A)
