------------------------------------------------------------------------
-- Neutral terms are in the logical relation (given some assumptions)
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Neutral
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
import Definition.Typed.Weakening R as Wk
open import Definition.Typed.Well-formed R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Unary R
open import Definition.LogicalRelation.Weakening.Restricted R

open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum

private
  variable
    m : Nat
    Œì : Con Term m
    A B n n‚Ä≤ : Term _
    l : Universe-level

opaque

  -- Neutral reflexive types are reducible (if Neutrals-included
  -- holds).

  neu : Neutrals-included ‚Üí Neutral A ‚Üí Œì ‚ä¢‚âÖ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
  neu inc neA ‚âÖA = ne‚Ä≤ inc _ (id (wf-‚ä¢‚â° (‚âÖ-eq ‚âÖA) .proj‚ÇÅ)) neA ‚âÖA

opaque

  -- Neutrally equal types are of reducible equality.

  neuEq :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Neutral A ‚Üí Neutral B ‚Üí Œì ‚ä¢ A ‚âÖ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A
  neuEq {Œì} {A} {B} [A] neA neB A~B =
    case ne-view neA [A] of Œª {
      (ne [A]‚Ä≤@(ne inc _ D neK K‚â°K)) ‚Üí
    let A‚â°K = whnfRed* D (ne neA) in
    ne‚Çå inc _ (id (wf-‚ä¢‚â° (‚âÖ-eq A~B) .proj‚ÇÇ)) neB
      (PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚âÖ _) A‚â°K A~B) }

opaque
 unfolding ‚ä©Id‚à∑‚áî‚ä©Id‚â°‚à∑
 mutual

  -- Neutral reflexive terms are reducible (if Neutrals-included
  -- holds).

  neuTerm :
    Neutrals-included ‚Üí (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Neutral n ‚Üí Œì ‚ä¢~ n ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© n ‚à∑ A / ‚ä©A
  neuTerm {Œì} {A} {n} inc ‚ä©A n-ne ~n = neuTerm‚Ä≤ ‚ä©A
    where
    ‚ä¢n : Œì ‚ä¢ n ‚à∑ A
    ‚ä¢n = wf-‚ä¢‚â°‚à∑ (‚âÖ‚Çú-eq (~-to-‚âÖ‚Çú ~n)) .proj‚ÇÇ .proj‚ÇÅ

    neuTerm‚Ä≤ : (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© n ‚à∑ A / ‚ä©A
    neuTerm‚Ä≤ (U·µ£‚Ä≤ l ‚â§·µò-refl D) =
      let A‚â°U  = subset* D
          n‚â°n  = ~-to-‚âÖ‚Çú (~-conv ~n A‚â°U)
      in
      ‚ä©U‚à∑U‚áî‚ä©U‚â°‚à∑U .proj‚ÇÅ
        (U‚Çú _ (id (conv ‚ä¢n A‚â°U)) (ne n-ne) n‚â°n
           (neu inc n-ne (~-to-‚âÖ (~-conv ~n A‚â°U))))
    neuTerm‚Ä≤ (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U) =
      irrelevanceTerm (U·µ£‚Ä≤ _ p A‚áí*U) (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U)
        (neuTerm inc (U·µ£‚Ä≤ _ p A‚áí*U) n-ne ~n)
    neuTerm‚Ä≤ (‚Ñï·µ£ D) =
      let A‚â°‚Ñï  = subset* D
          n~n‚Ä≤ = ~-conv ~n A‚â°‚Ñï
          n‚â°n  = ~-to-‚âÖ‚Çú n~n‚Ä≤
      in
      ‚ä©‚Ñï‚à∑‚Ñï‚áî‚ä©‚Ñï‚â°‚à∑‚Ñï .proj‚ÇÅ
        (‚Ñï‚Çú _ (id (conv ‚ä¢n A‚â°‚Ñï)) n‚â°n (ne (neNf‚Çú inc n-ne n~n‚Ä≤)))
    neuTerm‚Ä≤ (Empty·µ£ D) =
      let A‚â°Empty  = subset* D
          n~n‚Ä≤ = ~-conv ~n A‚â°Empty
          n‚â°n  = ~-to-‚âÖ‚Çú n~n‚Ä≤
      in
      ‚ä©Empty‚à∑Empty‚áî‚ä©Empty‚â°‚à∑Empty .proj‚ÇÅ
        (Empty‚Çú _ (id (conv ‚ä¢n A‚â°Empty)) n‚â°n (ne (neNf‚Çú inc n-ne n~n‚Ä≤)))
    neuTerm‚Ä≤ (Unit·µ£‚Ä≤ _ _ D _) =
      let A‚â°Unit  = subset* D
          n~n‚Ä≤ = ~-conv ~n A‚â°Unit
      in
      ‚ä©Unit‚à∑Unit‚áî‚ä©Unit‚â°‚à∑Unit .proj‚ÇÅ
        (Unit‚Çú _ (id (conv ‚ä¢n A‚â°Unit) , ne n-ne)
           (Unit-prop‚Ä≤‚ÜíUnit-prop (ne (neNf‚Çú inc n-ne n~n‚Ä≤))))
    neuTerm‚Ä≤ (ne‚Ä≤ _ _ D neK K‚â°K) =
      let A‚â°K = subset* D in
      ‚ä©ne‚à∑‚áî‚ä©ne‚â°‚à∑ .proj‚ÇÅ
        (ne‚Çú _ (id (conv ‚ä¢n A‚â°K)) (neNf‚Çú inc n-ne (~-conv ~n A‚â°K)))
    neuTerm‚Ä≤ (B·µ£ BŒ†! ‚ä©A@(B·µ£ F G D A‚â°A [F] [G] _ ok)) =
      let A‚â°Œ†FG = subset* D in
      ‚ä©Œ†‚à∑‚áî‚ä©Œ†‚â°‚à∑ ‚ä©A .proj‚ÇÅ
        (Œ†‚Çú _ (id (conv ‚ä¢n A‚â°Œ†FG)) (ne n-ne)
           (~-to-‚âÖ‚Çú (~-conv ~n A‚â°Œ†FG))
           (Œª {_} {œÅ = œÅ} [œÅ] ‚ä©v ‚ä©w v‚â°w ‚Üí
              neuEqTerm inc ([G] [œÅ] ‚ä©v) (‚àò‚Çô (wkNeutral œÅ n-ne))
                (‚àò‚Çô (wkNeutral œÅ n-ne))
                (~-app (~-wk (‚à∑ ∑ ≥‚äá‚Üí‚à∑ ∑‚äá [œÅ]) (~-conv ~n A‚â°Œ†FG))
                   (escapeTermEq ([F] [œÅ]) v‚â°w))))
    neuTerm‚Ä≤ (B·µ£ (BŒ£ ùï§ _ q) ‚ä©A@(B·µ£ F G D A‚â°A [F] [G] G-ext _)) =
      let A‚â°Œ£FG = subset* D
          ‚ä¢n = conv ‚ä¢n A‚â°Œ£FG
          ~n = ~-conv ~n A‚â°Œ£FG

          [F] = [F] _
          _ , ‚ä¢G , _ = inversion-Œ†Œ£ (wf-‚ä¢‚â° (‚âÖ-eq A‚â°A) .proj‚ÇÅ)
          [fst] = neuTerm inc [F] (fst‚Çô n-ne)
                    (PE.subst (_‚ä¢_~_‚à∑_ _ _ _) (PE.sym (wk-id F))
                       (~-fst ‚ä¢G ~n))
          [Gfst] = [G] _ [fst]
          [snd] = neuTerm inc [Gfst] (snd‚Çô n-ne)
                    (PE.subst (_‚ä¢_~_‚à∑_ _ _ _)
                       (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ)
                          (PE.sym (wk-lift-id G)))
                       (~-snd ‚ä¢G ~n))
      in
      ‚ä©Œ£‚à∑‚áî‚ä©Œ£‚â°‚à∑ ‚ä©A .proj‚ÇÅ
        (Œ£‚Çú _ (id ‚ä¢n) (ne n-ne) (~-to-‚âÖ‚Çú ~n) (ùï§ _ [fst] [snd]))
    neuTerm‚Ä≤ (B·µ£ (BŒ£ ùï® _ q) ‚ä©A@(B·µ£ F G D A‚â°A [F] [G] G-ext _)) =
      let A‚â°Œ£FG = subset* D
          ‚ä¢Œì = wfEq A‚â°Œ£FG
          ‚ä¢n = conv ‚ä¢n A‚â°Œ£FG
          ~n = ~-conv ~n A‚â°Œ£FG
      in
      ‚ä©Œ£‚à∑‚áî‚ä©Œ£‚â°‚à∑ ‚ä©A .proj‚ÇÅ
        (Œ£‚Çú _ (id ‚ä¢n) (ne n-ne) (~-to-‚âÖ‚Çú ~n) (ùï®-ne inc _ ~n))
    neuTerm‚Ä≤ (Id·µ£ ‚ä©A) =
      let A‚â°Id = subset* ‚áí*Id in
      ‚ä©Id‚à∑‚áî‚ä©Id‚â°‚à∑ ‚ä©A .proj‚ÇÅ
        (Id‚Çú _ (id (conv ‚ä¢n A‚â°Id)) (ne n-ne)
           (ne inc n-ne (~-conv ~n A‚â°Id)))
      where
      open _‚ä©‚ÇóId_ ‚ä©A

  -- "Neutrally equal" terms are "reducibly equal" (if
  -- Neutrals-included holds).

  neuEqTerm :
    Neutrals-included ‚Üí
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Neutral n ‚Üí Neutral n‚Ä≤ ‚Üí
    Œì ‚ä¢ n ~ n‚Ä≤ ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© n ‚â° n‚Ä≤ ‚à∑ A / ‚ä©A
  neuEqTerm {Œì} {A} {n} {n‚Ä≤} inc ‚ä©A n-ne n‚Ä≤-ne n~n‚Ä≤ = neuEqTerm‚Ä≤ ‚ä©A
    where
    n‚â°n‚Ä≤ : Œì ‚ä¢ n ‚â° n‚Ä≤ ‚à∑ A
    n‚â°n‚Ä≤ = ‚âÖ‚Çú-eq (~-to-‚âÖ‚Çú n~n‚Ä≤)

    ‚ä¢n : Œì ‚ä¢ n ‚à∑ A
    ‚ä¢n = wf-‚ä¢‚â°‚à∑ n‚â°n‚Ä≤ .proj‚ÇÇ .proj‚ÇÅ

    ‚ä¢n‚Ä≤ : Œì ‚ä¢ n‚Ä≤ ‚à∑ A
    ‚ä¢n‚Ä≤ = wf-‚ä¢‚â°‚à∑ n‚â°n‚Ä≤ .proj‚ÇÇ .proj‚ÇÇ

    neuEqTerm‚Ä≤ :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© n ‚â° n‚Ä≤ ‚à∑ A / ‚ä©A
    neuEqTerm‚Ä≤ (U·µ£‚Ä≤ l ‚â§·µò-refl D) =
      let A‚â°U = subset* D
          n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°U
          ‚âÖn , ‚âÖn‚Ä≤ = wf-‚ä¢‚âÖ (~-to-‚âÖ n~n‚Ä≤‚ÇÅ)
          n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
          wfn = neu inc n-ne ‚âÖn
      in
      U‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°U)) (id (conv ‚ä¢n‚Ä≤ A‚â°U))
        (ne n-ne) (ne n‚Ä≤-ne) n‚â°n‚Ä≤ wfn (neu inc n‚Ä≤-ne ‚âÖn‚Ä≤)
        (neuEq wfn n-ne n‚Ä≤-ne (‚âÖ-univ n‚â°n‚Ä≤))
    neuEqTerm‚Ä≤ (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U) =
      irrelevanceEqTerm (U·µ£‚Ä≤ _ p A‚áí*U) (U·µ£‚Ä≤ _ (‚â§·µò-step p) A‚áí*U)
        (neuEqTerm inc (U·µ£‚Ä≤ _ p A‚áí*U) n-ne n‚Ä≤-ne n~n‚Ä≤)
    neuEqTerm‚Ä≤ (‚Ñï·µ£ D) =
      let A‚â°‚Ñï = subset* D
          n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°‚Ñï
          n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
      in
      ‚Ñï‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°‚Ñï)) (id (conv ‚ä¢n‚Ä≤ A‚â°‚Ñï))
        n‚â°n‚Ä≤ (ne (neNf‚Çú‚Çå inc n-ne n‚Ä≤-ne n~n‚Ä≤‚ÇÅ))
    neuEqTerm‚Ä≤ (Empty·µ£ D) =
      let A‚â°Empty = subset* D
          n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Empty
          n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
      in
      Empty‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°Empty))
        (id (conv ‚ä¢n‚Ä≤ A‚â°Empty)) n‚â°n‚Ä≤
        (ne (neNf‚Çú‚Çå inc n-ne n‚Ä≤-ne n~n‚Ä≤‚ÇÅ))
    neuEqTerm‚Ä≤ (Unit·µ£ {s} (Unit·µ£ _ _ D _)) =
      let A‚â°Unit = subset* D
          n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Unit
      in
      Unit‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°Unit) , ne n-ne)
        (id (conv ‚ä¢n‚Ä≤ A‚â°Unit) , ne n‚Ä≤-ne)
        (case Unit-with-Œ∑? s of Œª where
           (inj‚ÇÅ Œ∑)                ‚Üí Unit‚Çú‚ÇåÀ¢ Œ∑
           (inj‚ÇÇ (PE.refl , no-Œ∑)) ‚Üí
             Unit‚Çú‚Çå ∑ (ne (neNf‚Çú‚Çå inc n-ne n‚Ä≤-ne n~n‚Ä≤‚ÇÅ)) no-Œ∑)
    neuEqTerm‚Ä≤ (ne (ne _ _ D neK K‚â°K)) =
      let A‚â°K = subset* D in
      ne‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°K))
        (id (conv ‚ä¢n‚Ä≤ A‚â°K))
        (neNf‚Çú‚Çå inc n-ne n‚Ä≤-ne (~-conv n~n‚Ä≤ A‚â°K))
    neuEqTerm‚Ä≤ (Œ†·µ£‚Ä≤ F G D A‚â°A [F] [G] G-ext ok) =
      let A‚â°Œ†FG = subset* D
          n~n‚Ä≤‚ÇÅ = ~-conv n~n‚Ä≤ A‚â°Œ†FG
          n‚â°n‚Ä≤ = ~-to-‚âÖ‚Çú n~n‚Ä≤‚ÇÅ
      in
      Œ†‚Çú‚Çå _ _ (id (conv ‚ä¢n A‚â°Œ†FG))
        (id (conv ‚ä¢n‚Ä≤ A‚â°Œ†FG))
        (ne n-ne) (ne n‚Ä≤-ne) n‚â°n‚Ä≤
        (Œª {_} {œÅ = œÅ} [œÅ] ‚ä©v ‚ä©w v‚â°w ‚Üí
           let v‚âÖw     = escapeTermEq ([F] [œÅ]) v‚â°w
               neN‚àôa   = ‚àò‚Çô (wkNeutral œÅ n-ne)
               neN‚Ä≤‚àôa‚Ä≤ = ‚àò‚Çô (wkNeutral œÅ n‚Ä≤-ne)

           in
           neuEqTerm inc ([G] [œÅ] ‚ä©v) neN‚àôa neN‚Ä≤‚àôa‚Ä≤
             (~-app (~-wk (‚à∑ ∑ ≥‚äá‚Üí‚à∑ ∑‚äá [œÅ]) n~n‚Ä≤‚ÇÅ) v‚âÖw))
    neuEqTerm‚Ä≤ (B·µ£‚Ä≤ BŒ£À¢ F G D A‚â°A [F] [G] G-ext _) =
      let A‚â°Œ£FG = subset* D
          n~n , n‚Ä≤~n‚Ä≤ = wf-‚ä¢~‚à∑ n~n‚Ä≤
          ‚ä¢nŒ£ = conv ‚ä¢n A‚â°Œ£FG
          ‚ä¢n‚Ä≤Œ£ = conv ‚ä¢n‚Ä≤ A‚â°Œ£FG
          n~n‚Ä≤Œ£ = ~-conv n~n‚Ä≤ A‚â°Œ£FG
          n~nŒ£ = ~-conv n~n A‚â°Œ£FG
          n‚Ä≤~n‚Ä≤Œ£ = ~-conv n‚Ä≤~n‚Ä≤ A‚â°Œ£FG

          [F] = [F] _
          _ , ‚ä¢G , _ = inversion-Œ†Œ£ (wf-‚ä¢‚â° (‚âÖ-eq A‚â°A) .proj‚ÇÅ)
          [fstn] = neuTerm inc [F] (fst‚Çô n-ne)
                     (PE.subst (_‚ä¢_~_‚à∑_ _ _ _) (PE.sym (wk-id F))
                        (~-fst ‚ä¢G n~nŒ£))
          [fstn‚Ä≤] = neuTerm inc [F] (fst‚Çô n‚Ä≤-ne)
                      (PE.subst (_‚ä¢_~_‚à∑_ _ _ _) (PE.sym (wk-id F))
                         (~-fst ‚ä¢G n‚Ä≤~n‚Ä≤Œ£))
          [fstn‚â°fstn‚Ä≤] = neuEqTerm inc [F] (fst‚Çô n-ne) (fst‚Çô n‚Ä≤-ne)
                           (PE.subst
                             (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
                             (PE.sym (wk-id F))
                             (~-fst ‚ä¢G n~n‚Ä≤Œ£))
          [Gfstn] = [G] _ [fstn]
          [sndn‚â°sndn‚Ä≤] = neuEqTerm inc [Gfstn] (snd‚Çô n-ne) (snd‚Çô n‚Ä≤-ne)
            (PE.subst
               (Œª x ‚Üí _ ‚ä¢ _ ~ _ ‚à∑ x)
               (PE.cong (Œª x ‚Üí x [ fst _ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
               (~-snd ‚ä¢G n~n‚Ä≤Œ£))
      in
      Œ£‚Çú‚Çå _ _ (id ‚ä¢nŒ£) (id ‚ä¢n‚Ä≤Œ£)
        (ne n-ne) (ne n‚Ä≤-ne) (~-to-‚âÖ‚Çú n~n‚Ä≤Œ£)
        ([fstn] , [fstn‚Ä≤] , [fstn‚â°fstn‚Ä≤] , [sndn‚â°sndn‚Ä≤])
    neuEqTerm‚Ä≤ (B·µ£‚Ä≤ BŒ£ ∑ F G D A‚â°A [F] [G] G-ext _) =
      let A‚â°Œ£FG = subset* D
          ‚ä¢nŒ£ = conv ‚ä¢n A‚â°Œ£FG
          ‚ä¢n‚Ä≤Œ£ = conv ‚ä¢n‚Ä≤ A‚â°Œ£FG
          n~n‚Ä≤Œ£ = ~-conv n~n‚Ä≤ A‚â°Œ£FG
      in
      Œ£‚Çú‚Çå _ _ (id ‚ä¢nŒ£) (id ‚ä¢n‚Ä≤Œ£) (ne n-ne) (ne n‚Ä≤-ne) (~-to-‚âÖ‚Çú n~n‚Ä≤Œ£)
        (inc , n~n‚Ä≤Œ£)
    neuEqTerm‚Ä≤ (Id·µ£ ‚ä©A) =
      case subset* ‚áí*Id of Œª
        A‚â°Id ‚Üí
      case wf-‚ä¢~‚à∑ n~n‚Ä≤ of Œª
        (n~n , n‚Ä≤~n‚Ä≤) ‚Üí
      (‚ä©Id‚â°‚à∑ ‚ä©A
         (neuTerm inc (Id·µ£ ‚ä©A) n-ne n~n)
         (neuTerm inc (Id·µ£ ‚ä©A) n‚Ä≤-ne n‚Ä≤~n‚Ä≤)
         (inc , ~-conv n~n‚Ä≤ A‚â°Id))
      where
      open _‚ä©‚ÇóId_ ‚ä©A
