------------------------------------------------------------------------
-- Equality in the logical relation is transitive
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Transitivity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
import Definition.Typed.Weakening R as Weak
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Conversion R
open import Definition.LogicalRelation.Properties.Symmetry R
open import Definition.LogicalRelation.Properties.Whnf R

open import Tools.Empty
open import Tools.Function
open import Tools.Level
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÇ)

private
  variable
    n                 : Nat
    Œì                 : Con Term n
    A B Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ : Term _
    l                 : TypeLevel

transEqTermNe : ‚àÄ {n n‚Ä≤ n‚Ä≥ A}
              ‚Üí Œì ‚ä©neNf n  ‚â° n‚Ä≤  ‚à∑ A
              ‚Üí Œì ‚ä©neNf n‚Ä≤ ‚â° n‚Ä≥ ‚à∑ A
              ‚Üí Œì ‚ä©neNf n  ‚â° n‚Ä≥ ‚à∑ A
transEqTermNe (neNf‚Çú‚Çå neK neM k‚â°m) (neNf‚Çú‚Çå neK‚ÇÅ neM‚ÇÅ k‚â°m‚ÇÅ) =
  neNf‚Çú‚Çå neK neM‚ÇÅ (~-trans k‚â°m k‚â°m‚ÇÅ)

mutual
  transEqTerm‚Ñï : ‚àÄ {n n‚Ä≤ n‚Ä≥}
               ‚Üí Œì ‚ä©‚Ñï n  ‚â° n‚Ä≤  ‚à∑‚Ñï
               ‚Üí Œì ‚ä©‚Ñï n‚Ä≤ ‚â° n‚Ä≥ ‚à∑‚Ñï
               ‚Üí Œì ‚ä©‚Ñï n  ‚â° n‚Ä≥ ‚à∑‚Ñï
  transEqTerm‚Ñï (‚Ñï‚Çú‚Çå k _ d d‚Ä≤ t‚â°u prop) (‚Ñï‚Çú‚Çå _ k‚Ä≥ d‚ÇÅ d‚Ä≥ t‚â°u‚ÇÅ prop‚ÇÅ) =
    let k‚ÇÅWhnf = naturalWhnf (proj‚ÇÅ (split prop‚ÇÅ))
        k‚Ä≤Whnf = naturalWhnf (proj‚ÇÇ (split prop))
        k‚ÇÅ‚â°k‚Ä≤ = whrDet*Term (red‚Çú d‚ÇÅ , k‚ÇÅWhnf) (red‚Çú d‚Ä≤ , k‚Ä≤Whnf)
        prop‚Ä≤ = PE.subst (Œª x ‚Üí [Natural]-prop _ x _) k‚ÇÅ‚â°k‚Ä≤ prop‚ÇÅ
    in  ‚Ñï‚Çú‚Çå k k‚Ä≥ d d‚Ä≥
          (‚âÖ‚Çú-trans t‚â°u (PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚âÖ _ ‚à∑ _) k‚ÇÅ‚â°k‚Ä≤ t‚â°u‚ÇÅ))
          (transNatural-prop prop prop‚Ä≤)

  transNatural-prop : ‚àÄ {k k‚Ä≤ k‚Ä≥}
                    ‚Üí [Natural]-prop Œì k k‚Ä≤
                    ‚Üí [Natural]-prop Œì k‚Ä≤ k‚Ä≥
                    ‚Üí [Natural]-prop Œì k k‚Ä≥
  transNatural-prop (suc·µ£ x) (suc·µ£ x‚ÇÅ) = suc·µ£ (transEqTerm‚Ñï x x‚ÇÅ)
  transNatural-prop (suc·µ£ x) (ne (neNf‚Çú‚Çå () neM k‚â°m))
  transNatural-prop zero·µ£ prop‚ÇÅ = prop‚ÇÅ
  transNatural-prop prop zero·µ£ = prop
  transNatural-prop (ne (neNf‚Çú‚Çå neK () k‚â°m)) (suc·µ£ x‚ÇÉ)
  transNatural-prop (ne [k‚â°k‚Ä≤]) (ne [k‚Ä≤‚â°k‚Ä≥]) =
    ne (transEqTermNe [k‚â°k‚Ä≤] [k‚Ä≤‚â°k‚Ä≥])

-- Empty
transEmpty-prop : ‚àÄ {k k‚Ä≤ k‚Ä≥}
  ‚Üí [Empty]-prop Œì k k‚Ä≤
  ‚Üí [Empty]-prop Œì k‚Ä≤ k‚Ä≥
  ‚Üí [Empty]-prop Œì k k‚Ä≥
transEmpty-prop (ne [k‚â°k‚Ä≤]) (ne [k‚Ä≤‚â°k‚Ä≥]) =
  ne (transEqTermNe [k‚â°k‚Ä≤] [k‚Ä≤‚â°k‚Ä≥])

transEqTermEmpty : ‚àÄ {n n‚Ä≤ n‚Ä≥}
  ‚Üí Œì ‚ä©Empty n  ‚â° n‚Ä≤ ‚à∑Empty
  ‚Üí Œì ‚ä©Empty n‚Ä≤ ‚â° n‚Ä≥ ‚à∑Empty
  ‚Üí Œì ‚ä©Empty n  ‚â° n‚Ä≥ ‚à∑Empty
transEqTermEmpty
  (Empty‚Çú‚Çå k _ d d‚Ä≤ t‚â°u prop) (Empty‚Çú‚Çå _ k‚Ä≥ d‚ÇÅ d‚Ä≥ t‚â°u‚ÇÅ prop‚ÇÅ) =
  let k‚ÇÅWhnf = ne (proj‚ÇÅ (esplit prop‚ÇÅ))
      k‚Ä≤Whnf = ne (proj‚ÇÇ (esplit prop))
      k‚ÇÅ‚â°k‚Ä≤ = whrDet*Term (red‚Çú d‚ÇÅ , k‚ÇÅWhnf) (red‚Çú d‚Ä≤ , k‚Ä≤Whnf)
      prop‚Ä≤ = PE.subst (Œª x ‚Üí [Empty]-prop _ x _) k‚ÇÅ‚â°k‚Ä≤ prop‚ÇÅ
  in Empty‚Çú‚Çå k k‚Ä≥ d d‚Ä≥
       (‚âÖ‚Çú-trans t‚â°u (PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚âÖ _ ‚à∑ _) k‚ÇÅ‚â°k‚Ä≤ t‚â°u‚ÇÅ))
       (transEmpty-prop prop prop‚Ä≤)

transUnit-prop : ‚àÄ {k k‚Ä≤ k‚Ä≥}
  ‚Üí [Unit ∑]-prop Œì k k‚Ä≤
  ‚Üí [Unit ∑]-prop Œì k‚Ä≤ k‚Ä≥
  ‚Üí [Unit ∑]-prop Œì k k‚Ä≥
transUnit-prop star·µ£ star·µ£ = star·µ£
transUnit-prop (ne [k‚â°k‚Ä≤]) (ne [k‚Ä≤‚â°k‚Ä≥]) = ne (transEqTermNe [k‚â°k‚Ä≤] [k‚Ä≤‚â°k‚Ä≥])

transEqTermUnit : ‚àÄ {s n n‚Ä≤ n‚Ä≥}
  ‚Üí Œì ‚ä©Unit‚ü® s ‚ü© n  ‚â° n‚Ä≤ ‚à∑Unit
  ‚Üí Œì ‚ä©Unit‚ü® s ‚ü© n‚Ä≤ ‚â° n‚Ä≥ ‚à∑Unit
  ‚Üí Œì ‚ä©Unit‚ü® s ‚ü© n  ‚â° n‚Ä≥ ‚à∑Unit
transEqTermUnit (Unit‚Çú‚ÇåÀ¢ ‚ä¢t _ ok) (Unit‚Çú‚ÇåÀ¢ _ ‚ä¢v _) = Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢v ok
transEqTermUnit
  (Unit‚Çú‚Çå ∑ k _ d d‚Ä≤ k‚â°k‚Ä≤ prop ok) (Unit‚Çú‚Çå ∑ _ k‚Ä¥ d‚Ä≥ d‚Ä¥ k‚Ä≥‚â°k‚Ä¥ prop‚Ä≤ _) =
  let whK‚Ä≥ = proj‚ÇÅ (usplit prop‚Ä≤)
      whK‚Ä≤ = proj‚ÇÇ (usplit prop)
      k‚Ä≥‚â°k‚Ä≤ = whrDet*Term (red‚Çú d‚Ä≥ , whK‚Ä≥) (red‚Çú d‚Ä≤ , whK‚Ä≤)
      k‚Ä≤‚â°k‚Ä¥ = PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚âÖ _ ‚à∑ _) k‚Ä≥‚â°k‚Ä≤ k‚Ä≥‚â°k‚Ä¥
      prop‚Ä≥ = PE.subst (Œª x ‚Üí [Unit ∑]-prop _ x _) k‚Ä≥‚â°k‚Ä≤ prop‚Ä≤
  in  Unit‚Çú‚Çå ∑ k k‚Ä¥ d d‚Ä¥ (‚âÖ‚Çú-trans k‚â°k‚Ä≤ k‚Ä≤‚â°k‚Ä¥)
        (transUnit-prop prop prop‚Ä≥) ok
transEqTermUnit (Unit‚Çú‚ÇåÀ¢ _ _ (inj‚ÇÇ ok)) (Unit‚Çú‚Çå ∑ _ _ _ _ _ _ not-ok) =
  ‚ä•-elim (not-ok ok)
transEqTermUnit (Unit‚Çú‚Çå ∑ _ _ _ _ _ _ not-ok) (Unit‚Çú‚ÇåÀ¢ _ _ (inj‚ÇÇ ok)) =
  ‚ä•-elim (not-ok ok)


-- Helper function for transitivity of type equality using shape views.
transEqT : ‚àÄ {n} {Œì : Con Term n} {A B C l l‚Ä≤ l‚Ä≥}
           {[A] : Œì ‚ä©‚ü® l ‚ü© A} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B} {[C] : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© C}
         ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C [A] [B] [C]
         ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° C / [B]
         ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° C / [A]

-- Transitivty of type equality.
transEq : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥}
          ([A] : Œì ‚ä©‚ü® l ‚ü© A) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B) ([C] : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© C)
        ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
        ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° C / [B]
        ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° C / [A]
transEq [A] [B] [C] A‚â°B B‚â°C =
  transEqT
    (combine (goodCases [A] [B] A‚â°B) (goodCases [B] [C] B‚â°C))
    A‚â°B B‚â°C

-- Transitivty of type equality with some propositonally equal types.
transEq‚Ä≤ : ‚àÄ {A B B‚Ä≤ C C‚Ä≤ l l‚Ä≤ l‚Ä≥} ‚Üí B PE.‚â° B‚Ä≤ ‚Üí C PE.‚â° C‚Ä≤
         ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B) ([C] : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© C)
         ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° B‚Ä≤ / [A]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° C‚Ä≤ / [B]
         ‚Üí Œì ‚ä©‚ü® l ‚ü©  A ‚â° C  / [A]
transEq‚Ä≤ PE.refl PE.refl [A] [B] [C] A‚â°B B‚â°C =
  transEq [A] [B] [C] A‚â°B B‚â°C

-- Transitivty of term equality.
transEqTerm : ‚àÄ {Œì : Con Term n} {l A t u v}
              ([A] : Œì ‚ä©‚ü® l ‚ü© A)
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A / [A]
            ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A / [A]

-- A variant of the constructor Id‚Çå.
Id‚Çå‚Ä≤ :
  {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A} ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A in
  Œì ‚ä¢ B :‚áí*: Id Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤ ‚Üí
  Œì ‚ä©‚ü® l ‚ü© Ty ‚â° Ty‚Ä≤ / ‚ä©Ty ‚Üí
  Œì ‚ä©‚ü® l ‚ü© lhs ‚â° lhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty ‚Üí
  Œì ‚ä©‚ü® l ‚ü© rhs ‚â° rhs‚Ä≤ ‚à∑ Ty / ‚ä©Ty ‚Üí
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B / Id·µ£ ‚ä©A
Id‚Çå‚Ä≤ {‚ä©A = ‚ä©A} ‚áí*Id‚Ä≤ Ty‚â°Ty‚Ä≤ lhs‚â°lhs‚Ä≤ rhs‚â°rhs‚Ä≤ = record
  { ‚áí*Id‚Ä≤             = ‚áí*Id‚Ä≤
  ; Ty‚â°Ty‚Ä≤            = Ty‚â°Ty‚Ä≤
  ; lhs‚â°lhs‚Ä≤          = lhs‚â°lhs‚Ä≤
  ; rhs‚â°rhs‚Ä≤          = rhs‚â°rhs‚Ä≤
  ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ = Œª lhs‚â°rhs ‚Üí
      transEqTerm ‚ä©Ty (symEqTerm ‚ä©Ty lhs‚â°lhs‚Ä≤) $
      transEqTerm ‚ä©Ty lhs‚â°rhs rhs‚â°rhs‚Ä≤
  ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs = Œª lhs‚Ä≤‚â°rhs‚Ä≤ ‚Üí
      transEqTerm ‚ä©Ty lhs‚â°lhs‚Ä≤ $
      transEqTerm ‚ä©Ty lhs‚Ä≤‚â°rhs‚Ä≤ $
      symEqTerm ‚ä©Ty rhs‚â°rhs‚Ä≤
  }
  where
  open _‚ä©‚ÇóId_ ‚ä©A

transEqT (‚Ñï·µ• D D‚Ä≤ D‚Ä≥) A‚â°B B‚â°C = B‚â°C
transEqT (Empty·µ• D D‚Ä≤ D‚Ä≥) A‚â°B B‚â°C = B‚â°C
transEqT (Unit·µ• D D‚Ä≤ D‚Ä≥) A‚â°B B‚â°C = B‚â°C
transEqT (ne (ne K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ _)
             (ne K‚ÇÇ D‚ÇÇ neK‚ÇÇ _))
         (ne‚Çå M D‚Ä≤ neM K‚â°M) (ne‚Çå M‚ÇÅ D‚Ä≥ neM‚ÇÅ K‚â°M‚ÇÅ)
         rewrite whrDet* (red D‚ÇÅ , ne neK‚ÇÅ) (red D‚Ä≤ , ne neM)
               | whrDet* (red D‚ÇÇ , ne neK‚ÇÇ) (red D‚Ä≥ , ne neM‚ÇÅ) =
  ne‚Çå M‚ÇÅ D‚Ä≥ neM‚ÇÅ
      (‚âÖ-trans K‚â°M K‚â°M‚ÇÅ)
transEqT {n = n} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤} {l‚Ä≥ = l‚Ä≥}
         (B·µ• W W‚Ä≤ W‚Ä≥ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
               (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _)
               (B·µ£ F‚ÇÇ G‚ÇÇ D‚ÇÇ ‚ä¢F‚ÇÇ ‚ä¢G‚ÇÇ A‚â°A‚ÇÇ [F]‚ÇÇ [G]‚ÇÇ G-ext‚ÇÇ _))
         (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
         (B‚Çå F‚Ä≥ G‚Ä≥ D‚Ä≥ A‚â°B‚ÇÅ [F‚â°F‚Ä≤]‚ÇÅ [G‚â°G‚Ä≤]‚ÇÅ) =
  case B-PE-injectivity W‚Ä≤ W
         (whrDet* (red D‚ÇÅ , ‚ü¶ W‚Ä≤ ‚üß‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)) of Œª {
    (PE.refl , PE.refl , PE.refl) ‚Üí
  case B-PE-injectivity W‚Ä≥ W‚Ä≤
         (whrDet* (red D‚ÇÇ , ‚ü¶ W‚Ä≥ ‚üß‚Çô) (red D‚Ä≥ , ‚ü¶ W‚Ä≤ ‚üß‚Çô)) of Œª {
    (PE.refl , PE.refl , PE.refl) ‚Üí
  B‚Çå F‚Ä≥ G‚Ä≥ D‚Ä≥ (‚âÖ-trans A‚â°B A‚â°B‚ÇÅ)
    (Œª œÅ ‚ä¢Œî ‚Üí transEq ([F] œÅ ‚ä¢Œî) ([F]‚ÇÅ œÅ ‚ä¢Œî) ([F]‚ÇÇ œÅ ‚ä¢Œî)
                ([F‚â°F‚Ä≤] œÅ ‚ä¢Œî) ([F‚â°F‚Ä≤]‚ÇÅ œÅ ‚ä¢Œî))
    (Œª œÅ ‚ä¢Œî [a] ‚Üí
       let [a‚Ä≤] = convTerm‚ÇÅ ([F] œÅ ‚ä¢Œî) ([F]‚ÇÅ œÅ ‚ä¢Œî) ([F‚â°F‚Ä≤] œÅ ‚ä¢Œî) [a]
           [a‚Ä≥] = convTerm‚ÇÅ ([F]‚ÇÅ œÅ ‚ä¢Œî) ([F]‚ÇÇ œÅ ‚ä¢Œî) ([F‚â°F‚Ä≤]‚ÇÅ œÅ ‚ä¢Œî)
                    [a‚Ä≤]
       in  transEq ([G] œÅ ‚ä¢Œî [a]) ([G]‚ÇÅ œÅ ‚ä¢Œî [a‚Ä≤]) ([G]‚ÇÇ œÅ ‚ä¢Œî [a‚Ä≥])
                   ([G‚â°G‚Ä≤] œÅ ‚ä¢Œî [a]) ([G‚â°G‚Ä≤]‚ÇÅ œÅ ‚ä¢Œî [a‚Ä≤])) }}
transEqT (U·µ• ‚ä¢Œì ‚ä¢Œì‚ÇÅ ‚ä¢Œì‚ÇÇ) A‚â°B B‚â°C = A‚â°B
transEqT (Id·µ• ‚ä©A ‚ä©B ‚ä©C) A‚â°B B‚â°C =
  case
    whrDet*
      (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô)
      (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô)
  of Œª {
    PE.refl ‚Üí
  case
    whrDet*
      (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©C) , Id‚Çô)
      (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ B‚â°C) , Id‚Çô)
  of Œª {
    PE.refl ‚Üí
  Id‚Çå‚Ä≤
    (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ B‚â°C)
    (transEq
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B)
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©C)
       (_‚ä©‚ÇóId_‚â°_/_.Ty‚â°Ty‚Ä≤ A‚â°B)
       (_‚ä©‚ÇóId_‚â°_/_.Ty‚â°Ty‚Ä≤ B‚â°C))
    (transEqTerm
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
       (_‚ä©‚ÇóId_‚â°_/_.lhs‚â°lhs‚Ä≤ A‚â°B) $
     convEqTerm‚ÇÇ
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B)
       (_‚ä©‚ÇóId_‚â°_/_.Ty‚â°Ty‚Ä≤ A‚â°B)
       (_‚ä©‚ÇóId_‚â°_/_.lhs‚â°lhs‚Ä≤ B‚â°C))
    (transEqTerm
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
       (_‚ä©‚ÇóId_‚â°_/_.rhs‚â°rhs‚Ä≤ A‚â°B) $
     convEqTerm‚ÇÇ
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
       (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B)
       (_‚ä©‚ÇóId_‚â°_/_.Ty‚â°Ty‚Ä≤ A‚â°B)
       (_‚ä©‚ÇóId_‚â°_/_.rhs‚â°rhs‚Ä≤ B‚â°C)) }}
transEqT (emb‚Å∞¬π¬π AB) A‚â°B B‚â°C = transEqT AB A‚â°B B‚â°C
transEqT (emb¬π‚Å∞¬π AB) A‚â°B B‚â°C = transEqT AB A‚â°B B‚â°C
transEqT (emb¬π¬π‚Å∞ AB) A‚â°B B‚â°C = transEqT AB A‚â°B B‚â°C

transEqTerm (U·µ£‚Ä≤ .‚Å∞ 0<1 ‚ä¢Œì)
            (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB t‚â°u [t] [u] [t‚â°u])
            (U‚Çú‚Çå A‚ÇÅ B‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ typeA‚ÇÅ typeB‚ÇÅ t‚â°u‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ [t‚â°u]‚ÇÅ) =
  U‚Çú‚Çå A B‚ÇÅ d d‚ÇÅ‚Ä≤ typeA typeB‚ÇÅ
    (case
       whrDet*Term
         (red‚Çú d‚Ä≤ , typeWhnf typeB)
         (red‚Çú d‚ÇÅ , typeWhnf typeA‚ÇÅ)
     of Œª {
       PE.refl ‚Üí
     ‚âÖ‚Çú-trans t‚â°u t‚â°u‚ÇÅ })
    [t] [u]‚ÇÅ
    (transEq [t] [u] [u]‚ÇÅ [t‚â°u] (irrelevanceEq [t]‚ÇÅ [u] [t‚â°u]‚ÇÅ))
transEqTerm (‚Ñï·µ£ D) [t‚â°u] [u‚â°v] = transEqTerm‚Ñï [t‚â°u] [u‚â°v]
transEqTerm (Empty·µ£ D) [t‚â°u] [u‚â°v] = transEqTermEmpty [t‚â°u] [u‚â°v]
transEqTerm (Unit·µ£ D) [t‚â°u] [u‚â°v] = transEqTermUnit [t‚â°u] [u‚â°v]
transEqTerm {n} (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÅ neM k‚â°m))
                              (ne‚Çú‚Çå k‚ÇÅ m‚ÇÅ d‚ÇÅ d‚Ä≥ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m‚ÇÅ)) =
  let k‚ÇÅ‚â°m = whrDet*Term (red‚Çú d‚ÇÅ , ne neK‚ÇÇ) (red‚Çú d‚Ä≤ , ne neM)
  in  ne‚Çú‚Çå k m‚ÇÅ d d‚Ä≥
           (neNf‚Çú‚Çå neK‚ÇÅ neM‚ÇÅ
                   (~-trans k‚â°m (PE.subst (Œª (x : Term n) ‚Üí _ ‚ä¢ x ~ _ ‚à∑ _) k‚ÇÅ‚â°m k‚â°m‚ÇÅ)))
transEqTerm (B·µ£‚Ä≤ BŒ†! F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
            (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g])
            (Œ†‚Çú‚Çå f‚ÇÅ g‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ funcF‚ÇÅ funcG‚ÇÅ f‚â°g‚ÇÅ [f]‚ÇÅ [g]‚ÇÅ [f‚â°g]‚ÇÅ)
            rewrite whrDet*Term (red‚Çú d‚Ä≤ , functionWhnf funcG)
                            (red‚Çú d‚ÇÅ , functionWhnf funcF‚ÇÅ) =
  Œ†‚Çú‚Çå f g‚ÇÅ d d‚ÇÅ‚Ä≤ funcF funcG‚ÇÅ (‚âÖ‚Çú-trans f‚â°g f‚â°g‚ÇÅ) [f] [g]‚ÇÅ
                (Œª œÅ ‚ä¢Œî [a] ‚Üí transEqTerm ([G] œÅ ‚ä¢Œî [a])
                                ([f‚â°g] œÅ ‚ä¢Œî [a]) ([f‚â°g]‚ÇÅ œÅ ‚ä¢Œî [a]))
transEqTerm
  {n = n} {Œì = Œì} (B·µ£‚Ä≤ (BŒ£ ùï§ p‚Ä≤ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u]
     ([fstp] , [fstr] , [fst‚â°] , [snd‚â°]))
  (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ pProd‚ÇÅ rProd‚ÇÅ p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ
     ([fstp]‚ÇÅ , [fstr]‚ÇÅ , [fst‚â°]‚ÇÅ , [snd‚â°]‚ÇÅ)) =
  let ‚ä¢Œì = wf ‚ä¢F
      p‚ÇÅ‚â°r = whrDet*Term (red‚Çú d‚ÇÅ , productWhnf pProd‚ÇÅ) (red‚Çú d‚Ä≤ , productWhnf rProd)
      p‚âÖr‚ÇÅ = ‚âÖ‚Çú-trans p‚âÖr
               (PE.subst
                  (Œª (x : Term n) ‚Üí Œì ‚ä¢ x ‚âÖ r‚ÇÅ ‚à∑ Œ£À¢ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G)
                  p‚ÇÅ‚â°r p‚âÖr‚ÇÅ)
      [F]‚Ä≤ = [F] Weak.id ‚ä¢Œì
      [fst‚â°]‚Ä≤ = transEqTerm [F]‚Ä≤ [fst‚â°]
        (PE.subst
           (Œª (x : Term n) ‚Üí
              Œì ‚ä©‚ü® _ ‚ü© fst _ x ‚â° fst _ r‚ÇÅ ‚à∑ wk id F / [F]‚Ä≤)
           p‚ÇÅ‚â°r [fst‚â°]‚ÇÅ)
      [Gfstp‚â°Gfstp‚ÇÅ] = G-ext Weak.id ‚ä¢Œì [fstp] [fstp]‚ÇÅ
        (PE.subst
           (Œª (x : Term n) ‚Üí
              Œì ‚ä©‚ü® _ ‚ü© fst _ p ‚â° fst _ x ‚à∑ wk id F / [F]‚Ä≤)
           (PE.sym p‚ÇÅ‚â°r) [fst‚â°])
      [Gfstp] = [G] Weak.id ‚ä¢Œì [fstp]
      [Gfstp‚ÇÅ] = [G] Weak.id ‚ä¢Œì [fstp]‚ÇÅ
      [snd‚â°]‚ÇÅ‚Ä≤ = convEqTerm‚ÇÇ [Gfstp] [Gfstp‚ÇÅ] [Gfstp‚â°Gfstp‚ÇÅ] [snd‚â°]‚ÇÅ
      [snd‚â°]‚Ä≤ = transEqTerm [Gfstp] [snd‚â°]
        (PE.subst
           (Œª (x : Term n) ‚Üí
              Œì ‚ä©‚ü® _ ‚ü© snd _ x ‚â° snd _ r‚ÇÅ ‚à∑ wk (lift id) G [ fst _ p ]‚ÇÄ /
                [Gfstp])
           p‚ÇÅ‚â°r [snd‚â°]‚ÇÅ‚Ä≤)
  in  Œ£‚Çú‚Çå p r‚ÇÅ d d‚ÇÅ‚Ä≤ pProd rProd‚ÇÅ p‚âÖr‚ÇÅ [t] [u]‚ÇÅ ([fstp] , [fstr]‚ÇÅ , [fst‚â°]‚Ä≤ , [snd‚â°]‚Ä≤)
transEqTerm
  {n = n} {Œì = Œì}
  (B·µ£‚Ä≤ (BŒ£ ùï® p‚Ä≥ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô prod‚Çô p‚âÖr [t] [u]
     (PE.refl , PE.refl ,
      [p‚ÇÅ] , [r‚ÇÅ] , [p‚ÇÇ] , [r‚ÇÇ] , [p‚ÇÅ‚â°r‚ÇÅ] , [p‚ÇÇ‚â°r‚ÇÇ]))
  (Œ£‚Çú‚Çå p‚Ä≤ r‚Ä≤ d‚ÇÅ d‚ÇÅ‚Ä≤ prod‚Çô prod‚Çô p‚Ä≤‚âÖr‚Ä≤ [t]‚ÇÅ [u]‚ÇÅ
     (PE.refl , PE.refl ,
      [p‚ÇÅ]‚Ä≤ , [r‚ÇÅ]‚Ä≤ , [p‚ÇÇ]‚Ä≤ , [r‚ÇÇ]‚Ä≤ , [p‚Ä≤‚ÇÅ‚â°r‚Ä≤‚ÇÅ] , [p‚Ä≤‚ÇÇ‚â°r‚Ä≤‚ÇÇ])) =
  let ‚ä¢Œì = wf ‚ä¢F
      p‚Ä≤‚â°r = whrDet*Term (red‚Çú d‚ÇÅ , prod‚Çô) (red‚Çú d‚Ä≤ , prod‚Çô)
      _ , _ , p‚Ä≤‚ÇÅ‚â°r‚ÇÅ , p‚Ä≤‚ÇÇ‚â°r‚ÇÇ = prod-PE-injectivity p‚Ä≤‚â°r
      p‚âÖr‚Ä≤ = ‚âÖ‚Çú-trans p‚âÖr
                (PE.subst (Œª x ‚Üí Œì ‚ä¢ x ‚âÖ r‚Ä≤ ‚à∑ Œ£ ∑ p‚Ä≥ , q ‚ñ∑ F ‚ñπ G)
                   p‚Ä≤‚â°r p‚Ä≤‚âÖr‚Ä≤)
      [F]‚Ä≤ = [F] Weak.id ‚ä¢Œì
      [p‚ÇÅ‚â°r‚Ä≤‚ÇÅ] = transEqTerm [F]‚Ä≤ [p‚ÇÅ‚â°r‚ÇÅ] (PE.subst (Œª (x : Term n) ‚Üí Œì ‚ä©‚ü® _ ‚ü© x ‚â° _ ‚à∑ wk id F / [F]‚Ä≤) p‚Ä≤‚ÇÅ‚â°r‚ÇÅ [p‚Ä≤‚ÇÅ‚â°r‚Ä≤‚ÇÅ])
      [Gp‚â°Gp‚ÇÅ] = G-ext Weak.id ‚ä¢Œì [p‚ÇÅ] [p‚ÇÅ]‚Ä≤
                       (PE.subst (Œª (x : Term n) ‚Üí Œì ‚ä©‚ü® _ ‚ü© _ ‚â° x ‚à∑ wk id F / [F]‚Ä≤)
                                 (PE.sym p‚Ä≤‚ÇÅ‚â°r‚ÇÅ) [p‚ÇÅ‚â°r‚ÇÅ])
      [Gp] = [G] Weak.id ‚ä¢Œì [p‚ÇÅ]
      [Gp‚Ä≤] = [G] Weak.id ‚ä¢Œì [p‚ÇÅ]‚Ä≤
      [r‚ÇÇ‚â°r‚Ä≤‚ÇÇ] = convEqTerm‚ÇÇ [Gp] [Gp‚Ä≤] [Gp‚â°Gp‚ÇÅ]
                             (PE.subst (Œª (x : Term n) ‚Üí Œì ‚ä©‚ü® _ ‚ü© x ‚â° _ ‚à∑ wk (lift id) G [ _ ]‚ÇÄ / [Gp‚Ä≤])
                                       p‚Ä≤‚ÇÇ‚â°r‚ÇÇ [p‚Ä≤‚ÇÇ‚â°r‚Ä≤‚ÇÇ])
      [p‚ÇÇ‚â°r‚Ä≤‚ÇÇ] = transEqTerm [Gp] [p‚ÇÇ‚â°r‚ÇÇ] [r‚ÇÇ‚â°r‚Ä≤‚ÇÇ]
  in  Œ£‚Çú‚Çå p r‚Ä≤ d d‚ÇÅ‚Ä≤ prod‚Çô prod‚Çô p‚âÖr‚Ä≤ [t] [u]‚ÇÅ
        (PE.refl , PE.refl ,
         [p‚ÇÅ] , [r‚ÇÅ]‚Ä≤ , [p‚ÇÇ] , [r‚ÇÇ]‚Ä≤ , [p‚ÇÅ‚â°r‚Ä≤‚ÇÅ] , [p‚ÇÇ‚â°r‚Ä≤‚ÇÇ])
transEqTerm
  {n = n} {Œì = Œì} (B·µ£‚Ä≤ (BŒ£ ùï® p‚Ä≤ q) F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne x‚ÇÅ) p‚âÖr [t] [u] p~r)
  (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ (ne x‚ÇÇ) (ne x‚ÇÉ) p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ p‚ÇÅ~r‚ÇÅ) =
  let p‚ÇÅ‚â°r = whrDet*Term (red‚Çú d‚ÇÅ , ne x‚ÇÇ) (red‚Çú d‚Ä≤ , ne x‚ÇÅ)
      p‚âÖr‚ÇÅ = ‚âÖ‚Çú-trans p‚âÖr
                (PE.subst
                   (Œª (x : Term n) ‚Üí Œì ‚ä¢ x ‚âÖ r‚ÇÅ ‚à∑ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G)
                   p‚ÇÅ‚â°r p‚âÖr‚ÇÅ)
      p~r‚ÇÅ = ~-trans p~r
               (PE.subst
                  (Œª (x : Term n) ‚Üí Œì ‚ä¢ x ~ _ ‚à∑ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G)
                  p‚ÇÅ‚â°r p‚ÇÅ~r‚ÇÅ)
  in  Œ£‚Çú‚Çå p r‚ÇÅ d d‚ÇÅ‚Ä≤ (ne x) (ne x‚ÇÉ) p‚âÖr‚ÇÅ [t] [u]‚ÇÅ p~r‚ÇÅ
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô prod‚Çô p‚âÖr [t] [u] prop)
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ (ne x) (ne x‚ÇÅ) p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ prop‚ÇÅ) =
  ‚ä•-elim (prod‚â¢ne x (whrDet*Term (red‚Çú d‚Ä≤ , prod‚Çô) (red‚Çú d‚ÇÅ , ne x)))
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne x‚ÇÅ) p‚âÖr [t] [u] prop)
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ prod‚Çô prod‚Çô p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ prop‚ÇÅ) =
  ‚ä•-elim (prod‚â¢ne x‚ÇÅ (whrDet*Term (red‚Çú d‚ÇÅ , prod‚Çô) (red‚Çú d‚Ä≤ , ne x‚ÇÅ)))
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô (ne x) p‚âÖr [t] [u] (lift ()))
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ pProd‚ÇÅ rProd‚ÇÅ p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ prop‚ÇÅ)
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) prod‚Çô p‚âÖr [t] [u] (lift ()))
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ pProd‚ÇÅ rProd‚ÇÅ p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ prop‚ÇÅ)
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] prop)
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ prod‚Çô (ne x) p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ (lift ()))
transEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _ _ _)
            (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] prop)
            (Œ£‚Çú‚Çå p‚ÇÅ r‚ÇÅ d‚ÇÅ d‚ÇÅ‚Ä≤ (ne x) prod‚Çô p‚âÖr‚ÇÅ [t]‚ÇÅ [u]‚ÇÅ (lift ()))
transEqTerm
  (Id·µ£ ‚ä©A)
  t‚â°u@(_ , _ , _ , u‚áí*u‚Ä≤ , _ , u‚Ä≤-id , _)
  u‚â°v@(_ , _ , u‚áí*u‚Ä≥ , _ , u‚Ä≥-id , _) =
  case whrDet*Term
         (red‚Çú u‚áí*u‚Ä≤ , identityWhnf u‚Ä≤-id)
         (red‚Çú u‚áí*u‚Ä≥ , identityWhnf u‚Ä≥-id) of Œª {
    PE.refl ‚Üí
  let ‚ä©t , _      = ‚ä©Id‚â°‚à∑‚Åª¬π ‚ä©A t‚â°u
      _  , ‚ä©v , _ = ‚ä©Id‚â°‚à∑‚Åª¬π ‚ä©A u‚â°v
  in
  ‚ä©Id‚â°‚à∑ ‚ä©t ‚ä©v
    (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
       (ne _ u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A u‚â°v of Œª where
         (ne _ _ u‚Ä≤~v‚Ä≤) ‚Üí ~-trans t‚Ä≤~u‚Ä≤ u‚Ä≤~v‚Ä≤
         (rfl‚Çå _)       ‚Üí
           ‚ä•-elim $ rfl‚â¢ne u‚Ä≤-n $
           whrDet*Term (red‚Çú u‚áí*u‚Ä≥ , rfl‚Çô) (red‚Çú u‚áí*u‚Ä≤ , ne u‚Ä≤-n)
       (rfl‚Çå _) ‚Üí case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A u‚â°v of Œª where
         (rfl‚Çå _)      ‚Üí _
         (ne u‚Ä≥-n _ _) ‚Üí
           ‚ä•-elim $ rfl‚â¢ne u‚Ä≥-n $
           whrDet*Term (red‚Çú u‚áí*u‚Ä≤ , rfl‚Çô) (red‚Çú u‚áí*u‚Ä≥ , ne u‚Ä≥-n)) }
transEqTerm (emb 0<1 x) t‚â°u u‚â°v = transEqTerm x t‚â°u u‚â°v
