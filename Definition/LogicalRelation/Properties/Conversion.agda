------------------------------------------------------------------------
-- Type conversion lemmata for the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Conversion
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Properties M
open import Definition.Untyped.Whnf M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Well-formed R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Function
open import Tools.Level
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    m n : Nat
    p q : M
    ‚àá : DCon (Term 0) m
    Œì : Con Term n

mutual
  -- Helper function for conversion of terms converting from left to right.
  convTermT‚ÇÅ : ‚àÄ {l l‚Ä≤ A B t} {[A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {[B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B}
             ‚Üí ShapeView (‚àá ¬ª Œì) l l‚Ä≤ A B [A] [B]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A / [A]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [B]
  convTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÅ (Unit·µ• _ (Unit‚Çú B‚áí*Unit‚ÇÅ _)) B‚áí*Unit‚ÇÇ ‚ä©t =
    case Unit-PE-injectivity $
         whrDet* (B‚áí*Unit‚ÇÅ , Unit‚Çô) (B‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    ‚ä©t }
  convTermT‚ÇÅ
    (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
    (ne‚Çú k d (neNf‚Çú neK‚ÇÇ k‚â°k)) =
    let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _ ¬ª _ ‚ä¢ _ ‚â° x)
                        (whrDet* (D‚Ä≤ , ne-whnf neM) (D‚ÇÅ , ne-whnf neK‚ÇÅ))
                        (‚âÖ-eq K‚â°M)
    in  ne‚Çú k (conv* d K‚â°K‚ÇÅ) (neNf‚Çú neK‚ÇÇ (~-conv k‚â°k K‚â°K‚ÇÅ))
  convTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ† p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , Œ†‚ÇÅ‚â°Œ†‚Ä≤ = B-PE-injectivity BŒ†! BŒ†! Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ† p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤)
                             (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú f (conv* d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) funcF (‚âÖ-conv f‚â°f Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
           (Œª [Œæ] {_} {œÅ} [œÅ] [a] [b] [a‚â°b] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                             ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                  [a]‚ÇÅ = convTerm‚ÇÇ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                  [b]‚ÇÅ = convTerm‚ÇÇ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [b]
                  [a‚â°b]‚ÇÅ = convEqTerm‚ÇÇ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a‚â°b]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                             ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a]‚ÇÅ)
              in  convEqTerm‚ÇÅ ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G]‚ÇÅ [Œæ] [œÅ] [a]) [G‚â°G‚ÇÅ]
                    ([f] [Œæ] [œÅ] [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
          (Œª [Œæ] {_} {œÅ} [œÅ] [a] ‚Üí
             let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                            ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                 [a]‚ÇÅ = convTerm‚ÇÇ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                 [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                   (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                            ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a]‚ÇÅ)
             in  convTerm‚ÇÅ ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G]‚ÇÅ [Œæ] [œÅ] [a]) [G‚â°G‚ÇÅ]
                   ([f]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ))
  convTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï§ p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f pProd ([f‚ÇÅ] , [f‚ÇÇ])) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
            (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [f‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [f‚ÇÅ]
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                      wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [f‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤)
                 ([G‚â°G‚Ä≤] _ _ [f‚ÇÅ])
        [f‚ÇÇ]‚ÇÅ = convTerm‚ÇÅ ([G] _ _ [f‚ÇÅ]) ([G]‚ÇÅ _ _ [f‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [f‚ÇÇ]
    in  Œ£‚Çú f (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (‚âÖ-conv f‚â°f Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) pProd ([f‚ÇÅ]‚ÇÅ , [f‚ÇÇ]‚ÇÅ)
  convTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï® p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f prod‚Çô (PE.refl , [f‚ÇÅ] , [f‚ÇÇ] , PE.refl)) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
            (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [f‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [f‚ÇÅ]
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                      wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [f‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [f‚ÇÅ])
        [f‚ÇÇ]‚ÇÅ = convTerm‚ÇÅ ([G] _ _ [f‚ÇÅ]) ([G]‚ÇÅ _ _ [f‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [f‚ÇÇ]
    in  Œ£‚Çú f (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (‚âÖ-conv f‚â°f Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) prod‚Çô
          (PE.refl , [f‚ÇÅ]‚ÇÅ , [f‚ÇÇ]‚ÇÅ , PE.refl)
  convTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï® p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f (ne x) f~f) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
            (‚âÖ-eq A‚â°B)
    in  Œ£‚Çú f (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (‚âÖ-conv f‚â°f Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
          (ne x) (~-conv f~f Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
  convTermT‚ÇÅ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D (U‚Çú A d typeA A‚â°A [t]) with whrDet* (D2 , U‚Çô) (D , U‚Çô)
  convTermT‚ÇÅ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D (U‚Çú A d typeA A‚â°A [t])
        | PE.refl =
    U‚Çú A (conv* d (refl (wf-‚ä¢‚â°‚à∑ (‚âÖ‚Çú-eq A‚â°A) .proj‚ÇÅ))) typeA A‚â°A
      (irrelevance-‚ä©< l<1 l<2 [t])
  convTermT‚ÇÅ (Id·µ• ‚ä©A ‚ä©B@record{}) A‚â°B ‚ä©t@(_ , t‚áí*u , _) =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B , Id‚Çô) (‚áí*Id‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    case Id‚âÖId A‚â°B of Œª {
      Id‚âÖId‚Ä≤ ‚Üí
      _
    , conv* t‚áí*u (‚âÖ-eq Id‚âÖId‚Ä≤)
    , (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
         (ne u-n u~u)     ‚Üí ne u-n , ~-conv u~u (‚âÖ-eq Id‚âÖId‚Ä≤)
         (rfl·µ£ lhs‚â°rhs)   ‚Üí
             rfl‚Çô
           , convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
               (lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ lhs‚â°rhs)) }}
    where
    open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  convTermT‚ÇÅ (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°B) = convTermT‚ÇÅ          A‚â°B
  convTermT‚ÇÅ (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°B) = convTermT‚ÇÅ (emb·µ•‚ÇÅ p A‚â°B)
  convTermT‚ÇÅ (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°B) = convTermT‚ÇÅ          A‚â°B
  convTermT‚ÇÅ (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°B) = convTermT‚ÇÅ (emb·µ•‚ÇÇ p A‚â°B)

  -- Helper function for conversion of terms converting from right to left.
  convTermT‚ÇÇ : ‚àÄ {l l‚Ä≤ A B t} {[A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {[B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B}
           ‚Üí ShapeView (‚àá ¬ª Œì) l l‚Ä≤ A B [A] [B]
           ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
           ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [B]
           ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A / [A]
  convTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t = t
  convTermT‚ÇÇ (Unit·µ• _ (Unit‚Çú B‚áí*Unit‚ÇÅ _)) B‚áí*Unit‚ÇÇ ‚ä©t =
    case Unit-PE-injectivity $
         whrDet* (B‚áí*Unit‚ÇÅ , Unit‚Çô) (B‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    ‚ä©t }
  convTermT‚ÇÇ
    (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
    (ne‚Çú k d (neNf‚Çú neK‚ÇÇ k‚â°k)) =
    let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _ ¬ª _ ‚ä¢ x ‚â° _)
                        (whrDet* (D‚Ä≤ , ne-whnf neM) (D‚ÇÅ , ne-whnf neK‚ÇÅ))
                        (sym (‚âÖ-eq K‚â°M))
    in  ne‚Çú k (conv* d K‚ÇÅ‚â°K) (neNf‚Çú neK‚ÇÇ (~-conv k‚â°k K‚ÇÅ‚â°K))
  convTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ† p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ†! BŒ†! Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ† p , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú f (conv* d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) funcF (‚âÖ-conv f‚â°f (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
           (Œª [Œæ] {_} {œÅ} [œÅ] [a] [b] [a‚â°b] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                             ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                  [a]‚ÇÅ = convTerm‚ÇÅ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                  [b]‚ÇÅ = convTerm‚ÇÅ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [b]
                  [a‚â°b]‚ÇÅ = convEqTerm‚ÇÅ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a‚â°b]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                             ([G] [Œæ] [œÅ] [a]) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a])
              in  convEqTerm‚ÇÇ ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ) [G‚â°G‚ÇÅ]
                    ([f] [Œæ] [œÅ] [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ))
           (Œª [Œæ] {_} {œÅ} [œÅ] [a] ‚Üí
              let [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                             ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                  [a]‚ÇÅ = convTerm‚ÇÅ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                  [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                    (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                             ([G] [Œæ] [œÅ] [a]) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a])
              in  convTerm‚ÇÇ ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ) [G‚â°G‚ÇÅ]
                    ([f]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ))
  convTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï§ p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f pProd ([f‚ÇÅ]‚ÇÅ , [f‚ÇÇ]‚ÇÅ)) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G ‚â° x)
            (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [f‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [f‚ÇÅ]‚ÇÅ
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                      wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [f‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [f‚ÇÅ])
        [f‚ÇÇ] = convTerm‚ÇÇ ([G] _ _ [f‚ÇÅ]) ([G]‚ÇÅ _ _ [f‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [f‚ÇÇ]‚ÇÅ
    in  Œ£‚Çú f (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (‚âÖ-conv f‚â°f (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) pProd ([f‚ÇÅ] , [f‚ÇÇ])
  convTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï® p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f (prod‚Çô {t = f‚ÇÅ} {u = f‚ÇÇ})
       (PE.refl , [f‚ÇÅ]‚ÇÅ , [f‚ÇÇ]‚ÇÅ , PE.refl)) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
            (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [f‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [f‚ÇÅ]‚ÇÅ
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© wk (lift id) G [ f‚ÇÅ ]‚ÇÄ ‚â°
                      wk (lift id) x [ f‚ÇÅ ]‚ÇÄ / [G] _ _ [f‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [f‚ÇÅ])
        [f‚ÇÇ] = convTerm‚ÇÇ ([G] _ _ [f‚ÇÅ]) ([G]‚ÇÅ _ _ [f‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [f‚ÇÇ]‚ÇÅ
    in  Œ£‚Çú f (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (‚âÖ-conv f‚â°f (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) prod‚Çô
          (PE.refl , [f‚ÇÅ] , [f‚ÇÇ] , PE.refl)
  convTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì} {l = l} {l‚Ä≤ = l‚Ä≤}
    (B·µ• (BŒ£ ùï® p q) (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú f d f‚â°f (ne x) f~f) =
    let Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ =
          PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p , q ‚ñ∑ F ‚ñπ G ‚â° x) (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤)
            (‚âÖ-eq A‚â°B)
    in  Œ£‚Çú f (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (‚âÖ-conv f‚â°f (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
           (ne x) (~-conv f~f (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
  convTermT‚ÇÇ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D (U‚Çú A d typeA A‚â°A [t]) with whrDet* (D2 , U‚Çô) (D , U‚Çô)
  convTermT‚ÇÇ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D (U‚Çú A d typeA A‚â°A [t])
        | PE.refl =
    U‚Çú A (conv* d (refl (wf-‚ä¢‚â°‚à∑ (‚âÖ‚Çú-eq A‚â°A) .proj‚ÇÅ))) typeA A‚â°A
      (irrelevance-‚ä©< l<2 l<1 [t])
  convTermT‚ÇÇ (Id·µ• ‚ä©A ‚ä©B@record{}) A‚â°B ‚ä©t@(_ , t‚áí*u , _) =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B , Id‚Çô) (‚áí*Id‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    case Id‚âÖId A‚â°B of Œª {
      Id‚âÖId‚Ä≤ ‚Üí
      _
    , conv* t‚áí*u (‚âÖ-eq (‚âÖ-sym Id‚âÖId‚Ä≤))
    , (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
         (ne u-n u~u) ‚Üí
           ne u-n , ~-conv u~u (sym (‚âÖ-eq Id‚âÖId‚Ä≤))
         (rfl·µ£ lhs‚â°rhs) ‚Üí
             rfl‚Çô
           , lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs
               (convEqTerm‚ÇÇ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
                  lhs‚â°rhs)) }}
    where
    open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  convTermT‚ÇÇ (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°B) = convTermT‚ÇÇ          A‚â°B
  convTermT‚ÇÇ (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°B) = convTermT‚ÇÇ (emb·µ•‚ÇÅ p A‚â°B)
  convTermT‚ÇÇ (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°B) = convTermT‚ÇÇ          A‚â°B
  convTermT‚ÇÇ (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°B) = convTermT‚ÇÇ (emb·µ•‚ÇÇ p A‚â°B)

  -- Conversion of terms converting from left to right.
  convTerm‚ÇÅ : ‚àÄ {A B t l l‚Ä≤} ([A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) ([B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A / [A]
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [B]
  convTerm‚ÇÅ [A] [B] A‚â°B t = convTermT‚ÇÅ (goodCases [A] [B] A‚â°B) A‚â°B t

  -- Conversion of terms converting from right to left.
  convTerm‚ÇÇ : ‚àÄ {A B t l l‚Ä≤} ([A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) ([B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [B]
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A / [A]
  -- NOTE: this would be easier to define by mutual induction with symEq (which needs conversion),
  -- rather than by defining everything from scratch for both left-to-right and right-to-left,
  -- but with the mutual definition termination checking fails in Agda.
  convTerm‚ÇÇ [A] [B] A‚â°B t = convTermT‚ÇÇ (goodCases [A] [B] A‚â°B) A‚â°B t

  -- Conversion of terms converting from right to left
  -- with some propositionally equal types.
  convTerm‚ÇÇ‚Ä≤ : ‚àÄ {A B B‚Ä≤ t l l‚Ä≤} ‚Üí B PE.‚â° B‚Ä≤
          ‚Üí ([A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) ([B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B‚Ä≤ / [A]
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [B]
          ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚à∑ A / [A]
  convTerm‚ÇÇ‚Ä≤ PE.refl [A] [B] A‚â°B t = convTerm‚ÇÇ [A] [B] A‚â°B t


  -- Helper function for conversion of term equality converting from left to right.
  convEqTermT‚ÇÅ : ‚àÄ {l l‚Ä≤ A B t u} {[A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {[B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B}
               ‚Üí ShapeView (‚àá ¬ª Œì) l l‚Ä≤ A B [A] [B]
               ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
               ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A / [A]
               ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
  convEqTermT‚ÇÅ (‚Ñï·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÅ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÅ (Unit·µ• _ (Unit‚Çú B‚áí*Unit‚ÇÅ _)) B‚áí*Unit‚ÇÇ t‚â°u =
    case Unit-PE-injectivity $
         whrDet* (B‚áí*Unit‚ÇÅ , Unit‚Çô) (B‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    t‚â°u }
  convEqTermT‚ÇÅ
    (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
    (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
    let K‚â°K‚ÇÅ = PE.subst (Œª x ‚Üí _ ¬ª _ ‚ä¢ _ ‚â° x)
                        (whrDet* (D‚Ä≤ , ne-whnf neM) (D‚ÇÅ , ne-whnf neK‚ÇÅ))
                        (‚âÖ-eq K‚â°M)
    in  ne‚Çú‚Çå k m (conv* d K‚â°K‚ÇÅ) (conv* d‚Ä≤ K‚â°K‚ÇÅ)
          (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚â°K‚ÇÅ))
  convEqTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ† p q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
    let [A] = B·µ£‚Ä≤ BŒ†! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ†! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ† p , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú‚Çå f g (conv* d Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ) (conv* d‚Ä≤ Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
            funcF funcG (‚âÖ-conv t‚â°u Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)
            (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
            (Œª [Œæ] {_} {œÅ} [œÅ] [a] ‚Üí
               let F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ =
                     B-PE-injectivity BŒ†! BŒ†!
                       (whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô))
                   [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                              ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                   [a]‚ÇÅ = convTerm‚ÇÇ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                              ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a]‚ÇÅ)
               in  convEqTerm‚ÇÅ ([G] [Œæ] [œÅ] [a]‚ÇÅ) ([G]‚ÇÅ [Œæ] [œÅ] [a]) [G‚â°G‚ÇÅ]
                     ([t‚â°u] [Œæ] [œÅ] [a]‚ÇÅ))
  convEqTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï§ p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u]
       ([p‚ÇÅ] , [r‚ÇÅ] , [fst‚â°] , [snd‚â°])) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£À¢ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [p‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [p‚ÇÅ]
        [r‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [r‚ÇÅ]
        [fst‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [fst‚â°]
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                      wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        [snd‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]
    in  Œ£‚Çú‚Çå p r (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (conv* d‚Ä≤ Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            pProd rProd (‚âÖ-conv p‚âÖr Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
            ([p‚ÇÅ]‚ÇÅ , [r‚ÇÅ]‚ÇÅ , [fst‚â°]‚ÇÅ , [snd‚â°]‚ÇÅ)
  convEqTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï® p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (prod‚Çô {t = p‚ÇÅ}) prod‚Çô p‚âÖr [t] [u]
       (PE.refl , PE.refl ,
        [p‚ÇÅ] , [r‚ÇÅ] , [p‚ÇÇ] , [r‚ÇÇ] , [fst‚â°] , [snd‚â°])) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        Gp‚â°G‚ÇÅp = PE.subst
                   (Œª x ‚Üí
                      ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                        wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                   (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        Gr‚â°G‚ÇÅr = PE.subst
                   (Œª x ‚Üí
                      ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                        wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [r‚ÇÅ])
                   (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [r‚ÇÅ])
        [p‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [p‚ÇÅ]
        [r‚ÇÅ]‚ÇÅ = convTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [r‚ÇÅ]
        [p‚ÇÇ]‚ÇÅ = convTerm‚ÇÅ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) Gp‚â°G‚ÇÅp [p‚ÇÇ]
        [r‚ÇÇ]‚ÇÅ = convTerm‚ÇÅ ([G] _ _ [r‚ÇÅ]) ([G]‚ÇÅ _ _ [r‚ÇÅ]‚ÇÅ) Gr‚â°G‚ÇÅr [r‚ÇÇ]
        [fst‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [fst‚â°]
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ p‚ÇÅ ]‚ÇÄ ‚â°
                      wk (lift id) x [ p‚ÇÅ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        [snd‚â°]‚ÇÅ = convEqTerm‚ÇÅ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]
    in  Œ£‚Çú‚Çå p r (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (conv* d‚Ä≤ Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            prod‚Çô prod‚Çô (‚âÖ-conv p‚âÖr Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
            (PE.refl , PE.refl ,
             [p‚ÇÅ]‚ÇÅ , [r‚ÇÅ]‚ÇÅ , [p‚ÇÇ]‚ÇÅ , [r‚ÇÇ]‚ÇÅ , [fst‚â°]‚ÇÅ , [snd‚â°]‚ÇÅ)
  convEqTermT‚ÇÅ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï® p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne y) p‚âÖr [t] [u] p~r) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        p~r‚ÇÅ = ~-conv p~r Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
    in  Œ£‚Çú‚Çå p r (conv* d Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ) (conv* d‚Ä≤ Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            (ne x) (ne y) (‚âÖ-conv p‚âÖr Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
            (convTerm‚ÇÅ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÅ [A] [B] [A‚â°B] [u])
            p~r‚ÇÅ
  convEqTermT‚ÇÅ
    (B·µ• BŒ£ ∑ record{} _) _ (Œ£‚Çú‚Çå _ _ _ _ prod‚Çô (ne _) _ _ _ (lift ()))
  convEqTermT‚ÇÅ
    (B·µ• BŒ£ ∑ record{} _) _ (Œ£‚Çú‚Çå _ _ _ _ (ne _) prod‚Çô _ _ _ (lift ()))
  convEqTermT‚ÇÅ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D eq with whrDet* (D2 , U‚Çô) (D , U‚Çô)
  convEqTermT‚ÇÅ
    (U·µ• (U·µ£ _ l<1 _) (U·µ£ _ l<2 _)) _
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ [u] [t‚â°u])
    | PE.refl =
    U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ (irrelevance-‚ä©< l<1 l<2 [u])
      (irrelevance-‚ä©<‚â° l<1 l<2 [t‚â°u])
  convEqTermT‚ÇÅ
    (Id·µ• ‚ä©A ‚ä©B@record{}) A‚â°B t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B , Id‚Çô) (‚áí*Id‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    case ‚âÖ-eq (Id‚âÖId A‚â°B) of Œª {
      Id‚â°Id‚Ä≤ ‚Üí
      _ , _
    , conv* t‚áí*t‚Ä≤ Id‚â°Id‚Ä≤
    , conv* u‚áí*u‚Ä≤ Id‚â°Id‚Ä≤
    , (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
         (ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
           ne t‚Ä≤-n , ne u‚Ä≤-n , ~-conv t‚Ä≤~u‚Ä≤ Id‚â°Id‚Ä≤
         (rfl‚Çå lhs‚â°rhs) ‚Üí
             rfl‚Çô , rfl‚Çô
           , convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
               (lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ lhs‚â°rhs)) }}
    where
    open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  convEqTermT‚ÇÅ (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°B) = convEqTermT‚ÇÅ          A‚â°B
  convEqTermT‚ÇÅ (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°B) = convEqTermT‚ÇÅ (emb·µ•‚ÇÅ p A‚â°B)
  convEqTermT‚ÇÅ (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°B) = convEqTermT‚ÇÅ          A‚â°B
  convEqTermT‚ÇÅ (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°B) = convEqTermT‚ÇÅ (emb·µ•‚ÇÇ p A‚â°B)

  -- Helper function for conversion of term equality converting from right to left.
  convEqTermT‚ÇÇ : ‚àÄ {l l‚Ä≤ A B t u} {[A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {[B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B}
             ‚Üí ShapeView (‚àá ¬ª Œì) l l‚Ä≤ A B [A] [B]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A / [A]
  convEqTermT‚ÇÇ (‚Ñï·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÇ (Empty·µ• D D‚Ä≤) A‚â°B t‚â°u = t‚â°u
  convEqTermT‚ÇÇ (Unit·µ• _ (Unit‚Çú B‚áí*Unit‚ÇÅ _)) B‚áí*Unit‚ÇÇ t‚â°u =
    case Unit-PE-injectivity $
         whrDet* (B‚áí*Unit‚ÇÅ , Unit‚Çô) (B‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    t‚â°u }
  convEqTermT‚ÇÇ
    (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
    (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ k‚â°m)) =
    let K‚ÇÅ‚â°K = PE.subst (Œª x ‚Üí _ ¬ª _ ‚ä¢ x ‚â° _)
                        (whrDet* (D‚Ä≤ , ne-whnf neM) (D‚ÇÅ , ne-whnf neK‚ÇÅ))
                        (sym (‚âÖ-eq K‚â°M))
    in  ne‚Çú‚Çå k m (conv* d K‚ÇÅ‚â°K) (conv* d‚Ä≤ K‚ÇÅ‚â°K)
          (neNf‚Çú‚Çå neK‚ÇÇ neM‚ÇÅ (~-conv k‚â°m K‚ÇÅ‚â°K))
  convEqTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ† p q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG t‚â°u [t] [u] [t‚â°u]) =
    let [A] = B·µ£‚Ä≤ BŒ†! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ†! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤ = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ† p , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
    in  Œ†‚Çú‚Çå f g (conv* d (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ)) (conv* d‚Ä≤ (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
            funcF funcG (‚âÖ-conv t‚â°u (sym Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ))
            (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
            (Œª [Œæ] {_} {œÅ} [œÅ] [a] ‚Üí
               let F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ =
                     B-PE-injectivity BŒ†! BŒ†!
                       (whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô))
                   [F‚â°F‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤))
                              ([F] [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ])
                   [a]‚ÇÅ = convTerm‚ÇÅ ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) [F‚â°F‚ÇÅ] [a]
                   [G‚â°G‚ÇÅ] = irrelevanceEqR‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift œÅ) x [ _ ]‚ÇÄ)
                                                     (PE.sym G‚ÇÅ‚â°G‚Ä≤))
                              ([G] [Œæ] [œÅ] [a]) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a])
               in  convEqTerm‚ÇÇ ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ) [G‚â°G‚ÇÅ]
                     ([t‚â°u] [Œæ] [œÅ] [a]‚ÇÅ))
  convEqTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï§ p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd t‚â°u [t] [u]
       ([p‚ÇÅ]‚ÇÅ , [r‚ÇÅ]‚ÇÅ , [fst‚â°]‚ÇÅ , [snd‚â°]‚ÇÅ)) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£À¢ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [p‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [p‚ÇÅ]‚ÇÅ
        [r‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [r‚ÇÅ]‚ÇÅ
        [fst‚â°] = convEqTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [fst‚â°]‚ÇÅ
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                      wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        [snd‚â°] = convEqTerm‚ÇÇ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]‚ÇÅ
    in  Œ£‚Çú‚Çå p r (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (conv* d‚Ä≤ (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            pProd rProd (‚âÖ-conv t‚â°u (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
            ([p‚ÇÅ] , [r‚ÇÅ] , [fst‚â°] , [snd‚â°])
  convEqTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï® p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (prod‚Çô {t = p‚ÇÅ}) prod‚Çô t‚â°u [t] [u]
       (PE.refl , PE.refl ,
        [p‚ÇÅ]‚ÇÅ , [r‚ÇÅ]‚ÇÅ , [p‚ÇÇ]‚ÇÅ , [r‚ÇÇ]‚ÇÅ , [fst‚â°]‚ÇÅ , [snd‚â°]‚ÇÅ)) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        F‚â°F‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk id F ‚â° wk id x / [F] _ _)
                 (PE.sym F‚ÇÅ‚â°F‚Ä≤) ([F‚â°F‚Ä≤] _ _)
        [p‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [p‚ÇÅ]‚ÇÅ
        [r‚ÇÅ] = convTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [r‚ÇÅ]‚ÇÅ
        Gp‚â°G‚ÇÅp = PE.subst
                   (Œª x ‚Üí
                      ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                        wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                   (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        Gr‚â°G‚ÇÅr = PE.subst
                   (Œª x ‚Üí
                      ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ _ ]‚ÇÄ ‚â°
                        wk (lift id) x [ _ ]‚ÇÄ / [G] _ _ [r‚ÇÅ])
                   (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [r‚ÇÅ])
        [p‚ÇÇ] = convTerm‚ÇÇ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) Gp‚â°G‚ÇÅp [p‚ÇÇ]‚ÇÅ
        [r‚ÇÇ] = convTerm‚ÇÇ ([G] _ _ [r‚ÇÅ]) ([G]‚ÇÅ _ _ [r‚ÇÅ]‚ÇÅ) Gr‚â°G‚ÇÅr [r‚ÇÇ]‚ÇÅ
        [fst‚â°] = convEqTerm‚ÇÇ ([F] _ _) ([F]‚ÇÅ _ _) F‚â°F‚ÇÅ [fst‚â°]‚ÇÅ
        G‚â°G‚ÇÅ = PE.subst
                 (Œª x ‚Üí
                    ‚àá ¬ª Œì ‚ä©‚ü® _ ‚ü© wk (lift id) G [ p‚ÇÅ ]‚ÇÄ ‚â°
                      wk (lift id) x [ p‚ÇÅ ]‚ÇÄ / [G] _ _ [p‚ÇÅ])
                 (PE.sym G‚ÇÅ‚â°G‚Ä≤) ([G‚â°G‚Ä≤] _ _ [p‚ÇÅ])
        [snd‚â°] = convEqTerm‚ÇÇ ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚ÇÅ) G‚â°G‚ÇÅ [snd‚â°]‚ÇÅ
    in  Œ£‚Çú‚Çå p r (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (conv* d‚Ä≤ (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            prod‚Çô prod‚Çô (‚âÖ-conv t‚â°u (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
            (PE.refl , PE.refl ,
             [p‚ÇÅ] , [r‚ÇÅ] , [p‚ÇÇ] , [r‚ÇÇ] , [fst‚â°] , [snd‚â°])
  convEqTermT‚ÇÇ
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• (BŒ£ ùï® p‚Ä≤ q) (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne y) t‚â°u [t] [u] p~r‚ÇÅ) =
    let [A] = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [B] = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [A‚â°B] = B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]
        Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤       = whrDet* (D‚ÇÅ , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
        F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤
        Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ Œ£ ∑ p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚â° x)
                             (PE.sym Œ£F‚ÇÅG‚ÇÅ‚â°Œ£F‚Ä≤G‚Ä≤) (‚âÖ-eq A‚â°B)
        p~r = ~-conv p~r‚ÇÅ (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)
    in  Œ£‚Çú‚Çå p r (conv* d (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ)) (conv* d‚Ä≤ (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            (ne x) (ne y) (‚âÖ-conv t‚â°u (sym Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ))
            (convTerm‚ÇÇ [A] [B] [A‚â°B] [t]) (convTerm‚ÇÇ [A] [B] [A‚â°B] [u])
            p~r
  convEqTermT‚ÇÇ
    (B·µ• BŒ£ ∑ _ record{}) _ (Œ£‚Çú‚Çå _ _ _ _ prod‚Çô (ne _) _ _ _ (lift ()))
  convEqTermT‚ÇÇ
    (B·µ• BŒ£ ∑ _ record{}) _ (Œ£‚Çú‚Çå _ _ _ _ (ne _) prod‚Çô _ _ _ (lift ()))
  convEqTermT‚ÇÇ (U·µ• (U·µ£ l1 l<1 D1) (U·µ£ l2 l<2 D2)) D eq with whrDet* (D2 , U‚Çô) (D , U‚Çô)
  convEqTermT‚ÇÇ
    (U·µ• (U·µ£ _ l<1 _) (U·µ£ _ l<2 _)) D
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ [u] [t‚â°u])
    | PE.refl =
    U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ (irrelevance-‚ä©< l<2 l<1 [u])
      (irrelevance-‚ä©<‚â° l<2 l<1 [t‚â°u])
  convEqTermT‚ÇÇ
    (Id·µ• ‚ä©A ‚ä©B@record{}) A‚â°B t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B , Id‚Çô) (‚áí*Id‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    case ‚âÖ-eq (‚âÖ-sym (Id‚âÖId A‚â°B)) of Œª {
      Id‚â°Id‚Ä≤ ‚Üí
      _ , _
    , conv* t‚áí*t‚Ä≤ Id‚â°Id‚Ä≤
    , conv* u‚áí*u‚Ä≤ Id‚â°Id‚Ä≤
    , (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©B t‚â°u of Œª where
         (ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
           ne t‚Ä≤-n , ne u‚Ä≤-n , ~-conv t‚Ä≤~u‚Ä≤ Id‚â°Id‚Ä≤
         (rfl‚Çå lhs‚â°rhs) ‚Üí
             rfl‚Çô , rfl‚Çô
           , lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs
               (convEqTerm‚ÇÇ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
                  lhs‚â°rhs)) }}
    where
    open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  convEqTermT‚ÇÇ (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°B) = convEqTermT‚ÇÇ          A‚â°B
  convEqTermT‚ÇÇ (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°B) = convEqTermT‚ÇÇ (emb·µ•‚ÇÅ p A‚â°B)
  convEqTermT‚ÇÇ (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°B) = convEqTermT‚ÇÇ          A‚â°B
  convEqTermT‚ÇÇ (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°B) = convEqTermT‚ÇÇ (emb·µ•‚ÇÇ p A‚â°B)

  -- Conversion of term equality converting from left to right.
  convEqTerm‚ÇÅ : ‚àÄ {l l‚Ä≤ A B t u} ([A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) ([B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
              ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
              ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A / [A]
              ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
  convEqTerm‚ÇÅ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÅ (goodCases [A] [B] A‚â°B) A‚â°B t‚â°u

  -- Conversion of term equality converting from right to left.
  convEqTerm‚ÇÇ : ‚àÄ {l l‚Ä≤ A B t u} ([A] : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) ([B] : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  A ‚â° B / [A]
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B / [B]
            ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü©  t ‚â° u ‚à∑ A / [A]
  convEqTerm‚ÇÇ [A] [B] A‚â°B t‚â°u = convEqTermT‚ÇÇ (goodCases [A] [B] A‚â°B) A‚â°B t‚â°u
