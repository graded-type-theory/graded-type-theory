------------------------------------------------------------------------
-- Lemmata relating to terms of the universe type
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M
open import Definition.Untyped.Neutral M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Kit R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Cumulativity R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Nat hiding (_<_; _‚â§_)
open import Tools.Product
open import Tools.Empty
open import Tools.Function

private
  variable
    n l‚Ä≤ : Nat
    Œì : Con Term n

-- Helper function for reducible terms of type U for specific type derivations.
univEq‚Ä≤ :
  ‚àÄ {l l‚Ä≤ A} ([U] : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≤) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≤ / U-intr [U] ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
univEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , id x ])) (U‚Çú A d typeA A‚â°A [t]) = kitToLogRel l< [t]
univEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , x ‚á® D ])) (U‚Çú A d typeA A‚â°A [t]) = ‚ä•-elim (whnfRed x U‚Çô)
univEq‚Ä≤ (emb ‚â§‚Ä≤-refl [U]) [A] = univEq‚Ä≤ [U] [A]
univEq‚Ä≤ (emb (‚â§‚Ä≤-step x) [U]) [A] = univEq‚Ä≤ (emb x [U]) [A]

-- Reducible terms of type U are reducible types.
univEq :
  ‚àÄ {l l‚Ä≤ A} ([U] : Œì ‚ä©‚ü® l ‚ü© U l‚Ä≤) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≤ / [U] ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
univEq [U] [A] =
  let Uel = U-elim (id (escape [U])) [U]
  in univEq‚Ä≤ Uel (irrelevanceTerm [U] (U-intr Uel) [A])


-- Helper function for reducible term equality of type U for specific type derivations.
univEqEq‚Ä≤ : ‚àÄ {l l‚Ä≤ l‚Ä≥ A B} ([U] : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ([A] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ / U-intr [U]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / [A]
univEqEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ ‚â§‚Ä≤-refl ‚áí*U)) [A] (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) =
  irrelevanceEq (kitToLogRel ‚â§‚Ä≤-refl [t]) [A] [t‚â°u]
univEqEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ (‚â§‚Ä≤-step l<) ‚áí*U)) [A] (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) =
  univEqEq‚Ä≤ (noemb (U·µ£ l‚Ä≤ l< ‚áí*U)) [A] (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u])
                     --
univEqEq‚Ä≤ (emb ‚â§‚Ä≤-refl [U]) [A] A‚â°B = univEqEq‚Ä≤ [U] [A] A‚â°B
univEqEq‚Ä≤ (emb (‚â§‚Ä≤-step x) [U]) [A] A‚â°B = univEqEq‚Ä≤ (emb x [U]) [A] A‚â°B

-- Reducible term equality of type U is reducible type equality.
univEqEq : ‚àÄ {l l‚Ä≤ l‚Ä≥ t v} ([U] : Œì ‚ä©‚ü® l ‚ü© (U l‚Ä≥ )) ([t] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t)
         ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ (U l‚Ä≥ ) / [U]
         ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° v / [t]
univEqEq [U] [t] [t‚â°v] =
  let [U]‚Ä≤ = U-elim (id (escape [U])) [U]
      [t‚â°v]‚Ä≤ = irrelevanceEqTerm [U] (U-intr [U]‚Ä≤) [t‚â°v]
  in univEqEq‚Ä≤ [U]‚Ä≤ [t] [t‚â°v]‚Ä≤
