------------------------------------------------------------------------
-- Lemmata relating to terms of the universe type
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M
open import Definition.Untyped.Neutral M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Nat hiding (_<_; _‚â§_)
open import Tools.Product
open import Tools.Empty

private
  variable
    n l l‚Ä≤ l‚Ä≥ : Nat
    Œì : Con Term n
    A B : Term _

private opaque

  -- A lemma used below.

  univEq‚Ä≤ :
    (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≤) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≤ / U-intr ‚ä©U ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  univEq‚Ä≤ (noemb (U·µ£ _ l< (id _))) (U‚Çú‚Çå _ _ _ _ _ _ _ ‚ä©A _ _) =
    ‚ä©<‚áî‚ä© l< .proj‚ÇÅ ‚ä©A
  univEq‚Ä≤ (noemb (U·µ£ _ _ (U‚áí ‚á® _))) _ =
    ‚ä•-elim (whnfRed U‚áí U‚Çô)
  univEq‚Ä≤ (emb ‚â§·µò-refl     ‚ä©U) ‚ä©A = univEq‚Ä≤ ‚ä©U ‚ä©A
  univEq‚Ä≤ (emb (‚â§·µò-step p) ‚ä©U) ‚ä©A = univEq‚Ä≤ (emb p ‚ä©U) ‚ä©A

-- Reducible terms of type U are reducible types.
univEq :
  ‚àÄ {l l‚Ä≤ A} ([U] : Œì ‚ä©‚ü® l ‚ü© U l‚Ä≤) ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≤ / [U] ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
univEq [U] [A] =
  let Uel = U-elim [U]
  in univEq‚Ä≤ Uel (irrelevanceTerm [U] (U-intr Uel) [A])



private opaque

  -- A lemma used below.

  univEqEq‚Ä≤ :
    (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) (‚ä©A : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ / U-intr ‚ä©U ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / ‚ä©A
  univEqEq‚Ä≤ (noemb (U·µ£ _ ‚â§·µò-refl _)) ‚ä©A (U‚Çú‚Çå _ _ _ _ _ _ _ ‚ä©A‚Ä≤ _ A‚â°B) =
    irrelevanceEq ‚ä©A‚Ä≤ ‚ä©A A‚â°B
  univEqEq‚Ä≤
    (noemb (U·µ£ _ (‚â§·µò-step p) ‚áí*U)) ‚ä©A
    (U‚Çú‚Çå _ _ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ _ ‚ä©B A‚â°B) =
    univEqEq‚Ä≤ (noemb (U·µ£ _ p ‚áí*U)) ‚ä©A
      (U‚Çú‚Çå _ _ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ _ ‚ä©B A‚â°B)
  univEqEq‚Ä≤ (emb ‚â§·µò-refl     ‚ä©U) = univEqEq‚Ä≤ ‚ä©U
  univEqEq‚Ä≤ (emb (‚â§·µò-step p) ‚ä©U) = univEqEq‚Ä≤ (emb p ‚ä©U)

-- Reducible term equality of type U is reducible type equality.
univEqEq :
  (‚ä©U : Œì ‚ä©‚ü® l ‚ü© U l‚Ä≤) (‚ä©A : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≤ / ‚ä©U ‚Üí
  Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B / ‚ä©A
univEqEq ‚ä©U ‚ä©A A‚â°B =
  let ‚ä©U‚Ä≤ = U-elim ‚ä©U in
  univEqEq‚Ä≤ ‚ä©U‚Ä≤ ‚ä©A (irrelevanceEqTerm ‚ä©U (U-intr ‚ä©U‚Ä≤) A‚â°B)
