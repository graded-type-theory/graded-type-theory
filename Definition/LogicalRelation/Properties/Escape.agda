------------------------------------------------------------------------
-- Escaping the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Escape
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Whnf R

open import Tools.Function
open import Tools.Nat
open import Tools.Product

private
  variable
    n : Nat
    Œì : Con Term n
    A B t u : Term n
    l l‚Ä≤ : Universe-level
    b : BinderMode
    s : Strength
    p q : M

-- Reducible types are well-formed.
escape : ‚àÄ {l A} ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä¢ A
escape (U·µ£‚Ä≤ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] _)) = ‚ä¢A
escape (ne‚Ä≤ _ [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) = ‚ä¢A
escape (B·µ£‚Ä≤ _ _ _ [ ‚ä¢A , _ , _ ] _ _ _ _ _) = ‚ä¢A
escape (Id·µ£ ‚ä©A) = ‚ä¢A-red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A)
escape (emb ‚â§·µò-refl A) = escape A
escape (emb (‚â§·µò-step k) A) = escape (emb k A)

-- Reducible terms are well-formed.
escapeTerm : ‚àÄ {l A t} ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
              ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
              ‚Üí Œì ‚ä¢ t ‚à∑ A
escapeTerm (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) (U‚Çú A [ ‚ä¢t , ‚ä¢u , d ] typeA A‚â°A [A]) =
  conv  ‚ä¢t (sym ( subset* (red  ‚ä¢Œì)))
escapeTerm (‚Ñï·µ£ D) (‚Ñï‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Empty·µ£ D) (Empty‚Çú e [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú e [ ‚ä¢t , ‚ä¢u , d ] _ prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (ne‚Ä≤ _ D neK K‚â°K) (ne‚Çú k [ ‚ä¢t , ‚ä¢u , d ] nf) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (B·µ£‚Ä≤ BŒ†! _ _ D _ _ _ _ _) (Œ†‚Çú _ [ ‚ä¢t , _ , _ ] _ _ _ _) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (B·µ£‚Ä≤ BŒ£! _ _ D _ _ _ _ _) (Œ£‚Çú _ [ ‚ä¢t , _ , _ ] _ _ _) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Id·µ£ ‚ä©A) (_ , t‚áí*u , _) =
  conv (‚ä¢t-red‚Çú t‚áí*u) (sym (subset* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A))))
escapeTerm (emb ‚â§·µò-refl A) t = escapeTerm A t
escapeTerm (emb (‚â§·µò-step k) A) t = escapeTerm (emb k A) t

-- Reducible type equality is contained in the equality relation.
escapeEq :
  (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
  Œì ‚ä¢ A ‚âÖ B

-- Reducible term equality is contained in the equality relation.
escapeTermEq :
  (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
  Œì ‚ä¢ t ‚âÖ u ‚à∑ A

-- If there is a well-formed equality between two identity types,
-- then the corresponding reduced identity types are equal.
Id‚âÖId :
  {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A}
  (A‚â°B : Œì ‚ä©‚ü® l ‚ü© A ‚â° B / Id·µ£ ‚ä©A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A
      open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  in
  Œì ‚ä¢ Id Ty lhs rhs ‚âÖ Id Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤
Id‚âÖId {‚ä©A = ‚ä©A} A‚â°B =
  ‚âÖ-Id-cong
    (escapeEq ‚ä©Ty Ty‚â°Ty‚Ä≤)
    (escapeTermEq ‚ä©Ty lhs‚â°lhs‚Ä≤)
    (escapeTermEq ‚ä©Ty rhs‚â°rhs‚Ä≤)
  where
  open _‚ä©‚ÇóId_ ‚ä©A
  open _‚ä©‚ÇóId_‚â°_/_ A‚â°B

escapeEq (U·µ£‚Ä≤ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , D ]) [ ‚ä¢A‚ÇÅ , ‚ä¢B‚ÇÅ , D‚ÇÅ ] =
  ‚âÖ-red (D , U‚Çô)  (D‚ÇÅ , U‚Çô) (‚âÖ-univ (‚âÖ-Urefl (wf ‚ä¢A)))
escapeEq (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ =
  ‚âÖ-red (D , ‚Ñï‚Çô) (D‚Ä≤ , ‚Ñï‚Çô) (‚âÖ-‚Ñïrefl (wf ‚ä¢A))
escapeEq (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ =
  ‚âÖ-red (D , Empty‚Çô) (D‚Ä≤ , Empty‚Çô) (‚âÖ-Emptyrefl (wf ‚ä¢A))
escapeEq (Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] ok)) D‚Ä≤ =
  ‚âÖ-red (D , Unit‚Çô) (D‚Ä≤ , Unit‚Çô) (‚âÖ-Unitrefl (wf ‚ä¢A) ok)
escapeEq (ne‚Ä≤ _ D neK K‚â°K) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚âÖ-red (red D , ne neK) (red D‚Ä≤ , ne neM) K‚â°M
escapeEq (B·µ£‚Ä≤ W _ _ D _ _ _ _ _) (B‚Çå _ _ D‚Ä≤ A‚â°B _ _) =
  ‚âÖ-red (red D , ‚ü¶ W ‚üß‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô) A‚â°B
escapeEq (Id·µ£ ‚ä©A) A‚â°B =
  ‚âÖ-red (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô)
    (Id‚âÖId A‚â°B)
escapeEq (emb ‚â§·µò-refl A) A‚â°B = escapeEq A A‚â°B
escapeEq (emb (‚â§·µò-step k) A) A‚â°B = escapeEq (emb k A) A‚â°B

escapeTermEq (U·µ£‚Ä≤ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , D ]) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [A] [B] [A‚â°B]) =
  ‚âÖ‚Çú-red (D , U‚Çô) (red‚Çú d , typeWhnf typeA) (red‚Çú d‚Ä≤ , typeWhnf typeB)  A‚â°B
escapeTermEq (‚Ñï·µ£ D) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop) =
  let natK , natK‚Ä≤ = split prop
  in  ‚âÖ‚Çú-red (red D , ‚Ñï‚Çô) (red‚Çú d , naturalWhnf natK)
        (red‚Çú d‚Ä≤ , naturalWhnf natK‚Ä≤) k‚â°k‚Ä≤
escapeTermEq (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop) =
  let natK , natK‚Ä≤ = esplit prop
  in  ‚âÖ‚Çú-red (red D , Empty‚Çô) (red‚Çú d , ne natK) (red‚Çú d‚Ä≤ , ne natK‚Ä≤)
        k‚â°k‚Ä≤
escapeTermEq (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u ok) =
  let t‚âÖu = ‚âÖ‚Çú-Œ∑-unit ‚ä¢t ‚ä¢u ok
      A‚â°Unit = subset* (red D)
  in  ‚âÖ-conv t‚âÖu (sym A‚â°Unit)
escapeTermEq (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú‚Çå ∑ _ _ d d‚Ä≤ k‚â°k‚Ä≤ prop _) =
  let whK , whK‚Ä≤ = usplit prop
  in  ‚âÖ‚Çú-red (red D , Unit‚Çô) (red‚Çú d , whK) (red‚Çú d‚Ä≤ , whK‚Ä≤) k‚â°k‚Ä≤
escapeTermEq (ne‚Ä≤ _ D neK K‚â°K)
                 (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neT neU t‚â°u)) =
  ‚âÖ‚Çú-red (red D , ne neK) (red‚Çú d , ne neT) (red‚Çú d‚Ä≤ , ne neU)
         (~-to-‚âÖ‚Çú t‚â°u)
escapeTermEq
  (B·µ£‚Ä≤ BŒ†! _ _ D _ _ _ _ _) (Œ†‚Çú‚Çå _ _ d d‚Ä≤ funcF funcG f‚â°g _ _ _) =
  ‚âÖ‚Çú-red (red D , Œ†Œ£‚Çô) (red‚Çú d , functionWhnf funcF)
    (red‚Çú d‚Ä≤ , functionWhnf funcG) f‚â°g
escapeTermEq
  (B·µ£‚Ä≤ BŒ£! _ _ D _ _ _ _ _) (Œ£‚Çú‚Çå _ _ d d‚Ä≤ pProd rProd p‚âÖr _ _ _) =
  ‚âÖ‚Çú-red (red D , Œ†Œ£‚Çô) (red‚Çú d , productWhnf pProd)
    (red‚Çú d‚Ä≤ , productWhnf rProd) p‚âÖr
escapeTermEq {Œì = Œì} (Id·µ£ ‚ä©A) t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
  case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
    (ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
      lemma (ne t‚Ä≤-n) (ne u‚Ä≤-n) (~-to-‚âÖ‚Çú t‚Ä≤~u‚Ä≤)
    (rfl‚Çå lhs‚â°rhs) ‚Üí
      lemma rfl‚Çô rfl‚Çô
        (                                   $‚ü® ‚âÖ-Id-cong
                                                 (escapeEq ‚ä©Ty (reflEq ‚ä©Ty))
                                                 (escapeTermEq ‚ä©Ty (reflEqTerm ‚ä©Ty ‚ä©lhs))
                                                 (escapeTermEq ‚ä©Ty lhs‚â°rhs) ‚ü©
         Œì ‚ä¢ Id Ty lhs lhs ‚âÖ Id Ty lhs rhs  ‚Üí‚ü® ‚âÖ-eq ‚ü©
         Œì ‚ä¢ Id Ty lhs lhs ‚â° Id Ty lhs rhs  ‚Üí‚ü® ‚âÖ-conv (‚âÖ‚Çú-rflrefl (escapeTerm ‚ä©Ty ‚ä©lhs)) ‚ü©
         (Œì ‚ä¢‚âÖ rfl ‚à∑ Id Ty lhs rhs)         ‚ñ°)
  where
  open _‚ä©‚ÇóId_ ‚ä©A
  lemma = Œª t‚Ä≤-whnf u‚Ä≤-whnf ‚Üí
            ‚âÖ‚Çú-red (red ‚áí*Id , Id‚Çô) (red‚Çú t‚áí*t‚Ä≤ , t‚Ä≤-whnf)
              (red‚Çú u‚áí*u‚Ä≤ , u‚Ä≤-whnf)

escapeTermEq (emb ‚â§·µò-refl A) t‚â°u = escapeTermEq A t‚â°u
escapeTermEq (emb (‚â§·µò-step k) A) t‚â°u = escapeTermEq (emb k A) t‚â°u

opaque

  -- If a unit type is reducible, then that unit type is allowed.

  ‚ä©Unit‚ÜíUnit-allowed :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Unit s l ‚Üí Unit-allowed s
  ‚ä©Unit‚ÜíUnit-allowed = inversion-Unit ‚àò‚Üí escape

opaque

  -- If the type Œ†Œ£‚ü®¬†b¬†‚ü©¬†p¬†,¬†q¬†‚ñ∑¬†A¬†‚ñπ¬†B is in the logical relation, then
  -- it is allowed.

  ‚ä©Œ†Œ£‚ÜíŒ†Œ£-allowed :
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œ†Œ£-allowed b p q
  ‚ä©Œ†Œ£‚ÜíŒ†Œ£-allowed = proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí inversion-Œ†Œ£ ‚àò‚Üí escape
