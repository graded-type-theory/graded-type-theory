------------------------------------------------------------------------
-- Escaping the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Escape
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Reflexivity R
open import Definition.LogicalRelation.Properties.Whnf R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B t u : Term n
    l : TypeLevel
    b : BinderMode
    s : Strength
    p q : M

-- Reducible types are well-formed.
escape : ‚àÄ {l A} ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä¢ A
escape (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) = U‚±º ‚ä¢Œì
escape (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) = ‚ä¢A
escape (Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] _)) = ‚ä¢A
escape (ne‚Ä≤ K [ ‚ä¢A , ‚ä¢B , D ] neK K‚â°K) = ‚ä¢A
escape (B·µ£‚Ä≤ _ _ _ [ ‚ä¢A , _ , _ ] _ _ _ _ _ _ _) = ‚ä¢A
escape (Id·µ£ ‚ä©A) = ‚ä¢A-red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A)
escape (emb 0<1 A) = escape A

-- Reducible terms are well-formed.
escapeTerm : ‚àÄ {l A t} ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
              ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
              ‚Üí Œì ‚ä¢ t ‚à∑ A
escapeTerm (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) (U‚Çú A [ ‚ä¢t , ‚ä¢u , d ] typeA A‚â°A [A]) = ‚ä¢t
escapeTerm (‚Ñï·µ£ D) (‚Ñï‚Çú n [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Empty·µ£ D) (Empty‚Çú e [ ‚ä¢t , ‚ä¢u , d ] t‚â°t prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú e [ ‚ä¢t , ‚ä¢u , d ] _ prop) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (ne‚Ä≤ K D neK K‚â°K) (ne‚Çú k [ ‚ä¢t , ‚ä¢u , d ] nf) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (B·µ£‚Ä≤ BŒ†! _ _ D _ _ _ _ _ _ _) (Œ†‚Çú _ [ ‚ä¢t , _ , _ ] _ _ _ _) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (B·µ£‚Ä≤ BŒ£! _ _ D _ _ _ _ _ _ _) (Œ£‚Çú _ [ ‚ä¢t , _ , _ ] _ _ _) =
  conv ‚ä¢t (sym (subset* (red D)))
escapeTerm (Id·µ£ ‚ä©A) (_ , t‚áí*u , _) =
  conv (‚ä¢t-red‚Çú t‚áí*u) (sym (subset* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A))))
escapeTerm (emb 0<1 A) t = escapeTerm A t

-- Reducible type equality is contained in the equality relation.
escapeEq :
  (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
  Œì ‚ä¢ A ‚âÖ B

-- Reducible term equality is contained in the equality relation.
escapeTermEq :
  (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
  Œì ‚ä¢ t ‚âÖ u ‚à∑ A

-- If there is a well-formed equality between two identity types,
-- then the corresponding reduced identity types are equal.
Id‚âÖId :
  {‚ä©A : Œì ‚ä©‚Ä≤‚ü® l ‚ü©Id A}
  (A‚â°B : Œì ‚ä©‚ü® l ‚ü© A ‚â° B / Id·µ£ ‚ä©A) ‚Üí
  let open _‚ä©‚ÇóId_ ‚ä©A
      open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
  in
  Œì ‚ä¢ Id Ty lhs rhs ‚âÖ Id Ty‚Ä≤ lhs‚Ä≤ rhs‚Ä≤
Id‚âÖId {‚ä©A = ‚ä©A} A‚â°B =
  ‚âÖ-Id-cong
    (escapeEq ‚ä©Ty Ty‚â°Ty‚Ä≤)
    (escapeTermEq ‚ä©Ty lhs‚â°lhs‚Ä≤)
    (escapeTermEq ‚ä©Ty rhs‚â°rhs‚Ä≤)
  where
  open _‚ä©‚ÇóId_ ‚ä©A
  open _‚ä©‚ÇóId_‚â°_/_ A‚â°B

escapeEq (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) PE.refl = ‚âÖ-Urefl ‚ä¢Œì
escapeEq (‚Ñï·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ = ‚âÖ-red D D‚Ä≤ ‚Ñï‚Çô ‚Ñï‚Çô (‚âÖ-‚Ñïrefl (wf ‚ä¢A))
escapeEq (Empty·µ£ [ ‚ä¢A , ‚ä¢B , D ]) D‚Ä≤ =
  ‚âÖ-red D D‚Ä≤ Empty‚Çô Empty‚Çô (‚âÖ-Emptyrefl (wf ‚ä¢A))
escapeEq (Unit·µ£ (Unit‚Çú [ ‚ä¢A , ‚ä¢B , D ] ok)) D‚Ä≤ =
  ‚âÖ-red D D‚Ä≤ Unit‚Çô Unit‚Çô (‚âÖ-Unitrefl (wf ‚ä¢A) ok)
escapeEq (ne‚Ä≤ K D neK K‚â°K) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚âÖ-red (red D) (red D‚Ä≤) (ne neK) (ne neM) K‚â°M
escapeEq (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) (B‚Çå _ _ D‚Ä≤ A‚â°B _ _) =
  ‚âÖ-red (red D) D‚Ä≤ ‚ü¶ W ‚üß‚Çô ‚ü¶ W ‚üß‚Çô A‚â°B
escapeEq (Id·µ£ ‚ä©A) A‚â°B =
  ‚âÖ-red (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A)) (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B)) Id‚Çô Id‚Çô
    (Id‚âÖId A‚â°B)
escapeEq (emb 0<1 A) A‚â°B = escapeEq A A‚â°B

escapeTermEq
  (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [A] [B] [A‚â°B]) =
  ‚âÖ‚Çú-red (id (U‚±º ‚ä¢Œì)) (red‚Çú d) (red‚Çú d‚Ä≤) U‚Çô
    (typeWhnf typeA) (typeWhnf typeB) A‚â°B
escapeTermEq (‚Ñï·µ£ D) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop) =
  let natK , natK‚Ä≤ = split prop
  in  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) ‚Ñï‚Çô
             (naturalWhnf natK) (naturalWhnf natK‚Ä≤) k‚â°k‚Ä≤
escapeTermEq (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop) =
  let natK , natK‚Ä≤ = esplit prop
  in  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Empty‚Çô
             (ne natK) (ne natK‚Ä≤) k‚â°k‚Ä≤
escapeTermEq (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u ok) =
  let t‚âÖu = ‚âÖ‚Çú-Œ∑-unit ‚ä¢t ‚ä¢u ok
      A‚â°Unit = subset* (red D)
  in  ‚âÖ-conv t‚âÖu (sym A‚â°Unit)
escapeTermEq (Unit·µ£ (Unit‚Çú D _)) (Unit‚Çú‚Çå ∑ _ _ d d‚Ä≤ k‚â°k‚Ä≤ prop _) =
  let whK , whK‚Ä≤ = usplit prop
  in  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Unit‚Çô
             whK whK‚Ä≤ k‚â°k‚Ä≤
escapeTermEq (ne‚Ä≤ K D neK K‚â°K)
                 (ne‚Çú‚Çå k m d d‚Ä≤ (neNf‚Çú‚Çå neT neU t‚â°u)) =
  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) (ne neK) (ne neT) (ne neU)
         (~-to-‚âÖ‚Çú t‚â°u)
escapeTermEq
  (B·µ£‚Ä≤ BŒ†! _ _ D _ _ _ _ _ _ _) (Œ†‚Çú‚Çå _ _ d d‚Ä≤ funcF funcG f‚â°g _ _ _) =
  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Œ†Œ£‚Çô
    (functionWhnf funcF) (functionWhnf funcG) f‚â°g
escapeTermEq
  (B·µ£‚Ä≤ BŒ£! _ _ D _ _ _ _ _ _ _) (Œ£‚Çú‚Çå _ _ d d‚Ä≤ pProd rProd p‚âÖr _ _ _) =
  ‚âÖ‚Çú-red (red D) (red‚Çú d) (red‚Çú d‚Ä≤) Œ†Œ£‚Çô
    (productWhnf pProd) (productWhnf rProd) p‚âÖr
escapeTermEq {Œì = Œì} (Id·µ£ ‚ä©A) t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
  case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
    (ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
      lemma (ne t‚Ä≤-n) (ne u‚Ä≤-n) (~-to-‚âÖ‚Çú t‚Ä≤~u‚Ä≤)
    (rfl‚Çå lhs‚â°rhs) ‚Üí
      lemma rfl‚Çô rfl‚Çô
        (                                   $‚ü® ‚âÖ-Id-cong
                                                 (escapeEq ‚ä©Ty (reflEq ‚ä©Ty))
                                                 (escapeTermEq ‚ä©Ty (reflEqTerm ‚ä©Ty ‚ä©lhs))
                                                 (escapeTermEq ‚ä©Ty lhs‚â°rhs) ‚ü©
         Œì ‚ä¢ Id Ty lhs lhs ‚âÖ Id Ty lhs rhs  ‚Üí‚ü® ‚âÖ-eq ‚ü©
         Œì ‚ä¢ Id Ty lhs lhs ‚â° Id Ty lhs rhs  ‚Üí‚ü® ‚âÖ-conv (‚âÖ‚Çú-rflrefl (escapeTerm ‚ä©Ty ‚ä©lhs)) ‚ü©
         (Œì ‚ä¢ rfl ‚âÖ rfl ‚à∑ Id Ty lhs rhs)    ‚ñ°)
  where
  open _‚ä©‚ÇóId_ ‚ä©A

  lemma = ‚âÖ‚Çú-red (red ‚áí*Id) (red‚Çú t‚áí*t‚Ä≤) (red‚Çú u‚áí*u‚Ä≤) Id‚Çô
escapeTermEq (emb 0<1 A) t‚â°u = escapeTermEq A t‚â°u

-- If the type Unit (of some mode) is in the logical relation, then the
-- Unit type (of the same mode) is allowed.

‚ä©Unit‚ÜíUnit-allowed :
  Œì ‚ä©‚ü® l ‚ü© Unit s ‚Üí Unit-allowed s
‚ä©Unit‚ÜíUnit-allowed {Œì = Œì} = Œª where
  (‚Ñï·µ£ [ ‚ä¢Unit , _ , D ]) ‚Üí
                  $‚ü® D , ‚Ñï‚Çô ‚ü©
    Œì ‚ä¢ Unit! ‚Üò ‚Ñï  ‚Üí‚ü® flip whrDet* (id ‚ä¢Unit , Unit‚Çô) ‚ü©
    ‚Ñï PE.‚â° Unit!   ‚Üí‚ü® (case_of Œª ()) ‚ü©
    Unit-allowed _  ‚ñ°
  (Empty·µ£ [ ‚ä¢Unit , _ , D ]) ‚Üí
                      $‚ü® D , Empty‚Çô ‚ü©
    Œì ‚ä¢ Unit! ‚Üò Empty  ‚Üí‚ü® flip whrDet* (id ‚ä¢Unit , Unit‚Çô) ‚ü©
    Empty PE.‚â° Unit!   ‚Üí‚ü® (case_of Œª ()) ‚ü©
    Unit-allowed _     ‚ñ°
  (Unit·µ£ (Unit‚Çú [ _ , _ , D ] ok)) ‚Üí case whnfRed* D Unit‚Çô of Œª where
    PE.refl ‚Üí ok
  (ne (ne A [ ‚ä¢Unit , _ , D ] neA _)) ‚Üí
                  $‚ü® D , ne neA ‚ü©
    Œì ‚ä¢ Unit! ‚Üò A  ‚Üí‚ü® whrDet* (id ‚ä¢Unit , Unit‚Çô) ‚ü©
    Unit! PE.‚â° A   ‚Üí‚ü® ‚ä•-elim ‚àò‚Üí Unit‚â¢ne neA ‚ü©
    Unit-allowed _  ‚ñ°
  (B·µ£‚Ä≤ b A B [ ‚ä¢Unit , _ , D ] _ _ _ _ _ _ _) ‚Üí
                            $‚ü® D , ‚ü¶ b ‚üß‚Çô ‚ü©
    Œì ‚ä¢ Unit! ‚Üò ‚ü¶ b ‚üß A ‚ñπ B  ‚Üí‚ü® whrDet* (id ‚ä¢Unit , Unit‚Çô) ‚ü©
    Unit! PE.‚â° ‚ü¶ b ‚üß A ‚ñπ B   ‚Üí‚ü® ‚ä•-elim ‚àò‚Üí Unit‚â¢B b ‚ü©
    Unit-allowed _           ‚ñ°
  (Id·µ£ ‚ä©A) ‚Üí
    let open _‚ä©‚ÇóId_ ‚ä©A in
                              $‚ü® red ‚áí*Id , Id‚Çô ‚ü©
    Œì ‚ä¢ Unit! ‚Üò Id Ty lhs rhs  ‚Üí‚ü® whrDet* (id (‚ä¢A-red ‚áí*Id) , Unit‚Çô) ‚ü©
    Unit! PE.‚â° Id Ty lhs rhs   ‚Üí‚ü® (Œª ()) ‚ü©
    Unit-allowed _             ‚ñ°
  (emb 0<1 [Unit]) ‚Üí
    ‚ä©Unit‚ÜíUnit-allowed [Unit]

-- If the type Œ†Œ£‚ü®¬†b¬†‚ü©¬†p¬†,¬†q¬†‚ñ∑¬†A¬†‚ñπ¬†B is in the logical relation, then
-- it is allowed.

‚ä©Œ†Œ£‚ÜíŒ†Œ£-allowed :
  Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
  Œ†Œ£-allowed b p q
‚ä©Œ†Œ£‚ÜíŒ†Œ£-allowed {b = b} = Œª where
  (‚Ñï·µ£ [ ‚ä¢Œ†AB , _ , D ]) ‚Üí
    ‚ä•-elim (‚Ñï‚â¢Œ†Œ£ b (whrDet* (D , ‚Ñï‚Çô) (id ‚ä¢Œ†AB , Œ†Œ£‚Çô)))
  (Empty·µ£ [ ‚ä¢Œ†AB , _ , D ]) ‚Üí
    ‚ä•-elim (Empty‚â¢Œ†Œ£ b (whrDet* (D , Empty‚Çô) (id ‚ä¢Œ†AB , Œ†Œ£‚Çô)))
  (Unit·µ£ (Unit‚Çú [ ‚ä¢Œ†AB , _ , D ] _)) ‚Üí
    ‚ä•-elim (Unit‚â¢Œ†Œ£ b (whrDet* (D , Unit‚Çô) (id ‚ä¢Œ†AB , Œ†Œ£‚Çô)))
  (ne (ne _ [ ‚ä¢Œ†AB , _ , D ] neK _)) ‚Üí
    ‚ä•-elim (Œ†Œ£‚â¢ne b neK (whrDet* (id ‚ä¢Œ†AB , Œ†Œ£‚Çô) (D , ne neK)))
  (B·µ£‚Ä≤ (BM BMŒ† _ _) _ _ [ ‚ä¢Œ†AB , _ , D ] _ _ _ _ _ _ ok) ‚Üí
    case whrDet* (id ‚ä¢Œ†AB , Œ†Œ£‚Çô) (D , Œ†Œ£‚Çô) of Œª {
      PE.refl ‚Üí
    ok }
  (B·µ£‚Ä≤ (BM (BMŒ£ _) _ _) _ _ [ ‚ä¢Œ†AB , _ , D ] _ _ _ _ _ _ ok) ‚Üí
    case whrDet* (id ‚ä¢Œ†AB , Œ†Œ£‚Çô) (D , Œ†Œ£‚Çô) of Œª {
      PE.refl ‚Üí
    ok }
  (Id·µ£ ‚ä©A) ‚Üí
    let open _‚ä©‚ÇóId_ ‚ä©A in
    ‚ä•-elim (Id‚â¢Œ†Œ£ b (whrDet* (red ‚áí*Id , Id‚Çô) (id (‚ä¢A-red ‚áí*Id) , Œ†Œ£‚Çô)))
  (emb 0<1 [Œ†Œ£]) ‚Üí
    ‚ä©Œ†Œ£‚ÜíŒ†Œ£-allowed [Œ†Œ£]
