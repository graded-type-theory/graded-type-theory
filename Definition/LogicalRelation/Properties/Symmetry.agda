------------------------------------------------------------------------
-- Equality in the logical relation is symmetric
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Symmetry
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Weakening R using (_‚à∑ ∑_‚äá_)
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Conversion R

open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    l : Universe-level

symNeutralTerm : ‚àÄ {t u A}
               ‚Üí Œì ‚ä©neNf t ‚â° u ‚à∑ A
               ‚Üí Œì ‚ä©neNf u ‚â° t ‚à∑ A
symNeutralTerm (neNf‚Çú‚Çå neK neM k‚â°m) = neNf‚Çú‚Çå neM neK (~-sym k‚â°m)

symNatural-prop : ‚àÄ {k k‚Ä≤}
                ‚Üí [Natural]-prop Œì k k‚Ä≤
                ‚Üí [Natural]-prop Œì k‚Ä≤ k
symNatural-prop (suc·µ£ (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop)) =
  suc·µ£ (‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop))
symNatural-prop zero·µ£ = zero·µ£
symNatural-prop (ne prop) = ne (symNeutralTerm prop)

symEmpty-prop : ‚àÄ {k k‚Ä≤}
              ‚Üí [Empty]-prop Œì k k‚Ä≤
              ‚Üí [Empty]-prop Œì k‚Ä≤ k
symEmpty-prop (ne prop) = ne (symNeutralTerm prop)

symUnit-prop : ‚àÄ {k k‚Ä≤}
             ‚Üí [Unit ∑]-prop Œì l k k‚Ä≤
             ‚Üí [Unit ∑]-prop Œì l k‚Ä≤ k
symUnit-prop star·µ£ = star·µ£
symUnit-prop (ne prop) = ne (symNeutralTerm prop)


-- Helper function for symmetry of type equality using shape views.
symEqT :
  ‚àÄ {Œì : Con Term n} {A B l l‚Ä≤}
    {[A] : Œì ‚ä©‚ü® l ‚ü© A} {[B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B} ‚Üí
  ShapeView Œì l l‚Ä≤ A B [A] [B] ‚Üí
  Œì ‚ä©‚ü® l  ‚ü© A ‚â° B / [A] ‚Üí
  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° A / [B]

-- Symmetry of type equality.
symEq : ‚àÄ {A B l l‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
      ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A]
      ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B ‚â° A / [B]
symEq [A] [B] A‚â°B = symEqT (goodCases [A] [B] A‚â°B) A‚â°B

-- Symmetry of term equality.
symEqTerm : ‚àÄ {l A t u} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
          ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / [A]
          ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A / [A]

symEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = red D
symEqT (Empty·µ• D D‚Ä≤) A‚â°B = red D
symEqT (Unit·µ• (Unit‚Çú A‚áí*Unit _) (Unit‚Çú B‚áí*Unit‚ÇÅ _)) B‚áí*Unit‚ÇÇ =
  case Unit-PE-injectivity $
       whrDet* (red B‚áí*Unit‚ÇÅ , Unit‚Çô) (B‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
    (_ , PE.refl) ‚Üí
  red A‚áí*Unit }
symEqT (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
       rewrite whrDet* (red D‚Ä≤ , ne neM) (red D‚ÇÅ , ne neK‚ÇÅ) =
  ne‚Çå _ D neK
      (‚âÖ-sym K‚â°M)
symEqT
  {n} {Œì = Œì} {l‚Ä≤ = l‚Ä≤}
  (B·µ• W (B·µ£ F G D A‚â°A [F] [G] G-ext _)
     (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
  (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  let Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤       = whrDet* (red D‚ÇÅ , ‚ü¶ W ‚üß‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)
      F‚ÇÅ‚â°F‚Ä≤ , G‚ÇÅ‚â°G‚Ä≤ , _ = B-PE-injectivity W W Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤
      [F‚ÇÅ‚â°F] :
        {‚Ñì : Nat} {Œî : Con Term ‚Ñì} {œÅ : Wk ‚Ñì n}
        ([œÅ] : œÅ ‚à∑ ∑ Œî ‚äá Œì) ‚Üí
        Œî ‚ä©‚ü® l‚Ä≤ ‚ü© (wk œÅ F‚ÇÅ) ‚â° (wk œÅ F) / [F]‚ÇÅ [œÅ]
      [F‚ÇÅ‚â°F] {_} {Œî} {œÅ} [œÅ] =
        let œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ = PE.cong (wk œÅ) (PE.sym F‚ÇÅ‚â°F‚Ä≤)
            [œÅF‚Ä≤] {œÅ} [œÅ] =
              PE.subst (Œî ‚ä©‚ü® l‚Ä≤ ‚ü©_ ‚àò‚Üí wk œÅ) F‚ÇÅ‚â°F‚Ä≤ ([F]‚ÇÅ [œÅ])
        in  irrelevanceEq‚Ä≤ {Œì = Œî} (œÅF‚Ä≤‚â°œÅF‚ÇÅ œÅ)
              ([œÅF‚Ä≤] [œÅ]) ([F]‚ÇÅ [œÅ]) (symEq ([F] [œÅ]) ([œÅF‚Ä≤] [œÅ])
              ([F‚â°F‚Ä≤] [œÅ]))
  in
  B‚Çå _ _ D
    (‚âÖ-sym (PE.subst (Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚âÖ_) (PE.sym Œ†F‚ÇÅG‚ÇÅ‚â°Œ†F‚Ä≤G‚Ä≤) A‚â°B))
    [F‚ÇÅ‚â°F]
    (Œª {_} {œÅ} {Œî} {a} [œÅ] [a] ‚Üí
       let œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a = PE.cong (_[ a ]‚ÇÄ ‚àò‚Üí wk (lift œÅ)) (PE.sym G‚ÇÅ‚â°G‚Ä≤)
           [œÅG‚Ä≤a] = PE.subst (Œª x ‚Üí Œî ‚ä©‚ü® l‚Ä≤ ‚ü© wk (lift œÅ) x [ a ]‚ÇÄ)
                      G‚ÇÅ‚â°G‚Ä≤ ([G]‚ÇÅ [œÅ] [a])
           [a]‚ÇÅ = convTerm‚ÇÅ ([F]‚ÇÅ [œÅ]) ([F] [œÅ]) ([F‚ÇÅ‚â°F] [œÅ]) [a]
       in  irrelevanceEq‚Ä≤ œÅG‚Ä≤a‚â°œÅG‚ÇÅ‚Ä≤a [œÅG‚Ä≤a] ([G]‚ÇÅ [œÅ] [a])
             (symEq ([G] [œÅ] [a]‚ÇÅ) [œÅG‚Ä≤a] ([G‚â°G‚Ä≤] [œÅ] [a]‚ÇÅ)))
symEqT (U·µ• (U·µ£ l‚Ä≤ l< ‚áí*U) (U·µ£ l‚Ä≤‚ÇÅ l<‚ÇÅ ‚áí*U‚ÇÅ)) D with whrDet* (red D , U‚Çô) (red ‚áí*U‚ÇÅ , U‚Çô)
symEqT (U·µ• (U·µ£ l‚Ä≤ l< ‚áí*U) (U·µ£ l‚Ä≤‚ÇÅ l<‚ÇÅ ‚áí*U‚ÇÅ)) D | PE.refl = ‚áí*U
symEqT (Id·µ• ‚ä©A ‚ä©B@record{}) A‚â°B =
  case
    whrDet*
      (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô)
      (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô)
  of Œª {
    PE.refl ‚Üí
  record
    { ‚áí*Id‚Ä≤    = _‚ä©‚ÇóId_.‚áí*Id ‚ä©A
    ; Ty‚â°Ty‚Ä≤   = symEq (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
    ; lhs‚â°lhs‚Ä≤ =
        convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤ $
        symEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) lhs‚â°lhs‚Ä≤
    ; rhs‚â°rhs‚Ä≤ =
        convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤ $
        symEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) rhs‚â°rhs‚Ä≤
    ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ =
        convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤ ‚àò‚Üí
        lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs ‚àò‚Üí
        convEqTerm‚ÇÇ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
    ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs =
        convEqTerm‚ÇÅ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤ ‚àò‚Üí
        lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ ‚àò‚Üí
        convEqTerm‚ÇÇ (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©B) Ty‚â°Ty‚Ä≤
    } }
  where
  open _‚ä©‚ÇóId_‚â°_/_ A‚â°B
symEqT (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°B) = symEqT          A‚â°B
symEqT (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°B) = symEqT (emb·µ•‚ÇÅ p A‚â°B)
symEqT (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°B) = symEqT          A‚â°B
symEqT (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°B) = symEqT (emb·µ•‚ÇÇ p A‚â°B)

symEqTerm (‚Ñï·µ£ D) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
  ‚Ñï‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symNatural-prop prop)
symEqTerm (Empty·µ£ D) (Empty‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ t‚â°u prop) =
  Empty‚Çú‚Çå k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym t‚â°u) (symEmpty-prop prop)
symEqTerm (Unit·µ£ _) (Unit‚Çú‚ÇåÀ¢ ‚ä¢t ‚ä¢u ok) =
  Unit‚Çú‚ÇåÀ¢ ‚ä¢u ‚ä¢t ok
symEqTerm (Unit·µ£ _) (Unit‚Çú‚Çå ∑ k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop ok) =
  Unit‚Çú‚Çå ∑ k‚Ä≤ k d‚Ä≤ d (‚âÖ‚Çú-sym k‚â°k‚Ä≤) (symUnit-prop prop) ok
symEqTerm (ne‚Ä≤ _ D neK K‚â°K) (ne‚Çú‚Çå k m d d‚Ä≤ nf) =
  ne‚Çú‚Çå m k d‚Ä≤ d (symNeutralTerm nf)
symEqTerm (B·µ£‚Ä≤ BŒ†! F G D A‚â°A [F] [G] G-ext _)
          (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g]) =
  Œ†‚Çú‚Çå g f d‚Ä≤ d funcG funcF (‚âÖ‚Çú-sym f‚â°g) [g] [f]
      (Œª œÅ [a] ‚Üí symEqTerm ([G] œÅ [a]) ([f‚â°g] œÅ [a]))
symEqTerm (B·µ£‚Ä≤ BŒ£À¢ F G D A‚â°A [F] [G] G-ext _)
          (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u] ([fstp] , [fstr] , [fst‚â°] , [snd‚â°])) =
  let [Gfstp‚â°Gfstr] = G-ext _ [fstp] [fstr] [fst‚â°]
  in  Œ£‚Çú‚Çå r p d‚Ä≤ d rProd pProd (‚âÖ‚Çú-sym p‚âÖr) [u] [t]
          ([fstr] , [fstp] , (symEqTerm ([F] _) [fst‚â°]) ,
           convEqTerm‚ÇÅ ([G] _ [fstp]) ([G] _ [fstr]) [Gfstp‚â°Gfstr]
             (symEqTerm ([G] _ [fstp]) [snd‚â°]))
symEqTerm
  (B·µ£‚Ä≤ BŒ£ ∑ F G D A‚â°A [F] [G] G-ext _)
  (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô prod‚Çô p‚âÖr [t] [u]
     (PE.refl , PE.refl ,
      [p‚ÇÅ] , [r‚ÇÅ] , [p‚ÇÇ] , [r‚ÇÇ] , [fst‚â°] , [snd‚â°])) =
  let [Gfstp‚â°Gfstr] = G-ext _ [p‚ÇÅ] [r‚ÇÅ] [fst‚â°]
  in  Œ£‚Çú‚Çå r p d‚Ä≤ d prod‚Çô prod‚Çô (‚âÖ‚Çú-sym p‚âÖr) [u] [t]
        (PE.refl , PE.refl , [r‚ÇÅ] , [p‚ÇÅ] , [r‚ÇÇ] , [p‚ÇÇ] ,
         symEqTerm ([F] _) [fst‚â°] ,
         convEqTerm‚ÇÅ ([G] _ [p‚ÇÅ]) ([G] _ [r‚ÇÅ]) [Gfstp‚â°Gfstr]
           (symEqTerm ([G] _ [p‚ÇÅ]) [snd‚â°]))
symEqTerm (B·µ£‚Ä≤ BŒ£ ∑ F G D A‚â°A [F] [G] G-ext _)
          (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne y) p‚âÖr [t] [u] p~r) =
  Œ£‚Çú‚Çå r p d‚Ä≤ d (ne y) (ne x) (‚âÖ‚Çú-sym p‚âÖr) [u] [t] (~-sym p~r)
symEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _)
          (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô (ne y) p‚âÖr [t] [u] ())
symEqTerm (B·µ£‚Ä≤ BŒ£ ∑ _ _ _ _ _ _ _ _)
          (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) prod‚Çô p‚âÖr [t] [u] ())
symEqTerm (Id·µ£ ‚ä©A) t‚â°u =
  let ‚ä©t , ‚ä©u , _ = ‚ä©Id‚â°‚à∑‚Åª¬π ‚ä©A t‚â°u in
  ‚ä©Id‚â°‚à∑ ‚ä©u ‚ä©t
    (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
       (ne _ _ t‚Ä≤~u‚Ä≤) ‚Üí ~-sym t‚Ä≤~u‚Ä≤
       (rfl‚Çå _)       ‚Üí _)
symEqTerm (emb ‚â§·µò-refl ‚ä©A)     = symEqTerm ‚ä©A
symEqTerm (emb (‚â§·µò-step p) ‚ä©A) = symEqTerm (emb p ‚ä©A)
symEqTerm
  (U·µ£‚Ä≤ _ ‚â§·µò-refl _) (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) =
    U‚Çú‚Çå B A d‚Ä≤ d typeB typeA (‚âÖ‚Çú-sym A‚â°B) [u] [t] (symEq [t] [u] [t‚â°u])
symEqTerm
  {Œì} {A} {t = B} {u = C} (U·µ£‚Ä≤ l‚Ä≤ (‚â§·µò-step {n = l} p) A‚áí*U) B‚â°C =
                                                   $‚ü® B‚â°C ‚ü©
  Œì ‚ä©‚ü® 1+ l ‚ü© B ‚â° C ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ (‚â§·µò-step p) A‚áí*U  ‚Üí‚ü® irrelevanceEqTerm (U·µ£‚Ä≤ l‚Ä≤ (‚â§·µò-step p) A‚áí*U) (U·µ£‚Ä≤ l‚Ä≤ p A‚áí*U) ‚ü©
  Œì ‚ä©‚ü®    l ‚ü© B ‚â° C ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ p A‚áí*U            ‚Üí‚ü® symEqTerm (U·µ£‚Ä≤ _ p A‚áí*U) ‚ü©
  Œì ‚ä©‚ü®    l ‚ü© C ‚â° B ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ p A‚áí*U            ‚Üí‚ü® irrelevanceEqTerm (U·µ£‚Ä≤ l‚Ä≤ p A‚áí*U) (U·µ£‚Ä≤ l‚Ä≤ (‚â§·µò-step p) A‚áí*U) ‚ü©
  Œì ‚ä©‚ü® 1+ l ‚ü© C ‚â° B ‚à∑ A / U·µ£‚Ä≤ l‚Ä≤ (‚â§·µò-step p) A‚áí*U  ‚ñ°
