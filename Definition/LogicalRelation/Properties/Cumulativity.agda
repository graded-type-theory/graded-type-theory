------------------------------------------------------------------------
-- Cumulativity lemmata for the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Properties.Cumulativity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (K)
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties.Reflexivity R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B t u : Term n
    l : TypeLevel
    b : BinderMode
    s : Strength
    p q : M

opaque mutual
  -- Well-formness is cumulative
  cumul : ‚àÄ {l l‚Ä≤ A} ‚Üí l < l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  cumul ‚â§‚Ä≤-refl ‚ä©Ty = cumulStep ‚ä©Ty
  cumul (‚â§‚Ä≤-step l<) ‚ä©Ty = cumulStep (cumul l< ‚ä©Ty)

  cumulStep : ‚àÄ {l A} ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí  Œì ‚ä©‚ü® 1+ l ‚ü© A
  cumulStep (U·µ£‚Ä≤ l‚Ä≤ l< ‚áí*U) = U·µ£‚Ä≤ l‚Ä≤ (‚â§‚Ä≤-step l<) ‚áí*U
  cumulStep (‚Ñï·µ£ x) =  ‚Ñï·µ£ x
  cumulStep (Empty·µ£ x) =  Empty·µ£ x
  cumulStep (Unit·µ£ x) =  Unit·µ£ x
  cumulStep (ne‚Ä≤ K D neK K‚â°K) = ne‚Ä≤ K D neK K‚â°K
  cumulStep (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) =
    (B·µ£‚Ä≤ W F G D ‚ä¢F ‚ä¢G A‚â°A (Œª x x‚ÇÅ ‚Üí cumulStep ([F] x x‚ÇÅ))
    (Œª [œÅ] ‚ä¢Œî x ‚Üí cumulStep ([G]  [œÅ] ‚ä¢Œî
      (irrelevanceTerm (cumulStep ([F] [œÅ] ‚ä¢Œî)) ([F] [œÅ] ‚ä¢Œî) x)))
    (Œª [œÅ] ‚ä¢Œî [a] [b] x ‚Üí
      cumulEq ‚â§‚Ä≤-refl ([G] [œÅ] ‚ä¢Œî (irrelevanceTerm (cumulStep ([F] [œÅ] ‚ä¢Œî)) ([F] [œÅ] ‚ä¢Œî) [a]))
      (G-ext [œÅ] ‚ä¢Œî
        (irrelevanceTerm (cumulStep ([F] [œÅ] ‚ä¢Œî)) ([F] [œÅ] ‚ä¢Œî) [a])
        (irrelevanceTerm (cumulStep ([F] [œÅ] ‚ä¢Œî)) ([F] [œÅ] ‚ä¢Œî) [b])
        (irrelevanceEqTerm (cumulStep ([F] [œÅ] ‚ä¢Œî)) ([F] [œÅ] ‚ä¢Œî) x)))
    ok)
  cumulStep (Id·µ£ (Id·µ£ Ty lhs rhs ‚áí*Id ‚ä©Ty ‚ä©lhs ‚ä©rhs)) =  Id·µ£
          (Id·µ£ Ty lhs rhs ‚áí*Id (cumul ‚â§‚Ä≤-refl ‚ä©Ty) (cumulTerm ‚â§‚Ä≤-refl  ‚ä©Ty ‚ä©lhs) (cumulTerm ‚â§‚Ä≤-refl  ‚ä©Ty ‚ä©rhs))
  cumulStep (emb l< [A]) = emb (‚â§‚Ä≤-step l<) [A]

  cumulTerm : ‚àÄ {l l‚Ä≤ A t} ‚Üí (l< : l < l‚Ä≤) ‚Üí ([A] : Œì ‚ä©‚ü® l ‚ü© A)
                ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / [A]
                ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / cumul l< [A]
  cumulTerm l< ‚ä©Ty ‚ä©Tm = irrelevanceTerm ‚ä©Ty (cumul l< ‚ä©Ty) ‚ä©Tm

  cumulEq :
    ‚àÄ {l l‚Ä≤ A B} ‚Üí (l< : l < l‚Ä≤) ‚Üí
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / (cumul l< ‚ä©A)
  cumulEq l< ‚ä©A eq = irrelevanceEq  ‚ä©A (cumul l< ‚ä©A) eq

  cumulTermEq :
      ‚àÄ {l l‚Ä≤ A t u} ‚Üí (l< : l < l‚Ä≤) ‚Üí
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / cumul l< ‚ä©A
  cumulTermEq l< ‚ä©A teq = irrelevanceEqTerm ‚ä©A (cumul l< ‚ä©A) teq
