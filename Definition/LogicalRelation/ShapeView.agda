------------------------------------------------------------------------
-- ShapeView: A view for constructor equality for the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.ShapeView
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}

open import Definition.Untyped M hiding (K)
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Escape R
open import Definition.LogicalRelation.Properties.Reflexivity R

open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product
open import Tools.Empty using (‚ä•; ‚ä•-elim)
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B C t u : Term n
    p q : M
    l l‚Ä≤ l‚Ä≥ : TypeLevel

-- Type for maybe embeddings of reducible types
data MaybeEmb {‚Ñì‚Ä≤} (l : TypeLevel) (‚ä©‚ü®_‚ü© : TypeLevel ‚Üí Set ‚Ñì‚Ä≤) : Set ‚Ñì‚Ä≤ where
  noemb : ‚ä©‚ü® l ‚ü© ‚Üí MaybeEmb l ‚ä©‚ü®_‚ü©
  emb   : ‚àÄ {l‚Ä≤} ‚Üí l‚Ä≤ < l ‚Üí MaybeEmb l‚Ä≤ ‚ä©‚ü®_‚ü© ‚Üí MaybeEmb l ‚ä©‚ü®_‚ü©

transparent

  -- Specific reducible types with possible embedding

  _‚ä©‚ü®_‚ü©U : (Œì : Con Term n) (l : TypeLevel) ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©U = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ä≤‚ü® l‚Ä≤ ‚ü©U)

  _‚ä©‚ü®_‚ü©‚Ñï_ : (Œì : Con Term n) (l : TypeLevel) (A : Term n) ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©‚Ñï A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ñï A)

  _‚ä©‚ü®_‚ü©Empty_ : (Œì : Con Term n) (l : TypeLevel) (A : Term n) ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©Empty A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©Empty A)

  _‚ä©‚ü®_‚ü©Unit_ : (Œì : Con Term n) (l : TypeLevel) (A : Term n) ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©Unit A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©Unit A)

  _‚ä©‚ü®_‚ü©ne_ : (Œì : Con Term n) (l : TypeLevel) (A : Term n) ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©ne A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©ne A)

  _‚ä©‚ü®_‚ü©B‚ü®_‚ü©_ : Con Term n ‚Üí TypeLevel ‚Üí BindingType ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ä≤‚ü® l‚Ä≤ ‚ü©B‚ü® W ‚ü© A)

  _‚ä©‚ü®_‚ü©Id_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü©Id A = MaybeEmb l (Œª l‚Ä≤ ‚Üí Œì ‚ä©‚Ä≤‚ü® l‚Ä≤ ‚ü©Id A)

-- Construct a general reducible type from a specific

U-intr : ‚àÄ {l} ‚Üí Œì ‚ä©‚ü® l ‚ü©U ‚Üí Œì ‚ä©‚ü® l ‚ü© U
U-intr (noemb x) = U·µ£ x
U-intr (emb 0<1 x) = emb 0<1 (U-intr x)

‚Ñï-intr : ‚àÄ {A l} ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
‚Ñï-intr (noemb x) = ‚Ñï·µ£ x
‚Ñï-intr (emb 0<1 x) = emb 0<1 (‚Ñï-intr x)

Empty-intr : ‚àÄ {A l} ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
Empty-intr (noemb x) = Empty·µ£ x
Empty-intr (emb 0<1 x) = emb 0<1 (Empty-intr x)

Unit-intr : ‚àÄ {A l} ‚Üí Œì ‚ä©‚ü® l ‚ü©Unit A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
Unit-intr (noemb x) = Unit·µ£ x
Unit-intr (emb 0<1 x) = emb 0<1 (Unit-intr x)

ne-intr : ‚àÄ {A l} ‚Üí Œì ‚ä©‚ü® l ‚ü©ne A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
ne-intr (noemb x) = ne x
ne-intr (emb 0<1 x) = emb 0<1 (ne-intr x)

B-intr : ‚àÄ {A l} W ‚Üí Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
B-intr W (noemb x) = B·µ£ W x
B-intr W (emb 0<1 x) = emb 0<1 (B-intr W x)

Id-intr : Œì ‚ä©‚ü® l ‚ü©Id A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
Id-intr (noemb ‚ä©A)   = Id·µ£ ‚ä©A
Id-intr (emb 0<1 ‚ä©A) = emb 0<1 (Id-intr ‚ä©A)

-- Construct a specific reducible type from a general with some criterion

U-elim : ‚àÄ {l} ‚Üí Œì ‚ä©‚ü® l ‚ü© U ‚Üí Œì ‚ä©‚ü® l ‚ü©U
U-elim (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) = noemb (U·µ£ l‚Ä≤ l< ‚ä¢Œì)
U-elim (‚Ñï·µ£ D) with whnfRed* (red D) U‚Çô
... | ()
U-elim (Empty·µ£ D) with whnfRed* (red D) U‚Çô
... | ()
U-elim (Unit·µ£ (Unit‚Çú D _)) with whnfRed* (red D) U‚Çô
... | ()
U-elim (ne‚Ä≤ K D neK K‚â°K) =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
U-elim (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) =
  ‚ä•-elim (U‚â¢B W (whnfRed* (red D) U‚Çô))
U-elim (Id·µ£ ‚ä©A) =
  case whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A)) U‚Çô of Œª ()
U-elim (emb 0<1 x) with U-elim x
U-elim (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
U-elim (emb 0<1 x) | emb () x‚ÇÅ

‚Ñï-elim‚Ä≤ : ‚àÄ {A l} ‚Üí Œì ‚ä¢ A ‚áí* ‚Ñï ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï A
‚Ñï-elim‚Ä≤ D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) with whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , ‚Ñï‚Çô)
... | ()
‚Ñï-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) = noemb D‚Ä≤
‚Ñï-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , ne neK)))
‚Ñï-elim‚Ä≤ D (B·µ£‚Ä≤ W _ _ D‚Ä≤ _ _ _ _ _ _ _) =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
‚Ñï-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) with whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , Empty‚Çô)
... | ()
‚Ñï-elim‚Ä≤ D (Unit·µ£ (Unit‚Çú D‚Ä≤ _)) with whrDet* (D , ‚Ñï‚Çô) (red D‚Ä≤ , Unit‚Çô)
... | ()
‚Ñï-elim‚Ä≤ A‚áí*Nat (Id·µ£ ‚ä©A) =
  case whrDet* (A‚áí*Nat , ‚Ñï‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) of Œª ()
‚Ñï-elim‚Ä≤ D (emb 0<1 x) with ‚Ñï-elim‚Ä≤ D x
‚Ñï-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
‚Ñï-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

‚Ñï-elim : ‚àÄ {l} ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚Ñï ‚Üí Œì ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï
‚Ñï-elim [‚Ñï] = ‚Ñï-elim‚Ä≤ (id (escape [‚Ñï])) [‚Ñï]

Empty-elim‚Ä≤ : ‚àÄ {A l} ‚Üí Œì ‚ä¢ A ‚áí* Empty ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty A
Empty-elim‚Ä≤ D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) with whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , Empty‚Çô)
... | ()
Empty-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) = noemb D‚Ä≤
Empty-elim‚Ä≤ D (Unit·µ£ (Unit‚Çú D‚Ä≤ _))
  with whrDet* (D , Empty‚Çô) (red D‚Ä≤ , Unit‚Çô)
... | ()
Empty-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (D , Empty‚Çô) (red D‚Ä≤ , ne neK)))
Empty-elim‚Ä≤ D (B·µ£‚Ä≤ W _ _ D‚Ä≤ _ _ _ _ _ _ _) =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (D , Empty‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
Empty-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) with whrDet* (D , Empty‚Çô) (red D‚Ä≤ , ‚Ñï‚Çô)
... | ()
Empty-elim‚Ä≤ A‚áí*Empty (Id·µ£ ‚ä©A) =
  case whrDet* (A‚áí*Empty , Empty‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) of Œª ()
Empty-elim‚Ä≤ D (emb 0<1 x) with Empty-elim‚Ä≤ D x
Empty-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
Empty-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

Empty-elim : ‚àÄ {l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Empty ‚Üí Œì ‚ä©‚ü® l ‚ü©Empty Empty
Empty-elim [Empty] = Empty-elim‚Ä≤ (id (escape [Empty])) [Empty]

Unit-elim‚Ä≤ : ‚àÄ {A l} ‚Üí Œì ‚ä¢ A ‚áí* Unit ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©Unit A
Unit-elim‚Ä≤ D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) with whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , Unit‚Çô)
... | ()
Unit-elim‚Ä≤ D (Unit·µ£ D‚Ä≤) = noemb D‚Ä≤
Unit-elim‚Ä≤ D (Empty·µ£ D‚Ä≤) with whrDet* (D , Unit‚Çô) (red D‚Ä≤ , Empty‚Çô)
... | ()
Unit-elim‚Ä≤ D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (Unit‚â¢ne neK (whrDet* (D , Unit‚Çô) (red D‚Ä≤ , ne neK)))
Unit-elim‚Ä≤ D (B·µ£‚Ä≤ W _ _ D‚Ä≤ _ _ _ _ _ _ _) =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (D , Unit‚Çô) (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
Unit-elim‚Ä≤ D (‚Ñï·µ£ D‚Ä≤) with whrDet* (D , Unit‚Çô) (red D‚Ä≤ , ‚Ñï‚Çô)
... | ()
Unit-elim‚Ä≤ A‚áí*Unit (Id·µ£ ‚ä©A) =
  case whrDet* (A‚áí*Unit , Unit‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) of Œª ()
Unit-elim‚Ä≤ D (emb 0<1 x) with Unit-elim‚Ä≤ D x
Unit-elim‚Ä≤ D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
Unit-elim‚Ä≤ D (emb 0<1 x) | emb () x‚ÇÇ

Unit-elim : ‚àÄ {l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Unit ‚Üí Œì ‚ä©‚ü® l ‚ü©Unit Unit
Unit-elim [Unit] = Unit-elim‚Ä≤ (id (escape [Unit])) [Unit]

ne-elim‚Ä≤ : ‚àÄ {A l K} ‚Üí Œì ‚ä¢ A ‚áí* K ‚Üí Neutral K ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©ne A
ne-elim‚Ä≤ D neK (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) =
  ‚ä•-elim (U‚â¢ne neK (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (‚Ñï·µ£ D‚Ä≤) = ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red D‚Ä≤ , ‚Ñï‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (Empty·µ£ D‚Ä≤) = ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red D‚Ä≤ , Empty‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (Unit·µ£ (Unit‚Çú D‚Ä≤ _)) =
  ‚ä•-elim (Unit‚â¢ne neK (whrDet* (red D‚Ä≤ , Unit‚Çô) (D , ne neK)))
ne-elim‚Ä≤ D neK (ne‚Ä≤ K D‚Ä≤ neK‚Ä≤ K‚â°K) = noemb (ne K D‚Ä≤ neK‚Ä≤ K‚â°K)
ne-elim‚Ä≤ D neK (B·µ£‚Ä≤ W _ _ D‚Ä≤ _ _ _ _ _ _ _) =
  ‚ä•-elim (B‚â¢ne W neK (whrDet* (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô) (D , ne neK)))
ne-elim‚Ä≤ A‚áí*ne n (Id·µ£ ‚ä©A) =
  ‚ä•-elim (Id‚â¢ne n (whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) (A‚áí*ne , ne n)))
ne-elim‚Ä≤ D neK (emb 0<1 x) with ne-elim‚Ä≤ D neK x
ne-elim‚Ä≤ D neK (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
ne-elim‚Ä≤ D neK (emb 0<1 x) | emb () x‚ÇÇ

ne-elim : ‚àÄ {l K} ‚Üí Neutral K  ‚Üí Œì ‚ä©‚ü® l ‚ü© K ‚Üí Œì ‚ä©‚ü® l ‚ü©ne K
ne-elim neK [K] = ne-elim‚Ä≤ (id (escape [K])) neK [K]

B-elim‚Ä≤ : ‚àÄ {A F G l} W ‚Üí Œì ‚ä¢ A ‚áí* ‚ü¶ W ‚üß F ‚ñπ G ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© A
B-elim‚Ä≤ W D (U·µ£‚Ä≤ l‚Ä≤ l< ‚ä¢Œì) =
  ‚ä•-elim (U‚â¢B W (whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (D , ‚ü¶ W ‚üß‚Çô)))
B-elim‚Ä≤ W D (‚Ñï·µ£ D‚Ä≤) =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (red D‚Ä≤ , ‚Ñï‚Çô) (D , ‚ü¶ W ‚üß‚Çô)))
B-elim‚Ä≤ W D (Empty·µ£ D‚Ä≤) =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (red D‚Ä≤ , Empty‚Çô) (D , ‚ü¶ W ‚üß‚Çô)))
B-elim‚Ä≤ W D (Unit·µ£ (Unit‚Çú D‚Ä≤ _)) =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (red D‚Ä≤ , Unit‚Çô) (D , ‚ü¶ W ‚üß‚Çô)))
B-elim‚Ä≤ W D (ne‚Ä≤ K D‚Ä≤ neK K‚â°K) =
  ‚ä•-elim (B‚â¢ne W neK (whrDet* (D , ‚ü¶ W ‚üß‚Çô) (red D‚Ä≤ , ne neK)))
B-elim‚Ä≤ BŒ†! D (B·µ£‚Ä≤ BŒ£! _ _ D‚Ä≤ _ _ _ _ _ _ _)
  with whrDet* (D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | ()
B-elim‚Ä≤ BŒ£! D (B·µ£‚Ä≤ BŒ†! _ _ D‚Ä≤ _ _ _ _ _ _ _)
  with whrDet* (D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | ()
B-elim‚Ä≤ BŒ†! D (B·µ£‚Ä≤ BŒ†! F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
  with whrDet* (D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl = noemb (B·µ£ F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
B-elim‚Ä≤ BŒ£! D (B·µ£‚Ä≤ BŒ£! F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
  with whrDet* (D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl = noemb (B·µ£ F G D‚Ä≤ ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
B-elim‚Ä≤ _ A‚áí*B (Id·µ£ ‚ä©A) =
  ‚ä•-elim $ Id‚â¢‚ü¶‚üß‚ñ∑ _ $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A) , Id‚Çô) (A‚áí*B , ‚ü¶ _ ‚üß‚Çô)
B-elim‚Ä≤ W D (emb 0<1 x) with B-elim‚Ä≤ W D x
B-elim‚Ä≤ W D (emb 0<1 x) | noemb x‚ÇÅ = emb 0<1 (noemb x‚ÇÅ)
B-elim‚Ä≤ W D (emb 0<1 x) | emb () x‚ÇÇ

B-elim : ‚àÄ {F G l} W ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚ü¶ W ‚üß F ‚ñπ G ‚Üí Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© ‚ü¶ W ‚üß F ‚ñπ G
B-elim W [Œ†] = B-elim‚Ä≤ W (id (escape [Œ†])) [Œ†]

Œ†-elim : ‚àÄ {F G l} ‚Üí Œì ‚ä©‚ü® l ‚ü© Œ† p , q ‚ñ∑ F ‚ñπ G ‚Üí Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© Œ† p , q ‚ñ∑ F ‚ñπ G
Œ†-elim [Œ†] = B-elim‚Ä≤ BŒ†! (id (escape [Œ†])) [Œ†]

Œ£-elim :
  ‚àÄ {F G m l} ‚Üí
  Œì ‚ä©‚ü® l ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G ‚Üí
  Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ m p q ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
Œ£-elim [Œ£] = B-elim‚Ä≤ BŒ£! (id (escape [Œ£])) [Œ£]

Id-elim‚Ä≤ : Œì ‚ä¢ A ‚áí* Id B t u ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü©Id A
Id-elim‚Ä≤ ‚áí*Id (U·µ£‚Ä≤ _ _ ‚ä¢Œì) =
  case whrDet* (id (U‚±º ‚ä¢Œì) , U‚Çô) (‚áí*Id , Id‚Çô) of Œª ()
Id-elim‚Ä≤ ‚áí*Id (‚Ñï·µ£ ‚áí*‚Ñï) =
  case whrDet* (red ‚áí*‚Ñï , ‚Ñï‚Çô) (‚áí*Id , Id‚Çô) of Œª ()
Id-elim‚Ä≤ ‚áí*Id (Empty·µ£ ‚áí*Empty) =
  case whrDet* (red ‚áí*Empty , Empty‚Çô) (‚áí*Id , Id‚Çô) of Œª ()
Id-elim‚Ä≤ ‚áí*Id (Unit·µ£ ‚ä©Unit) =
  case whrDet* (red (_‚ä©Unit_.‚áí*-Unit ‚ä©Unit) , Unit‚Çô) (‚áí*Id , Id‚Çô)
  of Œª ()
Id-elim‚Ä≤ ‚áí*Id (ne‚Ä≤ _ ‚áí*ne n _) =
  ‚ä•-elim (Id‚â¢ne n (whrDet* (‚áí*Id , Id‚Çô) (red ‚áí*ne , ne n)))
Id-elim‚Ä≤ ‚áí*Id (B·µ£‚Ä≤ _ _ _ ‚áí*B _ _ _ _ _ _ _) =
  ‚ä•-elim (Id‚â¢‚ü¶‚üß‚ñ∑ _ (whrDet* (‚áí*Id , Id‚Çô) (red ‚áí*B , ‚ü¶ _ ‚üß‚Çô)))
Id-elim‚Ä≤ _ (Id·µ£ ‚ä©A) =
  noemb ‚ä©A
Id-elim‚Ä≤ ‚áí*Id (emb 0<1 ‚ä©A) with Id-elim‚Ä≤ ‚áí*Id ‚ä©A
‚Ä¶ | noemb ‚ä©A = emb 0<1 (noemb ‚ä©A)
‚Ä¶ | emb () _

opaque

  Id-elim : Œì ‚ä©‚ü® l ‚ü© Id A t u ‚Üí Œì ‚ä©‚ü® l ‚ü©Id Id A t u
  Id-elim ‚ä©Id = Id-elim‚Ä≤ (id (escape ‚ä©Id)) ‚ä©Id

-- Extract a type and a level from a maybe embedding
extractMaybeEmb : ‚àÄ {l ‚ä©‚ü®_‚ü©} ‚Üí MaybeEmb {‚Ñì‚Ä≤ = a} l ‚ä©‚ü®_‚ü© ‚Üí ‚àÉ Œª l‚Ä≤ ‚Üí ‚ä©‚ü® l‚Ä≤ ‚ü©
extractMaybeEmb (noemb x) = _ , x
extractMaybeEmb (emb 0<1 x) = extractMaybeEmb x

-- A view for constructor equality of types where embeddings are ignored
data ShapeView (Œì : Con Term n) : ‚àÄ l l‚Ä≤ A B (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B) ‚Üí Set a where
  U·µ• : ‚àÄ {l l‚Ä≤} UA UB ‚Üí ShapeView Œì l l‚Ä≤ U U (U·µ£ UA) (U·µ£ UB)
  ‚Ñï·µ• : ‚àÄ {A B l l‚Ä≤} ‚ÑïA ‚ÑïB ‚Üí ShapeView Œì l l‚Ä≤ A B (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB)
  Empty·µ• : ‚àÄ {A B l l‚Ä≤} EmptyA EmptyB ‚Üí ShapeView Œì l l‚Ä≤ A B (Empty·µ£ EmptyA) (Empty·µ£ EmptyB)
  Unit·µ• : ‚àÄ {A B l l‚Ä≤} UnitA UnitB ‚Üí ShapeView Œì l l‚Ä≤ A B (Unit·µ£ UnitA) (Unit·µ£ UnitB)
  ne  : ‚àÄ {A B l l‚Ä≤} neA neB
      ‚Üí ShapeView Œì l l‚Ä≤ A B (ne neA) (ne neB)
  B·µ• : ‚àÄ {A B l l‚Ä≤} W BA BB
    ‚Üí ShapeView Œì l l‚Ä≤ A B (B·µ£ W BA) (B·µ£ W BB)
  Id·µ• : ‚àÄ ‚ä©A ‚ä©B ‚Üí ShapeView Œì l l‚Ä≤ A B (Id·µ£ ‚ä©A) (Id·µ£ ‚ä©B)
  emb‚Å∞¬π : ‚àÄ {A B l p q}
        ‚Üí ShapeView Œì ‚Å∞ l A B p q
        ‚Üí ShapeView Œì ¬π l A B (emb 0<1 p) q
  emb¬π‚Å∞ : ‚àÄ {A B l p q}
        ‚Üí ShapeView Œì l ‚Å∞ A B p q
        ‚Üí ShapeView Œì l ¬π A B p (emb 0<1 q)

-- Construct an shape view from an equality (aptly named)
goodCases : ‚àÄ {l l‚Ä≤} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ([B] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
          ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / [A] ‚Üí ShapeView Œì l l‚Ä≤ A B [A] [B]
-- Diagonal cases
goodCases (U·µ£ UA) (U·µ£ UB) A‚â°B = U·µ• UA UB
goodCases (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB) A‚â°B = ‚Ñï·µ• ‚ÑïA ‚ÑïB
goodCases (Empty·µ£ EmptyA) (Empty·µ£ EmptyB) A‚â°B = Empty·µ• EmptyA EmptyB
goodCases (Unit·µ£ UnitA) (Unit·µ£ UnitB) A‚â°B = Unit·µ• UnitA UnitB
goodCases (ne neA) (ne neB) A‚â°B = ne neA neB
goodCases (B·µ£ BŒ†! Œ†A) (B·µ£‚Ä≤ BŒ†! F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
          (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
  with whrDet* (red D , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl = B·µ• BŒ†! Œ†A (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _)
goodCases (B·µ£ BŒ£! Œ£A) (B·µ£‚Ä≤ BŒ£! F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
          (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤])
  with whrDet* (red D , Œ†Œ£‚Çô) (D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl = B·µ• BŒ£! Œ£A (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok)
goodCases (Id·µ£ ‚ä©A) (Id·µ£ ‚ä©B) _ = Id·µ• ‚ä©A ‚ä©B


goodCases {l = l} [A] (emb 0<1 x) A‚â°B =
  emb¬π‚Å∞ (goodCases {l = l} {‚Å∞} [A] x A‚â°B)
goodCases {l‚Ä≤ = l} (emb 0<1 x) [B] A‚â°B =
  emb‚Å∞¬π (goodCases {l = ‚Å∞} {l} x [B] A‚â°B)

-- Refutable cases
-- U ‚â° _
goodCases (U·µ£‚Ä≤ _ _ ‚ä¢Œì) (‚Ñï·µ£ D) PE.refl with whnfRed* (red D) U‚Çô
... | ()
goodCases (U·µ£‚Ä≤ _ _ ‚ä¢Œì) (Empty·µ£ D) PE.refl with whnfRed* (red D) U‚Çô
... | ()
goodCases (U·µ£‚Ä≤ _ _ ‚ä¢Œì) (Unit·µ£ (Unit‚Çú D _)) PE.refl
  with whnfRed* (red D) U‚Çô
... | ()
goodCases (U·µ£‚Ä≤ _ _ ‚ä¢Œì) (ne‚Ä≤ K D neK K‚â°K) PE.refl =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
goodCases (U·µ£‚Ä≤ _ _ _) (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) PE.refl =
  ‚ä•-elim (U‚â¢B W (whnfRed* (red D) U‚Çô))
goodCases (U·µ£ _) (Id·µ£ ‚ä©B) PE.refl =
  case whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B)) U‚Çô of Œª ()

-- ‚Ñï ‚â° _
goodCases (‚Ñï·µ£ D) (U·µ£ ‚ä¢Œì) A‚â°B with whnfRed* A‚â°B U‚Çô
... | ()
goodCases (‚Ñï·µ£ _) (Empty·µ£ D') D with whrDet* (D , ‚Ñï‚Çô) (red D' , Empty‚Çô)
... | ()
goodCases (‚Ñï·µ£ x) (Unit·µ£ (Unit‚Çú D' _)) D
  with whrDet* (D , ‚Ñï‚Çô) (red D' , Unit‚Çô)
... | ()
goodCases (‚Ñï·µ£ D) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K) A‚â°B =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (A‚â°B , ‚Ñï‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (‚Ñï·µ£ _) (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) A‚â°B =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (A‚â°B , ‚Ñï‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
goodCases (‚Ñï·µ£ _) (Id·µ£ ‚ä©B) ‚áí*‚Ñï =
  case whrDet* (‚áí*‚Ñï , ‚Ñï‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) of Œª ()

-- Empty ‚â¢ _
goodCases (Empty·µ£ D) (U·µ£ ‚ä¢Œì) A‚â°B with whnfRed* A‚â°B U‚Çô
... | ()
goodCases (Empty·µ£ _) (Unit·µ£ (Unit‚Çú D' _)) D
  with whrDet* (red D' , Unit‚Çô) (D , Empty‚Çô)
... | ()
goodCases (Empty·µ£ _) (‚Ñï·µ£ D') D with whrDet* (red D' , ‚Ñï‚Çô) (D , Empty‚Çô)
... | ()
goodCases (Empty·µ£ D) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K) A‚â°B =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (A‚â°B , Empty‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (Empty·µ£ _) (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) A‚â°B =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (A‚â°B , Empty‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
goodCases (Empty·µ£ _) (Id·µ£ ‚ä©B) ‚áí*Empty =
  case whrDet* (‚áí*Empty , Empty‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) of Œª ()

-- Unit ‚â° _
goodCases (Unit·µ£ _) (U·µ£ x‚ÇÅ) A‚â°B with whnfRed* A‚â°B U‚Çô
... | ()
goodCases (Unit·µ£ _) (Empty·µ£ D') D with whrDet* (red D' , Empty‚Çô) (D , Unit‚Çô)
... | ()
goodCases (Unit·µ£ _) (‚Ñï·µ£ D') D with whrDet* (red D' , ‚Ñï‚Çô) (D , Unit‚Çô)
... | ()
goodCases (Unit·µ£ D) (ne‚Ä≤ K D‚ÇÅ neK K‚â°K) A‚â°B =
  ‚ä•-elim (Unit‚â¢ne neK (whrDet* (A‚â°B , Unit‚Çô) (red D‚ÇÅ , ne neK)))
goodCases (Unit·µ£ _) (B·µ£‚Ä≤ W _ _ D _ _ _ _ _ _ _) A‚â°B =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (A‚â°B , Unit‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
goodCases (Unit·µ£ _) (Id·µ£ ‚ä©B) ‚áí*Unit =
  case whrDet* (‚áí*Unit , Unit‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) of Œª ()

-- ne ‚â° _
goodCases (ne‚Ä≤ K D neK K‚â°K) (U·µ£ ‚ä¢Œì) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (U‚â¢ne neM (whnfRed* (red D‚Ä≤) U‚Çô))
goodCases (ne‚Ä≤ K D neK K‚â°K) (‚Ñï·µ£ D‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (‚Ñï‚â¢ne neM (whrDet* (red D‚ÇÅ , ‚Ñï‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (ne‚Ä≤ K D neK K‚â°K) (Empty·µ£ D‚ÇÅ) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (Empty‚â¢ne neM (whrDet* (red D‚ÇÅ , Empty‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (ne‚Ä≤ K D neK K‚â°K) (Unit·µ£ (Unit‚Çú D‚ÇÅ _)) (ne‚Çå M D‚Ä≤ neM K‚â°M) =
  ‚ä•-elim (Unit‚â¢ne neM (whrDet* (red D‚ÇÅ , Unit‚Çô) (red D‚Ä≤ , ne neM)))
goodCases (ne‚Ä≤ _ _ _ _) (B·µ£‚Ä≤ W _ _ D‚ÇÅ _ _ _ _ _ _ _) (ne‚Çå _ D‚ÇÇ neM _) =
  ‚ä•-elim (B‚â¢ne W neM (whrDet* (red D‚ÇÅ , ‚ü¶ W ‚üß‚Çô) (red D‚ÇÇ , ne neM)))
goodCases (ne _) (Id·µ£ ‚ä©B) A‚â°B =
  ‚ä•-elim $ Id‚â¢ne N.neM $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (red N.D‚Ä≤ , ne N.neM)
  where
  module N = _‚ä©ne_‚â°_/_ A‚â°B

-- B ‚â° _
goodCases (B·µ£ W x) (U·µ£ ‚ä¢Œì) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (U‚â¢B W (whnfRed* D‚Ä≤ U‚Çô))
goodCases (B·µ£ W x) (‚Ñï·µ£ D‚ÇÅ) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (red D‚ÇÅ , ‚Ñï‚Çô) (D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
goodCases (B·µ£ W x) (Empty·µ£ D‚ÇÅ) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (red D‚ÇÅ , Empty‚Çô) (D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
goodCases
  (B·µ£ W x) (Unit·µ£ (Unit‚Çú D‚ÇÅ _)) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (red D‚ÇÅ , Unit‚Çô) (D‚Ä≤ , ‚ü¶ W ‚üß‚Çô)))
goodCases (B·µ£ W x) (ne‚Ä≤ K D neK K‚â°K) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  ‚ä•-elim (B‚â¢ne W neK (whrDet* (D‚Ä≤ , ‚ü¶ W ‚üß‚Çô) (red D , ne neK)))
goodCases (B·µ£‚Ä≤ BŒ†! _ _ _ _ _ _ _ _ _ _)
          (B·µ£‚Ä≤ BŒ£! _ _ D‚ÇÅ _ _ _ _ _ _ _)
          (B‚Çå _ _ D‚ÇÇ _ _ _) =
  ‚ä•-elim (Œ†‚â¢Œ£ (whrDet* (D‚ÇÇ , Œ†Œ£‚Çô) (red D‚ÇÅ , Œ†Œ£‚Çô)))
goodCases (B·µ£‚Ä≤ BŒ£! _ _ _ _ _ _ _ _ _ _)
          (B·µ£‚Ä≤ BŒ†! _ _ D‚ÇÅ _ _ _ _ _ _ _)
          (B‚Çå _ _ D‚ÇÇ _ _ _) =
  ‚ä•-elim (Œ†‚â¢Œ£ (whrDet* (red D‚ÇÅ , Œ†Œ£‚Çô) (D‚ÇÇ , Œ†Œ£‚Çô)))
goodCases (B·µ£ _ _) (Id·µ£ ‚ä©B) A‚â°B =
  ‚ä•-elim $ Id‚â¢‚ü¶‚üß‚ñ∑ _ $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (_‚ä©‚ÇóB‚ü®_‚ü©_‚â°_/_.D‚Ä≤ A‚â°B , ‚ü¶ _ ‚üß‚Çô)

-- Id ‚â° _
goodCases (Id·µ£ _) (U·µ£ _) A‚â°B =
  case whnfRed* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B)) U‚Çô of Œª ()
goodCases (Id·µ£ _) (‚Ñï·µ£ ‚áí*‚Ñï) A‚â°B =
  case whrDet* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô) (red ‚áí*‚Ñï , ‚Ñï‚Çô)
  of Œª ()
goodCases (Id·µ£ _) (Empty·µ£ ‚áí*Empty) A‚â°B =
  case
    whrDet* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô) (red ‚áí*Empty , Empty‚Çô)
  of Œª ()
goodCases (Id·µ£ _) (Unit·µ£ ‚ä©B) A‚â°B =
  case
    whrDet*
      (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô)
      (red (_‚ä©Unit_.‚áí*-Unit ‚ä©B) , Unit‚Çô)
  of Œª ()
goodCases (Id·µ£ _) (ne ‚ä©B) A‚â°B =
  ‚ä•-elim $ Id‚â¢ne N.neK $
  whrDet* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô) (red N.D , ne N.neK)
  where
  module N = _‚ä©ne_ ‚ä©B
goodCases (Id·µ£ _) (B·µ£ _ ‚ä©B) A‚â°B =
  ‚ä•-elim $ Id‚â¢‚ü¶‚üß‚ñ∑ _ $
  whrDet*
    (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ A‚â°B) , Id‚Çô) (red (_‚ä©‚ÇóB‚ü®_‚ü©_.D ‚ä©B) , ‚ü¶ _ ‚üß‚Çô)

-- Construct an shape view between two derivations of the same type
goodCasesRefl : ‚àÄ {l l‚Ä≤ A} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ([A‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
              ‚Üí ShapeView Œì l l‚Ä≤ A A [A] [A‚Ä≤]
goodCasesRefl [A] [A‚Ä≤] = goodCases [A] [A‚Ä≤] (reflEq [A])


-- A view for constructor equality between three types
data ShapeView‚ÇÉ (Œì : Con Term n) : ‚àÄ l l‚Ä≤ l‚Ä≥ A B C
                 (p : Œì ‚ä©‚ü® l  ‚ü© A)
                 (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© B)
                 (r : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© C) ‚Üí Set a where
  U·µ• : ‚àÄ {l l‚Ä≤ l‚Ä≥} UA UB UC ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ U U U (U·µ£ UA) (U·µ£ UB) (U·µ£ UC)
  ‚Ñï·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} ‚ÑïA ‚ÑïB ‚ÑïC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (‚Ñï·µ£ ‚ÑïA) (‚Ñï·µ£ ‚ÑïB) (‚Ñï·µ£ ‚ÑïC)
  Empty·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} EmptyA EmptyB EmptyC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (Empty·µ£ EmptyA) (Empty·µ£ EmptyB) (Empty·µ£ EmptyC)
  Unit·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} UnitA UnitB UnitC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (Unit·µ£ UnitA) (Unit·µ£ UnitB) (Unit·µ£ UnitC)
  ne  : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} neA neB neC
      ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (ne neA) (ne neB) (ne neC)
  B·µ• : ‚àÄ {A B C l l‚Ä≤ l‚Ä≥} W W‚Ä≤ W‚Ä≥ BA BB BC
    ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (B·µ£ W BA) (B·µ£ W‚Ä≤ BB) (B·µ£ W‚Ä≥ BC)
  Id·µ• :
    ‚àÄ ‚ä©A ‚ä©B ‚ä©C ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä≥ A B C (Id·µ£ ‚ä©A) (Id·µ£ ‚ä©B) (Id·µ£ ‚ä©C)
  emb‚Å∞¬π¬π : ‚àÄ {A B C l l‚Ä≤ p q r}
         ‚Üí ShapeView‚ÇÉ Œì ‚Å∞ l l‚Ä≤ A B C p q r
         ‚Üí ShapeView‚ÇÉ Œì ¬π l l‚Ä≤ A B C (emb 0<1 p) q r
  emb¬π‚Å∞¬π : ‚àÄ {A B C l l‚Ä≤ p q r}
         ‚Üí ShapeView‚ÇÉ Œì l ‚Å∞ l‚Ä≤ A B C p q r
         ‚Üí ShapeView‚ÇÉ Œì l ¬π l‚Ä≤ A B C p (emb 0<1 q) r
  emb¬π¬π‚Å∞ : ‚àÄ {A B C l l‚Ä≤ p q r}
         ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ ‚Å∞ A B C p q r
         ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ ¬π A B C p q (emb 0<1 r)

-- Combines two two-way views into a three-way view
combine : ‚àÄ {l l‚Ä≤ l‚Ä≥ l‚Ä¥ A B C [A] [B] [B]‚Ä≤ [C]}
        ‚Üí ShapeView Œì l l‚Ä≤ A B [A] [B]
        ‚Üí ShapeView Œì l‚Ä≥ l‚Ä¥ B C [B]‚Ä≤ [C]
        ‚Üí ShapeView‚ÇÉ Œì l l‚Ä≤ l‚Ä¥ A B C [A] [B] [C]
-- Diagonal cases
combine (U·µ• UA‚ÇÅ UB‚ÇÅ) (U·µ• UA UB) = U·µ• UA‚ÇÅ UB‚ÇÅ UB
combine (‚Ñï·µ• ‚ÑïA‚ÇÅ ‚ÑïB‚ÇÅ) (‚Ñï·µ• ‚ÑïA ‚ÑïB) = ‚Ñï·µ• ‚ÑïA‚ÇÅ ‚ÑïB‚ÇÅ ‚ÑïB
combine (Empty·µ• EmptyA‚ÇÅ EmptyB‚ÇÅ) (Empty·µ• EmptyA EmptyB) = Empty·µ• EmptyA‚ÇÅ EmptyB‚ÇÅ EmptyB
combine (Unit·µ• UnitA‚ÇÅ UnitB‚ÇÅ) (Unit·µ• UnitA UnitB) = Unit·µ• UnitA‚ÇÅ UnitB‚ÇÅ UnitB
combine (ne neA‚ÇÅ neB‚ÇÅ) (ne neA neB) = ne neA‚ÇÅ neB‚ÇÅ neB
combine (B·µ• BŒ†! Œ†A‚ÇÅ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok))
        (B·µ• BŒ†! (B·µ£ _ _ D‚Ä≤ _ _ _ _ _ _ _) Œ†B)
        with whrDet* (red D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl =
  B·µ• BŒ†! BŒ†! BŒ†! Œ†A‚ÇÅ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) Œ†B
combine (B·µ• BŒ£! Œ£A‚ÇÅ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok))
        (B·µ• BŒ£! (B·µ£ _ _ D‚Ä≤ _ _ _ _ _ _ _) Œ£B)
        with whrDet* (red D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | PE.refl =
  B·µ• BŒ£! BŒ£! BŒ£! Œ£A‚ÇÅ (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext ok) Œ£B
combine (Id·µ• ‚ä©A ‚ä©B) (Id·µ• _ ‚ä©C) =
  Id·µ• ‚ä©A ‚ä©B ‚ä©C
combine (emb‚Å∞¬π [AB]) [BC] = emb‚Å∞¬π¬π (combine [AB] [BC])
combine (emb¬π‚Å∞ [AB]) [BC] = emb¬π‚Å∞¬π (combine [AB] [BC])
combine [AB] (emb‚Å∞¬π [BC]) = combine [AB] [BC]
combine [AB] (emb¬π‚Å∞ [BC]) = emb¬π¬π‚Å∞ (combine [AB] [BC])

-- Refutable cases
-- U ‚â° _
combine (U·µ• UA UB) (‚Ñï·µ• ‚ÑïA ‚ÑïB) with whnfRed* (red ‚ÑïA) U‚Çô
... | ()
combine (U·µ• UA UB) (Empty·µ• EmptyA EmptyB) with whnfRed* (red EmptyA) U‚Çô
... | ()
combine (U·µ• UA UB) (Unit·µ• (Unit‚Çú UnA _) UnB) with whnfRed* (red UnA) U‚Çô
... | ()
combine (U·µ• UA UB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
combine (U·µ• _ _) (B·µ• W (B·µ£ _ _ D _ _ _ _ _ _ _) _) =
  ‚ä•-elim (U‚â¢B W (whnfRed* (red D) U‚Çô))
combine (U·µ• _ _) (Id·µ• ‚ä©B _) =
  case whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B)) U‚Çô of Œª ()

-- ‚Ñï ‚â° _
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (U·µ• UA UB) with whnfRed* (red ‚ÑïB) U‚Çô
... | ()
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (Empty·µ• EmptyA EmptyB) with whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red EmptyA , Empty‚Çô)
... | ()
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (Unit·µ• (Unit‚Çú UnA _) UnB)
  with whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red UnA , Unit‚Çô)
... | ()
combine (‚Ñï·µ• ‚ÑïA ‚ÑïB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red D , ne neK)))
combine (‚Ñï·µ• _ ‚ÑïB) (B·µ• W (B·µ£ _ _ D _ _ _ _ _ _ _) _) =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (red ‚ÑïB , ‚Ñï‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (‚Ñï·µ• _ ‚ä©B) (Id·µ• ‚ä©B‚Ä≤ _) =
  case whrDet* (red ‚ä©B , ‚Ñï‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B‚Ä≤) , Id‚Çô) of Œª ()

-- Empty ‚â° _
combine (Empty·µ• EmptyA EmptyB) (U·µ• UA UB) with whnfRed* (red EmptyB) U‚Çô
... | ()
combine (Empty·µ• EmptyA EmptyB) (‚Ñï·µ• ‚ÑïA ‚ÑïB) with whrDet* (red EmptyB , Empty‚Çô) (red ‚ÑïA , ‚Ñï‚Çô)
... | ()
combine (Empty·µ• EmptyA EmptyB) (Unit·µ• (Unit‚Çú UnA _) UnB)
  with whrDet* (red EmptyB , Empty‚Çô) (red UnA , Unit‚Çô)
... | ()
combine (Empty·µ• EmptyA EmptyB) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red EmptyB , Empty‚Çô) (red D , ne neK)))
combine
  (Empty·µ• _ EmptyB) (B·µ• W (B·µ£ _ _ D _ _ _ _ _ _ _) _) =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (red EmptyB , Empty‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (Empty·µ• _ ‚ä©B) (Id·µ• ‚ä©B‚Ä≤ _) =
  case whrDet* (red ‚ä©B , Empty‚Çô) (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B‚Ä≤) , Id‚Çô) of Œª ()

-- Unit ‚â° _
combine (Unit·µ• UnitA (Unit‚Çú UnitB _)) (U·µ• UA UB)
  with whnfRed* (red UnitB) U‚Çô
... | ()
combine (Unit·µ• UnitA (Unit‚Çú UnitB _)) (‚Ñï·µ• ‚ÑïA ‚ÑïB)
  with whrDet* (red UnitB , Unit‚Çô) (red ‚ÑïA , ‚Ñï‚Çô)
... | ()
combine (Unit·µ• UnitA (Unit‚Çú UnitB _)) (Empty·µ• EmptyA EmptyB)
  with whrDet* (red UnitB , Unit‚Çô) (red EmptyA , Empty‚Çô)
... | ()
combine (Unit·µ• UnitA (Unit‚Çú UnitB _)) (ne (ne K D neK K‚â°K) neB) =
  ‚ä•-elim (Unit‚â¢ne neK (whrDet* (red UnitB , Unit‚Çô) (red D , ne neK)))
combine (Unit·µ• _ (Unit‚Çú UnitB _)) (B·µ• W (B·µ£ _ _ D _ _ _ _ _ _ _) _) =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (red UnitB , Unit‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (Unit·µ• _ ‚ä©B) (Id·µ• ‚ä©B‚Ä≤ _) =
  case
    whrDet*
      (red (_‚ä©Unit_.‚áí*-Unit ‚ä©B) , Unit‚Çô)
      (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B‚Ä≤) , Id‚Çô)
  of Œª ()

-- ne ‚â° _
combine (ne neA (ne K D neK K‚â°K)) (U·µ• UA UB) =
  ‚ä•-elim (U‚â¢ne neK (whnfRed* (red D) U‚Çô))
combine (ne neA (ne K D neK K‚â°K)) (‚Ñï·µ• ‚ÑïA ‚ÑïB) =
  ‚ä•-elim (‚Ñï‚â¢ne neK (whrDet* (red ‚ÑïA , ‚Ñï‚Çô) (red D , ne neK)))
combine (ne neA (ne K D neK K‚â°K)) (Empty·µ• EmptyA EmptyB) =
  ‚ä•-elim (Empty‚â¢ne neK (whrDet* (red EmptyA , Empty‚Çô) (red D , ne neK)))
combine (ne neA (ne K D neK K‚â°K)) (Unit·µ• (Unit‚Çú UnA _) UnB) =
  ‚ä•-elim (Unit‚â¢ne neK (whrDet* (red UnA , Unit‚Çô) (red D , ne neK)))
combine (ne _ (ne _ D neK _)) (B·µ• W (B·µ£ _ _ D‚Ä≤ _ _ _ _ _ _ _) _) =
  ‚ä•-elim (B‚â¢ne W neK (whrDet* (red D‚Ä≤ , ‚ü¶ W ‚üß‚Çô) (red D , ne neK)))
combine (ne _ ‚ä©B) (Id·µ• ‚ä©B‚Ä≤ _) =
  ‚ä•-elim $ Id‚â¢ne N.neK $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B‚Ä≤) , Id‚Çô) (red N.D , ne N.neK)
  where
  module N = _‚ä©ne_ ‚ä©B

-- Œ†/Œ£ ‚â° _
combine (B·µ• W _ (B·µ£ _ _ D _ _ _ _ _ _ _)) (U·µ• _ _) =
  ‚ä•-elim (U‚â¢B W (whnfRed* (red D) U‚Çô))
combine (B·µ• W _ (B·µ£ _ _ D _ _ _ _ _ _ _)) (‚Ñï·µ• ‚ÑïA _) =
  ‚ä•-elim (‚Ñï‚â¢B W (whrDet* (red ‚ÑïA , ‚Ñï‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (B·µ• W _ (B·µ£ _ _ D _ _ _ _ _ _ _)) (Empty·µ• EmptyA _) =
  ‚ä•-elim (Empty‚â¢B W (whrDet* (red EmptyA , Empty‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (B·µ• W _ (B·µ£ _ _ D _ _ _ _ _ _ _)) (Unit·µ• (Unit‚Çú UnitA _) _) =
  ‚ä•-elim (Unit‚â¢B W (whrDet* (red UnitA , Unit‚Çô) (red D , ‚ü¶ W ‚üß‚Çô)))
combine (B·µ• W _ (B·µ£ _ _ D‚ÇÅ _ _ _ _ _ _ _)) (ne (ne _ D neK _) _) =
  ‚ä•-elim (B‚â¢ne W neK (whrDet* (red D‚ÇÅ , ‚ü¶ W ‚üß‚Çô) (red D , ne neK)))
combine
  (B·µ• BŒ†! _ (B·µ£ _ _ D _ _ _ _ _ _ _))
  (B·µ• BŒ£! (B·µ£ _ _ D‚Ä≤ _ _ _ _ _ _ _) _)
  with whrDet* (red D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | ()
combine
  (B·µ• BŒ£! _ (B·µ£ _ _ D _ _ _ _ _ _ _))
  (B·µ• BŒ†! (B·µ£ _ _ D‚Ä≤ _ _ _ _ _ _ _) _)
  with whrDet* (red D , Œ†Œ£‚Çô) (red D‚Ä≤ , Œ†Œ£‚Çô)
... | ()
combine (B·µ• _ _ ‚ä©B) (Id·µ• ‚ä©B‚Ä≤ _) =
  ‚ä•-elim $ Id‚â¢‚ü¶‚üß‚ñ∑ _ $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B‚Ä≤) , Id‚Çô) (red (_‚ä©‚ÇóB‚ü®_‚ü©_.D ‚ä©B) , ‚ü¶ _ ‚üß‚Çô)

-- Id ‚â° _
combine (Id·µ• _ ‚ä©B) (U·µ• _ _) =
  case whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B)) U‚Çô of Œª ()
combine (Id·µ• _ ‚ä©B) (‚Ñï·µ• ‚ä©B‚Ä≤ _) =
  case whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (red ‚ä©B‚Ä≤ , ‚Ñï‚Çô) of Œª ()
combine (Id·µ• _ ‚ä©B) (Empty·µ• ‚ä©B‚Ä≤ _) =
  case whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (red ‚ä©B‚Ä≤ , Empty‚Çô) of Œª ()
combine (Id·µ• _ ‚ä©B) (Unit·µ• ‚ä©B‚Ä≤ _) =
  case
    whrDet*
      (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô)
      (red (_‚ä©Unit_.‚áí*-Unit ‚ä©B‚Ä≤) , Unit‚Çô)
  of Œª ()
combine (Id·µ• _ ‚ä©B) (ne ‚ä©B‚Ä≤ _) =
  ‚ä•-elim $ Id‚â¢ne N.neK $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (red N.D , ne N.neK)
  where
  module N = _‚ä©ne_ ‚ä©B‚Ä≤
combine (Id·µ• _ ‚ä©B) (B·µ• _ ‚ä©B‚Ä≤ _) =
  ‚ä•-elim $ Id‚â¢‚ü¶‚üß‚ñ∑ _ $
  whrDet* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©B) , Id‚Çô) (red (_‚ä©‚ÇóB‚ü®_‚ü©_.D ‚ä©B‚Ä≤) , ‚ü¶ _ ‚üß‚Çô)
