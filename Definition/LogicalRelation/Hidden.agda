------------------------------------------------------------------------
-- A variant of the logical relation with hidden reducibility
-- arguments, along with variants of some other relations
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Hidden
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Conversion R
open import Definition.LogicalRelation.Substitution.Escape R
open import
  Definition.LogicalRelation.Substitution.Introductions.DoubleSubst R
open import
  Definition.LogicalRelation.Substitution.Introductions.SingleSubst R
import Definition.LogicalRelation.Substitution.Irrelevance R as Irr
open import Definition.LogicalRelation.Substitution.MaybeEmbed R
open import Definition.LogicalRelation.Substitution.Properties R
open import Definition.LogicalRelation.Substitution.Reducibility R
open import Definition.LogicalRelation.Substitution.Reduction R
open import Definition.LogicalRelation.Substitution.Reflexivity R
open import Definition.LogicalRelation.Substitution.Weakening R
import Definition.LogicalRelation.Weakening R as W

open import Definition.Typed R
open import Definition.Typed.Weakening R using (_‚à∑_‚äá_)

open import Definition.Untyped M
open import Definition.Untyped.Properties M

open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE

private variable
  m n                                                   : Nat
  x                                                     : Fin _
  Œì Œî Œó                                                 : Con Term _
  A A‚ÇÅ A‚ÇÇ B B‚ÇÅ B‚ÇÇ C C‚ÇÅ C‚ÇÇ D E t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ w : Term _
  œÉ œÉ‚ÇÅ œÉ‚ÇÇ œÉ‚ÇÉ                                            : Subst _ _
  œÅ                                                     : Wk _ _
  l l‚Ä≤ l‚Ä≥ l‚Ä¥                                            : TypeLevel
  k                                                     : LogRelKit

------------------------------------------------------------------------
-- The type formers

opaque

  -- Reducible terms.

  infix 4 _‚ä©‚ü®_‚ü©_‚à∑_

  _‚ä©‚ü®_‚ü©_‚à∑_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A

opaque

  -- Reducible type equality.

  infix 4 _‚ä©‚ü®_‚ü©_‚â°_

  _‚ä©‚ü®_‚ü©_‚â°_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A

opaque

  -- Reducible term equality.

  infix 4 _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A √ó
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / ‚ä©A √ó
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A

opaque

  infix 4 _‚ä©·µõ‚ü®_‚ü©_

  -- Valid types.

  _‚ä©·µõ‚ü®_‚ü©_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Set a
  Œì ‚ä©·µõ‚ü® l ‚ü© A =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A / ‚ä©Œì

opaque

  infix 4 _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Valid terms.

  _‚ä©·µõ‚ü®_‚ü©_‚à∑_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí
    ‚àÉ Œª (‚ä©A : Œì ‚ä©·µõ‚ü® l ‚ü© A / ‚ä©Œì) ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A / ‚ä©Œì / ‚ä©A

opaque

  infix 4 _‚ä©À¢_‚à∑_

  -- Valid substitutions.

  _‚ä©À¢_‚à∑_ : Con Term m ‚Üí Subst m n ‚Üí Con Term n ‚Üí Set a
  Œî ‚ä©À¢ œÉ ‚à∑ Œì =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí
    ‚àÉ Œª (‚ä¢Œî : ‚ä¢ Œî) ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì / ‚ä©Œì / ‚ä¢Œî

opaque

  infix 4 _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Valid type equality.

  _‚ä©·µõ‚ü®_‚ü©_‚â°_ : Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí
    ‚àÉ Œª (‚ä©A : Œì ‚ä©·µõ‚ü® l ‚ü© A / ‚ä©Œì) ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B / ‚ä©Œì √ó
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B / ‚ä©Œì / ‚ä©A

opaque

  infix 4 _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Valid term equality.

  _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ :
    Con Term n ‚Üí TypeLevel ‚Üí Term n ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí
    [ Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©Œì ]

opaque

  infix 4 _‚ä©À¢_‚â°_‚à∑_

  -- Valid substitution equality.

  _‚ä©À¢_‚â°_‚à∑_ : Con Term m ‚Üí Subst m n ‚Üí Subst m n ‚Üí Con Term n ‚Üí Set a
  Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì =
    ‚àÉ Œª (‚ä©Œì : ‚ä©·µõ Œì) ‚Üí
    ‚àÉ Œª (‚ä¢Œî : ‚ä¢ Œî) ‚Üí
    ‚àÉ Œª (‚ä©œÉ‚ÇÅ : Œî ‚ä©À¢ œÉ‚ÇÅ ‚à∑ Œì / ‚ä©Œì / ‚ä¢Œî) ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÇ ‚à∑ Œì / ‚ä©Œì / ‚ä¢Œî √ó
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì / ‚ä©Œì / ‚ä¢Œî / ‚ä©œÉ‚ÇÅ

------------------------------------------------------------------------
-- Reflexivity

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Reflexivity for _‚ä©‚ü®_‚ü©_‚â°_.

  refl-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° A
  refl-‚ä©‚â° ‚ä©A =
    ‚ä©A , ‚ä©A , reflEq ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Reflexivity for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  refl-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  refl-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©t) =
    ‚ä©A , ‚ä©t , ‚ä©t , reflEqTerm ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Reflexivity for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  refl-‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° A
  refl-‚ä©·µõ‚â° (_ , ‚ä©A) =
    _ , ‚ä©A , ‚ä©A , refl·µõ _ ‚ä©A

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Reflexivity for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  refl-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° t ‚à∑ A
  refl-‚ä©·µõ‚â°‚à∑ {t} (_ , ‚ä©A , ‚ä©t) =
    _ , modelsTermEq ‚ä©A ‚ä©t ‚ä©t (refl·µó·µõ {t = t} _ ‚ä©A ‚ä©t)

opaque
  unfolding _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- Reflexivity for _‚ä©À¢_‚â°_‚à∑_.

  refl-‚ä©À¢‚â°‚à∑ :
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©À¢ œÉ ‚â° œÉ ‚à∑ Œì
  refl-‚ä©À¢‚â°‚à∑ (_ , _ , ‚ä©œÉ) =
    _ , _ , ‚ä©œÉ , ‚ä©œÉ , reflSubst _ _ ‚ä©œÉ

------------------------------------------------------------------------
-- Symmetry

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Symmetry for _‚ä©‚ü®_‚ü©_‚â°_.

  sym-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚â° A
  sym-‚ä©‚â° (‚ä©A , ‚ä©B , A‚â°B) =
    ‚ä©B , ‚ä©A , symEq ‚ä©A ‚ä©B A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Symmetry for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  sym-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A
  sym-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u) =
    ‚ä©A , ‚ä©u , ‚ä©t , symEqTerm ‚ä©A t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Symmetry for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  sym-‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B ‚â° A
  sym-‚ä©·µõ‚â° (_ , ‚ä©A , ‚ä©B , A‚â°B) =
    _ , ‚ä©B , ‚ä©A , sym-‚ä©·µõ‚â°// ‚ä©A ‚ä©B A‚â°B

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Symmetry for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  sym-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚â° t ‚à∑ A
  sym-‚ä©·µõ‚â°‚à∑ {t} {u} (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u) =
    _ , modelsTermEq ‚ä©A ‚ä©u ‚ä©t (sym-‚ä©·µõ‚â°‚à∑// t u ‚ä©A t‚â°u)

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- Symmetry for _‚ä©À¢_‚â°_‚à∑_.

  sym-‚ä©À¢‚â°‚à∑ :
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÇ ‚â° œÉ‚ÇÅ ‚à∑ Œì
  sym-‚ä©À¢‚â°‚à∑ (_ , _ , ‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) =
    _ , _ , ‚ä©œÉ‚ÇÇ , ‚ä©œÉ‚ÇÅ , symS _ _ _ _ œÉ‚ÇÅ‚â°œÉ‚ÇÇ

------------------------------------------------------------------------
-- Transitivity

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Transitivity for _‚ä©‚ü®_‚ü©_‚â°_.

  trans-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  trans-‚ä©‚â° (‚ä©A , _ , A‚â°B) (‚ä©B , ‚ä©C , B‚â°C) =
    ‚ä©A , ‚ä©C , transEq ‚ä©A ‚ä©B ‚ä©C A‚â°B B‚â°C

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Transitivity for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  trans-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  trans-‚ä©‚â°‚à∑ (‚ä©A‚Ä≤ , ‚ä©t , _ , t‚â°u) (‚ä©A , _ , ‚ä©v , u‚â°v) =
      ‚ä©A , irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©t , ‚ä©v
    , transEqTerm ‚ä©A (irrelevanceEqTerm ‚ä©A‚Ä≤ ‚ä©A t‚â°u) u‚â°v

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Transitivity for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  trans-‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B ‚â° C ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° C
  trans-‚ä©·µõ‚â° {C} (_ , ‚ä©A , ‚ä©B , A‚â°B) (_ , ‚ä©B‚Ä≤ , ‚ä©C , B‚â°C) =
    case Irr.irrelevance _ _ ‚ä©C of Œª
      ‚ä©C‚Ä≤ ‚Üí
      _ , ‚ä©A , ‚ä©C‚Ä≤
    , trans-‚ä©·µõ‚â°// ‚ä©A ‚ä©B ‚ä©C‚Ä≤ A‚â°B
        (Irr.irrelevanceEq {B = C} _ _ ‚ä©B‚Ä≤ ‚ä©B B‚â°C)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Transitivity for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  trans-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° v ‚à∑ A
  trans-‚ä©·µõ‚â°‚à∑
    {t} {u} {v}
    (_ , modelsTermEq ‚ä©A‚Ä≤ ‚ä©t _ t‚â°u) (_ , modelsTermEq ‚ä©A _ ‚ä©v u‚â°v) =
      _
    , modelsTermEq ‚ä©A (Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤ ‚ä©A ‚ä©t) ‚ä©v
        (trans-‚ä©·µõ‚â°‚à∑// t u v ‚ä©A
           (Irr.irrelevanceEqTerm {t = t} {u = u} _ _ ‚ä©A‚Ä≤ ‚ä©A t‚â°u)
           u‚â°v)

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- Transitivity for _‚ä©À¢_‚â°_‚à∑_.

  trans-‚ä©À¢‚â° :
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÇ ‚â° œÉ‚ÇÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÉ ‚à∑ Œì
  trans-‚ä©À¢‚â° (_ , _ , _ , ‚ä©œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) (_ , _ , _ , ‚ä©œÉ‚ÇÉ , œÉ‚ÇÇ‚â°œÉ‚ÇÉ) =
    case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ‚ÇÉ of Œª
      ‚ä©œÉ‚ÇÉ ‚Üí
      _ , _ , _ , ‚ä©œÉ‚ÇÉ
    , transS _ _ _ _ ‚ä©œÉ‚ÇÉ œÉ‚ÇÅ‚â°œÉ‚ÇÇ
        (Irr.irrelevanceSubstEq _ _ _ _ _ ‚ä©œÉ‚ÇÇ œÉ‚ÇÇ‚â°œÉ‚ÇÉ)

------------------------------------------------------------------------
-- Changing type levels

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚à∑_.

  level-‚ä©‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  level-‚ä©‚à∑ ‚ä©A (‚ä©A‚Ä≤ , ‚ä©t) =
    ‚ä©A , irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚â°_.

  level-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  level-‚ä©‚â° ‚ä©A ‚ä©B (‚ä©A‚Ä≤ , _ , A‚â°B) =
    ‚ä©A , ‚ä©B , irrelevanceEq ‚ä©A‚Ä≤ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  level-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  level-‚ä©‚â°‚à∑ ‚ä©A (‚ä©A‚Ä≤ , ‚ä©t , ‚ä©u , t‚â°u) =
      ‚ä©A , irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©t , irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©u
    , irrelevanceEqTerm ‚ä©A‚Ä≤ ‚ä©A t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Changing type levels for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  level-‚ä©·µõ‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A
  level-‚ä©·µõ‚à∑ {t} (_ , ‚ä©A) (_ , ‚ä©A‚Ä≤ , ‚ä©t) =
    _ , ‚ä©A , Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤ ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Changing type levels for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  level-‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B
  level-‚ä©·µõ‚â° {B} (_ , ‚ä©A) (_ , ‚ä©B) (_ , ‚ä©A‚Ä≤ , _ , A‚â°B) =
      _ , ‚ä©A , Irr.irrelevance _ _ ‚ä©B
    , Irr.irrelevanceEq {B = B} _ _ ‚ä©A‚Ä≤ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Changing type levels for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  level-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A
  level-‚ä©·µõ‚â°‚à∑ {t} {u} (_ , ‚ä©A) (_ , modelsTermEq ‚ä©A‚Ä≤ ‚ä©t ‚ä©u t‚â°u) =
      _
    , modelsTermEq ‚ä©A
        (Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤ ‚ä©A ‚ä©t)
        (Irr.irrelevanceTerm {t = u} _ _ ‚ä©A‚Ä≤ ‚ä©A ‚ä©u)
        (Irr.irrelevanceEqTerm {t = t} {u = u} _ _ ‚ä©A‚Ä≤ ‚ä©A t‚â°u)

------------------------------------------------------------------------
-- Conversion

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚à∑_

  -- Conversion for _‚ä©‚ü®_‚ü©_‚à∑_.

  conv-‚ä©‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ B
  conv-‚ä©‚à∑ (‚ä©A , ‚ä©B , A‚â°B) (‚ä©A‚Ä≤ , ‚ä©t) =
    ‚ä©B , convTerm‚ÇÅ ‚ä©A‚Ä≤ ‚ä©B (irrelevanceEq ‚ä©A ‚ä©A‚Ä≤ A‚â°B) ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Conversion for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  conv-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B
  conv-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©B , A‚â°B) (‚ä©A‚Ä≤ , ‚ä©t , ‚ä©u , t‚â°u) =
    case irrelevanceEq ‚ä©A ‚ä©A‚Ä≤ A‚â°B of Œª
      A‚â°B ‚Üí
      ‚ä©B , convTerm‚ÇÅ ‚ä©A‚Ä≤ ‚ä©B A‚â°B ‚ä©t , convTerm‚ÇÅ ‚ä©A‚Ä≤ ‚ä©B A‚â°B ‚ä©u
    , convEqTerm‚ÇÅ ‚ä©A‚Ä≤ ‚ä©B A‚â°B t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Conversion for the context for _‚ä©·µõ‚ü®_‚ü©_.

  conv-‚àô-‚ä©·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œì ‚àô B ‚ä©·µõ‚ü® l ‚ü© C
  conv-‚àô-‚ä©·µõ (_ , ‚ä©A , ‚ä©B , A‚â°B) (_ , ‚ä©C) =
    _ , Irr.irrelevanceLift _ ‚ä©A ‚ä©B A‚â°B (Irr.irrelevance _ _ ‚ä©C)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Another kind of conversion for the context for _‚ä©·µõ‚ü®_‚ü©_.

  conv-‚àô‚àô-‚ä©·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô B‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œì ‚àô A‚ÇÇ ‚àô B‚ÇÇ ‚ä©·µõ‚ü® l ‚ü© C
  conv-‚àô‚àô-‚ä©·µõ
    {B‚ÇÇ} (_ , ‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ , A‚ÇÅ‚â°A‚ÇÇ) (_ , ‚ä©B‚ÇÅ , ‚ä©B‚ÇÇ , B‚ÇÅ‚â°B‚ÇÇ) (_ , ‚ä©C) =
    case Irr.irrelevance _ _ ‚ä©B‚ÇÅ of Œª
      ‚ä©B‚ÇÅ‚Ä≤ ‚Üí
      _
    , Irr.irrelevanceLift‚ÇÇ
        {‚ä©A‚ÇÅ = ‚ä©A‚ÇÅ}
        {‚ä©B‚ÇÅ = ‚ä©B‚ÇÅ‚Ä≤}
        {‚ä©B‚ÇÇ = Irr.irrelevanceLift _ ‚ä©A‚ÇÅ ‚ä©A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ
                 (Irr.irrelevance _ _ ‚ä©B‚ÇÇ)}
        A‚ÇÅ‚â°A‚ÇÇ
        (Irr.irrelevanceEq {B = B‚ÇÇ} _ _ ‚ä©B‚ÇÅ ‚ä©B‚ÇÅ‚Ä≤ B‚ÇÅ‚â°B‚ÇÇ)
        (Irr.irrelevance _ _ ‚ä©C)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Conversion for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  conv-‚ä©·µõ‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ B
  conv-‚ä©·µõ‚à∑ {B} {t} (_ , ‚ä©A , ‚ä©B , A‚â°B) ‚ä©t =
    case level-‚ä©·µõ‚à∑ {t = t} (_ , ‚ä©A) ‚ä©t of Œª
      (_ , ‚ä©A‚Ä≤ , ‚ä©t) ‚Üí
    case Irr.irrelevance _ _ ‚ä©A‚Ä≤ of Œª
      ‚ä©A‚Ä≥ ‚Üí
      _ , ‚ä©B
    , conv·µõ {t = t} _ ‚ä©A‚Ä≥ ‚ä©B (Irr.irrelevanceEq {B = B} _ _ ‚ä©A ‚ä©A‚Ä≥ A‚â°B)
        (Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤ ‚ä©A‚Ä≥ ‚ä©t)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Conversion for the context for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  conv-‚àô-‚ä©·µõ‚à∑ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ C ‚Üí
    Œì ‚àô B ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ C
  conv-‚àô-‚ä©·µõ‚à∑ {t} (_ , ‚ä©A , ‚ä©B , A‚â°B) (_ , ‚ä©C , ‚ä©t) =
    case Irr.irrelevance _ _ ‚ä©C of Œª
      ‚ä©C‚Ä≤ ‚Üí
      _ , Irr.irrelevanceLift _ ‚ä©A ‚ä©B A‚â°B ‚ä©C‚Ä≤
    , Irr.irrelevanceTermLift {t = t} _ ‚ä©A ‚ä©B A‚â°B ‚ä©C‚Ä≤
        (Irr.irrelevanceTerm {t = t} _ _ ‚ä©C ‚ä©C‚Ä≤ ‚ä©t)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Conversion for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  conv-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ B
  conv-‚ä©·µõ‚â°‚à∑ {B} {t} {u} (_ , ‚ä©A , ‚ä©B , A‚â°B) t‚â°u =
    case level-‚ä©·µõ‚â°‚à∑ (_ , ‚ä©A) t‚â°u of Œª
      (_ , modelsTermEq ‚ä©A‚Ä≤ ‚ä©t ‚ä©u t‚â°u) ‚Üí
    case Irr.irrelevance _ _ ‚ä©A‚Ä≤ of Œª
      ‚ä©A‚Ä≥ ‚Üí
    case (Œª {k Œî œÉ} ‚Üí
            Irr.irrelevanceEq {B = B} _ _ ‚ä©A ‚ä©A‚Ä≥ A‚â°B
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      A‚â°B ‚Üí
      _
    , modelsTermEq ‚ä©B
        (conv·µõ {t = t} _ ‚ä©A‚Ä≥ ‚ä©B A‚â°B
           (Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤ ‚ä©A‚Ä≥ ‚ä©t))
        (conv·µõ {t = u} _ ‚ä©A‚Ä≥ ‚ä©B A‚â°B
           (Irr.irrelevanceTerm {t = u} _ _ ‚ä©A‚Ä≤ ‚ä©A‚Ä≥ ‚ä©u))
        (convEq·µõ {t = t} {u = u} _ ‚ä©A‚Ä≥ ‚ä©B A‚â°B
           (Irr.irrelevanceEqTerm {t = t} {u = u} _ _ ‚ä©A‚Ä≤ ‚ä©A‚Ä≥ t‚â°u))

------------------------------------------------------------------------
-- Weakening

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Weakening for _‚ä©‚ü®_‚ü©_‚à∑_.

  wk-‚ä©‚à∑ : œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œî ‚ä©‚ü® l ‚ü© wk œÅ t ‚à∑ wk œÅ A
  wk-‚ä©‚à∑ Œî‚äáŒì ‚ä¢Œî (‚ä©A , ‚ä©t) =
    W.wk Œî‚äáŒì ‚ä¢Œî ‚ä©A , W.wkTerm Œî‚äáŒì ‚ä¢Œî ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Weakening for _‚ä©‚ü®_‚ü©_‚â°_.

  wk-‚ä©‚â° : œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œî ‚ä©‚ü® l ‚ü© wk œÅ A ‚â° wk œÅ B
  wk-‚ä©‚â° Œî‚äáŒì ‚ä¢Œî (‚ä©A , ‚ä©B , A‚â°B) =
    W.wk Œî‚äáŒì ‚ä¢Œî ‚ä©A , W.wk Œî‚äáŒì ‚ä¢Œî ‚ä©B , W.wkEq Œî‚äáŒì ‚ä¢Œî ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Weakening for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  wk-‚ä©‚â°‚à∑ :
    œÅ ‚à∑ Œî ‚äá Œì ‚Üí ‚ä¢ Œî ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œî ‚ä©‚ü® l ‚ü© wk œÅ t ‚â° wk œÅ u ‚à∑ wk œÅ A
  wk-‚ä©‚â°‚à∑ Œî‚äáŒì ‚ä¢Œî (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u) =
      W.wk Œî‚äáŒì ‚ä¢Œî ‚ä©A , W.wkTerm Œî‚äáŒì ‚ä¢Œî ‚ä©A ‚ä©t , W.wkTerm Œî‚äáŒì ‚ä¢Œî ‚ä©A ‚ä©u
    , W.wkEqTerm Œî‚äáŒì ‚ä¢Œî ‚ä©A t‚â°u

opaque
  unfolding _‚ä©À¢_‚à∑_

  -- Weakening for _‚ä©À¢_‚à∑_.

  wk-‚ä©À¢‚à∑ : œÅ ‚à∑ Œó ‚äá Œî ‚Üí ‚ä¢ Œó ‚Üí Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí Œó ‚ä©À¢ œÅ ‚Ä¢‚Çõ œÉ ‚à∑ Œì
  wk-‚ä©À¢‚à∑ Œó‚äáŒî ‚ä¢Œó (_ , ‚ä¢Œî , ‚ä©œÉ) =
    _ , _ , wkSubstS _ ‚ä¢Œî ‚ä¢Œó Œó‚äáŒî ‚ä©œÉ

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- Weakening for _‚ä©À¢_‚â°_‚à∑_.

  wk-‚ä©À¢‚â°‚à∑ :
    œÅ ‚à∑ Œó ‚äá Œî ‚Üí ‚ä¢ Œó ‚Üí Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œó ‚ä©À¢ œÅ ‚Ä¢‚Çõ œÉ‚ÇÅ ‚â° œÅ ‚Ä¢‚Çõ œÉ‚ÇÇ ‚à∑ Œì
  wk-‚ä©À¢‚â°‚à∑ Œó‚äáŒî ‚ä¢Œó (_ , ‚ä¢Œî , ‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) =
    _ , _ , _ , wkSubstS _ ‚ä¢Œî _ Œó‚äáŒî ‚ä©œÉ‚ÇÇ , wkSubstSEq _ ‚ä¢Œî ‚ä¢Œó Œó‚äáŒî _ œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- Single-step weakening for _‚ä©·µõ‚ü®_‚ü©_.

  wk1-‚ä©·µõ : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© B ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí Œì ‚àô B ‚ä©·µõ‚ü® l ‚ü© wk1 A
  wk1-‚ä©·µõ (_ , ‚ä©B) (_ , ‚ä©A) =
    _ , wk1·µõ _ (Irr.irrelevance _ _ ‚ä©B) ‚ä©A

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Single-step weakening for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  wk1-‚ä©·µõ‚à∑ : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© B ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚àô B ‚ä©·µõ‚ü® l ‚ü© wk1 t ‚à∑ wk1 A
  wk1-‚ä©·µõ‚à∑ {t} (_ , ‚ä©B) (_ , ‚ä©A , ‚ä©t) =
    case Irr.irrelevance _ _ ‚ä©B of Œª
      ‚ä©B ‚Üí
    _ , wk1·µõ _ ‚ä©B ‚ä©A , wk1Term·µõ t ‚ä©A ‚ä©B ‚ä©t

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- Single-step weakening for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  wk1-‚ä©·µõ‚â° : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© C ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚àô C ‚ä©·µõ‚ü® l ‚ü© wk1 A ‚â° wk1 B
  wk1-‚ä©·µõ‚â° {B} (_ , ‚ä©C) (_ , ‚ä©A , ‚ä©B , A‚â°B) =
    case Irr.irrelevance _ _ ‚ä©C of Œª
      ‚ä©C ‚Üí
    _ , wk1·µõ _ ‚ä©C ‚ä©A , wk1·µõ _ ‚ä©C ‚ä©B , wk1Eq·µõ {B = B} _ ‚ä©C ‚ä©A A‚â°B

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- Single-step weakening for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  wk1-‚ä©·µõ‚â°‚à∑ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© B ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚àô B ‚ä©·µõ‚ü® l ‚ü© wk1 t ‚â° wk1 u ‚à∑ wk1 A
  wk1-‚ä©·µõ‚â°‚à∑ {t} {u} (_ , ‚ä©B) (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u) =
    case Irr.irrelevance _ _ ‚ä©B of Œª
      ‚ä©B ‚Üí
      _
    , modelsTermEq (wk1·µõ _ ‚ä©B ‚ä©A) (wk1Term·µõ t ‚ä©A ‚ä©B ‚ä©t)
        (wk1Term·µõ u ‚ä©A ‚ä©B ‚ä©u) (wk1EqTerm·µõ t u t‚â°u)

------------------------------------------------------------------------
-- Well-formedness lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  wf-‚ä©‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
  wf-‚ä©‚à∑ (‚ä©A , _) = ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  wf-‚ä©‚â° : Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A √ó Œì ‚ä©‚ü® l ‚ü© B
  wf-‚ä©‚â° (‚ä©A , ‚ä©B , _) = ‚ä©A , ‚ä©B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  wf-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A
  wf-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©t , ‚ä©u , _) = (‚ä©A , ‚ä©t) , (‚ä©A , ‚ä©u)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- A well-formedness lemma for ‚ä©·µõ_.

  wf-‚ä©·µõ-‚àô : ‚ä©·µõ Œì ‚àô A ‚Üí ‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A
  wf-‚ä©·µõ-‚àô (_ ‚àô ‚ä©A) = _ , _ , ‚ä©A

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- A well-formedness lemma for _‚ä©·µõ‚ü®_‚ü©_.

  wf-‚ä©·µõ : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí ‚ä©·µõ Œì
  wf-‚ä©·µõ (‚ä©Œì , _) = ‚ä©Œì

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- Another well-formedness lemma for _‚ä©·µõ‚ü®_‚ü©_.

  wf-‚àô-‚ä©·µõ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    ‚àÉ Œª l‚Ä≤ ‚Üí Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A
  wf-‚àô-‚ä©·µõ ‚ä©B =
    case wf-‚ä©·µõ ‚ä©B of Œª {
      (_ ‚àô ‚ä©A) ‚Üí
    _ , _ , ‚ä©A }

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- A well-formedness lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  wf-‚ä©·µõ‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A
  wf-‚ä©·µõ‚à∑ (_ , ‚ä©A , _) = _ , ‚ä©A

opaque
  unfolding _‚ä©À¢_‚à∑_

  -- A well-formedness lemma for _‚ä©À¢_‚à∑_.

  wf-‚ä©À¢‚à∑ : Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí ‚ä©·µõ Œì
  wf-‚ä©À¢‚à∑ (‚ä©Œì , _) = ‚ä©Œì

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- A well-formedness lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  wf-‚ä©·µõ‚â° : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A √ó Œì ‚ä©·µõ‚ü® l ‚ü© B
  wf-‚ä©·µõ‚â° (_ , ‚ä©A , ‚ä©B , _) = (_ , ‚ä©A) , (_ , ‚ä©B)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- A well-formedness lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  wf-‚ä©·µõ‚â°‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A
  wf-‚ä©·µõ‚â°‚à∑ (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u _) =
    (_ , ‚ä©A , ‚ä©t) , (_ , ‚ä©A , ‚ä©u)

opaque
  unfolding _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A well-formedness lemma for _‚ä©À¢_‚â°_‚à∑_.

  wf-‚ä©À¢‚â°‚à∑ : Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä©À¢ œÉ‚ÇÅ ‚à∑ Œì √ó Œî ‚ä©À¢ œÉ‚ÇÇ ‚à∑ Œì
  wf-‚ä©À¢‚â°‚à∑ (_ , _ , ‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ , _) = (_ , _ , ‚ä©œÉ‚ÇÅ) , (_ , _ , ‚ä©œÉ‚ÇÇ)

------------------------------------------------------------------------
-- Reduction

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Closure under reduction for _‚ä©‚ü®_‚ü©_.

  ‚ä©-‚áí* :
    Œì ‚ä¢ A :‚áí*: B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©-‚áí* A‚áí*B ‚ä©A =
    case redSubst*‚Ä≤ A‚áí*B ‚ä©A of Œª
      (‚ä©B , A‚â°B) ‚Üí
    ‚ä©B , (‚ä©A , ‚ä©B , A‚â°B)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Closure under reduction for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-‚áí* :
    Œì ‚ä¢ t :‚áí*: u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚à∑-‚áí* t‚áí*u (‚ä©A , ‚ä©t) =
    case redSubst*Term‚Ä≤ t‚áí*u ‚ä©A ‚ä©t of Œª
      (‚ä©u , t‚â°u) ‚Üí
    (‚ä©A , ‚ä©u) , (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u)

------------------------------------------------------------------------
-- Expansion

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Closure under expansion for _‚ä©‚ü®_‚ü©_.

  ‚ä©-‚áê* :
    Œì ‚ä¢ A ‚áí* B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    (Œì ‚ä©‚ü® l ‚ü© A) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©-‚áê* A‚áí*B ‚ä©B =
    case redSubst* A‚áí*B ‚ä©B of Œª
      (‚ä©A , A‚â°B) ‚Üí
    ‚ä©A , (‚ä©A , ‚ä©B , A‚â°B)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Closure under expansion for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-‚áê* :
    Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚à∑-‚áê* t‚áí*u (‚ä©A , ‚ä©u) =
    case redSubst*Term t‚áí*u ‚ä©A ‚ä©u of Œª
      (‚ä©t , t‚â°u) ‚Üí
    (‚ä©A , ‚ä©t) , (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©À¢_‚à∑_

  -- Closure under expansion for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑-‚áê :
    (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
     Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
     Œî ‚ä¢ t [ œÉ ] ‚áí u [ œÉ ] ‚à∑ A [ œÉ ]) ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©·µõ‚à∑-‚áê {t} {u} t‚áíu (_ , ‚ä©A , ‚ä©u) =
    case redSubstTerm·µõ {t = t} {u = u} _
           (Œª _ ‚ä©œÉ ‚Üí t‚áíu (_ , _ , ‚ä©œÉ))
           ‚ä©A ‚ä©u of Œª
      (‚ä©t , t‚â°u) ‚Üí
    (_ , ‚ä©A , ‚ä©t) , (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u)

------------------------------------------------------------------------
-- Escape lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  escape-‚ä©‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ A
  escape-‚ä©‚à∑ (‚ä©A , ‚ä©t) = escapeTerm ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  escape-‚ä©‚â° : Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä¢ A ‚âÖ B
  escape-‚ä©‚â° (‚ä©A , _ , A‚â°B) = escapeEq ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  escape-‚ä©‚â°‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä¢ t ‚âÖ u ‚à∑ A
  escape-‚ä©‚â°‚à∑ (‚ä©A , _ , _ , t‚â°u) = escapeTermEq ‚ä©A t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- An escape lemma for _‚ä©·µõ‚ü®_‚ü©_.

  escape-‚ä©·µõ : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí Œì ‚ä¢ A
  escape-‚ä©·µõ (_ , ‚ä©A) = escape·µõ _ ‚ä©A

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- An escape lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  escape-‚ä©·µõ‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ A
  escape-‚ä©·µõ‚à∑ (_ , ‚ä©A , ‚ä©t) = escapeTerm·µõ _ ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©À¢_‚à∑_

  -- An escape lemma for _‚ä©À¢_‚à∑_.

  escape-‚ä©À¢‚à∑ :
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    ‚ä¢ Œî √ó Œî ‚ä¢À¢ œÉ ‚à∑ Œì
  escape-‚ä©À¢‚à∑ (_ , ‚ä¢Œî , ‚ä©œÉ) =
    ‚ä¢Œî , wellformedSubst _ _ ‚ä©œÉ

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_

  -- An escape lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  escape-‚ä©·µõ‚â° : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä¢ A ‚âÖ B
  escape-‚ä©·µõ‚â° (_ , ‚ä©A , _ , A‚â°B) = escapeEq·µõ _ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- An escape lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  escape-‚ä©·µõ‚â°‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä¢ t ‚âÖ u ‚à∑ A
  escape-‚ä©·µõ‚â°‚à∑ (_ , modelsTermEq ‚ä©A _ _ t‚â°u) = escapeEqTerm·µõ _ ‚ä©A t‚â°u

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- An escape lemma for _‚ä©À¢_‚â°_‚à∑_.

  escape-‚ä©À¢‚â°‚à∑ : Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä¢À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì
  escape-‚ä©À¢‚â°‚à∑ (_ , _ , _ , _ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) = wellformedSubstEq _ _ _ œÉ‚ÇÅ‚â°œÉ‚ÇÇ

------------------------------------------------------------------------
-- Reducibility from validity

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- If A is valid, then A is reducible.

  ‚ä©·µõ‚Üí‚ä© : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
  ‚ä©·µõ‚Üí‚ä© (_ , ‚ä©A) = reducible·µõ _ ‚ä©A

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚à∑_

  -- If t is valid, then t is reducible.

  ‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  ‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ (_ , ‚ä©A , ‚ä©t) =
    reducible·µõ _ ‚ä©A , reducibleTerm·µõ _ ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_

  -- If there is a valid equality between A and¬†B, then there is a
  -- reducible equality between A and¬†B.

  ‚ä©·µõ‚â°‚Üí‚ä©‚â° : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©·µõ‚â°‚Üí‚ä©‚â° (_ , ‚ä©A , ‚ä©B , A‚â°B) =
    reducible·µõ _ ‚ä©A , reducible·µõ _ ‚ä©B , reducibleEq·µõ _ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- If there is a valid equality between t and¬†u, then there is a
  -- reducible equality between t and¬†u.

  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©‚â°‚à∑ : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©‚â°‚à∑ (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u) =
      reducible·µõ _ ‚ä©A , reducibleTerm·µõ _ ‚ä©A ‚ä©t , reducibleTerm·µõ _ ‚ä©A ‚ä©u
    , reducibleEqTerm·µõ _ ‚ä©A t‚â°u

------------------------------------------------------------------------
-- Equational reasoning combinators

-- For more explanations of the combinators, see
-- Definition.Typed.Reasoning.Reduction.Primitive.

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_.

  infix -1
    _‚àé‚ü®_‚ü©‚ä© finally-‚ä©‚â° finally-‚ä©‚â°Àò
  infixr -2
    step-‚ä©‚â° step-‚ä©‚â°Àò step-‚ä©‚â°‚â° step-‚ä©‚â°‚â°Àò step-‚ä©‚â°‚áí* step-‚ä©‚â°‚áí step-‚ä©‚â°‚áê*
    step-‚ä©‚â°‚áê _‚â°‚ü®‚ü©‚ä©_ finally-‚ä©‚â°‚â° finally-‚ä©‚â°‚â°Àò finally-‚ä©‚â°‚áê*

  step-‚ä©‚â° : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â° _ = flip trans-‚ä©‚â°

  syntax step-‚ä©‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°Àò : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°Àò _ B‚â°C B‚â°A = trans-‚ä©‚â° (sym-‚ä©‚â° B‚â°A) B‚â°C

  syntax step-‚ä©‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚â° : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚â° _ B‚â°C PE.refl = B‚â°C

  syntax step-‚ä©‚â°‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚â° B‚â°C

  step-‚ä©‚â°‚â°Àò : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚â°Àò _ B‚â°C PE.refl = B‚â°C

  syntax step-‚ä©‚â°‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚â° B‚â°C

  step-‚ä©‚â°‚áí* : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ A ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áí* _ B‚â°C A‚áí*B =
    trans-‚ä©‚â° (‚ä©-‚áê* A‚áí*B (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ) .proj‚ÇÇ) B‚â°C

  syntax step-‚ä©‚â°‚áí* A B‚â°C A‚áí*B = A ‚áí*‚ü® A‚áí*B ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áí : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ A ‚áí B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áí _ B‚â°C A‚áíB =
    step-‚ä©‚â°‚áí* _ B‚â°C (A‚áíB ‚á® id (escape (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ)))

  syntax step-‚ä©‚â°‚áí A B‚â°C A‚áíB = A ‚áí‚ü® A‚áíB ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áê* : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ B :‚áí*: A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áê* _ B‚â°C B‚áí*A =
    trans-‚ä©‚â° (sym-‚ä©‚â° (‚ä©-‚áí* B‚áí*A (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ) .proj‚ÇÇ)) B‚â°C

  syntax step-‚ä©‚â°‚áê* A B‚â°C B‚áí*A = A ‚áê*‚ü® B‚áí*A ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áê :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ B ‚áí A ‚Üí Œì ‚ä¢ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áê _ B‚â°C B‚áíA ‚ä¢A =
    step-‚ä©‚â°‚áê* _ B‚â°C
      ([_,_,_] (escape (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ)) ‚ä¢A (B‚áíA ‚á® id ‚ä¢A))

  syntax step-‚ä©‚â°‚áê A B‚â°C B‚áíA ‚ä¢A = A ‚áê‚ü® B‚áíA , ‚ä¢A ‚ü©‚ä© B‚â°C

  _‚â°‚ü®‚ü©‚ä©_ : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  _ ‚â°‚ü®‚ü©‚ä© A‚â°B = A‚â°B

  _‚àé‚ü®_‚ü©‚ä© : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° A
  _ ‚àé‚ü® ‚ä©A ‚ü©‚ä© = refl-‚ä©‚â° ‚ä©A

  finally-‚ä©‚â° : ‚àÄ A B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  finally-‚ä©‚â° _ _ A‚â°B = A‚â°B

  syntax finally-‚ä©‚â° A B A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚àé B ‚àé

  finally-‚ä©‚â°Àò : ‚àÄ A B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  finally-‚ä©‚â°Àò _ _ A‚â°B = sym-‚ä©‚â° A‚â°B

  syntax finally-‚ä©‚â°Àò A B B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚àé B ‚àé

  finally-‚ä©‚â°‚â° : ‚àÄ A ‚Üí B PE.‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚â° _ PE.refl A‚â°B = A‚â°B

  syntax finally-‚ä©‚â°‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚àé‚â° B‚â°C

  finally-‚ä©‚â°‚â°Àò : ‚àÄ A ‚Üí B PE.‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚â°Àò _ PE.refl B‚â°A = sym-‚ä©‚â° B‚â°A

  syntax finally-‚ä©‚â°‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚àé‚â° B‚â°C

  finally-‚ä©‚â°‚áê* :
    ‚àÄ A ‚Üí Œì ‚ä¢ C ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚áê* _ C‚áí*B A‚â°B =
    trans-‚ä©‚â° A‚â°B (sym-‚ä©‚â° (‚ä©-‚áê* C‚áí*B (wf-‚ä©‚â° A‚â°B .proj‚ÇÇ) .proj‚ÇÇ))

  syntax finally-‚ä©‚â°‚áê* t v‚áí*u t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚áê* v‚áí*u

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  infix -1
    _‚àé‚ü®_‚ü©‚ä©‚à∑ finally-‚ä©‚â°‚à∑ finally-‚ä©‚â°‚à∑Àò
  infix -2
    step-‚ä©‚â°‚à∑-conv step-‚ä©‚â°‚à∑-convÀò step-‚ä©‚â°‚à∑-conv-‚â° step-‚ä©‚â°‚à∑-conv-‚â°Àò
  infixr -2
    step-‚ä©‚â°‚à∑ step-‚ä©‚â°‚à∑Àò step-‚ä©‚â°‚à∑‚â° step-‚ä©‚â°‚à∑‚â°Àò step-‚ä©‚â°‚à∑‚áí* step-‚ä©‚â°‚à∑‚áí
    step-‚ä©‚â°‚à∑‚áê* step-‚ä©‚â°‚à∑‚áê _‚â°‚ü®‚ü©‚ä©‚à∑_ finally-‚ä©‚â°‚à∑‚â° finally-‚ä©‚â°‚à∑‚â°Àò
    finally-‚ä©‚â°‚à∑‚áê*

  step-‚ä©‚â°‚à∑ :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑ _ = flip trans-‚ä©‚â°‚à∑

  syntax step-‚ä©‚â°‚à∑ t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑Àò :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑Àò _ u‚â°v u‚â°t = trans-‚ä©‚â°‚à∑ (sym-‚ä©‚â°‚à∑ u‚â°t) u‚â°v

  syntax step-‚ä©‚â°‚à∑Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚â° : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí t PE.‚â° u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚â° _ u‚â°v PE.refl = u‚â°v

  syntax step-‚ä©‚â°‚à∑‚â° t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚â°Àò : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí u PE.‚â° t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚â°Àò _ u‚â°v PE.refl = u‚â°v

  syntax step-‚ä©‚â°‚à∑‚â°Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚áí* :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áí* _ u‚â°v t‚áí*u =
    trans-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áê* t‚áí*u (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ) .proj‚ÇÇ) u‚â°v

  syntax step-‚ä©‚â°‚à∑‚áí* t u‚â°v t‚áí*u = t ‚áí*‚ü® t‚áí*u ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áí :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áí _ u‚â°v t‚áíu =
    step-‚ä©‚â°‚à∑‚áí* _ u‚â°v (t‚áíu ‚á® id (escape-‚ä©‚à∑ (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ)))

  syntax step-‚ä©‚â°‚à∑‚áí t u‚â°v t‚áíu = t ‚áí‚ü® t‚áíu ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áê* :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u :‚áí*: t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áê* _ u‚â°v u‚áí*t =
    trans-‚ä©‚â°‚à∑ (sym-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áí* u‚áí*t (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ) .proj‚ÇÇ)) u‚â°v

  syntax step-‚ä©‚â°‚à∑‚áê* t u‚â°v u‚áí*t = t ‚áê*‚ü® u‚áí*t ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áê :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áê _ u‚â°v u‚áít ‚ä¢t =
    step-‚ä©‚â°‚à∑‚áê* _ u‚â°v
      ([_,_,_] (escape-‚ä©‚à∑ (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ)) ‚ä¢t (u‚áít ‚á® id ‚ä¢t))

  syntax step-‚ä©‚â°‚à∑‚áê t u‚â°v u‚áít ‚ä¢t = t ‚áê‚ü® u‚áít , ‚ä¢t ‚ü©‚ä©‚à∑ u‚â°v

  _‚â°‚ü®‚ü©‚ä©‚à∑_ : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  _ ‚â°‚ü®‚ü©‚ä©‚à∑ t‚â°u = t‚â°u

  step-‚ä©‚â°‚à∑-conv :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv t‚â°u A‚â°B = conv-‚ä©‚â°‚à∑ (sym-‚ä©‚â° A‚â°B) t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv t‚â°u A‚â°B = ‚ü® A‚â°B ‚ü©‚ä©‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑-convÀò :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-convÀò t‚â°u B‚â°A = conv-‚ä©‚â°‚à∑ B‚â°A t‚â°u

  syntax step-‚ä©‚â°‚à∑-convÀò t‚â°u B‚â°A = Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑-conv-‚â° : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv-‚â° t‚â°u PE.refl = t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv-‚â° t‚â°u A‚â°B = ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚â° t‚â°u

  step-‚ä©‚â°‚à∑-conv-‚â°Àò : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv-‚â°Àò t‚â°u PE.refl = t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv-‚â°Àò t‚â°u B‚â°A = Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚â° t‚â°u

  _‚àé‚ü®_‚ü©‚ä©‚à∑ : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  _ ‚àé‚ü® ‚ä©t ‚ü©‚ä©‚à∑ = refl-‚ä©‚â°‚à∑ ‚ä©t

  finally-‚ä©‚â°‚à∑ : ‚àÄ t u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑ _ _ t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑ t u t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé u ‚àé

  finally-‚ä©‚â°‚à∑Àò : ‚àÄ t u ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑Àò _ _ t‚â°u = sym-‚ä©‚â°‚à∑ t‚â°u

  syntax finally-‚ä©‚â°‚à∑Àò t u u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé u ‚àé

  finally-‚ä©‚â°‚à∑‚â° :
    ‚àÄ t ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚â° _ PE.refl t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚â° t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚â°Àò :
    ‚àÄ t ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚â°Àò _ PE.refl u‚â°t = sym-‚ä©‚â°‚à∑ u‚â°t

  syntax finally-‚ä©‚â°‚à∑‚â°Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚áê* :
    ‚àÄ t ‚Üí Œì ‚ä¢ v ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚áê* _ v‚áí*u t‚â°u =
    trans-‚ä©‚â°‚à∑ t‚â°u (sym-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áê* v‚áí*u (wf-‚ä©‚â°‚à∑ t‚â°u .proj‚ÇÇ) .proj‚ÇÇ))

  syntax finally-‚ä©‚â°‚à∑‚áê* t v‚áí*u t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚áê* v‚áí*u

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ with explicit
  -- types.

  infix -1
    _‚à∑_‚àé‚ü®_‚ü©‚ä©‚à∑‚à∑ finally-‚ä©‚â°‚à∑‚à∑ finally-‚ä©‚â°‚à∑‚à∑Àò
  infix -2
    step-‚ä©‚â°‚à∑‚à∑-conv step-‚ä©‚â°‚à∑‚à∑-convÀò step-‚ä©‚â°‚à∑‚à∑-conv-‚â° step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò
  infixr -2
    step-‚ä©‚â°‚à∑‚à∑ step-‚ä©‚â°‚à∑‚à∑Àò step-‚ä©‚â°‚à∑‚à∑‚â° step-‚ä©‚â°‚à∑‚à∑‚â°Àò step-‚ä©‚â°‚à∑‚à∑‚áí* step-‚ä©‚â°‚à∑‚à∑‚áí
    step-‚ä©‚â°‚à∑‚à∑‚áê* step-‚ä©‚â°‚à∑‚à∑‚áê _‚à∑_‚â°‚ü®‚ü©‚ä©‚à∑‚à∑_ finally-‚ä©‚â°‚à∑‚à∑‚â° finally-‚ä©‚â°‚à∑‚à∑‚â°Àò
    finally-‚ä©‚â°‚à∑‚à∑‚áê*

  step-‚ä©‚â°‚à∑‚à∑ :
    ‚àÄ t A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑ _ _ = step-‚ä©‚â°‚à∑ _

  syntax step-‚ä©‚â°‚à∑‚à∑ t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑Àò :
    ‚àÄ t A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑Àò _ _ = step-‚ä©‚â°‚à∑Àò _

  syntax step-‚ä©‚â°‚à∑‚à∑Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚â° :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí t PE.‚â° u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚â° _ _ = step-‚ä©‚â°‚à∑‚â° _

  syntax step-‚ä©‚â°‚à∑‚à∑‚â° t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚â°Àò :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí u PE.‚â° t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚â°Àò _ _ = step-‚ä©‚â°‚à∑‚â°Àò _

  syntax step-‚ä©‚â°‚à∑‚à∑‚â°Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áí* :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áí* _ _ = step-‚ä©‚â°‚à∑‚áí* _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áí* t A u‚â°v t‚áí*u = t ‚à∑ A ‚áí*‚ü® t‚áí*u ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áí :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áí _ _ = step-‚ä©‚â°‚à∑‚áí _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áí t A u‚â°v t‚áíu = t ‚à∑ A ‚áí‚ü® t‚áíu ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áê* :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u :‚áí*: t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áê* _ _ = step-‚ä©‚â°‚à∑‚áê* _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áê* t A u‚â°v u‚áí*t = t ‚à∑ A ‚áê*‚ü® u‚áí*t ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áê :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áê _ _ = step-‚ä©‚â°‚à∑‚áê _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áê t A u‚â°v u‚áít ‚ä¢t = t ‚à∑ A ‚áê‚ü® u‚áít , ‚ä¢t ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  _‚à∑_‚â°‚ü®‚ü©‚ä©‚à∑‚à∑_ : ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  _ ‚à∑ _ ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑ t‚â°u = t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv _ = step-‚ä©‚â°‚à∑-conv

  syntax step-‚ä©‚â°‚à∑‚à∑-conv A t‚â°u A‚â°B = ‚à∑ A ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-convÀò :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-convÀò _ = step-‚ä©‚â°‚à∑-convÀò

  syntax step-‚ä©‚â°‚à∑‚à∑-convÀò A t‚â°u B‚â°A = ‚à∑ A Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv-‚â° :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv-‚â° _ = step-‚ä©‚â°‚à∑-conv-‚â°

  syntax step-‚ä©‚â°‚à∑‚à∑-conv-‚â° A t‚â°u A‚â°B = ‚à∑ A ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚à∑‚â° t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò _ = step-‚ä©‚â°‚à∑-conv-‚â°Àò

  syntax step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò A t‚â°u B‚â°A = ‚à∑ A Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚à∑‚â° t‚â°u

  _‚à∑_‚àé‚ü®_‚ü©‚ä©‚à∑‚à∑ : ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  _ ‚à∑ _ ‚àé‚ü® ‚ä©t ‚ü©‚ä©‚à∑‚à∑ = refl-‚ä©‚â°‚à∑ ‚ä©t

  finally-‚ä©‚â°‚à∑‚à∑ : ‚àÄ t A u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑ _ _ _ t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚à∑ t A u t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚à∑ u ‚àé

  finally-‚ä©‚â°‚à∑‚à∑Àò : ‚àÄ t A u ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑Àò _ _ _ t‚â°u = sym-‚ä©‚â°‚à∑ t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚à∑Àò t A u u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚à∑ u ‚àé

  finally-‚ä©‚â°‚à∑‚à∑‚â° :
    ‚àÄ t A ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚â° _ _ = finally-‚ä©‚â°‚à∑‚â° _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚â° t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚à∑‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚à∑‚â°Àò :
    ‚àÄ t A ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚â°Àò _ _ = finally-‚ä©‚â°‚à∑‚â°Àò _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚â°Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚à∑‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚à∑‚áê* :
    ‚àÄ t A ‚Üí Œì ‚ä¢ v ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚áê* _ _ = finally-‚ä©‚â°‚à∑‚áê* _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚áê* t A v‚áí*u t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑‚áê* v‚áí*u

------------------------------------------------------------------------
-- Embedding

private opaque

  -- A lemma used below.

  emb-‚ä©‚à∑-lemma :
    {l<l‚Ä≤ : l < l‚Ä≤} {‚ä©A : LogRelKit._‚ä©_ k Œì A}
    (eq : k PE.‚â° kit‚Ä≤ l<l‚Ä≤) ‚Üí
    LogRelKit._‚ä©_‚à∑_/_ k Œì t A ‚ä©A ‚Üí
    LogRelKit._‚ä©_‚à∑_/_ (kit‚Ä≤ l<l‚Ä≤) Œì t A
      (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) eq ‚ä©A)
  emb-‚ä©‚à∑-lemma PE.refl ‚ä©t = ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Embedding for _‚ä©‚ü®_‚ü©_‚à∑_.

  emb-‚ä©‚à∑ :
    l ‚â§ l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A
  emb-‚ä©‚à∑     refl       ‚ä©t        = ‚ä©t
  emb-‚ä©‚à∑ {Œì} (emb l<l‚Ä≤) (‚ä©A , ‚ä©t) =
      emb l<l‚Ä≤ (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©A)
    , emb-‚ä©‚à∑-lemma (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Embedding for _‚ä©‚ü®_‚ü©_‚â°_.

  emb-‚ä©‚â° :
    l ‚â§ l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B
  emb-‚ä©‚â°     refl       A‚â°B             = A‚â°B
  emb-‚ä©‚â° {Œì} (emb l<l‚Ä≤) (‚ä©A , ‚ä©B , A‚â°B) =
      emb l<l‚Ä≤ (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©A)
    , emb l<l‚Ä≤ (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©B)
    , lemma (kit‚â°kit‚Ä≤ l<l‚Ä≤) A‚â°B
    where
    lemma :
      {‚ä©A : LogRelKit._‚ä©_ k Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l<l‚Ä≤) ‚Üí
      LogRelKit._‚ä©_‚â°_/_ k Œì A B ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ l<l‚Ä≤) Œì A B
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) eq ‚ä©A)
    lemma PE.refl A‚â°B = A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Embedding for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  emb-‚ä©‚â°‚à∑ :
    l ‚â§ l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A
  emb-‚ä©‚â°‚à∑     refl       t‚â°u                  = t‚â°u
  emb-‚ä©‚â°‚à∑ {Œì} (emb l<l‚Ä≤) (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u) =
      emb l<l‚Ä≤ (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©A)
    , emb-‚ä©‚à∑-lemma (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©t , emb-‚ä©‚à∑-lemma (kit‚â°kit‚Ä≤ l<l‚Ä≤) ‚ä©u
    , lemma (kit‚â°kit‚Ä≤ l<l‚Ä≤) t‚â°u
    where
    lemma :
      {‚ä©A : LogRelKit._‚ä©_ k Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l<l‚Ä≤) ‚Üí
      LogRelKit._‚ä©_‚â°_‚à∑_/_ k Œì t u A ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_‚à∑_/_ (kit‚Ä≤ l<l‚Ä≤) Œì t u A
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) eq ‚ä©A)
    lemma PE.refl t‚â°u = t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- Embedding for _‚ä©·µõ‚ü®_‚ü©_.

  emb-‚ä©·µõ :
    l ‚â§ l‚Ä≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A
  emb-‚ä©·µõ refl      ‚ä©A       = ‚ä©A
  emb-‚ä©·µõ (emb 0<1) (_ , ‚ä©A) =
    _ , maybeEmb·µõ _ ‚ä©A

opaque

  -- Embedding for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  emb-‚ä©·µõ‚à∑ :
    l ‚â§ l‚Ä≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A
  emb-‚ä©·µõ‚à∑ l‚â§l‚Ä≤ ‚ä©t =
    level-‚ä©·µõ‚à∑ (emb-‚ä©·µõ l‚â§l‚Ä≤ (wf-‚ä©·µõ‚à∑ ‚ä©t)) ‚ä©t

------------------------------------------------------------------------
-- Some introduction lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  ‚ä©‚à∑-intro = _,_

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©‚â°-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©‚â°-intro ‚ä©A ‚ä©B A‚â°B = ‚ä©A , ‚ä©B , A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚â°‚à∑-intro ‚ä©A (‚ä©A‚Ä≤ , ‚ä©t) (‚ä©A‚Ä≥ , ‚ä©u) t‚â°u =
    ‚ä©A , irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©t , irrelevanceTerm ‚ä©A‚Ä≥ ‚ä©A ‚ä©u , t‚â°u

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_

  -- An introduction lemma for ‚ä©·µõ_.

  ‚ä©·µõ-‚àô-intro : Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí ‚ä©·µõ Œì ‚àô A
  ‚ä©·µõ-‚àô-intro (_ , ‚ä©A) = _ ‚àô ‚ä©A

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõ‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚áî
    (‚ä©·µõ Œì √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] √ó
      (‚àÄ {œÉ‚Ä≤} ‚Üí
       Œî ‚ä©À¢ œÉ ‚â° œÉ‚Ä≤ ‚à∑ Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] ‚â° A [ œÉ‚Ä≤ ])))
  ‚ä©·µõ‚áî =
      (Œª (‚ä©Œì , ‚ä©A) ‚Üí
           ‚ä©Œì
         , Œª (_ , ‚ä¢Œî , ‚ä©œÉ) ‚Üí
             case ‚ä©A .unwrap ‚ä¢Œî (Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ) of Œª
               (‚ä©A[œÉ] , A[œÉ]‚â°) ‚Üí
               ‚ä©A[œÉ]
             , Œª {œÉ‚Ä≤ = _} (_ , _ , _ , ‚ä©œÉ‚Ä≤ , œÉ‚â°œÉ‚Ä≤) ‚Üí
               case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ‚Ä≤ of Œª
                 ‚ä©œÉ‚Ä≤ ‚Üí
                   ‚ä©A[œÉ]
                 , ‚ä©A .unwrap ‚ä¢Œî ‚ä©œÉ‚Ä≤ .proj‚ÇÅ
                 , A[œÉ]‚â° ‚ä©œÉ‚Ä≤ (Irr.irrelevanceSubstEq _ _ _ _ _ _ œÉ‚â°œÉ‚Ä≤))
    , (Œª (‚ä©Œì , hyp) ‚Üí
           ‚ä©Œì
         , wrap Œª ‚ä¢Œî ‚ä©œÉ ‚Üí
             case hyp (_ , _ , ‚ä©œÉ) of Œª
               (‚ä©A[œÉ] , A[œÉ]‚â°) ‚Üí
               ‚ä©A[œÉ]
             , Œª {œÉ‚Ä≤ = _} ‚ä©œÉ‚Ä≤ œÉ‚â°œÉ‚Ä≤ ‚Üí
                 case A[œÉ]‚â° (_ , _ , _ , ‚ä©œÉ‚Ä≤ , œÉ‚â°œÉ‚Ä≤) of Œª
                   (‚ä©A[œÉ]‚Ä≤ , _ , A[œÉ]‚â°A[œÉ‚Ä≤]) ‚Üí
                 irrelevanceEq ‚ä©A[œÉ]‚Ä≤ ‚ä©A[œÉ] A[œÉ]‚â°A[œÉ‚Ä≤])

opaque
  unfolding _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A variant of ‚ä©·µõ‚áî.

  ‚ä©·µõ‚áî‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚áî
    (‚ä©·µõ Œì √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© A [ œÉ ]) √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© A [ œÉ‚ÇÅ ] ‚â° A [ œÉ‚ÇÇ ]))
  ‚ä©·µõ‚áî‚Ä≤ {n} {Œì} {l} {A} =
    Œì ‚ä©·µõ‚ü® l ‚ü© A                                          ‚áî‚ü® ‚ä©·µõ‚áî ‚ü©

    (‚ä©·µõ Œì √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] √ó
      (‚àÄ {œÉ‚Ä≤} ‚Üí
       Œî ‚ä©À¢ œÉ ‚â° œÉ‚Ä≤ ‚à∑ Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] ‚â° A [ œÉ‚Ä≤ ])))                    ‚áî‚ü® id‚áî
                                                              √ó-cong-‚áî
                                                            ( (Œª rest ‚Üí
                                                                   proj‚ÇÅ ‚àò‚Üí rest
                                                                 , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ@(_ , _ , ‚ä©œÉ‚ÇÅ , _) ‚Üí rest (_ , _ , ‚ä©œÉ‚ÇÅ) .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                                                            , (Œª (‚ä©A , A‚â°A) ‚ä©œÉ ‚Üí ‚ä©A ‚ä©œÉ , A‚â°A)
                                                            )
                                                          ‚ü©
    (‚ä©·µõ Œì √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© A [ œÉ ]) √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© A [ œÉ‚ÇÅ ] ‚â° A [ œÉ‚ÇÇ ]))  ‚ñ°‚áî

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚à∑ A [ œÉ ] √ó
      (‚àÄ {œÉ‚Ä≤} ‚Üí
       Œî ‚ä©À¢ œÉ ‚â° œÉ‚Ä≤ ‚à∑ Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚â° t [ œÉ‚Ä≤ ] ‚à∑ A [ œÉ ])))
  ‚ä©·µõ‚à∑‚áî =
      (Œª (_ , ‚ä©A , ‚ä©t) ‚Üí
           (_ , ‚ä©A)
         , Œª (_ , ‚ä¢Œî , ‚ä©œÉ) ‚Üí
             case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ of Œª
               ‚ä©œÉ ‚Üí
             let ‚ä©A[œÉ] , A[œÉ]‚â° = ‚ä©A .unwrap ‚ä¢Œî ‚ä©œÉ in
             case ‚ä©t _ ‚ä©œÉ of Œª
               (‚ä©t[œÉ] , _) ‚Üí
               (‚ä©A[œÉ] , ‚ä©t[œÉ])
             , Œª (_ , _ , _ , ‚ä©œÉ‚Ä≤ , œÉ‚â°œÉ‚Ä≤) ‚Üí
                 case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ‚Ä≤ of Œª
                   ‚ä©œÉ‚Ä≤ ‚Üí
                 case Irr.irrelevanceSubstEq _ _ _ _ _ _ œÉ‚â°œÉ‚Ä≤ of Œª
                   œÉ‚â°œÉ‚Ä≤ ‚Üí
                   ‚ä©A[œÉ]
                 , ‚ä©t[œÉ]
                 , convTerm‚ÇÇ ‚ä©A[œÉ] (‚ä©A .unwrap ‚ä¢Œî ‚ä©œÉ‚Ä≤ .proj‚ÇÅ)
                     (A[œÉ]‚â° ‚ä©œÉ‚Ä≤ œÉ‚â°œÉ‚Ä≤) (‚ä©t _ ‚ä©œÉ‚Ä≤ .proj‚ÇÅ)
                 , ‚ä©t _ ‚ä©œÉ .proj‚ÇÇ ‚ä©œÉ‚Ä≤ œÉ‚â°œÉ‚Ä≤)
    , (Œª ((_ , ‚ä©A) , hyp) ‚Üí
           _
         , ‚ä©A
         , Œª _ ‚ä©œÉ ‚Üí
             let ‚ä©A[œÉ] , _ = ‚ä©A .unwrap _ ‚ä©œÉ in
             case hyp (_ , _ , ‚ä©œÉ) of Œª
               ((‚ä©A[œÉ]‚Ä≤ , ‚ä©t[œÉ]) , t[œÉ]‚â°) ‚Üí
               irrelevanceTerm ‚ä©A[œÉ]‚Ä≤ ‚ä©A[œÉ] ‚ä©t[œÉ]
             , Œª {œÉ‚Ä≤ = _} ‚ä©œÉ‚Ä≤ œÉ‚â°œÉ‚Ä≤ ‚Üí
                 case t[œÉ]‚â° (_ , _ , _ , ‚ä©œÉ‚Ä≤ , œÉ‚â°œÉ‚Ä≤) of Œª
                   (‚ä©A[œÉ]‚Ä≥ , _ , _ , t[œÉ]‚â°t[œÉ‚Ä≤]) ‚Üí
                 irrelevanceEqTerm ‚ä©A[œÉ]‚Ä≥ ‚ä©A[œÉ] t[œÉ]‚â°t[œÉ‚Ä≤])

opaque
  unfolding _‚ä©À¢_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A variant of ‚ä©·µõ‚à∑‚áî.

  ‚ä©·µõ‚à∑‚áî‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚à∑ A [ œÉ ]) √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© t [ œÉ‚ÇÅ ] ‚â° t [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ]))
  ‚ä©·µõ‚à∑‚áî‚Ä≤ {n} {Œì} {l} {t} {A} =
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A                                                 ‚áî‚ü® ‚ä©·µõ‚à∑‚áî ‚ü©

    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚à∑ A [ œÉ ] √ó
      (‚àÄ {œÉ‚Ä≤} ‚Üí
       Œî ‚ä©À¢ œÉ ‚â° œÉ‚Ä≤ ‚à∑ Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚â° t [ œÉ‚Ä≤ ] ‚à∑ A [ œÉ ])))                     ‚áî‚ü® id‚áî
                                                                         √ó-cong-‚áî
                                                                       ( (Œª rest ‚Üí
                                                                              proj‚ÇÅ ‚àò‚Üí rest
                                                                            , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ@(_ , _ , ‚ä©œÉ‚ÇÅ , _) ‚Üí rest (_ , _ , ‚ä©œÉ‚ÇÅ) .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                                                                       , (Œª (‚ä©t , t‚â°t) ‚ä©œÉ ‚Üí ‚ä©t ‚ä©œÉ , t‚â°t)
                                                                       )
                                                                     ‚ü©
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚à∑ A [ œÉ ]) √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä©‚ü® l ‚ü© t [ œÉ‚ÇÅ ] ‚â° t [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ]))  ‚ñ°‚áî

opaque
  unfolding _‚ä©À¢_‚à∑_

  -- A characterisation lemma for _‚ä©À¢_‚à∑_.

  ‚ä©À¢‚à∑Œµ‚áî : Œî ‚ä©À¢ œÉ ‚à∑ Œµ ‚áî ‚ä¢ Œî
  ‚ä©À¢‚à∑Œµ‚áî =
      (Œª (_ , ‚ä¢Œî , _) ‚Üí ‚ä¢Œî)
    , (Œª ‚ä¢Œî ‚Üí Œµ , ‚ä¢Œî , _)

opaque
  unfolding _‚ä©À¢_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_ _‚ä©‚ü®_‚ü©_‚à∑_

  -- Another characterisation lemma for _‚ä©À¢_‚à∑_.

  ‚ä©À¢‚à∑‚àô‚áî‚Ä≤ :
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚àô A ‚áî
    ((‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó
     (‚àÉ Œª l ‚Üí Œî ‚ä©‚ü® l ‚ü© head œÉ ‚à∑ A [ tail œÉ ]) √ó
     Œî ‚ä©À¢ tail œÉ ‚à∑ Œì)
  ‚ä©À¢‚à∑‚àô‚áî‚Ä≤ =
      (Œª { (_ ‚àô ‚ä©A , _ , ‚ä©tail , ‚ä©head) ‚Üí
             (_ , _ , ‚ä©A) , (_ , ‚ä©A .unwrap _ _ .proj‚ÇÅ , ‚ä©head)
           , (_ , _ , ‚ä©tail) })
    , (Œª ((_ , _ , ‚ä©A) , (_ , ‚ä©A[tail] , ‚ä©head) , (_ , ‚ä¢Œî , ‚ä©tail)) ‚Üí
         case Irr.irrelevanceSubst _ _ _ _ ‚ä©tail of Œª
           ‚ä©tail ‚Üí
           _ ‚àô ‚ä©A , ‚ä¢Œî
         , ( ‚ä©tail
           , irrelevanceTerm ‚ä©A[tail] (‚ä©A .unwrap _ ‚ä©tail .proj‚ÇÅ) ‚ä©head
           ))

opaque

  -- A variant of the previous lemma.

  ‚ä©À¢‚à∑‚àô‚áî :
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚àô A ‚áî
    ((‚àÉ Œª l ‚Üí (Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó Œî ‚ä©‚ü® l ‚ü© head œÉ ‚à∑ A [ tail œÉ ]) √ó
     Œî ‚ä©À¢ tail œÉ ‚à∑ Œì)
  ‚ä©À¢‚à∑‚àô‚áî {Œî} {œÉ} {Œì} {A} =
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚àô A                                              ‚áî‚ü® ‚ä©À¢‚à∑‚àô‚áî‚Ä≤ ‚ü©

    (‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó
    (‚àÉ Œª l ‚Üí Œî ‚ä©‚ü® l ‚ü© head œÉ ‚à∑ A [ tail œÉ ]) √ó
    Œî ‚ä©À¢ tail œÉ ‚à∑ Œì                                             ‚áî‚ü® (Œª ((l‚ÇÅ , ‚ä©A) , (_ , ‚ä©head) , ‚ä©tail) ‚Üí
                                                                        (l‚ÇÅ , ‚ä©A , level-‚ä©‚à∑ (‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©A .proj‚ÇÇ .proj‚ÇÅ ‚ä©tail) ‚ä©head)
                                                                      , ‚ä©tail)
                                                                 , (Œª ((l , ‚ä©A , ‚ä©head) , ‚ä©tail) ‚Üí
                                                                      (l , ‚ä©A) , (l , ‚ä©head) , ‚ä©tail)
                                                                 ‚ü©
    (‚àÉ Œª l ‚Üí (Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó Œî ‚ä©‚ü® l ‚ü© head œÉ ‚à∑ A [ tail œÉ ]) √ó
    Œî ‚ä©À¢ tail œÉ ‚à∑ Œì                                             ‚ñ°‚áî

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©À¢_‚à∑_

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     Œì ‚ä©·µõ‚ü® l ‚ü© B √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] ‚â° B [ œÉ ]))
  ‚ä©·µõ‚â°‚áî =
      (Œª (_ , ‚ä©A , ‚ä©B , A‚â°B) ‚Üí
           (_ , ‚ä©A)
         , (_ , ‚ä©B)
         , Œª (_ , ‚ä¢Œî , ‚ä©œÉ) ‚Üí
             case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ of Œª
               ‚ä©œÉ ‚Üí
               ‚ä©A .unwrap ‚ä¢Œî ‚ä©œÉ .proj‚ÇÅ
             , ‚ä©B .unwrap ‚ä¢Œî ‚ä©œÉ .proj‚ÇÅ
             , A‚â°B ‚ä¢Œî ‚ä©œÉ)
    , (Œª ((_ , ‚ä©A) , (_ , ‚ä©B) , A‚â°B) ‚Üí
           _
         , ‚ä©A
         , Irr.irrelevance _ _ ‚ä©B
         , (Œª _ ‚ä©œÉ ‚Üí
              case A‚â°B (_ , _ , ‚ä©œÉ) of Œª
                (‚ä©A[œÉ] , _ , A[œÉ]‚â°B[œÉ]) ‚Üí
              irrelevanceEq ‚ä©A[œÉ] (‚ä©A .unwrap _ _ .proj‚ÇÅ) A[œÉ]‚â°B[œÉ]))

opaque

  -- A variant of ‚ä©·µõ‚â°‚áî.

  ‚ä©·µõ‚â°‚áî‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     Œì ‚ä©·µõ‚ü® l ‚ü© B √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© A [ œÉ‚ÇÅ ] ‚â° B [ œÉ‚ÇÇ ]))
  ‚ä©·µõ‚â°‚áî‚Ä≤ {n} {Œì} {l} {A} {B} =
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B                 ‚áî‚ü® ‚ä©·µõ‚â°‚áî ‚ü©

    Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
    Œì ‚ä©·µõ‚ü® l ‚ü© B √ó
    (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
     Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© A [ œÉ ] ‚â° B [ œÉ ])    ‚áî‚ü® (Œ£-cong-‚áî Œª ‚ä©A ‚Üí Œ£-cong-‚áî Œª _ ‚Üí
                                          (Œª hyp {m = _} {Œî = _} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
      A [ œÉ‚ÇÅ ]                                 ‚â°‚ü® ‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©A .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ü©‚ä©
      A [ œÉ‚ÇÇ ]                                 ‚â°‚ü® hyp (wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ) ‚ü©‚ä©‚àé
      B [ œÉ‚ÇÇ ]                                 ‚àé)
                                        , (Œª hyp {_ _ _} ‚ä©œÉ ‚Üí
                                             hyp (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ))) ‚ü©
    Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
    Œì ‚ä©·µõ‚ü® l ‚ü© B √ó
    (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
     Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© A [ œÉ‚ÇÅ ] ‚â° B [ œÉ‚ÇÇ ])  ‚ñ°‚áî

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©À¢_‚à∑_

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©·µõ‚â°‚à∑‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A √ó
     (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚â° u [ œÉ ] ‚à∑ A [ œÉ ]))
  ‚ä©·µõ‚â°‚à∑‚áî {u} =
      (Œª (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u) ‚Üí
           (_ , ‚ä©A , ‚ä©t)
         , (_ , ‚ä©A , ‚ä©u)
         , Œª (_ , ‚ä¢Œî , ‚ä©œÉ) ‚Üí
             case Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ of Œª
               ‚ä©œÉ ‚Üí
             let ‚ä©A[œÉ] , _ = ‚ä©A .unwrap ‚ä¢Œî ‚ä©œÉ in
               ‚ä©A[œÉ]
             , ‚ä©t ‚ä¢Œî ‚ä©œÉ .proj‚ÇÅ
             , ‚ä©u ‚ä¢Œî ‚ä©œÉ .proj‚ÇÅ
             , t‚â°u ‚ä¢Œî ‚ä©œÉ)
    , (Œª ((_ , ‚ä©A , ‚ä©t) , (_ , ‚ä©A‚Ä≤ , ‚ä©u) , hyp) ‚Üí
           _
         , modelsTermEq ‚ä©A ‚ä©t
             (Irr.irrelevanceTerm {t = u} _ _ ‚ä©A‚Ä≤ ‚ä©A ‚ä©u)
             (Œª _ ‚ä©œÉ ‚Üí
                case hyp (_ , _ , ‚ä©œÉ) of Œª
                  (‚ä©A[œÉ] , _ , _ , t[œÉ]‚â°u[œÉ]) ‚Üí
                irrelevanceEqTerm ‚ä©A[œÉ] (‚ä©A .unwrap _ _ .proj‚ÇÅ)
                  t[œÉ]‚â°u[œÉ]))

opaque

  -- A variant of ‚ä©·µõ‚â°‚à∑‚áî.

  ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t [ œÉ‚ÇÅ ] ‚â° u [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ]))
  ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ {n} {Œì} {l} {t} {u} {A} =
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A                        ‚áî‚ü® ‚ä©·µõ‚â°‚à∑‚áî ‚ü©

    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A √ó
    (‚àÄ {m Œî} {œÉ : Subst m n} ‚Üí
     Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© t [ œÉ ] ‚â° u [ œÉ ] ‚à∑ A [ œÉ ])     ‚áî‚ü® (Œ£-cong-‚áî Œª ‚ä©t ‚Üí Œ£-cong-‚áî Œª _ ‚Üí
                                                     (Œª hyp {m = _} {Œî = _} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
      t [ œÉ‚ÇÅ ]                                            ‚â°‚ü® ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ü©‚ä©‚à∑
      t [ œÉ‚ÇÇ ]                                            ‚â°‚ü® conv-‚ä©‚â°‚à∑
                                                               (‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ (wf-‚ä©·µõ‚à∑ ‚ä©t) .proj‚ÇÇ .proj‚ÇÇ (sym-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ))
                                                               (hyp (wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ)) ‚ü©‚ä©‚à∑‚àé
      u [ œÉ‚ÇÇ ]                                            ‚àé)
                                                   , (Œª hyp {_ _ _} ‚ä©œÉ ‚Üí
                                                        hyp (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ))) ‚ü©
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A √ó
    (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
     Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© t [ œÉ‚ÇÅ ] ‚â° u [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ])  ‚ñ°‚áî

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©À¢_‚â°_‚à∑_.

  ‚ä©À¢‚â°‚à∑Œµ‚áî : Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œµ ‚áî ‚ä¢ Œî
  ‚ä©À¢‚â°‚à∑Œµ‚áî =
      (Œª (_ , ‚ä¢Œî , _) ‚Üí ‚ä¢Œî)
    , (Œª ‚ä¢Œî ‚Üí Œµ , ‚ä¢Œî , _)

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_ _‚ä©·µõ‚ü®_‚ü©_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Another characterisation lemma for _‚ä©À¢_‚â°_‚à∑_.

  ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ :
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚àô A ‚áî
    ((‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó
     (‚àÉ Œª l ‚Üí Œî ‚ä©‚ü® l ‚ü© head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]) √ó
     Œî ‚ä©À¢ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì)
  ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ =
      (Œª { (_ ‚àô ‚ä©A , _ , (‚ä©tail‚ÇÅ , ‚ä©head‚ÇÅ) , (‚ä©tail‚ÇÇ , ‚ä©head‚ÇÇ) ,
            (tail‚ÇÅ‚â°tail‚ÇÇ , head‚ÇÅ‚â°head‚ÇÇ)) ‚Üí
           let ‚ä©A[tail‚ÇÅ] , A[tail‚ÇÅ]‚â° = ‚ä©A .unwrap _ ‚ä©tail‚ÇÅ in
             (_ , _ , ‚ä©A)
           , ( _ , ‚ä©A[tail‚ÇÅ] , ‚ä©head‚ÇÅ
             , convTerm‚ÇÇ ‚ä©A[tail‚ÇÅ] (‚ä©A .unwrap _ ‚ä©tail‚ÇÇ .proj‚ÇÅ)
                 (A[tail‚ÇÅ]‚â° ‚ä©tail‚ÇÇ tail‚ÇÅ‚â°tail‚ÇÇ) ‚ä©head‚ÇÇ
             , head‚ÇÅ‚â°head‚ÇÇ
             )
           , (_ , _ , ‚ä©tail‚ÇÅ , ‚ä©tail‚ÇÇ , tail‚ÇÅ‚â°tail‚ÇÇ) })
    , (Œª ((_ , _ , ‚ä©A) ,
          (_ , ‚ä©A[tail‚ÇÅ] , ‚ä©head‚ÇÅ , ‚ä©head‚ÇÇ , head‚ÇÅ‚â°head‚ÇÇ) ,
          (_ , ‚ä¢Œî , ‚ä©tail‚ÇÅ , ‚ä©tail‚ÇÇ , tail‚ÇÅ‚â°tail‚ÇÇ)) ‚Üí
        case Irr.irrelevanceSubst _ _ _ _ ‚ä©tail‚ÇÅ of Œª
          ‚ä©tail‚ÇÅ‚Ä≤ ‚Üí
        case Irr.irrelevanceSubst _ _ _ _ ‚ä©tail‚ÇÇ of Œª
          ‚ä©tail‚ÇÇ‚Ä≤ ‚Üí
        case Irr.irrelevanceSubstEq _ _ _ _ ‚ä©tail‚ÇÅ ‚ä©tail‚ÇÅ‚Ä≤
               tail‚ÇÅ‚â°tail‚ÇÇ of Œª
          tail‚ÇÅ‚â°tail‚ÇÇ ‚Üí
        let ‚ä©A[tail‚ÇÅ]‚Ä≤ , _ = ‚ä©A .unwrap _ ‚ä©tail‚ÇÅ‚Ä≤ in
          _ ‚àô ‚ä©A , ‚ä¢Œî
        , ( ‚ä©tail‚ÇÅ‚Ä≤
          , irrelevanceTerm ‚ä©A[tail‚ÇÅ] ‚ä©A[tail‚ÇÅ]‚Ä≤ ‚ä©head‚ÇÅ
          )
        , ( ‚ä©tail‚ÇÇ‚Ä≤
          , convTerm‚ÇÅ ‚ä©A[tail‚ÇÅ] (‚ä©A .unwrap _ ‚ä©tail‚ÇÇ‚Ä≤ .proj‚ÇÅ)
              (irrelevanceEq ‚ä©A[tail‚ÇÅ]‚Ä≤ ‚ä©A[tail‚ÇÅ]
                 (‚ä©A .unwrap _ ‚ä©tail‚ÇÅ‚Ä≤ .proj‚ÇÇ ‚ä©tail‚ÇÇ‚Ä≤ tail‚ÇÅ‚â°tail‚ÇÇ))
              ‚ä©head‚ÇÇ
          )
        , ( tail‚ÇÅ‚â°tail‚ÇÇ
          , irrelevanceEqTerm ‚ä©A[tail‚ÇÅ] ‚ä©A[tail‚ÇÅ]‚Ä≤ head‚ÇÅ‚â°head‚ÇÇ
          ))

opaque

  -- A variant of the previous lemma.

  ‚ä©À¢‚â°‚à∑‚àô‚áî :
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚àô A ‚áî
    ((‚àÉ Œª l ‚Üí
      (Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó
      Œî ‚ä©‚ü® l ‚ü© head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]) √ó
     Œî ‚ä©À¢ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì)
  ‚ä©À¢‚â°‚à∑‚àô‚áî {Œî} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {Œì} {A} =
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚àô A                                                  ‚áî‚ü® ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ ‚ü©

    (‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó
    (‚àÉ Œª l ‚Üí Œî ‚ä©‚ü® l ‚ü© head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]) √ó
    Œî ‚ä©À¢ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì                                            ‚áî‚ü® (Œª ((l‚ÇÅ , ‚ä©A) , (_ , head‚â°head) , tail‚â°tail) ‚Üí
                                                                                  ( l‚ÇÅ , ‚ä©A
                                                                                  , level-‚ä©‚â°‚à∑
                                                                                      (‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©A .proj‚ÇÇ .proj‚ÇÅ $
                                                                                       wf-‚ä©À¢‚â°‚à∑ tail‚â°tail .proj‚ÇÅ)
                                                                                      head‚â°head
                                                                                  )
                                                                                , tail‚â°tail)
                                                                           , (Œª ((l , ‚ä©A , head‚â°head) , tail‚â°tail) ‚Üí
                                                                                (l , ‚ä©A) , (l , head‚â°head) , tail‚â°tail)
                                                                           ‚ü©
    (‚àÉ Œª l ‚Üí (Œì ‚ä©·µõ‚ü® l ‚ü© A) √ó Œî ‚ä©‚ü® l ‚ü© head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]) √ó
    Œî ‚ä©À¢ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì                                            ‚ñ°‚áî

------------------------------------------------------------------------
-- A lemma related to variables

opaque

  -- Well-typed variables in valid contexts are valid.

  var·µõ :
    x ‚à∑ A ‚àà Œì ‚Üí
    ‚ä©·µõ Œì ‚Üí
    ‚àÉ Œª l ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© var x ‚à∑ A
  var·µõ (here {A}) ‚ä©Œì‚àôA =
    case wf-‚ä©·µõ-‚àô ‚ä©Œì‚àôA of Œª
      (l , ‚ä©A) ‚Üí
    case wk1-‚ä©·µõ ‚ä©A ‚ä©A of Œª
      ‚ä©wk1-A ‚Üí
      l
    , ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
        ( ‚ä©wk1-A
        , Œª ‚ä©œÉ ‚Üí
            case ‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©wk1-A .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ of Œª
              ‚ä©wk1-A[œÉ] ‚Üí
            case ‚ä©À¢‚à∑‚àô‚áî .proj‚ÇÅ ‚ä©œÉ of Œª
              ((_ , _ , ‚ä©œÉ‚ÇÄ) , _) ‚Üí
              level-‚ä©‚à∑ ‚ä©wk1-A[œÉ]
                (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk1-tail A) ‚ä©œÉ‚ÇÄ)
            , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
                case ‚ä©À¢‚â°‚à∑‚àô‚áî .proj‚ÇÅ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
                  ((_ , _ , œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ) , _) ‚Üí
                level-‚ä©‚â°‚à∑ ‚ä©wk1-A[œÉ]
                  (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ wk1-tail A)
                     œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ)
        )
  var·µõ (there x‚ààŒì) ‚ä©Œì‚àôB =
    case wf-‚ä©·µõ-‚àô ‚ä©Œì‚àôB .proj‚ÇÇ of Œª
      ‚ä©B ‚Üí
    Œ£.map id·∂† (wk1-‚ä©·µõ‚à∑ ‚ä©B) (var·µõ x‚ààŒì (wf-‚ä©·µõ ‚ä©B))

------------------------------------------------------------------------
-- Some lemmas related to _‚ä©À¢_‚à∑_ and _‚ä©À¢_‚â°_‚à∑_

opaque
  unfolding _‚ä©À¢_‚à∑_

  -- A lemma related to idSubst.

  ‚ä©À¢‚à∑-idSubst :
    ‚ä©·µõ Œì ‚Üí
    Œì ‚ä©À¢ idSubst ‚à∑ Œì
  ‚ä©À¢‚à∑-idSubst ‚ä©Œì =
    _ , _ , idSubstS ‚ä©Œì

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©À¢_‚â°_‚à∑_

  -- A lemma related to sgSubst.

  ‚ä©À¢‚â°‚à∑-sgSubst :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©À¢ sgSubst t ‚â° sgSubst u ‚à∑ Œì ‚àô A
  ‚ä©À¢‚â°‚à∑-sgSubst (_ , ‚ä©·µõA) (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u) =
      (_ ‚àô ‚ä©·µõA) , _ , sgSubstS ‚ä©·µõA ‚ä©A ‚ä©t , sgSubstS ‚ä©·µõA ‚ä©A ‚ä©u
    , sgSubstSEq t‚â°u

opaque

  -- Another lemma related to sgSubst.

  ‚ä©À¢‚à∑-sgSubst :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©À¢ sgSubst t ‚à∑ Œì ‚àô A
  ‚ä©À¢‚à∑-sgSubst ‚ä©A ‚ä©t =
    wf-‚ä©À¢‚â°‚à∑ (‚ä©À¢‚â°‚à∑-sgSubst ‚ä©A (refl-‚ä©‚â°‚à∑ ‚ä©t)) .proj‚ÇÅ

opaque
  unfolding _‚ä©À¢_‚â°_‚à∑_

  -- A lemma related to wk1Subst.

  ‚ä©À¢‚â°‚à∑-wk1Subst :
    Œî ‚ä¢ A ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A ‚ä©À¢ wk1Subst œÉ‚ÇÅ ‚â° wk1Subst œÉ‚ÇÇ ‚à∑ Œì
  ‚ä©À¢‚â°‚à∑-wk1Subst ‚ä¢A (_ , _ , _ , ‚ä©œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) =
    _ , _ , _ , wk1SubstS _ _ _ ‚ä©œÉ‚ÇÇ , wk1SubstSEq _ _ ‚ä¢A _ œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque

  -- Another lemma related to wk1Subst.

  ‚ä©À¢‚à∑-wk1Subst :
    Œî ‚ä¢ A ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A ‚ä©À¢ wk1Subst œÉ ‚à∑ Œì
  ‚ä©À¢‚à∑-wk1Subst ‚ä¢A ‚ä©œÉ =
    wf-‚ä©À¢‚â°‚à∑ (‚ä©À¢‚â°‚à∑-wk1Subst ‚ä¢A (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)) .proj‚ÇÅ

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©À¢_‚à∑_

  -- A lemma related to liftSubst.

  ‚ä©À¢‚à∑-liftSubst :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ ] ‚ä©À¢ liftSubst œÉ ‚à∑ Œì ‚àô A
  ‚ä©À¢‚à∑-liftSubst (_ , ‚ä©A) (_ , ‚ä¢Œî , ‚ä©œÉ) =
    _ ‚àô ‚ä©A , _ , liftSubstS _ ‚ä¢Œî ‚ä©A (Irr.irrelevanceSubst _ _ _ _ ‚ä©œÉ)

opaque

  -- Another lemma related to liftSubst.

  ‚ä©À¢‚â°‚à∑-liftSubst‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A‚ÇÅ [ œÉ‚ÇÅ ] ‚ä©À¢ liftSubst œÉ‚ÇÅ ‚â° liftSubst œÉ‚ÇÇ ‚à∑ Œì ‚àô A‚ÇÇ
  ‚ä©À¢‚â°‚à∑-liftSubst‚Ä≤ {A‚ÇÅ} {A‚ÇÇ} {œÉ‚ÇÅ} A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , _) ‚Üí
    case escape $ ‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©A‚ÇÅ .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
      ( (_ , ‚ä©A‚ÇÇ)
      , ( _
        , conv-‚ä©‚â°‚à∑
            (wk1 A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]     ‚â°‚ü® wk1-tail A‚ÇÅ ‚ü©‚ä©‚â°
             A‚ÇÅ [ wk1Subst œÉ‚ÇÅ ]  ‚â°‚ü® ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $ refl-‚ä©À¢‚â°‚à∑ $
                                    ‚ä©À¢‚à∑-wk1Subst ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] ‚ä©œÉ‚ÇÅ ‚ü©‚ä©‚àé
             A‚ÇÇ [ wk1Subst œÉ‚ÇÅ ]  ‚àé)
            (refl-‚ä©‚â°‚à∑ $
             ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ (var·µõ here (‚ä©·µõ-‚àô-intro ‚ä©A‚ÇÅ) .proj‚ÇÇ)
               .proj‚ÇÇ .proj‚ÇÅ (‚ä©À¢‚à∑-liftSubst ‚ä©A‚ÇÅ ‚ä©œÉ‚ÇÅ))
        )
      , ‚ä©À¢‚â°‚à∑-wk1Subst ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] œÉ‚ÇÅ‚â°œÉ‚ÇÇ
      )

opaque

  -- A variant of ‚ä©À¢‚â°‚à∑-liftSubst‚Ä≤.

  ‚ä©À¢‚â°‚à∑-liftSubst :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ‚ÇÅ ] ‚ä©À¢ liftSubst œÉ‚ÇÅ ‚â° liftSubst œÉ‚ÇÇ ‚à∑ Œì ‚àô A
  ‚ä©À¢‚â°‚à∑-liftSubst ‚ä©A =
    ‚ä©À¢‚â°‚à∑-liftSubst‚Ä≤ (refl-‚ä©·µõ‚â° ‚ä©A)

opaque

  -- A variant of ‚ä©À¢‚à∑-liftSubst.

  ‚ä©À¢‚à∑-liftSubst‚Ä≤ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A‚ÇÅ [ œÉ ] ‚ä©À¢ liftSubst œÉ ‚à∑ Œì ‚àô A‚ÇÇ
  ‚ä©À¢‚à∑-liftSubst‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ ‚ä©œÉ =
    wf-‚ä©À¢‚â°‚à∑ (‚ä©À¢‚â°‚à∑-liftSubst‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)) .proj‚ÇÅ

------------------------------------------------------------------------
-- Neutral types and terms

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Neutral terms that satisfy certain properties are reducible.

  neutral-‚ä©‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Neutral t ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ t ~ t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  neutral-‚ä©‚à∑ ‚ä©A t-ne ‚ä¢t t~t =
    ‚ä©A , neuTerm ‚ä©A t-ne ‚ä¢t t~t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Reducible equality holds between neutral types that satisfy
  -- certain properties.

  neutral-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Neutral A ‚Üí
    Neutral B ‚Üí
    Œì ‚ä¢ A ‚âÖ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  neutral-‚ä©‚â° ‚ä©A ‚ä©B A-ne B-ne A‚âÖB =
    ‚ä©A , ‚ä©B , neuEq ‚ä©A A-ne B-ne (escape ‚ä©A) (escape ‚ä©B) A‚âÖB

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Reducible equality holds between neutral terms that satisfy
  -- certain properties.

  neutral-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Neutral t ‚Üí
    Neutral u ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ t ~ u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  neutral-‚ä©‚â°‚à∑ ‚ä©A t-ne u-ne ‚ä¢t ‚ä¢u t~u =
      ‚ä©A
    , neuTerm ‚ä©A t-ne ‚ä¢t (~-trans t~u (~-sym t~u))
    , neuTerm ‚ä©A u-ne ‚ä¢u (~-trans (~-sym t~u) t~u)
    , neuEqTerm ‚ä©A t-ne u-ne ‚ä¢t ‚ä¢u t~u

------------------------------------------------------------------------
-- Substitution lemmas

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚â° C ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B [ t ]‚ÇÄ ‚â° C [ u ]‚ÇÄ
  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ
    {C} {t} {u}
    (‚ä©Œì ‚àô _ , ‚ä©B , ‚ä©C , B‚â°C) (_ , modelsTermEq ‚ä©A ‚ä©t ‚ä©u t‚â°u) =
    case Irr.irrelevance _ _ ‚ä©A of Œª
      ‚ä©A‚Ä≤ ‚Üí
    case Irr.irrelevance _ _ ‚ä©B of Œª
      ‚ä©B‚Ä≤ ‚Üí
    case Irr.irrelevance _ _ ‚ä©C of Œª
      ‚ä©C ‚Üí
    case (Œª {k Œî œÉ} ‚Üí
            Irr.irrelevanceTerm {t = t} _ _ ‚ä©A ‚ä©A‚Ä≤ ‚ä©t
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      ‚ä©t ‚Üí
    case (Œª {k Œî œÉ} ‚Üí
            Irr.irrelevanceTerm {t = u} _ _ ‚ä©A ‚ä©A‚Ä≤ ‚ä©u
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      ‚ä©u ‚Üí
      ‚ä©Œì
    , substS _ ‚ä©A‚Ä≤ ‚ä©B‚Ä≤ ‚ä©t
    , substS _ ‚ä©A‚Ä≤ ‚ä©C ‚ä©u
    , substSEq _ ‚ä©A‚Ä≤ ‚ä©A‚Ä≤ (refl·µõ _ ‚ä©A‚Ä≤) ‚ä©B‚Ä≤ ‚ä©C
        (Irr.irrelevanceEq {B = C} _ _ ‚ä©B ‚ä©B‚Ä≤ B‚â°C) ‚ä©t ‚ä©u
        (Irr.irrelevanceEqTerm {t = t} {u = u} _ _ ‚ä©A ‚ä©A‚Ä≤ t‚â°u)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_ _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚â°[]‚ÇÅ‚ÇÄ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ [ t‚ÇÅ , u‚ÇÅ ]‚ÇÅ‚ÇÄ ‚â° C‚ÇÇ [ t‚ÇÇ , u‚ÇÇ ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚â°[]‚ÇÅ‚ÇÄ
    {C‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} C‚ÇÅ‚â°C‚ÇÇ‚Ä≤@(_ , ‚ä©C‚ÇÅ , ‚ä©C‚ÇÇ , C‚ÇÅ‚â°C‚ÇÇ)
    (‚ä©Œì , modelsTermEq ‚ä©A ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)
    (_ , modelsTermEq ‚ä©B[t‚ÇÅ] ‚ä©u‚ÇÅ ‚ä©u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ) =
    case Irr.irrelevance _ (_ ‚àô ‚ä©A)
           (wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° C‚ÇÅ‚â°C‚ÇÇ‚Ä≤ .proj‚ÇÅ) .proj‚ÇÇ .proj‚ÇÇ) of Œª
      ‚ä©B ‚Üí
    let ‚ä©B[t‚ÇÅ]‚Ä≤ = substS {t = t‚ÇÅ} _ ‚ä©A ‚ä©B ‚ä©t‚ÇÅ in
    case substS {t = t‚ÇÇ} _ ‚ä©A ‚ä©B ‚ä©t‚ÇÇ of Œª
      ‚ä©B[t‚ÇÇ] ‚Üí
    case (Œª {k Œî œÉ} ‚Üí
            Irr.irrelevanceTerm {t = u‚ÇÅ} _ _ ‚ä©B[t‚ÇÅ] ‚ä©B[t‚ÇÅ]‚Ä≤ ‚ä©u‚ÇÅ
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      ‚ä©u‚ÇÅ‚Ä≤ ‚Üí
    case (Œª {k Œî œÉ} ‚Üí
              (conv·µõ {t = u‚ÇÇ} _ ‚ä©B[t‚ÇÅ]‚Ä≤ ‚ä©B[t‚ÇÇ]
                 (substSEq _ ‚ä©A ‚ä©A (refl·µõ _ ‚ä©A) ‚ä©B ‚ä©B (refl·µõ _ ‚ä©B)
                    ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)
                 (Irr.irrelevanceTerm {t = u‚ÇÇ} _ _ ‚ä©B[t‚ÇÅ] ‚ä©B[t‚ÇÅ]‚Ä≤ ‚ä©u‚ÇÇ))
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      ‚ä©u‚ÇÇ‚Ä≤ ‚Üí
    case Irr.irrelevance _ (_ ‚àô ‚ä©B) ‚ä©C‚ÇÅ of Œª
      ‚ä©C‚ÇÅ‚Ä≤ ‚Üí
    case Irr.irrelevance _ (_ ‚àô ‚ä©B) ‚ä©C‚ÇÇ of Œª
      ‚ä©C‚ÇÇ‚Ä≤ ‚Üí
    case substD {u = u‚ÇÅ} ‚ä©t‚ÇÅ ‚ä©B[t‚ÇÅ]‚Ä≤ ‚ä©u‚ÇÅ‚Ä≤ ‚ä©C‚ÇÅ‚Ä≤ of Œª
      ‚ä©C‚ÇÅ[t‚ÇÅ,u‚ÇÅ] ‚Üí
      ‚ä©Œì
    , ‚ä©C‚ÇÅ[t‚ÇÅ,u‚ÇÅ]
    , substD ‚ä©t‚ÇÇ ‚ä©B[t‚ÇÇ] ‚ä©u‚ÇÇ‚Ä≤ ‚ä©C‚ÇÇ‚Ä≤
    , substDEq
        {‚ä©t‚ÇÅ = ‚ä©t‚ÇÅ} {‚ä©B‚ÇÅ[t‚ÇÅ] = ‚ä©B[t‚ÇÅ]‚Ä≤} {‚ä©u‚ÇÅ = ‚ä©u‚ÇÅ‚Ä≤} {‚ä©C‚ÇÅ = ‚ä©C‚ÇÅ‚Ä≤}
        (refl·µõ _ ‚ä©A) (refl·µõ _ ‚ä©B) ‚ä©t‚ÇÇ
        (Irr.irrelevanceEqTerm {t = t‚ÇÅ} {u = t‚ÇÇ} _ _ ‚ä©A ‚ä©A t‚ÇÅ‚â°t‚ÇÇ) ‚ä©B[t‚ÇÇ]
        ‚ä©u‚ÇÇ‚Ä≤
        (Irr.irrelevanceEqTerm {t = u‚ÇÅ} {u = u‚ÇÇ} _ _ ‚ä©B[t‚ÇÅ] ‚ä©B[t‚ÇÅ]‚Ä≤
           u‚ÇÅ‚â°u‚ÇÇ)
        ‚ä©C‚ÇÅ[t‚ÇÅ,u‚ÇÅ] ‚ä©C‚ÇÇ‚Ä≤ (Irr.irrelevanceEq {B = C‚ÇÇ} _ _ ‚ä©C‚ÇÅ ‚ä©C‚ÇÅ‚Ä≤ C‚ÇÅ‚â°C‚ÇÇ)

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚â°_ _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤‚â°[]‚Üë¬≤ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© D ‚â° E ‚Üí
    Œì ‚àô B ‚àô C ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ wk2 A ‚Üí
    Œì ‚àô B ‚àô C ‚ä©·µõ‚ü® l ‚ü© D [ t ]‚Üë¬≤ ‚â° E [ t ]‚Üë¬≤
  ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤‚â°[]‚Üë¬≤
    {t} (_ ‚àô ‚ä©A , ‚ä©D , ‚ä©E , D‚â°E) (_ ‚àô ‚ä©B‚Ä≤ ‚àô ‚ä©C‚Ä≤ , ‚ä©A‚Ä≤ , ‚ä©t‚Ä≤) =
    case (Œª {k Œî œÉ} ‚Üí
            Irr.irrelevanceTerm {t = t} _ _ ‚ä©A‚Ä≤
              (wk1·µõ _ (Irr.irrelevance _ _ ‚ä©C‚Ä≤) $
               wk1·µõ _ (Irr.irrelevance _ _ ‚ä©B‚Ä≤) ‚ä©A)
              ‚ä©t‚Ä≤
              {k = k} {Œî = Œî} {œÉ = œÉ}) of Œª
      ‚ä©t ‚Üí
      _
    , subst‚Üë¬≤S _ _ _ _ ‚ä©D ‚ä©t
    , subst‚Üë¬≤S _ _ _ _ ‚ä©E ‚ä©t
    , subst‚Üë¬≤SEq _ _ _ _ ‚ä©D ‚ä©E D‚â°E ‚ä©t

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© B [ t ]‚ÇÄ
  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©B ‚ä©t =
    wf-‚ä©·µõ‚â° (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t)) .proj‚ÇÅ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© C [ t , u ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ ‚ä©C ‚ä©t ‚ä©u =
    proj‚ÇÅ $ wf-‚ä©·µõ‚â° $
    ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚â°[]‚ÇÅ‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©C) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t)
      (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© D ‚Üí
    Œì ‚àô B ‚àô C ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ wk2 A ‚Üí
    Œì ‚àô B ‚àô C ‚ä©·µõ‚ü® l ‚ü© D [ t ]‚Üë¬≤
  ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤ ‚ä©D ‚ä©t =
    proj‚ÇÅ $ wf-‚ä©·µõ‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤‚â°[]‚Üë¬≤ (refl-‚ä©·µõ‚â° ‚ä©D) ‚ä©t

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚à∑ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚à∑ {t} (_ , ‚ä©B , ‚ä©t) (_ , ‚ä©A , ‚ä©u) =
    case Irr.irrelevance _ _ ‚ä©B of Œª
      ‚ä©B‚Ä≤ ‚Üí
      _
    , substS _ ‚ä©A ‚ä©B‚Ä≤ ‚ä©u
    , substSTerm {f = t} _ ‚ä©A ‚ä©B‚Ä≤
        (Irr.irrelevanceTerm {t = t} _ _ ‚ä©B ‚ä©B‚Ä≤ ‚ä©t) ‚ä©u

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚à∑ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ C ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© v ‚à∑ B [ u ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t [ u , v ]‚ÇÅ‚ÇÄ ‚à∑ C [ u , v ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚à∑ {B} {t} {C} ‚ä©t ‚ä©u ‚ä©v =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©t) of Œª
      (_ , ‚ä©B) ‚Üí
    ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ (wf-‚ä©·µõ‚à∑ ‚ä©t) ‚ä©u ‚ä©v
      , (Œª ‚ä©œÉ ‚Üí
           PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚à∑_ _ _) (PE.sym $ [,]-[]-fusion t)
             (PE.sym $ [,]-[]-fusion C) $
           ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ .proj‚ÇÅ $
           ‚ä©À¢‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
             ( (_ , ‚ä©B)
             , ( _
               , (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ substConsId B) $
                  ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©v .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ)
               )
             , ‚ä©À¢‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
                 ( wf-‚àô-‚ä©·µõ ‚ä©B
                 , (_ , ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©u .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ)
                 , ‚ä©œÉ
                 )
             ))
      , (Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
           PE.subst‚ÇÉ (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _) (PE.sym $ [,]-[]-fusion t)
             (PE.sym $ [,]-[]-fusion t) (PE.sym $ [,]-[]-fusion C) $
           ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ .proj‚ÇÇ $
           ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
             ( (_ , ‚ä©B)
             , ( _
               , (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _)
                    (PE.sym $ substConsId B) $
                  ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©v .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
               )
             , ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
                 ( wf-‚àô-‚ä©·µõ ‚ä©B
                 , (_ , ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©u .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                 , œÉ‚ÇÅ‚â°œÉ‚ÇÇ
                 )
             ))
      )

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚â° C ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B [ t ]‚ÇÄ ‚â° C [ u ]‚ÇÄ
  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ B‚â°C t‚â°u =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° B‚â°C .proj‚ÇÅ) of Œª
      (_ , ‚ä©A) ‚Üí
    ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ B‚â°C .proj‚ÇÇ .proj‚ÇÇ
      (‚ä©À¢‚â°‚à∑-sgSubst ‚ä©A (level-‚ä©‚â°‚à∑ (‚ä©·µõ‚Üí‚ä© ‚ä©A) t‚â°u))

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©‚ü® l ‚ü© B‚ÇÅ [ consSubst œÉ‚ÇÅ t‚ÇÅ ] ‚â° B‚ÇÇ [ consSubst œÉ‚ÇÇ t‚ÇÇ ]
  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ (wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÅ) , (_ , t‚ÇÅ‚â°t‚ÇÇ) , œÉ‚ÇÅ‚â°œÉ‚ÇÇ)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ‚ÇÅ ] ‚ä©‚ü® l ‚ü© B‚ÇÅ [ œÉ‚ÇÅ ‚áë ] ‚â° B‚ÇÇ [ œÉ‚ÇÇ ‚áë ]
  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑-liftSubst (wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÅ) .proj‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë] :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ‚ÇÅ ] ‚àô B [ œÉ‚ÇÅ ‚áë ] ‚ä©‚ü® l ‚ü© C‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ] ‚â° C‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ]
  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë] C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° C‚ÇÅ‚â°C‚ÇÇ .proj‚ÇÅ) of Œª
      (_ , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ C‚ÇÅ‚â°C‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑-liftSubst ‚ä©B $ ‚ä©À¢‚â°‚à∑-liftSubst (wf-‚àô-‚ä©·µõ ‚ä©B .proj‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©‚ü® l ‚ü© B‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ t‚ÇÅ ]‚ÇÄ ‚â° B‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ t‚ÇÇ ]‚ÇÄ
  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ {B‚ÇÅ} {B‚ÇÇ} B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
      (PE.sym $ singleSubstComp _ _ B‚ÇÅ)
      (PE.sym $ singleSubstComp _ _ B‚ÇÇ) $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚ÇÄ[]‚â°[]‚ÇÄ[] :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ [ œÉ‚ÇÅ ] ‚â° t‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© B‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ] ‚â° B‚ÇÇ [ t‚ÇÇ ]‚ÇÄ [ œÉ‚ÇÇ ]
  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚ÇÄ[]‚â°[]‚ÇÄ[] {B‚ÇÅ} {B‚ÇÇ} B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
      (PE.sym $ singleSubstLift B‚ÇÅ _)
      (PE.sym $ singleSubstLift B‚ÇÇ _) $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ]

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ œÉ‚ÇÅ ‚áë ] [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œî ‚ä©‚ü® l ‚ü© C‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ] [ t‚ÇÅ , u‚ÇÅ ]‚ÇÅ‚ÇÄ ‚â° C‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ] [ t‚ÇÇ , u‚ÇÇ ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ
    {B} {C‚ÇÅ} {C‚ÇÇ} C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
      (PE.sym $ doubleSubstComp C‚ÇÅ _ _ _)
      (PE.sym $ doubleSubstComp C‚ÇÇ _ _ _) $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] C‚ÇÅ‚â°C‚ÇÇ
      (‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
         ( wf-‚àô-‚ä©·µõ (wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚â° C‚ÇÅ‚â°C‚ÇÇ .proj‚ÇÅ) .proj‚ÇÇ)
         , (_ , t‚ÇÅ‚â°t‚ÇÇ)
         , œÉ‚ÇÅ‚â°œÉ‚ÇÇ
         )) $
    PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstComp _ _ B) u‚ÇÅ‚â°u‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_ and _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚ÇÅ‚ÇÄ[]‚â°[]‚ÇÅ‚ÇÄ[] :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ [ œÉ‚ÇÅ ] ‚â° t‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©‚ü® l‚Ä≥ ‚ü© u‚ÇÅ [ œÉ‚ÇÅ ] ‚â° u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ B [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© C‚ÇÅ [ t‚ÇÅ , u‚ÇÅ ]‚ÇÅ‚ÇÄ [ œÉ‚ÇÅ ] ‚â° C‚ÇÇ [ t‚ÇÇ , u‚ÇÇ ]‚ÇÅ‚ÇÄ [ œÉ‚ÇÇ ]
  ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚ÇÅ‚ÇÄ[]‚â°[]‚ÇÅ‚ÇÄ[]
    {B} {C‚ÇÅ} {C‚ÇÇ} C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
      (PE.sym $ [,]-[]-commute C‚ÇÅ)
      (PE.sym $ [,]-[]-commute C‚ÇÇ) $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ]
      (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift B _)
         u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ])

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_ and _‚ä©‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ ] ‚ä©‚ü® l ‚ü© B [ œÉ ‚áë ]
  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ =
    proj‚ÇÅ $ wf-‚ä©‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_ and _‚ä©‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë] :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ ] ‚àô B [ œÉ ‚áë ] ‚ä©‚ü® l ‚ü© C [ œÉ ‚áë ‚áë ]
  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë] ‚ä©C ‚ä©œÉ =
    proj‚ÇÅ $ wf-‚ä©‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë] (refl-‚ä©·µõ‚â° ‚ä©C) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_ and _‚ä©‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A [ œÉ ] ‚Üí
    Œî ‚ä©‚ü® l ‚ü© B [ œÉ ‚áë ] [ t ]‚ÇÄ
  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ ‚ä©B ‚ä©œÉ ‚ä©t =
    proj‚ÇÅ $ wf-‚ä©‚â° $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)
      (refl-‚ä©‚â°‚à∑ ‚ä©t)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_ and _‚ä©‚ü®_‚ü©_.

  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A [ œÉ ] ‚Üí
    Œî ‚ä©‚ü® l‚Ä≥ ‚ü© u ‚à∑ B [ œÉ ‚áë ] [ t ]‚ÇÄ ‚Üí
    Œî ‚ä©‚ü® l ‚ü© C [ œÉ ‚áë ‚áë ] [ t , u ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ ‚ä©C ‚ä©œÉ ‚ä©t ‚ä©u =
    proj‚ÇÅ $ wf-‚ä©‚â° $
    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©C) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)
      (refl-‚ä©‚â°‚à∑ ‚ä©t) (refl-‚ä©‚â°‚à∑ ‚ä©u)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ and _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë]‚à∑ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ B ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ‚ÇÅ ] ‚ä©‚ü® l ‚ü© t‚ÇÅ [ œÉ‚ÇÅ ‚áë ] ‚â° t‚ÇÇ [ œÉ‚ÇÇ ‚áë ] ‚à∑ B [ œÉ‚ÇÅ ‚áë ]
  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑-liftSubst (wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)) .proj‚ÇÇ)
      œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ and _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë]‚à∑ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ C ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ‚ÇÅ ] ‚àô B [ œÉ‚ÇÅ ‚áë ] ‚ä©‚ü® l ‚ü© t‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ] ‚â° t‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ] ‚à∑
      C [ œÉ‚ÇÅ ‚áë ‚áë ]
  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)) of Œª
      (_ , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑-liftSubst ‚ä©B $ ‚ä©À¢‚â°‚à∑-liftSubst (wf-‚àô-‚ä©·µõ ‚ä©B .proj‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ and _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ‚à∑ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© v ‚â° w ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t [ v ]‚ÇÄ ‚â° u [ w ]‚ÇÄ ‚à∑ B [ v ]‚ÇÄ
  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ‚à∑ t‚â°u v‚â°w =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚â°‚à∑ t‚â°u .proj‚ÇÅ)) of Œª
      (_ , ‚ä©A) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚â°u .proj‚ÇÇ .proj‚ÇÇ
      (‚ä©À¢‚â°‚à∑-sgSubst ‚ä©A (level-‚ä©‚â°‚à∑ (‚ä©·µõ‚Üí‚ä© ‚ä©A) v‚â°w))

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚â°_‚à∑_ and _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ‚à∑ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ C ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A [ œÉ‚ÇÅ ] ‚Üí
    Œî ‚ä©‚ü® l‚Ä≥ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ B [ œÉ‚ÇÅ ‚áë ] [ u‚ÇÅ ]‚ÇÄ ‚Üí
    Œî ‚ä©‚ü® l ‚ü© t‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ] [ u‚ÇÅ , v‚ÇÅ ]‚ÇÅ‚ÇÄ ‚â° t‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ] [ u‚ÇÇ , v‚ÇÇ ]‚ÇÅ‚ÇÄ ‚à∑
      C [ œÉ‚ÇÅ ‚áë ‚áë ] [ u‚ÇÅ , v‚ÇÅ ]‚ÇÅ‚ÇÄ
  ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ‚à∑
    {B} {t‚ÇÅ} {t‚ÇÇ} {C} t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    case wf-‚àô-‚ä©·µõ (wf-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)) of Œª
      (_ , ‚ä©B) ‚Üí
    PE.subst‚ÇÉ (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _)
      (PE.sym $ doubleSubstComp t‚ÇÅ _ _ _)
      (PE.sym $ doubleSubstComp t‚ÇÇ _ _ _)
      (PE.sym $ doubleSubstComp C _ _ _) $
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ $
    ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ
      ( (_ , ‚ä©B)
      , ( _
        , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstComp _ _ B) v‚ÇÅ‚â°v‚ÇÇ
        )
      , ‚ä©À¢‚â°‚à∑‚àô‚áî‚Ä≤ .proj‚ÇÇ (wf-‚àô-‚ä©·µõ ‚ä©B , (_ , u‚ÇÅ‚â°u‚ÇÇ) , œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      )

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_ and _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ :
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ B ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ ] ‚ä©‚ü® l ‚ü© t [ œÉ ‚áë ] ‚à∑ B [ œÉ ‚áë ]
  ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ ‚ä©t ‚ä©œÉ =
    proj‚ÇÅ $ wf-‚ä©‚â°‚à∑ $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë]‚à∑ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)

opaque

  -- A substitution lemma for _‚ä©·µõ‚ü®_‚ü©_‚à∑_ and _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë]‚à∑ :
    Œì ‚àô A ‚àô B ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ C ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚àô A [ œÉ ] ‚àô B [ œÉ ‚áë ] ‚ä©‚ü® l ‚ü© t [ œÉ ‚áë ‚áë ] ‚à∑ C [ œÉ ‚áë ‚áë ]
  ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë]‚à∑ ‚ä©t ‚ä©œÉ =
    proj‚ÇÅ $ wf-‚ä©‚â°‚à∑ $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë]‚à∑ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)
