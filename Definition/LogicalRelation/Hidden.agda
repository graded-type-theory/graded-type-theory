------------------------------------------------------------------------
-- A variant of the logical relation with hidden reducibility
-- arguments, along with variants of some other relations
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Hidden
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
import Definition.LogicalRelation.Weakening R as W
open import Definition.LogicalRelation.Weakening.Restricted R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Well-formed R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE

private variable
  n                 : Nat
  Œì Œî               : Con Term _
  A B C t t‚ÇÅ t‚ÇÇ u v : Term _
  œÅ                 : Wk _ _
  l l‚Ä≤              : Universe-level
  k                 : LogRelKit

------------------------------------------------------------------------
-- The type formers

opaque

  -- Reducible terms.

  infix 4 _‚ä©‚ü®_‚ü©_‚à∑_

  _‚ä©‚ü®_‚ü©_‚à∑_ : Con Term n ‚Üí Universe-level ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A

opaque

  -- Reducible type equality.

  infix 4 _‚ä©‚ü®_‚ü©_‚â°_

  _‚ä©‚ü®_‚ü©_‚â°_ : Con Term n ‚Üí Universe-level ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© A ‚â° B =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A

opaque

  -- Reducible term equality.

  infix 4 _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ :
    Con Term n ‚Üí Universe-level ‚Üí Term n ‚Üí Term n ‚Üí Term n ‚Üí Set a
  Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A =
    ‚àÉ Œª (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A

------------------------------------------------------------------------
-- Conversions to the underlying type formers

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A conversion to _‚ä©‚ü®_‚ü©_‚à∑_/_.

  ‚ä©‚à∑‚Üí‚ä©‚à∑/ : (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A
  ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©A (‚ä©A‚Ä≤ , ‚ä©t) = irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A conversion to _‚ä©‚ü®_‚ü©_‚â°_/_.

  ‚ä©‚â°‚Üí‚ä©‚â°/ : (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A
  ‚ä©‚â°‚Üí‚ä©‚â°/ ‚ä©A (‚ä©A‚Ä≤ , _ , A‚â°B) = irrelevanceEq ‚ä©A‚Ä≤ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A conversion to _‚ä©‚ü®_‚ü©_‚â°_‚à∑_/_.

  ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A
  ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ ‚ä©A (‚ä©A‚Ä≤ , t‚â°u) = irrelevanceEqTerm ‚ä©A‚Ä≤ ‚ä©A t‚â°u

------------------------------------------------------------------------
-- Reflexivity

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Reflexivity for _‚ä©‚ü®_‚ü©_‚â°_.

  refl-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° A
  refl-‚ä©‚â° ‚ä©A =
    ‚ä©A , ‚ä©A , reflEq ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Reflexivity for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  refl-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  refl-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©t) =
    ‚ä©A , reflEqTerm ‚ä©A ‚ä©t

------------------------------------------------------------------------
-- Symmetry

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Symmetry for _‚ä©‚ü®_‚ü©_‚â°_.

  sym-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚â° A
  sym-‚ä©‚â° (‚ä©A , ‚ä©B , A‚â°B) =
    ‚ä©B , ‚ä©A , symEq ‚ä©A ‚ä©B A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Symmetry for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  sym-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A
  sym-‚ä©‚â°‚à∑ (‚ä©A , t‚â°u) =
    ‚ä©A , symEqTerm ‚ä©A t‚â°u

------------------------------------------------------------------------
-- Transitivity

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Transitivity for _‚ä©‚ü®_‚ü©_‚â°_.

  trans-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  trans-‚ä©‚â° (‚ä©A , _ , A‚â°B) (‚ä©B , ‚ä©C , B‚â°C) =
    ‚ä©A , ‚ä©C , transEq ‚ä©A ‚ä©B ‚ä©C A‚â°B B‚â°C

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Transitivity for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  trans-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  trans-‚ä©‚â°‚à∑ (‚ä©A‚Ä≤ , t‚â°u) (‚ä©A , u‚â°v) =
    ‚ä©A , transEqTerm ‚ä©A (irrelevanceEqTerm ‚ä©A‚Ä≤ ‚ä©A t‚â°u) u‚â°v

------------------------------------------------------------------------
-- Well-formedness lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  wf-‚ä©‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A
  wf-‚ä©‚à∑ (‚ä©A , _) = ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  wf-‚ä©‚â° : Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A √ó Œì ‚ä©‚ü® l ‚ü© B
  wf-‚ä©‚â° (‚ä©A , ‚ä©B , _) = ‚ä©A , ‚ä©B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A well-formedness lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  wf-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A
  wf-‚ä©‚â°‚à∑ (‚ä©A , t‚â°u) =
    let u‚â°t = symEqTerm ‚ä©A t‚â°u in
    (‚ä©A , transEqTerm ‚ä©A t‚â°u u‚â°t) , (‚ä©A , transEqTerm ‚ä©A u‚â°t t‚â°u)

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©‚áî‚ä©‚â° : (Œì ‚ä©‚ü® l ‚ü© A) ‚áî Œì ‚ä©‚ü® l ‚ü© A ‚â° A
  ‚ä©‚áî‚ä©‚â° = refl-‚ä©‚â° , proj‚ÇÅ ‚àò‚Üí wf-‚ä©‚â°

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚áî Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ = refl-‚ä©‚â°‚à∑ , proj‚ÇÅ ‚àò‚Üí wf-‚ä©‚â°‚à∑

------------------------------------------------------------------------
-- Changing type levels

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚â°_.

  level-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  level-‚ä©‚â° ‚ä©A ‚ä©B A‚â°B =
    ‚ä©A , ‚ä©B , ‚ä©‚â°‚Üí‚ä©‚â°/ ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  level-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  level-‚ä©‚â°‚à∑ ‚ä©A t‚â°u =
    ‚ä©A , ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ ‚ä©A t‚â°u

opaque

  -- Changing type levels for _‚ä©‚ü®_‚ü©_‚à∑_.

  level-‚ä©‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  level-‚ä©‚à∑ ‚ä©A =
    ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÇ ‚àò‚Üí level-‚ä©‚â°‚à∑ ‚ä©A ‚àò‚Üí ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÅ

------------------------------------------------------------------------
-- Conversion

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Conversion for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  conv-‚ä©‚â°‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B
  conv-‚ä©‚â°‚à∑ (‚ä©A , ‚ä©B , A‚â°B) (‚ä©A‚Ä≤ , t‚â°u) =
    ‚ä©B , convEqTerm‚ÇÅ ‚ä©A‚Ä≤ ‚ä©B (irrelevanceEq ‚ä©A ‚ä©A‚Ä≤ A‚â°B) t‚â°u

opaque

  -- Conversion for _‚ä©‚ü®_‚ü©_‚à∑_.

  conv-‚ä©‚à∑ :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ B
  conv-‚ä©‚à∑ A‚â°B =
    ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÇ ‚àò‚Üí conv-‚ä©‚â°‚à∑ A‚â°B ‚àò‚Üí ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÅ

------------------------------------------------------------------------
-- Weakening

opaque

  -- Weakening for _‚ä©‚ü®_‚ü©_.

  wk-‚ä© : œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œî ‚ä©‚ü® l ‚ü© wk œÅ A
  wk-‚ä© = W.wk

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Weakening for _‚ä©‚ü®_‚ü©_‚â°_.

  wk-‚ä©‚â° : œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œî ‚ä©‚ü® l ‚ü© wk œÅ A ‚â° wk œÅ B
  wk-‚ä©‚â° Œî‚äáŒì (‚ä©A , ‚ä©B , A‚â°B) =
    W.wk Œî‚äáŒì ‚ä©A , W.wk Œî‚äáŒì ‚ä©B , W.wkEq Œî‚äáŒì ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Weakening for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  wk-‚ä©‚â°‚à∑ :
    œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œî ‚ä©‚ü® l ‚ü© wk œÅ t ‚â° wk œÅ u ‚à∑ wk œÅ A
  wk-‚ä©‚â°‚à∑ Œî‚äáŒì (‚ä©A , t‚â°u) =
    W.wk Œî‚äáŒì ‚ä©A , W.wkEqTerm Œî‚äáŒì ‚ä©A t‚â°u

opaque

  -- Weakening for _‚ä©‚ü®_‚ü©_‚à∑_.

  wk-‚ä©‚à∑ : œÅ ‚à∑ ∑ ≥ Œî ‚äá Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œî ‚ä©‚ü® l ‚ü© wk œÅ t ‚à∑ wk œÅ A
  wk-‚ä©‚à∑ Œî‚äáŒì = ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÇ ‚àò‚Üí wk-‚ä©‚â°‚à∑ Œî‚äáŒì ‚àò‚Üí ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÅ

------------------------------------------------------------------------
-- Reduction

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A reduction lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©-‚áí* : Œì ‚ä¢ A ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©-‚áí* A‚áí*B ‚ä©A = ‚ä©A , redSubst*‚Ä≤ A‚áí*B ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A reduction lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-‚áí* :
    Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚à∑-‚áí* t‚áí*u (‚ä©A , ‚ä©t) =
    ‚ä©A , redSubst*Term‚Ä≤ t‚áí*u ‚ä©A ‚ä©t

------------------------------------------------------------------------
-- Expansion

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- An expansion lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©-‚áê* : Œì ‚ä¢ A ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©-‚áê* A‚áí*B ‚ä©B =
    case redSubst* A‚áí*B ‚ä©B of Œª
      (‚ä©A , A‚â°B) ‚Üí
    ‚ä©A , ‚ä©B , A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- An expansion lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-‚áê* :
    Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚à∑-‚áê* t‚áí*u (‚ä©A , ‚ä©u) =
    ‚ä©A , redSubst*Term t‚áí*u ‚ä©A ‚ä©u

------------------------------------------------------------------------
-- Escape lemmas

opaque

  -- An escape lemma for _‚ä©‚ü®_‚ü©_.

  escape-‚ä© : Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä¢ A
  escape-‚ä© = escape

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  escape-‚ä©‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ A
  escape-‚ä©‚à∑ (‚ä©A , ‚ä©t) = escapeTerm ‚ä©A ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  escape-‚ä©‚â° : Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä¢ A ‚âÖ B
  escape-‚ä©‚â° (‚ä©A , _ , A‚â°B) = escapeEq ‚ä©A A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- An escape lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  escape-‚ä©‚â°‚à∑ : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä¢ t ‚âÖ u ‚à∑ A
  escape-‚ä©‚â°‚à∑ (‚ä©A , t‚â°u) = escapeTermEq ‚ä©A t‚â°u

------------------------------------------------------------------------
-- Equational reasoning combinators

-- For more explanations of the combinators, see
-- Definition.Typed.Reasoning.Reduction.

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_.

  infix -1
    _‚àé‚ü®_‚ü©‚ä© finally-‚ä©‚â° finally-‚ä©‚â°Àò
  infixr -2
    step-‚ä©‚â° step-‚ä©‚â°Àò step-‚ä©‚â°‚â° step-‚ä©‚â°‚â°Àò step-‚ä©‚â°‚áí* step-‚ä©‚â°‚áí step-‚ä©‚â°‚áê*
    step-‚ä©‚â°‚áê _‚â°‚ü®‚ü©‚ä©_ finally-‚ä©‚â°‚â° finally-‚ä©‚â°‚â°Àò finally-‚ä©‚â°‚áê* finally-‚ä©‚â°‚áí*

  step-‚ä©‚â° : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â° _ = flip trans-‚ä©‚â°

  syntax step-‚ä©‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°Àò : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°Àò _ B‚â°C B‚â°A = trans-‚ä©‚â° (sym-‚ä©‚â° B‚â°A) B‚â°C

  syntax step-‚ä©‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚â° : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚â° _ B‚â°C PE.refl = B‚â°C

  syntax step-‚ä©‚â°‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚â° B‚â°C

  step-‚ä©‚â°‚â°Àò : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚â°Àò _ B‚â°C PE.refl = B‚â°C

  syntax step-‚ä©‚â°‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚â° B‚â°C

  step-‚ä©‚â°‚áí* : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ A ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áí* _ B‚â°C A‚áí*B =
    trans-‚ä©‚â° (‚ä©-‚áê* A‚áí*B (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ)) B‚â°C

  syntax step-‚ä©‚â°‚áí* A B‚â°C A‚áí*B = A ‚áí*‚ü® A‚áí*B ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áí : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ A ‚áí B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áí _ B‚â°C A‚áíB = step-‚ä©‚â°‚áí* _ B‚â°C (redMany-‚ä¢ A‚áíB)

  syntax step-‚ä©‚â°‚áí A B‚â°C A‚áíB = A ‚áí‚ü® A‚áíB ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áê* : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ B ‚áí* A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áê* _ B‚â°C B‚áí*A =
    trans-‚ä©‚â° (sym-‚ä©‚â° (‚ä©-‚áí* B‚áí*A (wf-‚ä©‚â° B‚â°C .proj‚ÇÅ))) B‚â°C

  syntax step-‚ä©‚â°‚áê* A B‚â°C B‚áí*A = A ‚áê*‚ü® B‚áí*A ‚ü©‚ä© B‚â°C

  step-‚ä©‚â°‚áê : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° C ‚Üí Œì ‚ä¢ B ‚áí A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  step-‚ä©‚â°‚áê _ B‚â°C B‚áíA = step-‚ä©‚â°‚áê* _ B‚â°C (redMany-‚ä¢ B‚áíA)

  syntax step-‚ä©‚â°‚áê A B‚â°C B‚áíA = A ‚áê‚ü® B‚áíA ‚ü©‚ä© B‚â°C

  _‚â°‚ü®‚ü©‚ä©_ : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  _ ‚â°‚ü®‚ü©‚ä© A‚â°B = A‚â°B

  _‚àé‚ü®_‚ü©‚ä© : ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° A
  _ ‚àé‚ü® ‚ä©A ‚ü©‚ä© = refl-‚ä©‚â° ‚ä©A

  finally-‚ä©‚â° : ‚àÄ A B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  finally-‚ä©‚â° _ _ A‚â°B = A‚â°B

  syntax finally-‚ä©‚â° A B A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚àé B ‚àé

  finally-‚ä©‚â°Àò : ‚àÄ A B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  finally-‚ä©‚â°Àò _ _ A‚â°B = sym-‚ä©‚â° A‚â°B

  syntax finally-‚ä©‚â°Àò A B B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚àé B ‚àé

  finally-‚ä©‚â°‚â° : ‚àÄ A ‚Üí B PE.‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚â° _ PE.refl A‚â°B = A‚â°B

  syntax finally-‚ä©‚â°‚â° A B‚â°C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚àé‚â° B‚â°C

  finally-‚ä©‚â°‚â°Àò : ‚àÄ A ‚Üí B PE.‚â° C ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚â°Àò _ PE.refl B‚â°A = sym-‚ä©‚â° B‚â°A

  syntax finally-‚ä©‚â°‚â°Àò A B‚â°C B‚â°A = A ‚â°Àò‚ü® B‚â°A ‚ü©‚ä©‚àé‚â° B‚â°C

  finally-‚ä©‚â°‚áê* :
    ‚àÄ A ‚Üí Œì ‚ä¢ C ‚áí* B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚áê* _ C‚áí*B A‚â°B =
    trans-‚ä©‚â° A‚â°B (sym-‚ä©‚â° (‚ä©-‚áê* C‚áí*B (wf-‚ä©‚â° A‚â°B .proj‚ÇÇ)))

  syntax finally-‚ä©‚â°‚áê* A C‚áí*B A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚áê* C‚áí*B

  finally-‚ä©‚â°‚áí* :
    ‚àÄ A ‚Üí Œì ‚ä¢ B ‚áí* C ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° C
  finally-‚ä©‚â°‚áí* _ B‚áí*C A‚â°B =
    case wf-‚ä©‚â° A‚â°B of Œª
      (_ , ‚ä©B) ‚Üí
    trans-‚ä©‚â° A‚â°B (‚ä©-‚áí* B‚áí*C ‚ä©B)

  syntax finally-‚ä©‚â°‚áí* A B‚áí*C A‚â°B = A ‚â°‚ü® A‚â°B ‚ü©‚ä©‚áí* B‚áí*C

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  infix -1
    _‚àé‚ü®_‚ü©‚ä©‚à∑ finally-‚ä©‚â°‚à∑ finally-‚ä©‚â°‚à∑Àò
  infix -2
    step-‚ä©‚â°‚à∑-conv step-‚ä©‚â°‚à∑-convÀò step-‚ä©‚â°‚à∑-conv-‚â° step-‚ä©‚â°‚à∑-conv-‚â°Àò
  infixr -2
    step-‚ä©‚â°‚à∑ step-‚ä©‚â°‚à∑Àò step-‚ä©‚â°‚à∑‚â° step-‚ä©‚â°‚à∑‚â°Àò step-‚ä©‚â°‚à∑‚áí* step-‚ä©‚â°‚à∑‚áí
    step-‚ä©‚â°‚à∑‚áê* step-‚ä©‚â°‚à∑‚áê _‚â°‚ü®‚ü©‚ä©‚à∑_ finally-‚ä©‚â°‚à∑‚â° finally-‚ä©‚â°‚à∑‚â°Àò
    finally-‚ä©‚â°‚à∑‚áê* finally-‚ä©‚â°‚à∑‚áí*

  step-‚ä©‚â°‚à∑ :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑ _ = flip trans-‚ä©‚â°‚à∑

  syntax step-‚ä©‚â°‚à∑ t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑Àò :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑Àò _ u‚â°v u‚â°t = trans-‚ä©‚â°‚à∑ (sym-‚ä©‚â°‚à∑ u‚â°t) u‚â°v

  syntax step-‚ä©‚â°‚à∑Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚â° : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí t PE.‚â° u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚â° _ u‚â°v PE.refl = u‚â°v

  syntax step-‚ä©‚â°‚à∑‚â° t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚â°Àò : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí u PE.‚â° t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚â°Àò _ u‚â°v PE.refl = u‚â°v

  syntax step-‚ä©‚â°‚à∑‚â°Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚áí* :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áí* _ u‚â°v t‚áí*u =
    trans-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áê* t‚áí*u (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ)) u‚â°v

  syntax step-‚ä©‚â°‚à∑‚áí* t u‚â°v t‚áí*u = t ‚áí*‚ü® t‚áí*u ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áí :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áí _ u‚â°v t‚áíu = step-‚ä©‚â°‚à∑‚áí* _ u‚â°v (redMany t‚áíu)

  syntax step-‚ä©‚â°‚à∑‚áí t u‚â°v t‚áíu = t ‚áí‚ü® t‚áíu ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áê* :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí* t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áê* _ u‚â°v u‚áí*t =
    trans-‚ä©‚â°‚à∑ (sym-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áí* u‚áí*t (wf-‚ä©‚â°‚à∑ u‚â°v .proj‚ÇÅ))) u‚â°v

  syntax step-‚ä©‚â°‚à∑‚áê* t u‚â°v u‚áí*t = t ‚áê*‚ü® u‚áí*t ‚ü©‚ä©‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚áê :
    ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚áê _ u‚â°v u‚áít = step-‚ä©‚â°‚à∑‚áê* _ u‚â°v (redMany u‚áít)

  syntax step-‚ä©‚â°‚à∑‚áê t u‚â°v u‚áít = t ‚áê‚ü® u‚áít ‚ü©‚ä©‚à∑ u‚â°v

  _‚â°‚ü®‚ü©‚ä©‚à∑_ : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  _ ‚â°‚ü®‚ü©‚ä©‚à∑ t‚â°u = t‚â°u

  step-‚ä©‚â°‚à∑-conv :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv t‚â°u A‚â°B = conv-‚ä©‚â°‚à∑ (sym-‚ä©‚â° A‚â°B) t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv t‚â°u A‚â°B = ‚ü® A‚â°B ‚ü©‚ä©‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑-convÀò :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-convÀò t‚â°u B‚â°A = conv-‚ä©‚â°‚à∑ B‚â°A t‚â°u

  syntax step-‚ä©‚â°‚à∑-convÀò t‚â°u B‚â°A = Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑-conv-‚â° : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv-‚â° t‚â°u PE.refl = t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv-‚â° t‚â°u A‚â°B = ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚â° t‚â°u

  step-‚ä©‚â°‚à∑-conv-‚â°Àò : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑-conv-‚â°Àò t‚â°u PE.refl = t‚â°u

  syntax step-‚ä©‚â°‚à∑-conv-‚â°Àò t‚â°u B‚â°A = Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚â° t‚â°u

  _‚àé‚ü®_‚ü©‚ä©‚à∑ : ‚àÄ t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  _ ‚àé‚ü® ‚ä©t ‚ü©‚ä©‚à∑ = refl-‚ä©‚â°‚à∑ ‚ä©t

  finally-‚ä©‚â°‚à∑ : ‚àÄ t u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑ _ _ t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑ t u t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé u ‚àé

  finally-‚ä©‚â°‚à∑Àò : ‚àÄ t u ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑Àò _ _ t‚â°u = sym-‚ä©‚â°‚à∑ t‚â°u

  syntax finally-‚ä©‚â°‚à∑Àò t u u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé u ‚àé

  finally-‚ä©‚â°‚à∑‚â° :
    ‚àÄ t ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚â° _ PE.refl t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚â° t u‚â°v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚â°Àò :
    ‚àÄ t ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚â°Àò _ PE.refl u‚â°t = sym-‚ä©‚â°‚à∑ u‚â°t

  syntax finally-‚ä©‚â°‚à∑‚â°Àò t u‚â°v u‚â°t = t ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚áê* :
    ‚àÄ t ‚Üí Œì ‚ä¢ v ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚áê* _ v‚áí*u t‚â°u =
    trans-‚ä©‚â°‚à∑ t‚â°u (sym-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áê* v‚áí*u (wf-‚ä©‚â°‚à∑ t‚â°u .proj‚ÇÇ)))

  syntax finally-‚ä©‚â°‚à∑‚áê* t v‚áí*u t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚áê* v‚áí*u

  finally-‚ä©‚â°‚à∑‚áí* :
    ‚àÄ t ‚Üí Œì ‚ä¢ u ‚áí* v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚áí* _ u‚áí*v t‚â°u =
    case wf-‚ä©‚â°‚à∑ t‚â°u of Œª
      (_ , ‚ä©u) ‚Üí
    trans-‚ä©‚â°‚à∑ t‚â°u (‚ä©‚à∑-‚áí* u‚áí*v ‚ä©u)

  syntax finally-‚ä©‚â°‚à∑‚áí* t u‚áí*v t‚â°u = t ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚áí* u‚áí*v

opaque

  -- Equational reasoning combinators for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ with explicit
  -- types.

  infix -1
    _‚à∑_‚àé‚ü®_‚ü©‚ä©‚à∑‚à∑ finally-‚ä©‚â°‚à∑‚à∑ finally-‚ä©‚â°‚à∑‚à∑Àò
  infix -2
    step-‚ä©‚â°‚à∑‚à∑-conv step-‚ä©‚â°‚à∑‚à∑-convÀò step-‚ä©‚â°‚à∑‚à∑-conv-‚â° step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò
  infixr -2
    step-‚ä©‚â°‚à∑‚à∑ step-‚ä©‚â°‚à∑‚à∑Àò step-‚ä©‚â°‚à∑‚à∑‚â° step-‚ä©‚â°‚à∑‚à∑‚â°Àò step-‚ä©‚â°‚à∑‚à∑‚áí* step-‚ä©‚â°‚à∑‚à∑‚áí
    step-‚ä©‚â°‚à∑‚à∑‚áê* step-‚ä©‚â°‚à∑‚à∑‚áê _‚à∑_‚â°‚ü®‚ü©‚ä©‚à∑‚à∑_ finally-‚ä©‚â°‚à∑‚à∑‚â° finally-‚ä©‚â°‚à∑‚à∑‚â°Àò
    finally-‚ä©‚â°‚à∑‚à∑‚áê* finally-‚ä©‚â°‚à∑‚à∑‚áí*

  step-‚ä©‚â°‚à∑‚à∑ :
    ‚àÄ t A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑ _ _ = step-‚ä©‚â°‚à∑ _

  syntax step-‚ä©‚â°‚à∑‚à∑ t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑Àò :
    ‚àÄ t A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑Àò _ _ = step-‚ä©‚â°‚à∑Àò _

  syntax step-‚ä©‚â°‚à∑‚à∑Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚â° :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí t PE.‚â° u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚â° _ _ = step-‚ä©‚â°‚à∑‚â° _

  syntax step-‚ä©‚â°‚à∑‚à∑‚â° t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚â°Àò :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí u PE.‚â° t ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚â°Àò _ _ = step-‚ä©‚â°‚à∑‚â°Àò _

  syntax step-‚ä©‚â°‚à∑‚à∑‚â°Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚à∑‚â° u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áí* :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áí* _ _ = step-‚ä©‚â°‚à∑‚áí* _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áí* t A u‚â°v t‚áí*u = t ‚à∑ A ‚áí*‚ü® t‚áí*u ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áí :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áí _ _ = step-‚ä©‚â°‚à∑‚áí _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áí t A u‚â°v t‚áíu = t ‚à∑ A ‚áí‚ü® t‚áíu ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áê* :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí* t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áê* _ _ = step-‚ä©‚â°‚à∑‚áê* _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áê* t A u‚â°v u‚áí*t = t ‚à∑ A ‚áê*‚ü® u‚áí*t ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  step-‚ä©‚â°‚à∑‚à∑‚áê :
    ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ u ‚áí t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑‚áê _ _ = step-‚ä©‚â°‚à∑‚áê _

  syntax step-‚ä©‚â°‚à∑‚à∑‚áê t A u‚â°v u‚áít = t ‚à∑ A ‚áê‚ü® u‚áít ‚ü©‚ä©‚à∑‚à∑ u‚â°v

  _‚à∑_‚â°‚ü®‚ü©‚ä©‚à∑‚à∑_ : ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  _ ‚à∑ _ ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑ t‚â°u = t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv _ = step-‚ä©‚â°‚à∑-conv

  syntax step-‚ä©‚â°‚à∑‚à∑-conv A t‚â°u A‚â°B = ‚à∑ A ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-convÀò :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ B ‚Üí Œì ‚ä©‚ü® l ‚ü© B ‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-convÀò _ = step-‚ä©‚â°‚à∑-convÀò

  syntax step-‚ä©‚â°‚à∑‚à∑-convÀò A t‚â°u B‚â°A = ‚à∑ A Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚à∑ t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv-‚â° :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí A PE.‚â° B ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv-‚â° _ = step-‚ä©‚â°‚à∑-conv-‚â°

  syntax step-‚ä©‚â°‚à∑‚à∑-conv-‚â° A t‚â°u A‚â°B = ‚à∑ A ‚ü® A‚â°B ‚ü©‚ä©‚à∑‚à∑‚â° t‚â°u

  step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò :
    ‚àÄ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ B ‚Üí B PE.‚â° A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò _ = step-‚ä©‚â°‚à∑-conv-‚â°Àò

  syntax step-‚ä©‚â°‚à∑‚à∑-conv-‚â°Àò A t‚â°u B‚â°A = ‚à∑ A Àò‚ü® B‚â°A ‚ü©‚ä©‚à∑‚à∑‚â° t‚â°u

  _‚à∑_‚àé‚ü®_‚ü©‚ä©‚à∑‚à∑ : ‚àÄ t A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A
  _ ‚à∑ _ ‚àé‚ü® ‚ä©t ‚ü©‚ä©‚à∑‚à∑ = refl-‚ä©‚â°‚à∑ ‚ä©t

  finally-‚ä©‚â°‚à∑‚à∑ : ‚àÄ t A u ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑ _ _ _ t‚â°u = t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚à∑ t A u t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚à∑ u ‚àé

  finally-‚ä©‚â°‚à∑‚à∑Àò : ‚àÄ t A u ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑Àò _ _ _ t‚â°u = sym-‚ä©‚â°‚à∑ t‚â°u

  syntax finally-‚ä©‚â°‚à∑‚à∑Àò t A u u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚à∑ u ‚àé

  finally-‚ä©‚â°‚à∑‚à∑‚â° :
    ‚àÄ t A ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚â° _ _ = finally-‚ä©‚â°‚à∑‚â° _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚â° t A u‚â°v t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚àé‚à∑‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚à∑‚â°Àò :
    ‚àÄ t A ‚Üí u PE.‚â° v ‚Üí Œì ‚ä©‚ü® l ‚ü© u ‚â° t ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚â°Àò _ _ = finally-‚ä©‚â°‚à∑‚â°Àò _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚â°Àò t A u‚â°v u‚â°t = t ‚à∑ A ‚â°Àò‚ü® u‚â°t ‚ü©‚ä©‚à∑‚àé‚à∑‚â° u‚â°v

  finally-‚ä©‚â°‚à∑‚à∑‚áê* :
    ‚àÄ t A ‚Üí Œì ‚ä¢ v ‚áí* u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚áê* _ _ = finally-‚ä©‚â°‚à∑‚áê* _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚áê* t A v‚áí*u t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑‚áê* v‚áí*u

  finally-‚ä©‚â°‚à∑‚à∑‚áí* :
    ‚àÄ t A ‚Üí Œì ‚ä¢ u ‚áí* v ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° v ‚à∑ A
  finally-‚ä©‚â°‚à∑‚à∑‚áí* _ _ = finally-‚ä©‚â°‚à∑‚áí* _

  syntax finally-‚ä©‚â°‚à∑‚à∑‚áí* t A v‚áí*u t‚â°u = t ‚à∑ A ‚â°‚ü® t‚â°u ‚ü©‚ä©‚à∑‚à∑‚áí* v‚áí*u

------------------------------------------------------------------------
-- Embedding

opaque
  unfolding emb-‚â§-‚ä©

  -- Embedding for _‚ä©‚ü®_‚ü©_.

  emb-‚ä© :
    l ‚â§·µò l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A
  emb-‚ä© = emb-‚â§-‚ä©

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Embedding for _‚ä©‚ü®_‚ü©_‚â°_.

  emb-‚ä©‚â° :
    l ‚â§·µò l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B
  emb-‚ä©‚â° ‚â§·µò-refl        A‚â°B             = A‚â°B
  emb-‚ä©‚â° (‚â§·µò-step l<l‚Ä≤) (‚ä©A , ‚ä©B , A‚â°B) =
    let p = 1+‚â§·µò1+ l<l‚Ä≤ in
      emb p (‚ä©<‚áî‚ä© p .proj‚ÇÇ ‚ä©A)
    , emb p (‚ä©<‚áî‚ä© p .proj‚ÇÇ ‚ä©B)
    , ‚ä©<‚â°‚áî‚ä©‚â°‚Ä≤ p .proj‚ÇÇ A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Embedding for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  emb-‚ä©‚â°‚à∑ :
    l ‚â§·µò l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A
  emb-‚ä©‚â°‚à∑ ‚â§·µò-refl        t‚â°u        = t‚â°u
  emb-‚ä©‚â°‚à∑ (‚â§·µò-step l<l‚Ä≤) (‚ä©A , t‚â°u) =
    let p   = 1+‚â§·µò1+ l<l‚Ä≤
        ‚ä©A‚Ä≤ = emb p (‚ä©<‚áî‚ä© p .proj‚ÇÇ ‚ä©A)
    in
    ‚ä©A‚Ä≤ , irrelevanceEqTerm ‚ä©A ‚ä©A‚Ä≤ t‚â°u

opaque

  -- Embedding for _‚ä©‚ü®_‚ü©_‚à∑_.

  emb-‚ä©‚à∑ :
    l ‚â§·µò l‚Ä≤ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A
  emb-‚ä©‚à∑ l‚â§l‚Ä≤ =
    ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÇ ‚àò‚Üí emb-‚ä©‚â°‚à∑ l‚â§l‚Ä≤ ‚àò‚Üí ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÅ

------------------------------------------------------------------------
-- Some introduction lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  ‚ä©‚à∑-intro = _,_

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©‚â°-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  ‚ä©‚â°-intro ‚ä©A ‚ä©B A‚â°B = ‚ä©A , ‚ä©B , A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- An introduction lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑-intro :
    (‚ä©A : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚ä©A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  ‚ä©‚â°‚à∑-intro ‚ä©A t‚â°u =
    ‚ä©A , t‚â°u

------------------------------------------------------------------------
-- Neutral types and terms

opaque

  -- Neutral types that satisfy certain properties are reducible (if
  -- Neutrals-included holds).

  neutral-‚ä© :
    Neutrals-included ‚Üí
    Neutral A ‚Üí
    Œì ‚ä¢‚âÖ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A
  neutral-‚ä© = neu

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Neutral terms that satisfy certain properties are reducible (if
  -- Neutrals-included holds).

  neutral-‚ä©‚à∑ :
    Neutrals-included ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Neutral t ‚Üí
    Œì ‚ä¢~ t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A
  neutral-‚ä©‚à∑ inc ‚ä©A t-ne t~t =
    ‚ä©A , neuTerm inc ‚ä©A t-ne t~t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- Reducible equality holds between neutral types that satisfy
  -- certain properties.

  neutral-‚ä©‚â° :
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B ‚Üí
    Neutral A ‚Üí
    Neutral B ‚Üí
    Œì ‚ä¢ A ‚âÖ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B
  neutral-‚ä©‚â° ‚ä©A ‚ä©B A-ne B-ne A‚âÖB =
    ‚ä©A , ‚ä©B , neuEq ‚ä©A A-ne B-ne A‚âÖB

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Reducible equality holds between neutral terms that satisfy
  -- certain properties (if Neutrals-included holds).

  neutral-‚ä©‚â°‚à∑ :
    Neutrals-included ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚Üí
    Neutral t ‚Üí
    Neutral u ‚Üí
    Œì ‚ä¢ t ~ u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A
  neutral-‚ä©‚â°‚à∑ inc ‚ä©A t-ne u-ne t~u =
    ‚ä©A , neuEqTerm inc ‚ä©A t-ne u-ne t~u

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©ne‚áî :
    Neutral A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚áî (Neutrals-included √ó Œì ‚ä¢‚âÖ A)
  ‚ä©ne‚áî A-ne =
      (Œª ‚ä©A ‚Üí
         case extractMaybeEmb (ne-elim A-ne ‚ä©A) of Œª {
           (_ , ne inc _ A‚áí*B _ B‚âÖB) ‚Üí
         case whnfRed* A‚áí*B (ne A-ne) of Œª {
           PE.refl ‚Üí
         inc , B‚âÖB }})
    , (Œª (inc , A‚âÖA) ‚Üí neu inc A-ne A‚âÖA)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©ne‚â°‚áî :
    Neutral A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚áî
    (Neutrals-included √ó ‚àÉ Œª C ‚Üí Neutral C √ó Œì ‚ä¢ B ‚áí* C √ó Œì ‚ä¢ A ‚âÖ C)
  ‚ä©ne‚â°‚áî {A} {B} A-ne =
      (Œª (‚ä©A , ‚ä©B , A‚â°B) ‚Üí
         case ne-elim A-ne ‚ä©A of Œª
           ‚ä©A‚Ä≤ ‚Üí
         lemma ‚ä©A‚Ä≤ (irrelevanceEq ‚ä©A (ne-intr ‚ä©A‚Ä≤) A‚â°B))
    , (Œª (inc , C , C-ne , B‚áí*C , A‚âÖC) ‚Üí
         let ‚âÖA , ‚âÖC = wf-‚ä¢‚âÖ A‚âÖC in
         sym-‚ä©‚â°
           (B  ‚áí*‚ü® B‚áí*C ‚ü©‚ä©
            C  ‚â°‚ü® neutral-‚ä©‚â°
                    (‚ä©ne‚áî C-ne .proj‚ÇÇ (inc , ‚âÖC))
                    (‚ä©ne‚áî A-ne .proj‚ÇÇ (inc , ‚âÖA))
                    C-ne A-ne (‚âÖ-sym A‚âÖC) ‚ü©‚ä©‚àé
            A  ‚àé))
    where
    lemma :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©ne A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ne-intr ‚ä©A ‚Üí
      Neutrals-included √ó ‚àÉ Œª C ‚Üí Neutral C √ó Œì ‚ä¢ B ‚áí* C √ó Œì ‚ä¢ A ‚âÖ C
    lemma (emb ‚â§·µò-refl ‚ä©A) A‚â°B =
      lemma ‚ä©A A‚â°B
    lemma (emb (‚â§·µò-step l<) ‚ä©A) A‚â°B =
      lemma (emb l< ‚ä©A) A‚â°B
    lemma (noemb (ne _ _ A‚áí*A‚Ä≤ _ _)) (ne‚Çå inc C B‚áí*C C-ne A‚Ä≤‚âÖC) =
      case whnfRed* A‚áí*A‚Ä≤ (ne A-ne) of Œª {
        PE.refl ‚Üí
      inc , C , C-ne , B‚áí*C , A‚Ä≤‚âÖC }

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©ne‚â°ne‚áî :
    Neutral A ‚Üí
    Neutral B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚áî (Neutrals-included √ó Œì ‚ä¢ A ‚âÖ B)
  ‚ä©ne‚â°ne‚áî {A} {B} {Œì} {l} A-ne B-ne =
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B                                                    ‚áî‚ü® ‚ä©ne‚â°‚áî A-ne ‚ü©
    (Neutrals-included √ó ‚àÉ Œª C ‚Üí Neutral C √ó Œì ‚ä¢ B ‚áí* C √ó Œì ‚ä¢ A ‚âÖ C)  ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí
                                                                            (Œª (_ , _ , B‚áí*C , A‚âÖC) ‚Üí
                                                                               case whnfRed* B‚áí*C (ne B-ne) of Œª {
                                                                                 PE.refl ‚Üí
                                                                               A‚âÖC })
                                                                          , (Œª A‚âÖB ‚Üí _ , B-ne , id (wf-‚ä¢‚â° (‚âÖ-eq A‚âÖB) .proj‚ÇÇ) , A‚âÖB))
                                                                       ‚ü©
    Neutrals-included √ó Œì ‚ä¢ A ‚âÖ B                                     ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ ‚ä©ne‚áî neu

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑ne‚áî :
    Neutral A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚áî
    (Œì ‚ä¢‚âÖ A √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ A √ó Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ A √ó
     Œì ‚ä©neNf u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A)
  ‚ä©‚â°‚à∑ne‚áî {A} A-ne =
      (Œª (‚ä©A , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
         case ne-elim A-ne ‚ä©A of Œª
           ‚ä©A‚Ä≤ ‚Üí
         ‚ä©ne‚áî A-ne .proj‚ÇÅ ‚ä©A .proj‚ÇÇ ,
         lemma ‚ä©A‚Ä≤ (irrelevanceEqTerm ‚ä©A (ne-intr ‚ä©A‚Ä≤) t‚ÇÅ‚â°t‚ÇÇ))
    , (Œª (‚âÖA , u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ@(neNf‚Çú‚Çå inc _ _ _)) ‚Üí
         ‚ä©ne‚áî A-ne .proj‚ÇÇ (inc , ‚âÖA) ,
         ne‚Çú‚Çå u‚ÇÅ u‚ÇÇ t‚ÇÅ‚áí*u‚ÇÅ t‚ÇÇ‚áí*u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ)
    where
    lemma :
      ‚àÄ {l} (‚ä©A : Œì ‚ä©‚ü® l ‚ü©ne A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A / ne-intr ‚ä©A ‚Üí
      ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
      Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ A √ó Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ A √ó
      Œì ‚ä©neNf u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A
    lemma (emb ‚â§·µò-refl ‚ä©A) t‚ÇÅ‚â°t‚ÇÇ =
      lemma ‚ä©A t‚ÇÅ‚â°t‚ÇÇ
    lemma (emb (‚â§·µò-step l<) ‚ä©A) t‚ÇÅ‚â°t‚ÇÇ =
      lemma (emb l< ‚ä©A) t‚ÇÅ‚â°t‚ÇÇ
    lemma (noemb (ne _ _ A‚áí*A‚Ä≤ _ _)) (ne‚Çú‚Çå u‚ÇÅ u‚ÇÇ t‚ÇÅ‚áí*u‚ÇÅ t‚ÇÇ‚áí*u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ) =
      case whnfRed* A‚áí*A‚Ä≤ (ne A-ne) of Œª {
        PE.refl ‚Üí
      u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ }

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ ‚ä©ne‚áî neu

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑ne‚áî :
    Neutral A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚áî
    (Neutrals-included √ó Œì ‚ä¢‚âÖ A √ó
     ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A √ó Neutral u √ó Œì ‚ä¢~ u ‚à∑ A)
  ‚ä©‚à∑ne‚áî {A} {Œì} {l} {t} A-ne =
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A                                     ‚áî‚ü® ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ ‚ü©

    Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ A                                 ‚áî‚ü® ‚ä©‚â°‚à∑ne‚áî A-ne ‚ü©

    (Œì ‚ä¢‚âÖ A √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t ‚áí* u‚ÇÅ ‚à∑ A √ó Œì ‚ä¢ t ‚áí* u‚ÇÇ ‚à∑ A √ó
     Œì ‚ä©neNf u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A)                              ‚áî‚ü® (Œª (‚âÖA , _ , _ , t‚áí*u‚ÇÅ , _ , neNf‚Çú‚Çå inc u‚ÇÅ-ne _ u‚ÇÅ~u‚ÇÇ) ‚Üí
                                                             inc , ‚âÖA , _ , t‚áí*u‚ÇÅ , u‚ÇÅ-ne , wf-‚ä¢~‚à∑ u‚ÇÅ~u‚ÇÇ .proj‚ÇÅ)
                                                        , (Œª (inc , ‚âÖA , _ , t‚áí*u , u-ne , ~u) ‚Üí
                                                             ‚âÖA , _ , _ , t‚áí*u , t‚áí*u , neNf‚Çú‚Çå inc u-ne u-ne ~u)
                                                        ‚ü©
    (Neutrals-included √ó Œì ‚ä¢‚âÖ A √ó
     ‚àÉ Œª u ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A √ó Neutral u √ó Œì ‚ä¢~ u ‚à∑ A)  ‚ñ°‚áî
