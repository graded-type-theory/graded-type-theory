------------------------------------------------------------------------
-- Irrelevance lemmata for the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality


module Definition.LogicalRelation.Irrelevance
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Properties M
open import Definition.Untyped.Whnf M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.ShapeView R

open import Tools.Function
open import Tools.Level
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    m n : Nat
    Œì : Cons m n
    A A‚Ä≤ B B‚Ä≤ C C‚Ä≤ : Term _
    l l‚Ä≤ : Universe-level

-- Irrelevance for propositionally equal types
irrelevance‚Ä≤ : ‚àÄ {A A‚Ä≤ l}
             ‚Üí A PE.‚â° A‚Ä≤
             ‚Üí Œì ‚ä©‚ü® l ‚ü© A
             ‚Üí Œì ‚ä©‚ü® l ‚ü© A‚Ä≤
irrelevance‚Ä≤ PE.refl [A] = [A]

mutual
  -- Irrelevance for type equality
  irrelevanceEq : ‚àÄ {A B l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / q
  irrelevanceEq p q A‚â°B = irrelevanceEqT (goodCasesRefl p q) A‚â°B

  -- Irrelevance for type equality with propositionally equal first types
  irrelevanceEq‚Ä≤ : ‚àÄ {A A‚Ä≤ B l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                   (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                 ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B / q
  irrelevanceEq‚Ä≤ PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal types
  irrelevanceEq‚Ä≥ : ‚àÄ {A A‚Ä≤ B B‚Ä≤ l l‚Ä≤} (eqA : A PE.‚â° A‚Ä≤) (eqB : B PE.‚â° B‚Ä≤)
                    (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B‚Ä≤ / q
  irrelevanceEq‚Ä≥ PE.refl PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal second types
  irrelevanceEqR‚Ä≤ : ‚àÄ {A B B‚Ä≤ l} (eqB : B PE.‚â° B‚Ä≤) (p : Œì ‚ä©‚ü® l ‚ü© A)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B‚Ä≤ / p
  irrelevanceEqR‚Ä≤ PE.refl p A‚â°B = A‚â°B

  -- Helper for irrelevance of type equality using shape view
  irrelevanceEqT : ‚àÄ {A B l l‚Ä≤} {p : Œì ‚ä©‚ü® l ‚ü© A} {q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A}
                       ‚Üí ShapeView Œì l l‚Ä≤ A A p q
                       ‚Üí Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / q
  irrelevanceEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (Empty·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (Unit·µ• (Unit·µ£ _ _ A‚áí*Unit‚ÇÅ _) (Unit·µ£ _ _ A‚áí*Unit‚ÇÇ _)) A‚â°B =
    case Unit-PE-injectivity $
         whrDet* (A‚áí*Unit‚ÇÅ , Unit‚Çô) (A‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    A‚â°B }
  irrelevanceEqT
    (ne (ne _ D neK _) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå M D‚Ä≤ neM K‚â°M)
    rewrite whrDet* (D , ne-whnf neK) (D‚ÇÅ , ne-whnf neK‚ÇÅ) =
    ne‚Çå M D‚Ä≤ neM K‚â°M
  irrelevanceEqT
    {Œì}
    (B·µ• W (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
    let Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ       = whrDet* (D , ‚ü¶ W ‚üß‚Çô) (D‚ÇÅ , ‚ü¶ W ‚üß‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity W W Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ
    in  B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤
           (PE.subst (Œª x ‚Üí Œì ‚ä¢ x ‚âÖ ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ A‚â°B)
           (Œª [Œæ] {_} {œÅ} [œÅ] ‚Üí irrelevanceEq‚Ä≤ (PE.cong (wk œÅ) F‚â°F‚ÇÅ)
                              ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ]))
           (Œª [Œæ] {_} {œÅ} [œÅ] [a]‚ÇÅ ‚Üí
              let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                         ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a]‚ÇÅ
              in  irrelevanceEq‚Ä≤ (PE.cong (Œª y ‚Üí wk (lift œÅ) y [ _ ]) G‚â°G‚ÇÅ)
                    ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a]))
  irrelevanceEqT (U·µ• (U·µ£ _ _ D1) (U·µ£ _ _ D2)) A‚â°B
    rewrite whrDet* (D1 , U‚Çô) (D2 , U‚Çô) = A‚â°B
  irrelevanceEqT (Id·µ• ‚ä©A@record{} ‚ä©A‚Ä≤) A‚â°B =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A , Id‚Çô) (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    record
      { ‚áí*Id‚Ä≤    = ‚áí*Id‚Ä≤
      ; Ty‚â°Ty‚Ä≤   = irrelevanceEq (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) Ty‚â°Ty‚Ä≤
      ; lhs‚â°lhs‚Ä≤ =
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) lhs‚â°lhs‚Ä≤
      ; rhs‚â°rhs‚Ä≤ =
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) rhs‚â°rhs‚Ä≤
      ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ =
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) ‚àò‚Üí
          lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ ‚àò‚Üí
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
      ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs =
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) ‚àò‚Üí
          lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs ‚àò‚Üí
          irrelevanceEqTerm (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
      } }
    where
    open _‚ä©‚ÇóId_‚â°_/_ A‚â°B

--------------------------------------------------------------------------------

  -- Irrelevance for terms
  irrelevanceTerm : ‚àÄ {A t l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / q
  irrelevanceTerm p q t = irrelevanceEqTerm p q t

  -- Irrelevance for terms with propositionally equal types
  irrelevanceTerm‚Ä≤ : ‚àÄ {A A‚Ä≤ t l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                     (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                   ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A‚Ä≤ / q
  irrelevanceTerm‚Ä≤ PE.refl p q t = irrelevanceTerm p q t

  -- Irrelevance for terms with propositionally equal types and terms
  irrelevanceTerm‚Ä≥ : ‚àÄ {A A‚Ä≤ t t‚Ä≤ l l‚Ä≤}
                      (eqA : A PE.‚â° A‚Ä≤) (eqt : t PE.‚â° t‚Ä≤)
                      (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                    ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ A‚Ä≤ / q
  irrelevanceTerm‚Ä≥ PE.refl PE.refl p q t = irrelevanceTerm p q t

--------------------------------------------------------------------------------

  -- Irrelevance for term equality
  irrelevanceEqTerm : ‚àÄ {A t u l l‚Ä≤} (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                    ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / q
  irrelevanceEqTerm p q t‚â°u = irrelevanceEqTermT (goodCasesRefl p q) t‚â°u

  -- Irrelevance for term equality with propositionally equal types
  irrelevanceEqTerm‚Ä≤ : ‚àÄ {A A‚Ä≤ t u l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                       (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                     ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A‚Ä≤ / q
  irrelevanceEqTerm‚Ä≤ PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Irrelevance for term equality with propositionally equal types and terms
  irrelevanceEqTerm‚Ä≥ : ‚àÄ {A A‚Ä≤ t t‚Ä≤ u u‚Ä≤ l l‚Ä≤}
                        (eqt : t PE.‚â° t‚Ä≤) (equ : u PE.‚â° u‚Ä≤) (eqA : A PE.‚â° A‚Ä≤)
                        (p : Œì ‚ä©‚ü® l ‚ü© A) (q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                      ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚â° u‚Ä≤ ‚à∑ A‚Ä≤ / q
  irrelevanceEqTerm‚Ä≥ PE.refl PE.refl PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Helper for irrelevance of term equality using shape view
  irrelevanceEqTermT : ‚àÄ {A t u} {l l‚Ä≤} {p : Œì ‚ä©‚ü® l ‚ü© A} {q : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A}
                           ‚Üí ShapeView Œì l l‚Ä≤ A A p q
                           ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / q
  irrelevanceEqTermT (‚Ñï·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (Empty·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (Unit·µ• (Unit·µ£ _ _ A‚áí*Unit‚ÇÅ _) (Unit·µ£ _ _ A‚áí*Unit‚ÇÇ _)) t‚â°u =
    case Unit-PE-injectivity $
         whrDet* (A‚áí*Unit‚ÇÅ , Unit‚Çô) (A‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    t‚â°u }
  irrelevanceEqTermT
    (ne (ne _ D neK K‚â°K) (ne K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú‚Çå k m d d‚Ä≤ prop)
    with whrDet* (D‚ÇÅ , ne-whnf neK‚ÇÅ) (D , ne-whnf neK)
  ‚Ä¶ | PE.refl = ne‚Çú‚Çå k m d d‚Ä≤ prop
  irrelevanceEqTermT
    {Œì} {t} {u}
    (B·µ• BŒ†! x@(B·µ£ F G D A‚â°A [F] [G] G-ext _)
       x‚ÇÅ@(B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f‚â°g]) =
    case B-PE-injectivity BŒ†! BŒ†!
           (whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)) of Œª where
      (PE.refl , PE.refl , _) ‚Üí
        Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g
        Œª [Œæ] [œÅ] ‚ä©v ‚ä©w v‚â°w ‚Üí
          let ‚ä©v‚Ä≤ = irrelevanceTerm ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) ‚ä©v in
          irrelevanceEqTerm ([G] [Œæ] [œÅ] ‚ä©v‚Ä≤) ([G]‚ÇÅ [Œæ] [œÅ] ‚ä©v) $
          [f‚â°g] [Œæ] [œÅ] ‚ä©v‚Ä≤
            (irrelevanceTerm ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) ‚ä©w)
            (irrelevanceEqTerm ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) v‚â°w)
  irrelevanceEqTermT
    {Œì} {t} {u}
    (B·µ• BŒ£À¢ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr ([fstp] , [fstr] , [fst‚â°] , [snd‚â°])) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [fstp]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fstp]
        [fstr]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fstr]
        [fst‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fst‚â°]
        [snd‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤
                    (PE.cong (Œª x ‚Üí wk (lift id) x [ fst _ p ]‚ÇÄ) G‚â°G‚ÇÅ)
                    ([G] _ _ [fstp]) ([G]‚ÇÅ _ _ [fstp]‚Ä≤) [snd‚â°]
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) pProd rProd
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            ([fstp]‚Ä≤ , [fstr]‚Ä≤ , [fst‚â°]‚Ä≤ ,  [snd‚â°]‚Ä≤)
  irrelevanceEqTermT
    {Œì} {t} {u}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô prod‚Çô p‚âÖr
       (PE.refl , PE.refl , PE.refl , PE.refl ,
        [p‚ÇÅ] , [r‚ÇÅ] , [fst‚â°] , [snd‚â°])) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [p‚ÇÅ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                  ([F] _ _) ([F]‚ÇÅ _ _) [p‚ÇÅ]
        [r‚ÇÅ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                  ([F] _ _) ([F]‚ÇÅ _ _) [r‚ÇÅ]
        [fst‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fst‚â°]
        [snd‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift id) x [ _ ]‚ÇÄ) G‚â°G‚ÇÅ)
                    ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚Ä≤) [snd‚â°]
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) prod‚Çô prod‚Çô
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            (PE.refl , PE.refl , PE.refl , PE.refl ,
             [p‚ÇÅ]‚Ä≤ , [r‚ÇÅ]‚Ä≤ , [fst‚â°]‚Ä≤ ,  [snd‚â°]‚Ä≤)
  irrelevanceEqTermT
    {Œì} {t} {u}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne y) p‚âÖr p~r) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        p~r‚Ä≤ = PE.subst (Œª x ‚Üí Œì ‚ä¢ p ~ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p~r
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) (ne x) (ne y)
            (PE.subst (Œª x ‚Üí Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            p~r‚Ä≤
  irrelevanceEqTermT
    (B·µ• BŒ£ ∑ record{} _) (Œ£‚Çú‚Çå _ _ _ _ prod‚Çô (ne _) _ (lift ()))
  irrelevanceEqTermT
    (B·µ• BŒ£ ∑ record{} _) (Œ£‚Çú‚Çå _ _ _ _ (ne _) prod‚Çô _ (lift ()))
  irrelevanceEqTermT (U·µ• (U·µ£ _ l<1 ‚áí*U1) (U·µ£ _ l<2 ‚áí*U2))
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u])
    with whrDet* (‚áí*U1 , U‚Çô) (‚áí*U2 ,  U‚Çô)
  irrelevanceEqTermT (U·µ• (U·µ£ _ l<1 ‚áí*U1) (U·µ£ _ l<2 ‚áí*U2))
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) | PE.refl =
    U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ (irrelevance-‚ä©< l<1 l<2 [u])
      (irrelevance-‚ä©<‚â° l<1 l<2 [t‚â°u])
  irrelevanceEqTermT
    (Id·µ• ‚ä©A@record{} ‚ä©A‚Ä≤) t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
    case whrDet* (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A , Id‚Çô) (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
      _ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤
    , (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
         (ne t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
           ne t‚Ä≤-n , ne u‚Ä≤-n , t‚Ä≤~u‚Ä≤
         (rfl‚Çå lhs‚â°rhs) ‚Üí
             rfl‚Çô , rfl‚Çô
           , irrelevanceEqTerm
               (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) lhs‚â°rhs) }
