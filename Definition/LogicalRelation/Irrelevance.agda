------------------------------------------------------------------------
-- Irrelevance lemmata for the logical relation
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality


module Definition.LogicalRelation.Irrelevance
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M hiding (Wk; K)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Properties.Kit R
open import Definition.LogicalRelation.ShapeView R

open import Tools.Function
open import Tools.Level
open import Tools.Nat hiding (_<_)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    m n : Nat
    ‚àá : DCon (Term 0) m
    Œì Œì‚Ä≤ : Con Term n
    A A‚Ä≤ B B‚Ä≤ C C‚Ä≤ : Term _
    l l‚Ä≤ : Universe-level

-- Irrelevance for propositionally equal types
irrelevance‚Ä≤ : ‚àÄ {A A‚Ä≤ l}
             ‚Üí A PE.‚â° A‚Ä≤
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A
             ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A‚Ä≤
irrelevance‚Ä≤ PE.refl [A] = [A]

-- Irrelevance for propositionally equal types and contexts
irrelevanceŒì‚Ä≤ : ‚àÄ {l A A‚Ä≤}
              ‚Üí Œì PE.‚â° Œì‚Ä≤
              ‚Üí A PE.‚â° A‚Ä≤
              ‚Üí ‚àá ¬ª Œì  ‚ä©‚ü® l ‚ü© A
              ‚Üí ‚àá ¬ª Œì‚Ä≤ ‚ä©‚ü® l ‚ü© A‚Ä≤
irrelevanceŒì‚Ä≤ PE.refl PE.refl [A] = [A]

mutual
  -- Irrelevance for type equality
  irrelevanceEq : ‚àÄ {A B l l‚Ä≤} (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / q
  irrelevanceEq p q A‚â°B = irrelevanceEqT (goodCasesRefl p q) A‚â°B

  -- Irrelevance for type equality with propositionally equal first types
  irrelevanceEq‚Ä≤ : ‚àÄ {A A‚Ä≤ B l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                   (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                 ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B / q
  irrelevanceEq‚Ä≤ PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal types
  irrelevanceEq‚Ä≥ : ‚àÄ {A A‚Ä≤ B B‚Ä≤ l l‚Ä≤} (eqA : A PE.‚â° A‚Ä≤) (eqB : B PE.‚â° B‚Ä≤)
                    (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                  ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B‚Ä≤ / q
  irrelevanceEq‚Ä≥ PE.refl PE.refl p q A‚â°B = irrelevanceEq p q A‚â°B

  -- Irrelevance for type equality with propositionally equal second types
  irrelevanceEqR‚Ä≤ : ‚àÄ {A B B‚Ä≤ l} (eqB : B PE.‚â° B‚Ä≤) (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A)
                  ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B‚Ä≤ / p
  irrelevanceEqR‚Ä≤ PE.refl p A‚â°B = A‚â°B

  -- Irrelevance for type equality with propositionally equal types
  -- and contexts.
  irrelevanceEq‚Ä¥ :
    A PE.‚â° A‚Ä≤ ‚Üí B PE.‚â° B‚Ä≤ ‚Üí Œì PE.‚â° Œì‚Ä≤ ‚Üí
    (‚ä©A : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (‚ä©A‚Ä≤ : ‚àá ¬ª Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤) ‚Üí
    ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚ä©A ‚Üí ‚àá ¬ª Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤ ‚â° B‚Ä≤ / ‚ä©A‚Ä≤
  irrelevanceEq‚Ä¥ PE.refl PE.refl PE.refl = irrelevanceEq

  -- Helper for irrelevance of type equality using shape view
  irrelevanceEqT : ‚àÄ {A B l l‚Ä≤} {p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A}
                       ‚Üí ShapeView ‚àá Œì l l‚Ä≤ A A p q
                       ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A ‚â° B / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B / q
  irrelevanceEqT (‚Ñï·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (Empty·µ• D D‚Ä≤) A‚â°B = A‚â°B
  irrelevanceEqT (Unit·µ• (Unit‚Çú A‚áí*Unit‚ÇÅ _) (Unit‚Çú A‚áí*Unit‚ÇÇ _)) A‚â°B =
    case Unit-PE-injectivity $
         whrDet* (A‚áí*Unit‚ÇÅ , Unit‚Çô) (A‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    A‚â°B }
  irrelevanceEqT
    (ne (ne _ _ D neK _) (ne _ K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çå inc M D‚Ä≤ neM K‚â°M)
    rewrite whrDet* (D , ne neK) (D‚ÇÅ , ne neK‚ÇÅ) =
    ne‚Çå inc M D‚Ä≤ neM K‚â°M
  irrelevanceEqT
    {‚àá = ‚àá} {Œì = Œì}
    (B·µ• W (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
    let Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ       = whrDet* (D , ‚ü¶ W ‚üß‚Çô) (D‚ÇÅ , ‚ü¶ W ‚üß‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity W W Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ
    in  B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤
           (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ x ‚âÖ ‚ü¶ W ‚üß F‚Ä≤ ‚ñπ G‚Ä≤) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ A‚â°B)
           (Œª [Œæ] {_} {œÅ} [œÅ] ‚Üí irrelevanceEq‚Ä≤ (PE.cong (wk œÅ) F‚â°F‚ÇÅ)
                              ([F] [Œæ] [œÅ]) ([F]‚ÇÅ [Œæ] [œÅ]) ([F‚â°F‚Ä≤] [Œæ] [œÅ]))
           (Œª [Œæ] {_} {œÅ} [œÅ] [a]‚ÇÅ ‚Üí
              let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                         ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a]‚ÇÅ
              in  irrelevanceEq‚Ä≤ (PE.cong (Œª y ‚Üí wk (lift œÅ) y [ _ ]) G‚â°G‚ÇÅ)
                    ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ) ([G‚â°G‚Ä≤] [Œæ] [œÅ] [a]))
  irrelevanceEqT (U·µ• (U·µ£ _ _ D1) (U·µ£ _ _ D2)) A‚â°B
    rewrite whrDet* (D1 , U‚Çô) (D2 , U‚Çô) = A‚â°B
  irrelevanceEqT (Id·µ• ‚ä©A@record{} ‚ä©A‚Ä≤) A‚â°B =
    case whrDet* (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A , Id‚Çô) (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
    record
      { ‚áí*Id‚Ä≤    = ‚áí*Id‚Ä≤
      ; Ty‚â°Ty‚Ä≤   = irrelevanceEq (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) Ty‚â°Ty‚Ä≤
      ; lhs‚â°lhs‚Ä≤ =
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) lhs‚â°lhs‚Ä≤
      ; rhs‚â°rhs‚Ä≤ =
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) rhs‚â°rhs‚Ä≤
      ; lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ =
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) ‚àò‚Üí
          lhs‚â°rhs‚Üílhs‚Ä≤‚â°rhs‚Ä≤ ‚àò‚Üí
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
      ; lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs =
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) ‚àò‚Üí
          lhs‚Ä≤‚â°rhs‚Ä≤‚Üílhs‚â°rhs ‚àò‚Üí
          irrelevanceEqTerm (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A)
      } }
    where
    open _¬ª_‚ä©‚ÇóId_‚â°_/_ A‚â°B
  irrelevanceEqT (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°A) = irrelevanceEqT          A‚â°A
  irrelevanceEqT (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°A) = irrelevanceEqT (emb·µ•‚ÇÅ p A‚â°A)
  irrelevanceEqT (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°A) = irrelevanceEqT          A‚â°A
  irrelevanceEqT (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°A) = irrelevanceEqT (emb·µ•‚ÇÇ p A‚â°A)

--------------------------------------------------------------------------------

  -- Irrelevance for terms
  irrelevanceTerm : ‚àÄ {A t l l‚Ä≤} (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                  ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / q
  irrelevanceTerm p q t = irrelevanceTermT (goodCasesRefl p q) t

  -- Irrelevance for terms with propositionally equal types
  irrelevanceTerm‚Ä≤ : ‚àÄ {A A‚Ä≤ t l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                     (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                   ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A‚Ä≤ / q
  irrelevanceTerm‚Ä≤ PE.refl p q t = irrelevanceTerm p q t

  -- Irrelevance for terms with propositionally equal types and terms
  irrelevanceTerm‚Ä≥ : ‚àÄ {A A‚Ä≤ t t‚Ä≤ l l‚Ä≤}
                      (eqA : A PE.‚â° A‚Ä≤) (eqt : t PE.‚â° t‚Ä≤)
                      (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                    ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ A‚Ä≤ / q
  irrelevanceTerm‚Ä≥ PE.refl PE.refl p q t = irrelevanceTerm p q t

  -- Irrelevance for terms with propositionally equal types, terms and contexts
  irrelevanceTermŒì‚Ä≥ : ‚àÄ {l l‚Ä≤ A A‚Ä≤ t t‚Ä≤}
                     ‚Üí Œì PE.‚â° Œì‚Ä≤
                     ‚Üí A PE.‚â° A‚Ä≤
                     ‚Üí t PE.‚â° t‚Ä≤
                     ‚Üí ([A]  : ‚àá ¬ª Œì  ‚ä©‚ü® l  ‚ü© A)
                       ([A‚Ä≤] : ‚àá ¬ª Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                     ‚Üí ‚àá ¬ª Œì  ‚ä©‚ü® l  ‚ü© t ‚à∑ A  / [A]
                     ‚Üí ‚àá ¬ª Œì‚Ä≤ ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ A‚Ä≤ / [A‚Ä≤]
  irrelevanceTermŒì‚Ä≥ PE.refl PE.refl PE.refl [A] [A‚Ä≤] [t] = irrelevanceTerm [A] [A‚Ä≤] [t]

  -- Helper for irrelevance of terms using shape view
  irrelevanceTermT : ‚àÄ {A t l l‚Ä≤} {p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A}
                         ‚Üí ShapeView ‚àá Œì l l‚Ä≤ A A p q
                         ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / q
  irrelevanceTermT (‚Ñï·µ• D D‚Ä≤) t = t
  irrelevanceTermT (Empty·µ• D D‚Ä≤) t = t
  irrelevanceTermT (Unit·µ• (Unit‚Çú A‚áí*Unit‚ÇÅ _) (Unit‚Çú A‚áí*Unit‚ÇÇ _)) ‚ä©t =
    case Unit-PE-injectivity $
         whrDet* (A‚áí*Unit‚ÇÅ , Unit‚Çô) (A‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    ‚ä©t }
  irrelevanceTermT
    (ne (ne _ _ D neK K‚â°K) (ne _ K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú k d nf)
    with whrDet* (D‚ÇÅ , ne neK‚ÇÅ) (D , ne neK)
  ‚Ä¶ | PE.refl = ne‚Çú k d nf
  irrelevanceTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t}
    (B·µ• BŒ†! (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ†‚Çú f d funcF f‚â°f [f] [f]‚ÇÅ) =
    case whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô) of Œª
      Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ ‚Üí
    case B-PE-injectivity BŒ†! BŒ†! Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ of Œª
      (F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _) ‚Üí
        Œ†‚Çú f (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* f ‚à∑ x) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ d) funcF
           (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢‚âÖ f ‚à∑ x) Œ†FG‚â°Œ†F‚ÇÅG‚ÇÅ f‚â°f)
           (Œª [Œæ] {_} {œÅ} {Œî} {a} {b} [œÅ] [a]‚ÇÅ [b]‚ÇÅ [a‚â°b]‚ÇÅ ‚Üí
             let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                        ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a]‚ÇÅ
                 [b] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                        ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [b]‚ÇÅ
                 [a‚â°b] = irrelevanceEqTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                            ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a‚â°b]‚ÇÅ
             in  irrelevanceEqTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift œÅ) G [ _ ]) G‚â°G‚ÇÅ)
                                    ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ)
                                    ([f] [Œæ] [œÅ] [a] [b] [a‚â°b]))
           Œª [Œæ] {_} {œÅ} {Œî} {a} [œÅ] [a]‚ÇÅ ‚Üí
             let [a] = irrelevanceTerm‚Ä≤ (PE.cong (wk œÅ) (PE.sym F‚â°F‚ÇÅ))
                                        ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a]‚ÇÅ
             in  irrelevanceTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift œÅ) G [ _ ]) G‚â°G‚ÇÅ)
                                  ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ)
                                  ([f]‚ÇÅ [Œæ] [œÅ] [a])
  irrelevanceTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t}
    (B·µ• BŒ£À¢ (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ£‚Çú p d p‚âÖp pProd ([fstt] , [sndt])) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [fstt]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ) ([F] _ _)
                                 ([F]‚ÇÅ _ _) [fstt]
        [sndt]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift id) x [ _ ]) G‚â°G‚ÇÅ)
                                 ([G] _ _ [fstt]) ([G]‚ÇÅ _ _ [fstt]‚Ä≤) [sndt]
    in  Œ£‚Çú p (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
           (PE.subst (Œª x ‚Üí  ‚àá ¬ª Œì ‚ä¢‚âÖ p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖp) pProd
           ([fstt]‚Ä≤ , [sndt]‚Ä≤)
  irrelevanceTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ£‚Çú p d p‚âÖp prod‚Çô (PE.refl , [t‚ÇÅ] , [t‚ÇÇ] , PE.refl)) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [t‚ÇÅ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ) ([F] _ _) ([F]‚ÇÅ _ _)
                  [t‚ÇÅ]
        [t‚ÇÇ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift id) x [ _ ]) G‚â°G‚ÇÅ)
                                 ([G] _ _ [t‚ÇÅ]) ([G]‚ÇÅ _ _ [t‚ÇÅ]‚Ä≤) [t‚ÇÇ]
    in  Œ£‚Çú p (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
          (PE.subst (Œª x ‚Üí  ‚àá ¬ª Œì ‚ä¢‚âÖ p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖp) prod‚Çô
          (PE.refl , [t‚ÇÅ]‚Ä≤ , [t‚ÇÇ]‚Ä≤ , PE.refl)
  irrelevanceTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext _)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ£‚Çú p d p‚âÖp (ne x) (inc , p~p)) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
    in  Œ£‚Çú p (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
           (PE.subst (Œª x ‚Üí  ‚àá ¬ª Œì ‚ä¢‚âÖ p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖp) (ne x)
           (inc , PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢~ p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p~p)
  irrelevanceTermT (U·µ• (U·µ£ _ l<1 ‚áí*U1) (U·µ£ _ l<2 ‚áí*U2)) (U‚Çú A d typeA A‚â°A [t]) with whrDet* (‚áí*U1 , U‚Çô) (‚áí*U2 ,  U‚Çô)
  irrelevanceTermT (U·µ• (U·µ£ _ l<1 _) (U·µ£ _ l<2 _)) (U‚Çú A d typeA A‚â°A [t])
    | PE.refl =
    U‚Çú A d typeA A‚â°A (irrelevance-‚ä©< l<1 l<2 [t])

  irrelevanceTermT (Id·µ• ‚ä©A@record{} ‚ä©A‚Ä≤) ‚ä©t@(_ , t‚áí*u , _) =
    case whrDet* (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A , Id‚Çô) (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
      _
    , t‚áí*u
    , (case ‚ä©Id‚à∑-view-inhabited ‚ä©t of Œª where
         (ne inc u-n u~u) ‚Üí ne u-n , inc , u~u
         (rfl·µ£ lhs‚â°rhs)   ‚Üí
             rfl‚Çô
           , irrelevanceEqTerm
               (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) lhs‚â°rhs) }
  irrelevanceTermT (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°A) = irrelevanceTermT          A‚â°A
  irrelevanceTermT (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°A) = irrelevanceTermT (emb·µ•‚ÇÅ p A‚â°A)
  irrelevanceTermT (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°A) = irrelevanceTermT          A‚â°A
  irrelevanceTermT (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°A) = irrelevanceTermT (emb·µ•‚ÇÇ p A‚â°A)

--------------------------------------------------------------------------------

  -- Irrelevance for term equality
  irrelevanceEqTerm : ‚àÄ {A t u l l‚Ä≤} (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                    ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / q
  irrelevanceEqTerm p q t‚â°u = irrelevanceEqTermT (goodCasesRefl p q) t‚â°u

  -- Irrelevance for term equality with propositionally equal types
  irrelevanceEqTerm‚Ä≤ : ‚àÄ {A A‚Ä≤ t u l l‚Ä≤} (eq : A PE.‚â° A‚Ä≤)
                       (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                     ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A‚Ä≤ / q
  irrelevanceEqTerm‚Ä≤ PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Irrelevance for term equality with propositionally equal types and terms
  irrelevanceEqTerm‚Ä≥ : ‚àÄ {A A‚Ä≤ t t‚Ä≤ u u‚Ä≤ l l‚Ä≤}
                        (eqt : t PE.‚â° t‚Ä≤) (equ : u PE.‚â° u‚Ä≤) (eqA : A PE.‚â° A‚Ä≤)
                        (p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A) (q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                      ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚â° u‚Ä≤ ‚à∑ A‚Ä≤ / q
  irrelevanceEqTerm‚Ä≥ PE.refl PE.refl PE.refl p q t‚â°u = irrelevanceEqTerm p q t‚â°u

  -- Helper for irrelevance of term equality using shape view
  irrelevanceEqTermT : ‚àÄ {A t u} {l l‚Ä≤} {p : ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© A} {q : ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A}
                           ‚Üí ShapeView ‚àá Œì l l‚Ä≤ A A p q
                           ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / p ‚Üí ‚àá ¬ª Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ A / q
  irrelevanceEqTermT (‚Ñï·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (Empty·µ• D D‚Ä≤) t‚â°u = t‚â°u
  irrelevanceEqTermT (Unit·µ• (Unit‚Çú A‚áí*Unit‚ÇÅ _) (Unit‚Çú A‚áí*Unit‚ÇÇ _)) t‚â°u =
    case Unit-PE-injectivity $
         whrDet* (A‚áí*Unit‚ÇÅ , Unit‚Çô) (A‚áí*Unit‚ÇÇ , Unit‚Çô) of Œª {
      (_ , PE.refl) ‚Üí
    t‚â°u }
  irrelevanceEqTermT
    (ne (ne _ _ D neK K‚â°K) (ne _ K‚ÇÅ D‚ÇÅ neK‚ÇÅ K‚â°K‚ÇÅ)) (ne‚Çú‚Çå k m d d‚Ä≤ nf)
    with whrDet* (D‚ÇÅ , ne neK‚ÇÅ) (D , ne neK)
  ‚Ä¶ | PE.refl = ne‚Çú‚Çå k m d d‚Ä≤ nf
  irrelevanceEqTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t} {u = u}
    (B·µ• BŒ†! x@(B·µ£ F G D A‚â°A [F] [G] G-ext _)
       x‚ÇÅ@(B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ _))
    (Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f] [g] [f‚â°g]) =
    case irrelevanceTerm (B·µ£ BŒ†! x) (B·µ£ BŒ†! x‚ÇÅ) [f] of Œª [f]‚Ä≤ ‚Üí
    case irrelevanceTerm (B·µ£ BŒ†! x) (B·µ£ BŒ†! x‚ÇÅ) [g] of Œª [g]‚Ä≤ ‚Üí
    case B-PE-injectivity BŒ†! BŒ†!
           (whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)) of Œª where
      (PE.refl , PE.refl , _) ‚Üí
        Œ†‚Çú‚Çå f g d d‚Ä≤ funcF funcG f‚â°g [f]‚Ä≤ [g]‚Ä≤
        Œª [Œæ] {_} {œÅ} {Œî} {a} [œÅ] [a]‚ÇÅ ‚Üí
          let [a] = irrelevanceTerm ([F]‚ÇÅ [Œæ] [œÅ]) ([F] [Œæ] [œÅ]) [a]‚ÇÅ in
          irrelevanceEqTerm ([G] [Œæ] [œÅ] [a]) ([G]‚ÇÅ [Œæ] [œÅ] [a]‚ÇÅ)
            ([f‚â°g] [Œæ] [œÅ] [a])
  irrelevanceEqTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t} {u = u}
    (B·µ• BŒ£À¢ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ pProd rProd p‚âÖr [t] [u]
       ([fstp] , [fstr] , [fst‚â°] , [snd‚â°])) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [A]             = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [A]‚ÇÅ            = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ
        [fstp]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fstp]
        [fstr]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fstr]
        [fst‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fst‚â°]
        [snd‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤
                    (PE.cong (Œª x ‚Üí wk (lift id) x [ fst _ p ]‚ÇÄ) G‚â°G‚ÇÅ)
                    ([G] _ _ [fstp]) ([G]‚ÇÅ _ _ [fstp]‚Ä≤) [snd‚â°]
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) pProd rProd
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            (irrelevanceTerm [A] [A]‚ÇÅ [t]) (irrelevanceTerm [A] [A]‚ÇÅ [u])
            ([fstp]‚Ä≤ , [fstr]‚Ä≤ , [fst‚â°]‚Ä≤ ,  [snd‚â°]‚Ä≤)
  irrelevanceEqTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t} {u = u}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ prod‚Çô prod‚Çô p‚âÖr [t] [u]
       (PE.refl , PE.refl ,
        [p‚ÇÅ] , [r‚ÇÅ] , [p‚ÇÇ] , [r‚ÇÇ] , [fst‚â°] , [snd‚â°])) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [A]             = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [A]‚ÇÅ            = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
                            ok‚ÇÅ
        [p‚ÇÅ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                  ([F] _ _) ([F]‚ÇÅ _ _) [p‚ÇÅ]
        [r‚ÇÅ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                  ([F] _ _) ([F]‚ÇÅ _ _) [r‚ÇÅ]
        [p‚ÇÇ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift id) G [ _ ]‚ÇÄ) G‚â°G‚ÇÅ)
                  ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚Ä≤) [p‚ÇÇ]
        [r‚ÇÇ]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (Œª G ‚Üí wk (lift id) G [ _ ]‚ÇÄ) G‚â°G‚ÇÅ)
                  ([G] _ _ [r‚ÇÅ]) ([G]‚ÇÅ _ _ [r‚ÇÅ]‚Ä≤) [r‚ÇÇ]
        [fst‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (wk id) F‚â°F‚ÇÅ)
                    ([F] _ _) ([F]‚ÇÅ _ _) [fst‚â°]
        [snd‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.cong (Œª x ‚Üí wk (lift id) x [ _ ]‚ÇÄ) G‚â°G‚ÇÅ)
                    ([G] _ _ [p‚ÇÅ]) ([G]‚ÇÅ _ _ [p‚ÇÅ]‚Ä≤) [snd‚â°]
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) prod‚Çô prod‚Çô
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            (irrelevanceTerm [A] [A]‚ÇÅ [t]) (irrelevanceTerm [A] [A]‚ÇÅ [u])
            (PE.refl , PE.refl ,
             [p‚ÇÅ]‚Ä≤ , [r‚ÇÅ]‚Ä≤ , [p‚ÇÇ]‚Ä≤ , [r‚ÇÇ]‚Ä≤ , [fst‚â°]‚Ä≤ ,  [snd‚â°]‚Ä≤)
  irrelevanceEqTermT
    {‚àá = ‚àá} {Œì = Œì} {t = t} {u = u}
    (B·µ• BŒ£ ∑ (B·µ£ F G D A‚â°A [F] [G] G-ext ok)
       (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ ok‚ÇÅ))
    (Œ£‚Çú‚Çå p r d d‚Ä≤ (ne x) (ne y) p‚âÖr [t] [u] (inc , p~r)) =
    let Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ       = whrDet* (D , Œ†Œ£‚Çô) (D‚ÇÅ , Œ†Œ£‚Çô)
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = B-PE-injectivity BŒ£! BŒ£! Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ
        [A]             = B·µ£‚Ä≤ BŒ£! F G D A‚â°A [F] [G] G-ext ok
        [A]‚ÇÅ            = B·µ£‚Ä≤ BŒ£! F‚ÇÅ G‚ÇÅ D‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ
                            ok‚ÇÅ
        p~r‚Ä≤ = PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ p ~ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p~r
    in  Œ£‚Çú‚Çå p r (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ t ‚áí* p ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d)
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ u ‚áí* r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ d‚Ä≤) (ne x) (ne y)
            (PE.subst (Œª x ‚Üí ‚àá ¬ª Œì ‚ä¢ p ‚âÖ r ‚à∑ x) Œ£FG‚â°Œ£F‚ÇÅG‚ÇÅ p‚âÖr)
            (irrelevanceTerm [A] [A]‚ÇÅ [t]) (irrelevanceTerm [A] [A]‚ÇÅ [u])
            (inc , p~r‚Ä≤)
  irrelevanceEqTermT
    (B·µ• BŒ£ ∑ record{} _) (Œ£‚Çú‚Çå _ _ _ _ prod‚Çô (ne _) _ _ _ (lift ()))
  irrelevanceEqTermT
    (B·µ• BŒ£ ∑ record{} _) (Œ£‚Çú‚Çå _ _ _ _ (ne _) prod‚Çô _ _ _ (lift ()))
  irrelevanceEqTermT (U·µ• (U·µ£ _ l<1 ‚áí*U1) (U·µ£ _ l<2 ‚áí*U2))
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u])
    with whrDet* (‚áí*U1 , U‚Çô) (‚áí*U2 ,  U‚Çô)
  irrelevanceEqTermT (U·µ• (U·µ£ _ l<1 ‚áí*U1) (U·µ£ _ l<2 ‚áí*U2))
    (U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B [t] [u] [t‚â°u]) | PE.refl =
    U‚Çú‚Çå A B d d‚Ä≤ typeA typeB A‚â°B _ (irrelevance-‚ä©< l<1 l<2 [u])
      (irrelevance-‚ä©<‚â° l<1 l<2 [t‚â°u])
  irrelevanceEqTermT
    (Id·µ• ‚ä©A@record{} ‚ä©A‚Ä≤) t‚â°u@(_ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤ , _) =
    case whrDet* (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A , Id‚Çô) (_¬ª_‚ä©‚ÇóId_.‚áí*Id ‚ä©A‚Ä≤ , Id‚Çô) of Œª {
      PE.refl ‚Üí
      _ , _ , t‚áí*t‚Ä≤ , u‚áí*u‚Ä≤
    , (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©A t‚â°u of Œª where
         (ne inc t‚Ä≤-n u‚Ä≤-n t‚Ä≤~u‚Ä≤) ‚Üí
           ne t‚Ä≤-n , ne u‚Ä≤-n , inc , t‚Ä≤~u‚Ä≤
         (rfl‚Çå lhs‚â°rhs) ‚Üí
             rfl‚Çô , rfl‚Çô
           , irrelevanceEqTerm
               (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A) (_¬ª_‚ä©‚ÇóId_.‚ä©Ty ‚ä©A‚Ä≤) lhs‚â°rhs) }
  irrelevanceEqTermT (emb·µ•‚ÇÅ ‚â§·µò-refl     A‚â°A) = irrelevanceEqTermT          A‚â°A
  irrelevanceEqTermT (emb·µ•‚ÇÅ (‚â§·µò-step p) A‚â°A) = irrelevanceEqTermT (emb·µ•‚ÇÅ p A‚â°A)
  irrelevanceEqTermT (emb·µ•‚ÇÇ ‚â§·µò-refl     A‚â°A) = irrelevanceEqTermT          A‚â°A
  irrelevanceEqTermT (emb·µ•‚ÇÇ (‚â§·µò-step p) A‚â°A) = irrelevanceEqTermT (emb·µ•‚ÇÇ p A‚â°A)
