------------------------------------------------------------------------
-- Validity for natural numbers
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Nat
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import
  Definition.LogicalRelation.Substitution.Introductions.Universe R
open import Definition.LogicalRelation.Substitution.Introductions.Var R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction.Primitive R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
import Tools.Reasoning.PropositionalEquality

private variable
  Œì Œî                               : Con Term _
  A A‚ÇÅ A‚ÇÇ B t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ : Term _
  œÉ‚ÇÅ œÉ‚ÇÇ                             : Subst _ _
  l l‚Ä≤ l‚Ä≥ l‚Ä¥                        : TypeLevel
  p q r                             : M

------------------------------------------------------------------------
-- Characterisation lemmas

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©‚Ñï‚áî : Œì ‚ä©‚ü® l ‚ü© ‚Ñï ‚áî ‚ä¢ Œì
  ‚ä©‚Ñï‚áî =
      lemma ‚àò‚Üí ‚Ñï-elim
    , (Œª ‚ä¢Œì ‚Üí ‚Ñï·µ£ ([_,_,_] (‚Ñï‚±º ‚ä¢Œì) (‚Ñï‚±º ‚ä¢Œì) (id (‚Ñï‚±º ‚ä¢Œì))))
    where
    lemma : Œì ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï ‚Üí ‚ä¢ Œì
    lemma (emb 0<1 ‚ä©‚Ñï)           = lemma ‚ä©‚Ñï
    lemma (noemb [ ‚ä¢‚Ñï , _ , _ ]) = wf ‚ä¢‚Ñï

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚Ñï‚à∑U‚áî : Œì ‚ä©‚ü® ¬π ‚ü© ‚Ñï ‚à∑ U ‚áî ‚ä¢ Œì
  ‚ä©‚Ñï‚à∑U‚áî =
      (Œª ‚ä©‚Ñï ‚Üí
         case ‚ä©‚à∑U‚áî .proj‚ÇÅ ‚ä©‚Ñï of Œª
           (_ , _ , ‚Ñï‚áí* , _) ‚Üí
         wfTerm (‚ä¢t-red‚Çú ‚Ñï‚áí*))
    , (Œª ‚ä¢Œì ‚Üí
         ‚ä©‚à∑U‚áî .proj‚ÇÇ
           ( (_ , 0<1 , ‚ä©‚Ñï‚áî .proj‚ÇÇ ‚ä¢Œì)
           , (_ , idRedTerm:*: (‚Ñï‚±º ‚ä¢Œì) , ‚Ñï‚Çô , ‚âÖ‚Çú-‚Ñïrefl ‚ä¢Œì)
           ))

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑‚Ñï‚áî : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï ‚áî Œì ‚ä©‚Ñï t ‚à∑‚Ñï
  ‚ä©‚à∑‚Ñï‚áî =
      (Œª (‚ä©‚Ñï , ‚ä©t) ‚Üí
         lemma (‚Ñï-elim ‚ä©‚Ñï)
           ((irrelevanceTerm ‚ä©‚Ñï) (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï)) ‚ä©t))
    , (Œª ‚ä©t ‚Üí
         ‚Ñï·µ£ (idRed:*: (‚Ñï‚±º (wfTerm (‚ä¢t-red‚Çú (_‚ä©‚Ñï_‚à∑‚Ñï.d ‚ä©t))))) , ‚ä©t)
    where
    lemma :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©‚Ñï A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚Ñï-intr ‚ä©A ‚Üí
      Œì ‚ä©‚Ñï t ‚à∑‚Ñï
    lemma (noemb _)    ‚ä©t = ‚ä©t
    lemma (emb 0<1 ‚ä©A) ‚ä©t = lemma ‚ä©A ‚ä©t

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©zero‚à∑‚Ñï‚áî : Œì ‚ä©‚ü® l ‚ü© zero ‚à∑ ‚Ñï ‚áî ‚ä¢ Œì
  ‚ä©zero‚à∑‚Ñï‚áî =
      wfTerm ‚àò‚Üí escape-‚ä©‚à∑
    , (Œª ‚ä¢Œì ‚Üí
         ‚ä©‚à∑‚Ñï‚áî .proj‚ÇÇ $
         ‚Ñï‚Çú _ (idRedTerm:*: (zero‚±º ‚ä¢Œì)) (‚âÖ‚Çú-zerorefl ‚ä¢Œì) zero·µ£)

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©suc‚à∑‚Ñï‚áî :
    Œì ‚ä©‚ü® l ‚ü© suc t ‚à∑ ‚Ñï ‚áî
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï
  ‚ä©suc‚à∑‚Ñï‚áî {Œì} {l} {t} =
    Œì ‚ä©‚ü® l ‚ü© suc t ‚à∑ ‚Ñï  ‚áî‚ü® ‚ä©‚à∑‚Ñï‚áî ‚ü©
    Œì ‚ä©‚Ñï suc t ‚à∑‚Ñï       ‚áî‚ü® (Œª (‚Ñï‚Çú _ suc-t‚áí*u _ u-ok) ‚Üí
                              case whnfRed*Term (red‚Çú suc-t‚áí*u) suc‚Çô of Œª {
                                PE.refl ‚Üí
                              lemma u-ok })
                         , (Œª ‚ä©t@(‚Ñï‚Çú _ [ ‚ä¢t , _ , t‚áí*u ] u‚âÖu u-ok) ‚Üí
                              let u-whnf = naturalWhnf (natural u-ok) in
                              ‚Ñï‚Çú _ (idRedTerm:*: (suc‚±º ‚ä¢t))
                                (‚âÖ-suc-cong $
                                 ‚âÖ‚Çú-red (id (‚Ñï‚±º (wfTerm ‚ä¢t))) t‚áí*u t‚áí*u
                                   ‚Ñï‚Çô u-whnf u-whnf u‚âÖu)
                                (suc·µ£ ‚ä©t))
                         ‚ü©
    Œì ‚ä©‚Ñï t ‚à∑‚Ñï           ‚áîÀò‚ü® ‚ä©‚à∑‚Ñï‚áî ‚ü©
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï      ‚ñ°‚áî
    where
    lemma : Natural-prop Œì (suc t) ‚Üí Œì ‚ä©‚Ñï t ‚à∑‚Ñï
    lemma (suc·µ£ ‚ä©t) = ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©‚Ñï‚â°‚áî : Œì ‚ä©‚ü® l ‚ü© ‚Ñï ‚â° A ‚áî Œì ‚ä©‚Ñï ‚Ñï ‚â° A
  ‚ä©‚Ñï‚â°‚áî =
      (Œª (‚ä©‚Ñï , _ , ‚Ñï‚â°A) ‚Üí
         lemma (‚Ñï-elim ‚ä©‚Ñï)
           ((irrelevanceEq ‚ä©‚Ñï) (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï)) ‚Ñï‚â°A))
    , (Œª ‚Ñï‚â°A ‚Üí
         case idRed:*: (‚Ñï‚±º (wfEq (subset* ‚Ñï‚â°A))) of Œª
           ‚Ñï‚áí*‚Ñï ‚Üí
         let ‚ä©‚Ñï = ‚Ñï·µ£ ‚Ñï‚áí*‚Ñï in
           ‚ä©‚Ñï
         , (redSubst* ‚Ñï‚â°A ‚ä©‚Ñï) .proj‚ÇÅ
         , ‚Ñï‚â°A)
    where
    lemma :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©‚Ñï A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B / ‚Ñï-intr ‚ä©A ‚Üí
      Œì ‚ä©‚Ñï A ‚â° B
    lemma (noemb _)    A‚â°B = A‚â°B
    lemma (emb 0<1 ‚ä©A) A‚â°B = lemma ‚ä©A A‚â°B

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚Ñï‚â°‚Ñï‚à∑U‚áî : Œì ‚ä©‚ü® ¬π ‚ü© ‚Ñï ‚â° ‚Ñï ‚à∑ U ‚áî ‚ä¢ Œì
  ‚ä©‚Ñï‚â°‚Ñï‚à∑U‚áî =
      (Œª ‚Ñï‚â°‚Ñï ‚Üí
         case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ ‚Ñï‚â°‚Ñï of Œª
           (_ , _ , _ , ‚Ñï‚áí* , _) ‚Üí
         wfTerm (‚ä¢t-red‚Çú ‚Ñï‚áí*))
    , (Œª ‚ä¢Œì ‚Üí
         case idRedTerm:*: (‚Ñï‚±º ‚ä¢Œì) of Œª
           ‚Ñï‚áí*‚Ñï ‚Üí
         ‚ä©‚â°‚à∑U‚áî .proj‚ÇÇ
           ( (_ , 0<1 , ‚ä©‚Ñï‚â°‚áî .proj‚ÇÇ (id (‚Ñï‚±º ‚ä¢Œì)))
           , (_ , _ , ‚Ñï‚áí*‚Ñï , ‚Ñï‚áí*‚Ñï , ‚Ñï‚Çô , ‚Ñï‚Çô , ‚âÖ‚Çú-‚Ñïrefl ‚ä¢Œì)
           ))

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑‚Ñï‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ ‚Ñï ‚áî
    (Œì ‚ä©‚Ñï t ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï u ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï)
  ‚ä©‚â°‚à∑‚Ñï‚áî =
      (Œª (‚ä©‚Ñï , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         lemma (‚Ñï-elim ‚ä©‚Ñï)
           ((irrelevanceTerm ‚ä©‚Ñï) (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï)) ‚ä©t)
           ((irrelevanceTerm ‚ä©‚Ñï) (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï)) ‚ä©u)
           ((irrelevanceEqTerm ‚ä©‚Ñï) (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï)) t‚â°u))
    , (Œª (‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         ‚Ñï·µ£ (idRed:*: (‚Ñï‚±º (wfTerm (‚ä¢t-red‚Çú (_‚ä©‚Ñï_‚â°_‚à∑‚Ñï.d t‚â°u)))))
       , ‚ä©t , ‚ä©u , t‚â°u)
    where
    lemma :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©‚Ñï A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚Ñï-intr ‚ä©A ‚Üí
      Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A / ‚Ñï-intr ‚ä©A ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚Ñï-intr ‚ä©A ‚Üí
      Œì ‚ä©‚Ñï t ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï u ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
    lemma (noemb _)    ‚ä©t ‚ä©u t‚â°u = ‚ä©t , ‚ä©u , t‚â°u
    lemma (emb 0<1 ‚ä©A) ‚ä©t ‚ä©u t‚â°u = lemma ‚ä©A ‚ä©t ‚ä©u t‚â°u

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©zero‚â°zero‚à∑‚Ñï‚áî : Œì ‚ä©‚ü® l ‚ü© zero ‚â° zero ‚à∑ ‚Ñï ‚áî ‚ä¢ Œì
  ‚ä©zero‚â°zero‚à∑‚Ñï‚áî {Œì} {l} =
    Œì ‚ä©‚ü® l ‚ü© zero ‚â° zero ‚à∑ ‚Ñï  ‚áî‚ü® proj‚ÇÅ ‚àò‚Üí wf-‚ä©‚â°‚à∑ , refl-‚ä©‚â°‚à∑ ‚ü©
    Œì ‚ä©‚ü® l ‚ü© zero ‚à∑ ‚Ñï         ‚áî‚ü® ‚ä©zero‚à∑‚Ñï‚áî ‚ü©
    ‚ä¢ Œì                       ‚ñ°‚áî

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©suc‚â°suc‚à∑‚Ñï‚áî :
    Œì ‚ä©‚ü® l ‚ü© suc t ‚â° suc u ‚à∑ ‚Ñï ‚áî
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ ‚Ñï
  ‚ä©suc‚â°suc‚à∑‚Ñï‚áî {Œì} {l} {t} {u} =
    Œì ‚ä©‚ü® l ‚ü© suc t ‚â° suc u ‚à∑ ‚Ñï                             ‚áî‚ü® ‚ä©‚â°‚à∑‚Ñï‚áî ‚ü©
    Œì ‚ä©‚Ñï suc t ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï suc u ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï suc t ‚â° suc u ‚à∑‚Ñï  ‚áî‚ü® ‚ä©‚à∑‚Ñï‚áî {l = l} ‚àò‚áî ‚ä©suc‚à∑‚Ñï‚áî ‚àò‚áî sym‚áî ‚ä©‚à∑‚Ñï‚áî
                                                                √ó-cong-‚áî
                                                              ‚ä©‚à∑‚Ñï‚áî {l = l} ‚àò‚áî ‚ä©suc‚à∑‚Ñï‚áî ‚àò‚áî sym‚áî ‚ä©‚à∑‚Ñï‚áî
                                                                √ó-cong-‚áî
                                                              (lemma‚ÇÅ , lemma‚ÇÇ) ‚ü©
    Œì ‚ä©‚Ñï t ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï u ‚à∑‚Ñï √ó Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï                  ‚áîÀò‚ü® ‚ä©‚â°‚à∑‚Ñï‚áî ‚ü©
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ ‚Ñï                                     ‚ñ°‚áî
    where
    lemma‚ÇÄ : [Natural]-prop Œì (suc t) (suc u) ‚Üí Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
    lemma‚ÇÄ (suc·µ£ t‚â°u) = t‚â°u

    lemma‚ÇÅ : Œì ‚ä©‚Ñï suc t ‚â° suc u ‚à∑‚Ñï ‚Üí Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï
    lemma‚ÇÅ (‚Ñï‚Çú‚Çå _ _ suc-t‚áí*t‚Ä≤ suc-u‚áí*u‚Ä≤ _ t‚Ä≤‚â°u‚Ä≤) =
      case whnfRed*Term (red‚Çú suc-t‚áí*t‚Ä≤) suc‚Çô of Œª {
        PE.refl ‚Üí
      case whnfRed*Term (red‚Çú suc-u‚áí*u‚Ä≤) suc‚Çô of Œª {
        PE.refl ‚Üí
      lemma‚ÇÄ t‚Ä≤‚â°u‚Ä≤}}

    lemma‚ÇÇ : Œì ‚ä©‚Ñï t ‚â° u ‚à∑‚Ñï ‚Üí Œì ‚ä©‚Ñï suc t ‚â° suc u ‚à∑‚Ñï
    lemma‚ÇÇ
      t‚â°u@(‚Ñï‚Çú‚Çå _ _ [ ‚ä¢t , _ , t‚áí*t‚Ä≤ ] [ ‚ä¢u , _ , u‚áí*u‚Ä≤ ] t‚Ä≤‚âÖu‚Ä≤ t‚Ä≤‚â°u‚Ä≤) =
      let t‚Ä≤-ok , u‚Ä≤-ok = split t‚Ä≤‚â°u‚Ä≤ in
      ‚Ñï‚Çú‚Çå _ _ (idRedTerm:*: (suc‚±º ‚ä¢t)) (idRedTerm:*: (suc‚±º ‚ä¢u))
        (‚âÖ-suc-cong $
         ‚âÖ‚Çú-red (id (‚Ñï‚±º (wfTerm ‚ä¢t))) t‚áí*t‚Ä≤ u‚áí*u‚Ä≤ ‚Ñï‚Çô
           (naturalWhnf t‚Ä≤-ok) (naturalWhnf u‚Ä≤-ok) t‚Ä≤‚âÖu‚Ä≤)
        (suc·µ£ t‚â°u)

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©zero‚â°suc‚à∑‚Ñï‚áî : Œì ‚ä©‚ü® l ‚ü© zero ‚â° suc t ‚à∑ ‚Ñï ‚áî ‚ä•
  ‚ä©zero‚â°suc‚à∑‚Ñï‚áî =
      (Œª zero‚â°suc ‚Üí
         case ‚ä©‚â°‚à∑‚Ñï‚áî .proj‚ÇÅ zero‚â°suc of Œª
           (_ , _ , ‚Ñï‚Çú‚Çå _ _ zero‚áí* suc‚áí* _ rest) ‚Üí
         case whnfRed*Term (red‚Çú zero‚áí*) zero‚Çô of Œª {
           PE.refl ‚Üí
         case whnfRed*Term (red‚Çú suc‚áí*) suc‚Çô of Œª {
           PE.refl ‚Üí
         case rest of Œª where
           (ne (neNf‚Çú‚Çå () _ _)) }})
    , ‚ä•-elim

------------------------------------------------------------------------
-- ‚Ñï

opaque

  -- Validity of ‚Ñï, seen as a type former.

  ‚Ñï·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© ‚Ñï
  ‚Ñï·µõ {Œì} {l} ‚ä©Œì =
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì  ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî               ‚Üí‚ü® ‚Ñï‚±º ‚ü©
          (Œî ‚ä¢ ‚Ñï)           ‚Üí‚ü® id ‚ü©
          Œî ‚ä¢ ‚Ñï ‚áí* ‚Ñï        ‚áîÀò‚ü® ‚ä©‚Ñï‚â°‚áî ‚ü©‚Üí
          Œî ‚ä©‚ü® l ‚ü© ‚Ñï ‚â° ‚Ñï    ‚ñ°
      )

opaque

  -- Validity of ‚Ñï, seen as a term former.

  ‚Ñï·µó·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® ¬π ‚ü© ‚Ñï ‚à∑ U
  ‚Ñï·µó·µõ {Œì} ‚ä©Œì =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì    ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî                 ‚áîÀò‚ü® ‚ä©‚Ñï‚â°‚Ñï‚à∑U‚áî ‚ü©‚Üí
          Œî ‚ä©‚ü® ¬π ‚ü© ‚Ñï ‚â° ‚Ñï ‚à∑ U  ‚ñ°
      )

------------------------------------------------------------------------
-- The constructors zero and suc

opaque

  -- Reducibility of zero.

  ‚ä©zero :
    ‚ä¢ Œì ‚Üí
    Œì ‚ä©‚ü® l ‚ü© zero ‚à∑ ‚Ñï
  ‚ä©zero = ‚ä©zero‚à∑‚Ñï‚áî .proj‚ÇÇ

opaque

  -- Validity of zero.

  zero·µõ :
    ‚ä©·µõ Œì ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© zero ‚à∑ ‚Ñï
  zero·µõ {Œì} {l} ‚ä©Œì =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚Ñï·µõ ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì          ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî                       ‚áîÀò‚ü® ‚ä©zero‚â°zero‚à∑‚Ñï‚áî ‚ü©‚Üí
          Œî ‚ä©‚ü® l ‚ü© zero ‚â° zero ‚à∑ ‚Ñï  ‚ñ°
      )

opaque

  -- Reducibility of suc.

  ‚ä©suc :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©‚ü® l ‚ü© suc t ‚à∑ ‚Ñï
  ‚ä©suc = ‚ä©suc‚à∑‚Ñï‚áî .proj‚ÇÇ

opaque

  -- Reducibility of equality between applications of suc.

  ‚ä©suc‚â°suc :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©‚ü® l ‚ü© suc t ‚â° suc u ‚à∑ ‚Ñï
  ‚ä©suc‚â°suc = ‚ä©suc‚â°suc‚à∑‚Ñï‚áî .proj‚ÇÇ

opaque

  -- Validity of suc.

  suc·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© suc t ‚à∑ ‚Ñï
  suc·µõ ‚ä©t =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ‚à∑ ‚ä©t
      , ‚ä©suc‚â°suc ‚àò‚Üí ‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©t .proj‚ÇÇ
      )

opaque

  -- Validity of equality preservation for suc.

  suc-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© suc t ‚â° suc u ‚à∑ ‚Ñï
  suc-cong·µõ t‚â°u =
    case wf-‚ä©·µõ‚â°‚à∑ t‚â°u of Œª
      (‚ä©t , ‚ä©u) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( suc·µõ ‚ä©t
      , suc·µõ ‚ä©u
      , ‚ä©suc‚â°suc ‚àò‚Üí ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚â°u .proj‚ÇÇ .proj‚ÇÇ
      )

------------------------------------------------------------------------
-- The eliminator natrec

private opaque

  -- A variant of natrec-subst for _‚ä¢_‚áí*_‚à∑_.

  natrec-subst*‚Ä≤ :
    Œì ‚àô ‚Ñï ‚ä¢ A ‚Üí
    (‚àÄ {v‚ÇÅ v‚ÇÇ} ‚Üí
     Œì ‚ä©‚ü® l‚Ä≤ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
     Œì ‚ä©‚ü® l ‚ü© A [ v‚ÇÅ ]‚ÇÄ ‚â° A [ v‚ÇÇ ]‚ÇÄ) ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A ‚ä¢ u ‚à∑ A [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚áí* v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä¢ natrec p q r A t u v‚ÇÅ ‚áí* natrec p q r A t u v‚ÇÇ ‚à∑ A [ v‚ÇÅ ]‚ÇÄ
  natrec-subst*‚Ä≤
    {A} {t} {u} {v‚ÇÅ} {v‚ÇÇ} {p} {q} {r} ‚ä¢A A‚â°A ‚ä¢t ‚ä¢u v‚ÇÅ‚áí*v‚ÇÇ ‚ä©v‚ÇÇ =
    case v‚ÇÅ‚áí*v‚ÇÇ of Œª where
      (id ‚ä¢v‚ÇÅ) ‚Üí
        id (natrec‚±º ‚ä¢A ‚ä¢t ‚ä¢u ‚ä¢v‚ÇÅ)
      (_‚á®_ {t‚Ä≤ = v‚ÇÉ} v‚ÇÅ‚áív‚ÇÉ v‚ÇÉ‚áí*v‚ÇÇ) ‚Üí
        case
          v‚ÇÅ  ‚áí‚ü® v‚ÇÅ‚áív‚ÇÉ ‚ü©‚ä©‚à∑
          v‚ÇÉ  ‚àé‚ü® wf-‚ä©‚â°‚à∑ (‚ä©‚à∑-‚áê* v‚ÇÉ‚áí*v‚ÇÇ ‚ä©v‚ÇÇ) .proj‚ÇÅ ‚ü©‚ä©‚à∑
        of Œª
          v‚ÇÅ‚â°v‚ÇÉ ‚Üí
        natrec p q r A t u v‚ÇÅ ‚à∑ A [ v‚ÇÅ ]‚ÇÄ  ‚áí‚ü® natrec-subst ‚ä¢A ‚ä¢t ‚ä¢u v‚ÇÅ‚áív‚ÇÉ ‚ü©‚à∑
                                            ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $ A‚â°A v‚ÇÅ‚â°v‚ÇÉ ‚ü©‚áí
        natrec p q r A t u v‚ÇÉ ‚à∑ A [ v‚ÇÉ ]‚ÇÄ  ‚áí*‚ü® natrec-subst*‚Ä≤ ‚ä¢A A‚â°A ‚ä¢t ‚ä¢u v‚ÇÉ‚áí*v‚ÇÇ ‚ä©v‚ÇÇ ‚ü©‚àé‚à∑
        natrec p q r A t u v‚ÇÇ              ‚àé

opaque

  -- A variant of natrec-subst for _‚ä¢_‚áí*_‚à∑_.

  natrec-subst* :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A ‚ä¢ u ‚à∑ A [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚áí* v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä¢ natrec p q r A t u v‚ÇÅ ‚áí* natrec p q r A t u v‚ÇÇ ‚à∑ A [ v‚ÇÅ ]‚ÇÄ
  natrec-subst* ‚ä©A =
    natrec-subst*‚Ä≤ (escape-‚ä©·µõ ‚ä©A) (‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A))

private opaque

  -- A lemma used to prove ‚ä©natrec‚â°natrec.

  ‚ä©natrec‚â°natrec‚Ä≤ :
    Œì ‚àô ‚Ñï ‚ä¢ A‚ÇÅ ‚Üí
    Œì ‚àô ‚Ñï ‚ä¢ A‚ÇÇ ‚Üí
    Œì ‚àô ‚Ñï ‚ä¢ A‚ÇÅ ‚âÖ A‚ÇÇ ‚Üí
    (‚àÄ {v‚ÇÅ v‚ÇÇ} ‚Üí
     Œì ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
     Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ ‚â° A‚ÇÅ [ v‚ÇÇ ]‚ÇÄ) ‚Üí
    (‚àÄ {v‚ÇÅ v‚ÇÇ} ‚Üí
     Œì ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
     Œì ‚ä©‚ü® l ‚ü© A‚ÇÇ [ v‚ÇÅ ]‚ÇÄ ‚â° A‚ÇÇ [ v‚ÇÇ ]‚ÇÄ) ‚Üí
    (‚àÄ {v‚ÇÅ v‚ÇÇ} ‚Üí
     Œì ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
     Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ ‚â° A‚ÇÇ [ v‚ÇÇ ]‚ÇÄ) ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚à∑ A‚ÇÅ [ zero ]‚ÇÄ ‚Üí
    Œì ‚ä¢ t‚ÇÇ ‚à∑ A‚ÇÇ [ zero ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A‚ÇÅ ‚ä¢ u‚ÇÅ ‚à∑ A‚ÇÅ [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A‚ÇÇ ‚ä¢ u‚ÇÇ ‚à∑ A‚ÇÇ [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A‚ÇÅ ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ A‚ÇÅ [ suc (var x1) ]‚Üë¬≤ ‚Üí
    (‚àÄ {v‚ÇÅ v‚ÇÇ w‚ÇÅ w‚ÇÇ} ‚Üí
     Œì ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
     Œì ‚ä©‚ü® l ‚ü© w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ ‚Üí
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ ‚â° u‚ÇÇ [ v‚ÇÇ , w‚ÇÇ ]‚ÇÅ‚ÇÄ ‚à∑ A‚ÇÅ [ suc v‚ÇÅ ]‚ÇÄ) ‚Üí
    Œì ‚ä©‚Ñï v‚ÇÅ ‚à∑‚Ñï ‚Üí
    Œì ‚ä©‚Ñï v‚ÇÇ ‚à∑‚Ñï ‚Üí
    Œì ‚ä©‚Ñï v‚ÇÅ ‚â° v‚ÇÇ ‚à∑‚Ñï ‚Üí
    Œì ‚ä©‚ü® l ‚ü© natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â°
      natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑ A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ
  ‚ä©natrec‚â°natrec‚Ä≤
    {A‚ÇÅ} {A‚ÇÇ} {l} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {v‚ÇÅ} {v‚ÇÇ} {p} {q} {r}
    ‚ä¢A‚ÇÅ ‚ä¢A‚ÇÇ A‚ÇÅ‚âÖA‚ÇÇ A‚ÇÅ‚â°A‚ÇÅ A‚ÇÇ‚â°A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢u‚ÇÅ ‚ä¢u‚ÇÇ u‚ÇÅ‚âÖu‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
    ‚ä©‚Ñï-v‚ÇÅ@(‚Ñï‚Çú v‚ÇÅ‚Ä≤‚Ä≤ v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤‚Ä≤ _ v‚ÇÅ‚Ä≤‚Ä≤-prop)
    ‚ä©‚Ñï-v‚ÇÇ@(‚Ñï‚Çú v‚ÇÇ‚Ä≤‚Ä≤ v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤‚Ä≤ _ v‚ÇÇ‚Ä≤‚Ä≤-prop)
    ‚ä©‚Ñï-v‚ÇÅ‚â°v‚ÇÇ@(‚Ñï‚Çú‚Çå v‚ÇÅ‚Ä≤ v‚ÇÇ‚Ä≤ v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤ v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤ v‚ÇÅ‚Ä≤‚âÖv‚ÇÇ‚Ä≤ v‚ÇÅ‚Ä≤‚àºv‚ÇÇ‚Ä≤) =
    -- The terms v‚ÇÅ‚Ä≤ and v‚ÇÅ‚Ä≤‚Ä≤ are equal, as are the terms v‚ÇÇ‚Ä≤
    -- and¬†v‚ÇÇ‚Ä≤‚Ä≤.
    case Œ£.map naturalWhnf naturalWhnf $ split v‚ÇÅ‚Ä≤‚àºv‚ÇÇ‚Ä≤ of Œª
      (v‚ÇÅ‚Ä≤-whnf , v‚ÇÇ‚Ä≤-whnf) ‚Üí
    case whrDet*Term (red‚Çú v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤ , v‚ÇÅ‚Ä≤-whnf)
           (red‚Çú v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤‚Ä≤ , naturalWhnf (natural v‚ÇÅ‚Ä≤‚Ä≤-prop)) of Œª {
      PE.refl ‚Üí
    case whrDet*Term (red‚Çú v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤ , v‚ÇÇ‚Ä≤-whnf)
           (red‚Çú v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤‚Ä≤ , naturalWhnf (natural v‚ÇÇ‚Ä≤‚Ä≤-prop)) of Œª {
      PE.refl ‚Üí

    -- Some definitions related to v‚ÇÅ and¬†v‚ÇÇ.
    case ‚ä©‚â°‚à∑‚Ñï‚áî {l = l} .proj‚ÇÇ (‚ä©‚Ñï-v‚ÇÅ , ‚ä©‚Ñï-v‚ÇÇ , ‚ä©‚Ñï-v‚ÇÅ‚â°v‚ÇÇ) of Œª
      v‚ÇÅ‚â°v‚ÇÇ ‚Üí
    case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ of Œª
      (‚ä©v‚ÇÅ , ‚ä©v‚ÇÇ) ‚Üí

    -- Some definitions related to v‚ÇÅ‚Ä≤ and¬†v‚ÇÇ‚Ä≤.
    case ‚ä©‚à∑-‚áí* v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤ ‚ä©v‚ÇÅ of Œª
      v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ ‚Üí
    case ‚ä©‚à∑-‚áí* v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤ ‚ä©v‚ÇÇ of Œª
      v‚ÇÇ‚â°v‚ÇÇ‚Ä≤ ‚Üí
    case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ .proj‚ÇÇ of Œª
      ‚ä©v‚ÇÅ‚Ä≤ ‚Üí
    case wf-‚ä©‚â°‚à∑ v‚ÇÇ‚â°v‚ÇÇ‚Ä≤ .proj‚ÇÇ of Œª
      ‚ä©v‚ÇÇ‚Ä≤ ‚Üí
    case
      v‚ÇÅ‚Ä≤  ‚â°Àò‚ü® v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑
      v‚ÇÅ   ‚â°‚ü® v‚ÇÅ‚â°v‚ÇÇ ‚ü©‚ä©‚à∑
      v‚ÇÇ   ‚â°‚ü® v‚ÇÇ‚â°v‚ÇÇ‚Ä≤ ‚ü©‚ä©‚à∑‚àé
      v‚ÇÇ‚Ä≤  ‚àé
    of Œª
      v‚ÇÅ‚Ä≤‚â°v‚ÇÇ‚Ä≤ ‚Üí
    case A‚ÇÅ‚â°A‚ÇÇ v‚ÇÅ‚Ä≤‚â°v‚ÇÇ‚Ä≤ of Œª
      A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] ‚Üí
    case ‚âÖ-eq $ escape-‚ä©‚â° A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] of Œª
      ‚ä¢A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] ‚Üí

    -- The two applications of natrec are equal if applications of
    -- natrec to v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are equal.
    case
      (Œª (hyp : _ ‚ä©‚ü® l ‚ü© _ ‚â° _ ‚à∑ _) ‚Üí
         natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚à∑ A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ    ‚áí*‚ü® natrec-subst*‚Ä≤ ‚ä¢A‚ÇÅ A‚ÇÅ‚â°A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ (red‚Çú v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤) ‚ä©v‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑‚à∑
                                                    ‚ü® A‚ÇÅ‚â°A‚ÇÅ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑
         natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ‚Ä≤ ‚à∑ A‚ÇÅ [ v‚ÇÅ‚Ä≤ ]‚ÇÄ  ‚â°‚ü® hyp ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                   ‚ü® ‚ä¢A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] ‚ü©‚áí
                                   ‚à∑ A‚ÇÇ [ v‚ÇÇ‚Ä≤ ]‚ÇÄ  Àò‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $ A‚ÇÇ‚â°A‚ÇÇ v‚ÇÇ‚â°v‚ÇÇ‚Ä≤ ‚ü©‚áê
         natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ‚Ä≤ ‚à∑ A‚ÇÇ [ v‚ÇÇ ]‚ÇÄ   ‚áê*‚ü® natrec-subst*‚Ä≤ ‚ä¢A‚ÇÇ A‚ÇÇ‚â°A‚ÇÇ ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ (red‚Çú v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤) ‚ä©v‚ÇÇ‚Ä≤ ‚ü©‚àé‚à∑
         natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ                 ‚àé)
    of Œª
      lemma ‚Üí

    lemma
      (case v‚ÇÅ‚Ä≤‚àºv‚ÇÇ‚Ä≤ of Œª where
         -- If v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are equal neutral terms, then one can
         -- conclude by using the fact that the applications of natrec
         -- to v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are equal neutral terms.
         (ne (neNf‚Çú‚Çå v‚ÇÅ‚Ä≤-ne v‚ÇÇ‚Ä≤-ne v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤)) ‚Üí
           neutral-‚ä©‚â°‚à∑ (wf-‚ä©‚â° A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] .proj‚ÇÅ)
             (natrec‚Çô v‚ÇÅ‚Ä≤-ne) (natrec‚Çô v‚ÇÇ‚Ä≤-ne)
             (natrec‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ‚Ä≤))
             (conv (natrec‚±º ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ‚Ä≤))
                (sym ‚ä¢A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤])) $
           ~-natrec ‚ä¢A‚ÇÅ A‚ÇÅ‚âÖA‚ÇÇ (escape-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ) u‚ÇÅ‚âÖu‚ÇÇ v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤

         -- If v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are both zero, then one can conclude by
         -- using the rule natrec-zero and the fact that t‚ÇÅ is equal
         -- to¬†t‚ÇÇ.
         zero·µ£ ‚Üí
           natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ zero  ‚áí‚ü® natrec-zero ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ‚ü©‚ä©‚à∑
           t‚ÇÅ ‚à∑ A‚ÇÅ [ zero ]‚ÇÄ           ‚â°‚ü® t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                        ‚ü® ‚ä¢A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] ‚ü©‚áí
           t‚ÇÇ ‚à∑ A‚ÇÇ [ zero ]‚ÇÄ           ‚áê‚ü® natrec-zero ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ , ‚ä¢t‚ÇÇ ‚ü©‚àé‚à∑
           natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ zero  ‚àé

         -- If v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are applications of suc to equal terms,
         -- then one can conclude by using the rule natrec-suc and an
         -- inductive hypothesis.
         (suc·µ£ {n = v‚ÇÅ‚Ä≥} {n‚Ä≤ = v‚ÇÇ‚Ä≥} ‚ä©‚Ñï-v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥) ‚Üí
           case v‚ÇÅ‚Ä≤‚Ä≤-prop of Œª {
             (ne suc-ne) ‚Üí case _‚ä©neNf_‚à∑_.neK suc-ne of Œª ();
             (suc·µ£ ‚ä©‚Ñï-v‚ÇÅ‚Ä≥) ‚Üí
           case v‚ÇÇ‚Ä≤‚Ä≤-prop of Œª {
             (ne suc-ne) ‚Üí case _‚ä©neNf_‚à∑_.neK suc-ne of Œª ();
             (suc·µ£ ‚ä©‚Ñï-v‚ÇÇ‚Ä≥) ‚Üí
           case ‚ä©‚â°‚à∑‚Ñï‚áî .proj‚ÇÇ (‚ä©‚Ñï-v‚ÇÅ‚Ä≥ , ‚ä©‚Ñï-v‚ÇÇ‚Ä≥ , ‚ä©‚Ñï-v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥) of Œª
             v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥ ‚Üí
           case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥ of Œª
             (‚ä©v‚ÇÅ‚Ä≥ , ‚ä©v‚ÇÇ‚Ä≥) ‚Üí
           case u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥ $
                ‚ä©natrec‚â°natrec‚Ä≤ ‚ä¢A‚ÇÅ ‚ä¢A‚ÇÇ A‚ÇÅ‚âÖA‚ÇÇ A‚ÇÅ‚â°A‚ÇÅ A‚ÇÇ‚â°A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ
                  ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢u‚ÇÅ ‚ä¢u‚ÇÇ u‚ÇÅ‚âÖu‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
                  ‚ä©‚Ñï-v‚ÇÅ‚Ä≥ ‚ä©‚Ñï-v‚ÇÇ‚Ä≥ ‚ä©‚Ñï-v‚ÇÅ‚Ä≥‚â°v‚ÇÇ‚Ä≥ of Œª
             u‚ÇÅ[v‚ÇÅ‚Ä≥,nr]‚â°u‚ÇÇ[v‚ÇÇ‚Ä≥,nr] ‚Üí

           natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ (suc v‚ÇÅ‚Ä≥)                             ‚áí‚ü® natrec-suc ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ‚Ä≥) ‚ü©‚ä©‚à∑
           u‚ÇÅ [ v‚ÇÅ‚Ä≥ , natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ‚Ä≥ ]‚ÇÅ‚ÇÄ ‚à∑ A‚ÇÅ [ suc v‚ÇÅ‚Ä≥ ]‚ÇÄ  ‚â°‚ü® u‚ÇÅ[v‚ÇÅ‚Ä≥,nr]‚â°u‚ÇÇ[v‚ÇÇ‚Ä≥,nr] ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                        ‚ü® ‚ä¢A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] ‚ü©‚áí
           u‚ÇÇ [ v‚ÇÇ‚Ä≥ , natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ‚Ä≥ ]‚ÇÅ‚ÇÄ ‚à∑ A‚ÇÇ [ suc v‚ÇÇ‚Ä≥ ]‚ÇÄ  ‚áê‚ü® natrec-suc ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ‚Ä≥)
                                                                        , escape-‚ä©‚à∑ $
                                                                          conv-‚ä©‚à∑ A‚ÇÅ[v‚ÇÅ‚Ä≤]‚â°A‚ÇÇ[v‚ÇÇ‚Ä≤] $
                                                                          wf-‚ä©‚â°‚à∑ u‚ÇÅ[v‚ÇÅ‚Ä≥,nr]‚â°u‚ÇÇ[v‚ÇÇ‚Ä≥,nr] .proj‚ÇÇ
                                                                        ‚ü©‚àé‚à∑
           natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ (suc v‚ÇÇ‚Ä≥)                             ‚àé }}) }}

opaque

  -- Reducibility of equality between applications of natrec.

  ‚ä©natrec‚â°natrec :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ [ œÉ‚ÇÅ ] ‚â°
      natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]
  ‚ä©natrec‚â°natrec {l} {A‚ÇÅ} {A‚ÇÇ} {œÉ‚ÇÅ} A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (_ , ‚ä©t‚ÇÇ) ‚Üí
    case conv-‚ä©·µõ‚à∑
           (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ $
            refl-‚ä©·µõ‚â°‚à∑ $ zero·µõ {l = l} $ wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÇ))
           ‚ä©t‚ÇÇ of Œª
      ‚ä©t‚ÇÇ ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case conv-‚àô-‚ä©·µõ‚à∑ A‚ÇÅ‚â°A‚ÇÇ $
         conv-‚ä©·µõ‚à∑
           (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤‚â°[]‚Üë¬≤ A‚ÇÅ‚â°A‚ÇÇ $
            suc·µõ (var·µõ (there here) (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©u‚ÇÅ)) .proj‚ÇÇ))
         ‚ä©u‚ÇÇ of Œª
      ‚ä©u‚ÇÇ ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí

    case ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚Üí
    case PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift A‚ÇÅ _) $
         ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (natrecSucCase _ A‚ÇÅ) $
         ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë]‚â°u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë] ‚Üí

    case ‚ä©‚â°‚à∑‚Ñï‚áî .proj‚ÇÅ $
         ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ v‚ÇÅ‚â°v‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©‚Ñï-v‚ÇÅ , ‚ä©‚Ñï-v‚ÇÇ , ‚ä©‚Ñï-v‚ÇÅ‚â°v‚ÇÇ) ‚Üí

    PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ singleSubstLift A‚ÇÅ _) $
    ‚ä©natrec‚â°natrec‚Ä≤
      (escape $ wf-‚ä©‚â° A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë] .proj‚ÇÅ)
      (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©A‚ÇÇ ‚ä©œÉ‚ÇÇ)
      (escape-‚ä©‚â° A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë])
      (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÅ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ))
      (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÇ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ))
      (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      (escape-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] .proj‚ÇÅ)
      (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A‚ÇÇ _) $
       escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÇ ‚ä©œÉ‚ÇÇ)
      (level-‚ä©‚â°‚à∑
         (wf-‚ä©‚â°
            (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ $
             refl-‚ä©‚â°‚à∑ $ ‚ä©zero {l = l} $ escape-‚ä©À¢‚à∑ ‚ä©œÉ‚ÇÅ .proj‚ÇÅ)
            .proj‚ÇÅ)
         t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ])
      (escape-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë]‚â°u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë] .proj‚ÇÅ)
      (PE.subst (_‚ä¢_‚à∑_ _ _) (natrecSucCase _ A‚ÇÇ) $
       escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë]‚à∑ ‚ä©u‚ÇÇ ‚ä©œÉ‚ÇÇ)
      (escape-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë]‚â°u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë])
      (Œª {v‚ÇÅ = v‚ÇÅ} {v‚ÇÇ = _} {w‚ÇÅ = w‚ÇÅ} v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ ‚Üí
         level-‚ä©‚â°‚à∑
           (wf-‚ä©‚â°
              (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ $
               ‚ä©suc‚â°suc v‚ÇÅ‚â°v‚ÇÇ)
              .proj‚ÇÅ) $
         PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _)
           (A‚ÇÅ [ suc (var x1) ]‚Üë¬≤ [ œÉ‚ÇÅ ‚áë ‚áë ] [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ  ‚â°‚ü® PE.cong _[ _ , _ ]‚ÇÅ‚ÇÄ $ natrecSucCase _ A‚ÇÅ ‚ü©
            A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ suc (var x1) ]‚Üë¬≤ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ    ‚â°Àò‚ü® substComp‚Üë¬≤ (A‚ÇÅ [ _ ]) _ ‚ü©
            A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ suc v‚ÇÅ ]‚ÇÄ                         ‚àé) $
         ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ)
      ‚ä©‚Ñï-v‚ÇÅ ‚ä©‚Ñï-v‚ÇÇ ‚ä©‚Ñï-v‚ÇÅ‚â°v‚ÇÇ
    where
    open Tools.Reasoning.PropositionalEquality

opaque

  -- Validity of natrec.

  natrec·µõ :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ A [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© v ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© natrec p q r A t u v ‚à∑ A [ v ]‚ÇÄ
  natrec·µõ ‚ä©A ‚ä©t ‚ä©u ‚ä©v =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©A ‚ä©v
      , ‚ä©natrec‚â°natrec (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)
          (refl-‚ä©·µõ‚â°‚à∑ ‚ä©v)
      )

opaque

  -- Validity of equality preservation for natrec.

  natrec-cong·µõ :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© natrec p q r A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â° natrec p q r A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑
      A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ
  natrec-cong·µõ {l} A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ of Œª
      (‚ä©v‚ÇÅ , ‚ä©v‚ÇÇ) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( natrec·µõ ‚ä©A‚ÇÅ ‚ä©t‚ÇÅ ‚ä©u‚ÇÅ ‚ä©v‚ÇÅ
      , conv-‚ä©·µõ‚à∑ (sym-‚ä©·µõ‚â° (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ))
          (natrec·µõ ‚ä©A‚ÇÇ
             (conv-‚ä©·µõ‚à∑
                (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ
                   (refl-‚ä©·µõ‚â°‚à∑ (zero·µõ {l = l} (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ)))))
                ‚ä©t‚ÇÇ)
             (conv-‚àô-‚ä©·µõ‚à∑ A‚ÇÅ‚â°A‚ÇÇ $
              conv-‚ä©·µõ‚à∑
                (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚Üë¬≤‚â°[]‚Üë¬≤ A‚ÇÅ‚â°A‚ÇÇ $
                 suc·µõ $ var·µõ (there here) (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©u‚ÇÅ)) .proj‚ÇÇ)
                ‚ä©u‚ÇÇ)
             ‚ä©v‚ÇÇ)
      , ‚ä©natrec‚â°natrec A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ
      )

opaque

  -- Validity of the equality rule called natrec-zero.

  natrec-zero·µõ :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ A [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© natrec p q r A t u zero ‚â° t ‚à∑ A [ zero ]‚ÇÄ
  natrec-zero·µõ {A} ‚ä©A ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A _) $
         natrec-zero
           (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©A ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A _) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (natrecSucCase _ A) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë]‚à∑ ‚ä©u ‚ä©œÉ))
      ‚ä©t

opaque

  -- Validity of the equality rule called natrec-suc.

  natrec-suc·µõ :
    Œì ‚àô ‚Ñï ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ A [ zero ]‚ÇÄ ‚Üí
    Œì ‚àô ‚Ñï ‚àô A ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A [ suc (var x1) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© v ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© natrec p q r A t u (suc v) ‚â°
      u [ v , natrec p q r A t u v ]‚ÇÅ‚ÇÄ ‚à∑ A [ suc v ]‚ÇÄ
  natrec-suc·µõ {A} {u} ‚ä©A ‚ä©t ‚ä©u ‚ä©v =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst‚ÇÇ (_‚ä¢_‚áí_‚à∑_ _ _) (PE.sym $ [,]-[]-commute u)
           (PE.sym $ singleSubstLift A _) $
         natrec-suc
           (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©A ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A _) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (natrecSucCase _ A) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë‚áë]‚à∑ ‚ä©u ‚ä©œÉ)
           (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©v ‚ä©œÉ))
      (PE.subst (_‚ä©·µõ‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ substComp‚Üë¬≤ A _) $
       ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚à∑ ‚ä©u ‚ä©v (natrec·µõ ‚ä©A ‚ä©t ‚ä©u ‚ä©v))
