------------------------------------------------------------------------
-- Validity for Erased and [_]
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality
open import Tools.Product

module Definition.LogicalRelation.Substitution.Introductions.Erased
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (open Modality ùïÑ)
  (R : Type-restrictions ùïÑ)
  (open Type-restrictions R)
  -- Erased is assumed to be allowed.
  {s}
  (Erased-ok@(Unit-ok , Œ£-ok) : Erased-allowed s)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Substitution.Introductions.Prod R
open import Definition.LogicalRelation.Substitution.Introductions.Unit R
import Definition.LogicalRelation.Weakening R as W
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Untyped M hiding (_‚à∑_)

open import Graded.Derived.Erased.Typed.Primitive R Erased-ok
open import Graded.Derived.Erased.Untyped ùïÑ s

open import Tools.Function

private variable
  Œì           : Con Term _
  A A‚ÇÅ A‚ÇÇ t u : Term _
  l           : TypeLevel

opaque

  -- Reducibility for Erased.

  ‚ä©Erased : Œì ‚ä©‚ü® l ‚ü© A ‚Üí Œì ‚ä©‚ü® l ‚ü© Erased A
  ‚ä©Erased {Œì} {A} ‚ä©A =
    ùï®‚Ä≤ _
      Unit!
      (idRed:*: (Erased‚±º ‚ä¢A))
      ‚ä¢A
      (Unit‚±º ‚ä¢ŒìA Unit-ok)
      (‚âÖ-Œ†Œ£-cong ‚ä¢A (escapeEq ‚ä©A (reflEq ‚ä©A))
         (‚âÖ-Unitrefl ‚ä¢ŒìA Unit-ok) Œ£-ok)
      (Œª œÅ‚à∑‚äá ‚ä¢Œî ‚Üí W.wk œÅ‚à∑‚äá ‚ä¢Œî ‚ä©A)
      (Œª _ ‚ä¢Œî _ ‚Üí Unit·µ£
         (record
            { ‚áí*-Unit = idRed:*: (Unit‚±º ‚ä¢Œî Unit-ok)
            ; ok      = Unit-ok
            }))
      (Œª œÅ‚à∑‚äá ‚ä¢Œî ‚ä©x ‚ä©y x‚â°y ‚Üí id (Unit‚±º ‚ä¢Œî Unit-ok))
      Œ£-ok
    where
    ‚ä¢A : Œì ‚ä¢ A
    ‚ä¢A = escape ‚ä©A

    ‚ä¢ŒìA : ‚ä¢ Œì ‚àô A
    ‚ä¢ŒìA = wf ‚ä¢A ‚àô ‚ä¢A

opaque
  unfolding ‚ä©Erased _‚ä©‚ü®_‚ü©_‚â°_

  -- Reducibility of equality between applications of Erased.

  ‚ä©Erased‚â°Erased :
    Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Erased A‚ÇÅ ‚â° Erased A‚ÇÇ
  ‚ä©Erased‚â°Erased (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ , A‚ÇÅ‚â°A‚ÇÇ) =
    case escape ‚ä©A‚ÇÅ of Œª
      ‚ä¢A‚ÇÅ ‚Üí
    ‚ä©‚â°-intro (‚ä©Erased ‚ä©A‚ÇÅ) (‚ä©Erased ‚ä©A‚ÇÇ) $
    B‚Çå _ _
      (id (Erased‚±º (escape ‚ä©A‚ÇÇ)))
      (‚âÖ-Œ†Œ£-cong ‚ä¢A‚ÇÅ (escapeEq ‚ä©A‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ)
         (‚âÖ-Unitrefl (‚ä¢‚Üí‚ä¢‚àô ‚ä¢A‚ÇÅ) Unit-ok) Œ£-ok)
      (Œª _ _ ‚Üí W.wkEq _ _ ‚ä©A‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ)
      (Œª _ ‚ä¢Œî _ ‚Üí id (Unit‚±º ‚ä¢Œî Unit-ok))

opaque

  -- Validity of Erased.

  Erased·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Erased A
  Erased·µõ ‚ä©A =
    case ‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©A of Œª
      (‚ä©Œì , ‚ä©A , A‚â°A) ‚Üí
    ‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÇ (‚ä©Œì , ‚ä©Erased ‚àò‚Üí ‚ä©A , ‚ä©Erased‚â°Erased ‚àò‚Üí A‚â°A)

opaque

  -- Validity of equality preservation for Erased.

  Erased-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Erased A‚ÇÅ ‚â° Erased A‚ÇÇ
  Erased-cong·µõ A‚ÇÅ‚â°A‚ÇÇ =
    case ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ , A‚ÇÅ‚â°A‚ÇÇ) ‚Üí
    ‚ä©·µõ‚â°‚áî‚Ä≤ .proj‚ÇÇ (Erased·µõ ‚ä©A‚ÇÅ , Erased·µõ ‚ä©A‚ÇÇ , ‚ä©Erased‚â°Erased ‚àò‚Üí A‚ÇÅ‚â°A‚ÇÇ)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- Reducibility for [_].

  ‚ä©[] :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© [ t ] ‚à∑ Erased A
  ‚ä©[] (‚ä©A , ‚ä©t) =
    case ‚ä©star (wf (escape ‚ä©A)) Unit-ok of Œª
      (‚ä©Unit , ‚ä©star) ‚Üí
    ‚ä©‚à∑-intro (‚ä©Erased ‚ä©A) $
    prod‚Ä≥ ‚ä©A ‚ä©t ‚ä©Unit ‚ä©star (‚ä©Erased ‚ä©A)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- Reducibility of equality between applications of [_].

  ‚ä©[]‚â°[] :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© [ t ] ‚â° [ u ] ‚à∑ Erased A
  ‚ä©[]‚â°[] (‚ä©A , ‚ä©t , ‚ä©u , t‚â°u) =
    case ‚ä©star (wf (escape ‚ä©A)) Unit-ok of Œª
      (‚ä©Unit , ‚ä©star) ‚Üí
    ‚ä©‚â°‚à∑-intro
      (‚ä©Erased ‚ä©A)
      (‚ä©[] (‚ä©A , ‚ä©t))
      (‚ä©[] (‚ä©A , ‚ä©u))
      (prod-cong‚Ä≥ ‚ä©A ‚ä©t ‚ä©u t‚â°u ‚ä©Unit ‚ä©star ‚ä©star
         (reflEqTerm ‚ä©Unit ‚ä©star) (‚ä©Erased ‚ä©A))

opaque

  -- Validity of [_].

  []·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© [ t ] ‚à∑ Erased A
  []·µõ ‚ä©t =
    case ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t of Œª
      (‚ä©A , ‚ä©t , t‚â°t) ‚Üí
    ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÇ (Erased·µõ ‚ä©A , ‚ä©[] ‚àò‚Üí ‚ä©t , ‚ä©[]‚â°[] ‚àò‚Üí t‚â°t)

opaque

  -- Validity of equality preservation for [_].

  []-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© [ t ] ‚â° [ u ] ‚à∑ Erased A
  []-cong·µõ t‚â°u =
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚â°u of Œª
      (‚ä©t , ‚ä©u , t‚â°u) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ ([]·µõ ‚ä©t , []·µõ ‚ä©u , ‚ä©[]‚â°[] ‚àò‚Üí t‚â°u)
