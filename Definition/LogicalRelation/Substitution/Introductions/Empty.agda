------------------------------------------------------------------------
-- Validity of the empty type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Empty
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Introductions.Universe R

open import Tools.Function
open import Tools.Product

private variable
  Œì Œî : Con Term _
  t u : Term _
  l : TypeLevel

------------------------------------------------------------------------
-- Characterisation lemmas

opaque

  --  A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Empty‚áî :
    Œì ‚ä©‚ü® l ‚ü© Empty ‚áî ‚ä¢ Œì
  ‚ä©Empty‚áî =
      (Œª ‚ä©Empty ‚Üí lemma (Empty-elim ‚ä©Empty))
    , (Œª ‚ä¢Œì ‚Üí Empty·µ£ (idRed:*: (Empty‚±º ‚ä¢Œì)))
    where
    lemma : Œì ‚ä©‚ü® l ‚ü©Empty Empty ‚Üí ‚ä¢ Œì
    lemma (emb 0<1 ‚ä©Empty) = lemma ‚ä©Empty
    lemma (noemb d) = wf (‚ä¢A-red d)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ ‚ä©Empty‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Empty‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Empty ‚áî Œì ‚ä©Empty t ‚à∑Empty
  ‚ä©‚à∑Empty‚áî =
      (Œª (‚ä©Empty‚Ä≤ , ‚ä©t) ‚Üí
         lemma (Empty-elim ‚ä©Empty‚Ä≤)
           (irrelevanceTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) ‚ä©t))
    , (Œª ‚ä©t@(Empty‚Çú n d n‚â°n prop) ‚Üí
         ‚ä©Empty‚áî .proj‚ÇÇ (wfTerm (‚ä¢t-red‚Çú d)) , ‚ä©t)
    where
    lemma :
      (‚ä©Empty : Œì ‚ä©‚ü® l ‚ü©Empty Empty) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©Empty t ‚à∑Empty
    lemma (emb 0<1 ‚ä©Empty‚Ä≤) ‚ä©t = lemma ‚ä©Empty‚Ä≤ ‚ä©t
    lemma (noemb _) ‚ä©t = ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ ‚ä©Empty‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Empty‚áî : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Empty ‚áî
    (Œì ‚ä©Empty t ‚à∑Empty √ó
     Œì ‚ä©Empty u ‚à∑Empty √ó
     Œì ‚ä©Empty t ‚â° u ‚à∑Empty)
  ‚ä©‚â°‚à∑Empty‚áî =
      (Œª (‚ä©Empty‚Ä≤ , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
        lemma (Empty-elim ‚ä©Empty‚Ä≤)
          (irrelevanceTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) ‚ä©t)
          (irrelevanceTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) ‚ä©u)
          (irrelevanceEqTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) t‚â°u))
    , Œª (‚ä©t@(Empty‚Çú _ d _ _) , ‚ä©u , t‚â°u) ‚Üí
        ‚ä©Empty‚áî .proj‚ÇÇ (wfTerm (‚ä¢t-red‚Çú d)) , ‚ä©t , ‚ä©u , t‚â°u
    where
    lemma :
      (‚ä©Empty : Œì ‚ä©‚ü® l ‚ü©Empty Empty) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©‚ü® l ‚ü© u ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©Empty t ‚à∑Empty √ó
      Œì ‚ä©Empty u ‚à∑Empty √ó
      Œì ‚ä©Empty t ‚â° u ‚à∑Empty
    lemma (emb 0<1 ‚ä©Empty‚Ä≤) ‚ä©t ‚ä©u t‚â°u = lemma ‚ä©Empty‚Ä≤ ‚ä©t ‚ä©u t‚â°u
    lemma (noemb _) ‚ä©t ‚ä©u t‚â°u = ‚ä©t , ‚ä©u , t‚â°u

------------------------------------------------------------------------
-- Empty

opaque

  -- Reducibility for Empty.

  ‚ä©Empty : ‚ä¢ Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© Empty
  ‚ä©Empty = ‚ä©Empty‚áî .proj‚ÇÇ

opaque

  -- Validity for Empty, seen as a type formerr.

  Empty·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© Empty
  Empty·µõ ‚ä©Œì =
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( ‚ä©Œì
      , (Œª ‚ä©œÉ ‚Üí
           case ‚ä©Empty (escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ) of Œª
             ‚ä©Empty‚Ä≤ ‚Üí
           ‚ä©Empty‚Ä≤ , Œª {œÉ‚Ä≤ = _} _ ‚Üí refl-‚ä©‚â° ‚ä©Empty‚Ä≤))

opaque

  -- Validity for Empty, seen as a term former.

  Empty·µó·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® ¬π ‚ü© Empty ‚à∑ U
  Empty·µó·µõ ‚ä©Œì =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
        , Œª ‚ä©œÉ ‚Üí
            case escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ of Œª
              ‚ä¢Œî ‚Üí
            case ‚ä©Empty ‚ä¢Œî of Œª
              ‚ä©Empty‚Ä≤ ‚Üí
            case Empty‚±º ‚ä¢Œî of Œª
              ‚ä¢Empty ‚Üí
            case ‚âÖ‚Çú-Emptyrefl ‚ä¢Œî of Œª
              Empty‚âÖEmpty ‚Üí
              Type‚Üí‚ä©‚à∑U‚áî Empty‚Çô .proj‚ÇÇ
                ( (_ , 0<1 , ‚ä©Empty‚Ä≤)
                , (‚ä¢Empty , Empty‚âÖEmpty)
                )
            , Œª _ ‚Üí
                Type‚Üí‚ä©‚â°‚à∑U‚áî Empty‚Çô Empty‚Çô .proj‚ÇÇ
                  ( ‚ä¢Empty , ‚ä¢Empty , Empty‚âÖEmpty
                  , (_ , 0<1 , refl-‚ä©‚â° ‚ä©Empty‚Ä≤)
                  )
      )
