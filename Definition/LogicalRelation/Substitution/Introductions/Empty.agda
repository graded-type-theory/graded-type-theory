------------------------------------------------------------------------
-- Validity of the empty type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Empty
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Introductions.Universe R

open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product

private variable
  Œì Œî : Con Term _
  A B t u : Term _
  l : Universe-level

------------------------------------------------------------------------
-- Characterisation lemmas

opaque

  --  A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Empty‚áî :
    Œì ‚ä©‚ü® l ‚ü© Empty ‚áî ‚ä¢ Œì
  ‚ä©Empty‚áî =
      wf ‚àò‚Üí escape-‚ä©
    , (Œª ‚ä¢Œì ‚Üí Empty·µ£ (id (Empty‚±º ‚ä¢Œì)))

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ ‚ä©Empty‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Empty‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Empty ‚áî Œì ‚ä©Empty t ‚à∑Empty
  ‚ä©‚à∑Empty‚áî =
      (Œª (‚ä©Empty‚Ä≤ , ‚ä©t) ‚Üí
         lemma (Empty-elim ‚ä©Empty‚Ä≤)
           (irrelevanceTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) ‚ä©t))
    , (Œª ‚ä©t@(Empty‚Çú n d n‚â°n prop) ‚Üí
         ‚ä©Empty‚áî .proj‚ÇÇ (wfEqTerm (subset*Term d)) , ‚ä©t)
    where
    lemma :
      (‚ä©Empty : Œì ‚ä©‚ü® l ‚ü©Empty Empty) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©Empty t ‚à∑Empty
    lemma (emb ‚â§·µò-refl ‚ä©Empty‚Ä≤) ‚ä©t = lemma ‚ä©Empty‚Ä≤ ‚ä©t
    lemma (emb (‚â§·µò-step s) ‚ä©Empty‚Ä≤) ‚ä©t = lemma (emb s ‚ä©Empty‚Ä≤) ‚ä©t
    lemma (noemb _) ‚ä©t = ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Empty‚â°‚áî : Œì ‚ä©‚ü® l ‚ü© Empty ‚â° A ‚áî Œì ‚ä©Empty Empty ‚â° A
  ‚ä©Empty‚â°‚áî =
      (Œª (‚ä©Empty , _ , Empty‚â°A) ‚Üí
         case Empty-elim ‚ä©Empty of Œª
           ‚ä©Empty‚Ä≤ ‚Üí
         lemma ‚ä©Empty‚Ä≤
           ((irrelevanceEq ‚ä©Empty) (Empty-intr ‚ä©Empty‚Ä≤) Empty‚â°A))
    , (Œª Empty‚â°A ‚Üí
         case id (Empty‚±º (wfEq (subset* Empty‚â°A))) of Œª
           Empty‚áí*Empty ‚Üí
         let ‚ä©Empty = Empty·µ£ Empty‚áí*Empty in
           ‚ä©Empty
         , (redSubst* Empty‚â°A ‚ä©Empty) .proj‚ÇÅ
         , Empty‚â°A)
    where
    lemma :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©Empty A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B / Empty-intr ‚ä©A ‚Üí
      Œì ‚ä©Empty A ‚â° B
    lemma (noemb _)    A‚â°B = A‚â°B
    lemma (emb ‚â§·µò-refl ‚ä©A) A‚â°B = lemma ‚ä©A A‚â°B
    lemma (emb (‚â§·µò-step l<) ‚ä©A) A‚â°B = lemma (emb l< ‚ä©A) A‚â°B

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ ‚ä©Empty‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Empty‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Empty ‚áî Œì ‚ä©Empty t ‚â° u ‚à∑Empty
  ‚ä©‚â°‚à∑Empty‚áî =
      (Œª (‚ä©Empty‚Ä≤ , _ , _ , t‚â°u) ‚Üí
        lemma (Empty-elim ‚ä©Empty‚Ä≤)
          (irrelevanceEqTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤))
             t‚â°u))
    , Œª t‚â°u@(Empty‚Çú‚Çå _ _ t‚áí*t‚Ä≤ u‚áí*u‚Ä≤ t‚Ä≤‚âÖu‚Ä≤ prop) ‚Üí
        case prop of Œª where
          (ne (neNf‚Çú‚Çå inc t‚Ä≤-ne u‚Ä≤-ne t‚Ä≤~u‚Ä≤)) ‚Üí
            let ‚âÖt‚Ä≤ , ‚âÖu‚Ä≤ = wf-‚ä¢‚âÖ‚à∑ t‚Ä≤‚âÖu‚Ä≤
                ~t‚Ä≤ , ~u‚Ä≤ = wf-‚ä¢~‚à∑ t‚Ä≤~u‚Ä≤
            in
              ‚ä©Empty‚áî .proj‚ÇÇ (wfEqTerm (subset*Term t‚áí*t‚Ä≤))
            , Empty‚Çú _ t‚áí*t‚Ä≤ ‚âÖt‚Ä≤ (ne (neNf‚Çú inc t‚Ä≤-ne ~t‚Ä≤))
            , Empty‚Çú _ u‚áí*u‚Ä≤ ‚âÖu‚Ä≤ (ne (neNf‚Çú inc u‚Ä≤-ne ~u‚Ä≤))
            , t‚â°u
    where
    lemma :
      (‚ä©Empty : Œì ‚ä©‚ü® l ‚ü©Empty Empty) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Empty / Empty-intr ‚ä©Empty ‚Üí
      Œì ‚ä©Empty t ‚â° u ‚à∑Empty
    lemma (emb ‚â§·µò-refl     ‚ä©Empty‚Ä≤) = lemma ‚ä©Empty‚Ä≤
    lemma (emb (‚â§·µò-step s) ‚ä©Empty‚Ä≤) = lemma (emb s ‚ä©Empty‚Ä≤)
    lemma (noemb _)                 = id·∂†

------------------------------------------------------------------------
-- Empty

opaque

  -- Reducibility for Empty.

  ‚ä©Empty : ‚ä¢ Œì ‚Üí Œì ‚ä©‚ü® l ‚ü© Empty
  ‚ä©Empty = ‚ä©Empty‚áî .proj‚ÇÇ

opaque

  -- Validity for Empty, seen as a type formerr.

  Empty·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® l ‚ü© Empty
  Empty·µõ {Œì} {l} ‚ä©Œì =
    ‚ä©·µõ‚áî ∞ .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì        ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî                     ‚áîÀò‚ü® ‚ä©Empty‚áî ‚ü©‚Üí
          (Œî ‚ä©‚ü® l ‚ü© Empty)        ‚Üí‚ü® refl-‚ä©‚â° ‚ü©
          Œî ‚ä©‚ü® l ‚ü© Empty ‚â° Empty  ‚ñ°
      )

opaque

  -- Validity for Empty, seen as a term former.

  Empty·µó·µõ : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® 1 ‚ü© Empty ‚à∑ U 0
  Empty·µó·µõ ‚ä©Œì =
    ‚ä©·µõ‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case escape-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
            (‚ä¢Œî , _) ‚Üí
          Type‚Üí‚ä©‚â°‚à∑U‚áî Empty‚Çô Empty‚Çô .proj‚ÇÇ
            (‚â§·µò-refl , refl-‚ä©‚â° (‚ä©Empty ‚ä¢Œî) , ‚âÖ‚Çú-Emptyrefl ‚ä¢Œî)
      )
