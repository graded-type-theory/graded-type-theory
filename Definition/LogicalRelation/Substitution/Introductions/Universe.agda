------------------------------------------------------------------------
-- Validity of the universe type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R

open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n    : Nat
    Œì    : Con Term n
    A B  : Term n
    l l‚Ä≤ : TypeLevel
    k    : LogRelKit

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©U‚áî :
    Œì ‚ä©‚ü® l ‚ü© U ‚áî
    ((‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l) √ó ‚ä¢ Œì)
  ‚ä©U‚áî =
      (Œª ‚ä©U ‚Üí lemma (U-elim ‚ä©U))
    , (Œª ((l‚Ä≤ , l‚Ä≤<l) , ‚ä¢Œì) ‚Üí
         U·µ£ (U·µ£ l‚Ä≤ l‚Ä≤<l ‚ä¢Œì))
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü©U ‚Üí
      (‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l) √ó ‚ä¢ Œì
    lemma (noemb (U·µ£ l‚Ä≤ l‚Ä≤<l ‚ä¢Œì)) =
      (l‚Ä≤ , l‚Ä≤<l) , ‚ä¢Œì
    lemma (emb 0<1 ‚ä©U) =
      case lemma ‚ä©U of Œª where
        ((_ , ()) , _)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑U‚áî :
    Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U ‚áî
    ((‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) √ó
     (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U))
  ‚ä©‚à∑U‚áî =
      (Œª (‚ä©U , ‚ä©A) ‚Üí
         lemma (U-elim ‚ä©U) (irrelevanceTerm ‚ä©U (U-intr (U-elim ‚ä©U)) ‚ä©A))
    , (Œª ((l‚Ä≤ , l‚Ä≤<l , ‚ä©A) , B , A‚áí*B , B-type , B‚âÖB) ‚Üí
           U·µ£ (U·µ£ l‚Ä≤ l‚Ä≤<l (wfTerm (‚ä¢t-red‚Çú A‚áí*B)))
         , U‚Çú B A‚áí*B B-type B‚âÖB
             (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©A))
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U / U-intr ‚ä©U ‚Üí
      (‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) √ó
      (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U)
    lemma (noemb (U·µ£ l‚Ä≤ l‚Ä≤<l _)) (U‚Çú B A‚áí*B B-type B‚âÖB ‚ä©A) =
        ( l‚Ä≤ , l‚Ä≤<l
        , PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l))
            ‚ä©A
        )
      , B , A‚áí*B , B-type , B‚âÖB
    lemma (emb 0<1 ‚ä©U) ‚ä©A =
      case lemma ‚ä©U ‚ä©A of Œª where
        ((_ , () , _) , _)

opaque

  -- A variant of ‚ä©‚à∑U‚áî.

  Type‚Üí‚ä©‚à∑U‚áî :
    Type A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U ‚áî
    ((‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) √ó
     Œì ‚ä¢ A ‚à∑ U √ó
     Œì ‚ä¢ A ‚âÖ A ‚à∑ U)
  Type‚Üí‚ä©‚à∑U‚áî {A} {Œì} {l} A-type =
    Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U                                       ‚áî‚ü® ‚ä©‚à∑U‚áî ‚ü©

    (‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) √ó
    (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U)  ‚áî‚ü® id‚áî
                                                              √ó-cong-‚áî
                                                            ( (Œª (_ , A‚áí*B , _ , B‚âÖB) ‚Üí
                                                                 case whnfRed*Term (red‚Çú A‚áí*B) (typeWhnf A-type) of Œª {
                                                                   PE.refl ‚Üí
                                                                 ‚ä¢t-red‚Çú A‚áí*B , B‚âÖB })
                                                            , (Œª (‚ä¢A , A‚âÖA) ‚Üí _ , idRedTerm:*: ‚ä¢A , A-type , A‚âÖA)
                                                            )
                                                          ‚ü©
    (‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A) √ó
    Œì ‚ä¢ A ‚à∑ U √ó
    Œì ‚ä¢ A ‚âÖ A ‚à∑ U                                        ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©U‚â°‚áî :
    Œì ‚ä©‚ü® l ‚ü© U ‚â° A ‚áî
    ((‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l) √ó ‚ä¢ Œì √ó A PE.‚â° U)
  ‚ä©U‚â°‚áî =
      (Œª (‚ä©U , _ , U‚â°A) ‚Üí
         lemma (U-elim ‚ä©U) (irrelevanceEq ‚ä©U (U-intr (U-elim ‚ä©U)) U‚â°A))
    , (Œª where
         ((l‚Ä≤ , l‚Ä≤<l) , ‚ä¢Œì , PE.refl) ‚Üí
           let ‚ä©U = U·µ£ (U·µ£ l‚Ä≤ l‚Ä≤<l ‚ä¢Œì) in
           ‚ä©U , ‚ä©U , PE.refl)
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© U ‚â° A / U-intr ‚ä©U ‚Üí
      (‚àÉ Œª l‚Ä≤ ‚Üí l‚Ä≤ < l) √ó ‚ä¢ Œì √ó A PE.‚â° U
    lemma (noemb (U·µ£ l‚Ä≤ l‚Ä≤<l ‚ä¢Œì)) A‚â°U =
      (l‚Ä≤ , l‚Ä≤<l) , ‚ä¢Œì , A‚â°U
    lemma (emb 0<1 ‚ä©U) ‚ä©A =
      case lemma ‚ä©U ‚ä©A of Œª where
        ((_ , ()) , _)

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑U‚áî :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U ‚áî
    ((‚àÉ‚ÇÇ Œª l‚Ä≤ (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B) √ó
     (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
      Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U √ó
      Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U √ó
      Type A‚Ä≤ √ó
      Type B‚Ä≤ √ó
      Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U))
  ‚ä©‚â°‚à∑U‚áî =
      (Œª (‚ä©U , _ , _ , A‚â°B) ‚Üí
         lemma‚ÇÉ (U-elim ‚ä©U)
           (irrelevanceEqTerm ‚ä©U (U-intr (U-elim ‚ä©U)) A‚â°B))
    , (Œª ( (l‚Ä≤ , l‚Ä≤<l , ‚ä©A , ‚ä©B , A‚â°B)
         , (A‚Ä≤ , B‚Ä≤ , A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)
         ) ‚Üí
         let ‚ä©A =
               PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©A
             ‚ä©B =
               PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©B
         in
           U·µ£ (U·µ£ l‚Ä≤ l‚Ä≤<l (wfTerm (‚ä¢t-red‚Çú A‚áí*A‚Ä≤)))
         , U‚Çú A‚Ä≤ A‚áí*A‚Ä≤ A‚Ä≤-type (‚âÖ‚Çú-trans A‚Ä≤‚âÖB‚Ä≤ (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤)) ‚ä©A
         , U‚Çú B‚Ä≤ B‚áí*B‚Ä≤ B‚Ä≤-type (‚âÖ‚Çú-trans (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤) A‚Ä≤‚âÖB‚Ä≤) ‚ä©B
         , U‚Çú‚Çå A‚Ä≤ B‚Ä≤ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B
             (lemma‚ÇÇ (kit‚â°kit‚Ä≤ l‚Ä≤<l) A‚â°B))
    where
    lemma‚ÇÅ :
      {l‚Ä≤<l : l‚Ä≤ < l}
      {‚ä©A : LogRelKit._‚ä©_ (kit‚Ä≤ l‚Ä≤<l) Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l‚Ä≤<l) ‚Üí
      LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ l‚Ä≤<l) Œì A B ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_/_ k Œì A B
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (PE.sym eq) ‚ä©A)
    lemma‚ÇÅ PE.refl A‚â°B = A‚â°B

    lemma‚ÇÇ :
      {l‚Ä≤<l : l‚Ä≤ < l}
      {‚ä©A : LogRelKit._‚ä©_ k Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l‚Ä≤<l) ‚Üí
      LogRelKit._‚ä©_‚â°_/_ k Œì A B ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ l‚Ä≤<l) Œì A B
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) eq ‚ä©A)
    lemma‚ÇÇ PE.refl A‚â°B = A‚â°B

    lemma‚ÇÉ :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U / U-intr ‚ä©U ‚Üí
      (‚àÉ‚ÇÇ Œª l‚Ä≤ (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B) √ó
      (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
       Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U √ó
       Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U √ó
       Type A‚Ä≤ √ó
       Type B‚Ä≤ √ó
       Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U)
    lemma‚ÇÉ (emb 0<1 ‚ä©U) A‚â°B =
      case lemma‚ÇÉ ‚ä©U A‚â°B of Œª where
        ((_ , () , _) , _)
    lemma‚ÇÉ
      (noemb (U·µ£ l‚Ä≤ l‚Ä≤<l _))
      (U‚Çú‚Çå A‚Ä≤ B‚Ä≤ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B A‚â°B) =
        ( l‚Ä≤ , l‚Ä≤<l
        , ( PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _)
              (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l)) ‚ä©A
          , PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _)
              (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l)) ‚ä©B
          , lemma‚ÇÅ (kit‚â°kit‚Ä≤ l‚Ä≤<l) A‚â°B
          )
        )
      , (A‚Ä≤ , B‚Ä≤ , A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)

opaque

  -- A variant of ‚ä©‚â°‚à∑U‚áî.

  Type‚Üí‚ä©‚â°‚à∑U‚áî :
    Type A ‚Üí
    Type B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U ‚áî
    (Œì ‚ä¢ A ‚à∑ U √ó
     Œì ‚ä¢ B ‚à∑ U √ó
     Œì ‚ä¢ A ‚âÖ B ‚à∑ U √ó
     ‚àÉ‚ÇÇ Œª l‚Ä≤ (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B)
  Type‚Üí‚ä©‚â°‚à∑U‚áî {A} {B} {Œì} {l} A-type B-type =
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U                           ‚áî‚ü® ‚ä©‚â°‚à∑U‚áî ‚ü©

    (‚àÉ‚ÇÇ Œª l‚Ä≤ (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B) √ó
    (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
     Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U √ó
     Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U √ó
     Type A‚Ä≤ √ó
     Type B‚Ä≤ √ó
     Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U)                            ‚áî‚ü® (Œª ((_ , l‚Ä≤<l , A‚â°B) , (_ , _ , A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , _ , _ , A‚Ä≤‚âÖB‚Ä≤)) ‚Üí
                                                       case whnfRed*Term (red‚Çú A‚áí*A‚Ä≤) (typeWhnf A-type) of Œª {
                                                         PE.refl ‚Üí
                                                       case whnfRed*Term (red‚Çú B‚áí*B‚Ä≤) (typeWhnf B-type) of Œª {
                                                         PE.refl ‚Üí
                                                       ‚ä¢t-red‚Çú A‚áí*A‚Ä≤ , ‚ä¢t-red‚Çú B‚áí*B‚Ä≤ , A‚Ä≤‚âÖB‚Ä≤ , _ , l‚Ä≤<l , A‚â°B }})
                                                  , (Œª (‚ä¢A , ‚ä¢B , A‚âÖB , _ , l‚Ä≤<l , A‚â°B) ‚Üí
                                                         (_ , l‚Ä≤<l , A‚â°B)
                                                       , ( _ , _ , idRedTerm:*: ‚ä¢A , idRedTerm:*: ‚ä¢B
                                                         , A-type , B-type , A‚âÖB
                                                         ))
                                                  ‚ü©
    Œì ‚ä¢ A ‚à∑ U √ó
    Œì ‚ä¢ B ‚à∑ U √ó
    Œì ‚ä¢ A ‚âÖ B ‚à∑ U √ó
    (‚àÉ‚ÇÇ Œª l‚Ä≤ (l‚Ä≤<l : l‚Ä≤ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B)  ‚ñ°‚áî

------------------------------------------------------------------------
-- Validity

opaque

  -- Validity of¬†U.

  ‚ä©·µõU : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® ¬π ‚ü© U
  ‚ä©·µõU {Œì} ‚ä©Œì =
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                  ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî                               ‚Üí‚ü® (Œª ‚ä¢Œî ‚Üí (_ , 0<1) , ‚ä¢Œî , PE.refl) ‚ü©
          (‚àÉ Œª l ‚Üí l < ¬π) √ó ‚ä¢ Œî √ó U PE.‚â° U  ‚áîÀò‚ü® ‚ä©U‚â°‚áî ‚ü©‚Üí
          Œî ‚ä©‚ü® ¬π ‚ü© U ‚â° U                    ‚ñ°
      )

opaque

  -- Validity of one of the typing rules called univ.

  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚à∑ U ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A
  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ ‚ä©A‚à∑U =
    case ‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©A‚à∑U of Œª
      (‚ä©U , A‚â°A‚à∑U) ‚Üí
    emb-‚ä©·µõ ‚Å∞‚â§ $
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ $ A‚â°A‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª {
            ((_ , 0<1 , ‚ä©A[œÉ‚ÇÅ]‚â°A[œÉ‚ÇÇ]) , _) ‚Üí
          ‚ä©A[œÉ‚ÇÅ]‚â°A[œÉ‚ÇÇ] }
      )

opaque

  -- Validity of another of the typing rules called univ.

  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚à∑ U ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚â° B
  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° A‚â°B‚à∑U =
    case ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ A‚â°B‚à∑U of Œª
      (‚ä©U , A‚â°B‚à∑U) ‚Üí
    ‚ä©·µõ‚â°‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ $ A‚â°B‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª {
            ((_ , 0<1 , A‚â°B) , _) ‚Üí
          emb-‚ä©‚â° ‚Å∞‚â§ A‚â°B }
      )
