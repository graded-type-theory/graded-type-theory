------------------------------------------------------------------------
-- Validity of the universe type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Hidden.Levels R as L
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R

open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product as Œ£
open import Tools.Empty
import Tools.PropositionalEquality as PE

private
  variable
    n       : Nat
    Œì       : Con Term n
    A B     : Term n
    l l‚Ä≤ l‚Ä≥ : Universe-level
    k       : LogRelKit

------------------------------------------------------------------------
-- Some characterisation lemmas

private

  -- A lemma used below.

  U‚áí*U‚Üí‚â° : Œì ‚ä¢ U l :‚áí*: U l‚Ä≤ ‚Üí l PE.‚â° l‚Ä≤
  U‚áí*U‚Üí‚â° {Œì} {l} {l‚Ä≤} =
    Œì ‚ä¢ U l :‚áí*: U l‚Ä≤ ‚Üí‚ü® red ‚ü©
    Œì ‚ä¢ U l ‚áí* U l‚Ä≤   ‚Üí‚ü® flip whnfRed* U‚Çô ‚ü©
    U l PE.‚â° U l‚Ä≤     ‚Üí‚ü® (Œª { PE.refl ‚Üí PE.refl }) ‚ü©
    l PE.‚â° l‚Ä≤         ‚ñ°

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©‚ü®‚ü©U‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© U l ‚áî
    (l <·µò l‚Ä≤ √ó ‚ä¢ Œì)
  ‚ä©‚ü®‚ü©U‚áî =
      lemma ‚àò‚Üí U-elim
    , (Œª (l<l‚Ä≤ , ‚ä¢Œì) ‚Üí U·µ£ (U·µ£ _ l<l‚Ä≤ (idRed:*: (U‚±º ‚ä¢Œì))))
    where
    lemma :
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü©U U l ‚Üí
      l <·µò l‚Ä≤ √ó ‚ä¢ Œì
    lemma (noemb (U·µ£ _ l<l‚Ä≤ U‚áí*U@([ ‚ä¢U , _ , _ ]))) =
      case U‚áí*U‚Üí‚â° U‚áí*U of Œª {
        PE.refl ‚Üí
      l<l‚Ä≤ , wf ‚ä¢U }
    lemma (emb ‚â§·µò-refl     ‚ä©U) = Œ£.map ‚â§·µò-step id·∂† (lemma ‚ä©U)
    lemma (emb (‚â§·µò-step p) ‚ä©U) = Œ£.map ‚â§·µò-step id·∂† (lemma (emb p ‚ä©U))

opaque
  unfolding _‚ä©_

  -- A characterisation lemma for _‚ä©_.

  ‚ä©U‚áî : Œì ‚ä© U l ‚áî ‚ä¢ Œì
  ‚ä©U‚áî {Œì} {l} =
    Œì ‚ä© U l                   ‚áî‚ü® id‚áî ‚ü©
    (‚àÉ Œª l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© U l)  ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí ‚ä©‚ü®‚ü©U‚áî) ‚ü©
    (‚àÉ Œª l‚Ä≤ ‚Üí l <·µò l‚Ä≤ √ó ‚ä¢ Œì)  ‚áî‚ü® proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ , (Œª ‚ä¢Œì ‚Üí 1+ l , ‚â§·µò-refl , ‚ä¢Œì) ‚ü©
    ‚ä¢ Œì                       ‚ñ°‚áî

opaque
  unfolding _‚ä©_‚à∑_

  -- A characterisation lemma for _‚ä©_‚à∑_.

  ‚ä©‚à∑U‚áî :
    Œì ‚ä© A ‚à∑ U l ‚áî
    (Œì ‚ä©‚ü® l ‚ü© A √ó ‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U l)
  ‚ä©‚à∑U‚áî {l} =
      (Œª (_ , ‚ä©U , ‚ä©A) ‚Üí
         lemma (U-elim ‚ä©U) (irrelevanceTerm ‚ä©U (U-intr (U-elim ‚ä©U)) ‚ä©A))
    , (Œª (‚ä©A , B , A‚áí*B , B-type , B‚âÖB) ‚Üí
           1+ l
         , U·µ£ (U·µ£ _ ‚â§·µò-refl (idRed:*: (U‚±º (wfTerm (‚ä¢t-red‚Çú A‚áí*B)))))
         , U‚Çú B A‚áí*B B-type B‚âÖB ‚ä©A)
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©U U l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚à∑ U l / U-intr ‚ä©U ‚Üí
      (Œì ‚ä©‚ü® l ‚ü© A √ó
       ‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U l)
    lemma ‚ä©U@(noemb (U·µ£ l l<l‚Ä≤ U‚áí*U)) (U‚Çú B A‚áí*B B-type B‚âÖB ‚ä©A) =
      case U‚áí*U‚Üí‚â° U‚áí*U of Œª {
        PE.refl ‚Üí
        PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (PE.sym (kit‚â°kit‚Ä≤ l<l‚Ä≤)) ‚ä©A
      , B , A‚áí*B , B-type , B‚âÖB }
    lemma (emb ‚â§·µò-refl     ‚ä©U) = lemma ‚ä©U
    lemma (emb (‚â§·µò-step p) ‚ä©U) = lemma (emb p ‚ä©U)

opaque

  -- A variant of ‚ä©‚à∑U‚áî.

  Type‚Üí‚ä©‚à∑U‚áî :
    Type A ‚Üí
    Œì ‚ä© A ‚à∑ U l ‚áî
    ((Œì ‚ä©‚ü® l ‚ü© A) √ó Œì ‚ä¢ A ‚à∑ U l √ó Œì ‚ä¢ A ‚âÖ A ‚à∑ U l)
  Type‚Üí‚ä©‚à∑U‚áî {A} {Œì} {l} A-type =
    Œì ‚ä© A ‚à∑ U l                                            ‚áî‚ü® ‚ä©‚à∑U‚áî ‚ü©

    ((Œì ‚ä©‚ü® l ‚ü© A) √ó ‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l √ó Type B √ó
     Œì ‚ä¢ B ‚âÖ B ‚à∑ U l)
                                                           ‚áî‚ü® id‚áî
                                                                √ó-cong-‚áî
                                                              ( (Œª (_ , A‚áí*B , _ , B‚âÖB) ‚Üí
                                                                  case whnfRed*Term (red‚Çú A‚áí*B) (typeWhnf A-type) of Œª {
                                                                    PE.refl ‚Üí
                                                                  ‚ä¢t-red‚Çú A‚áí*B , B‚âÖB })
                                                              , (Œª (‚ä¢A , A‚âÖA) ‚Üí _ , idRedTerm:*: ‚ä¢A , A-type , A‚âÖA)
                                                              )
                                                            ‚ü©

    (Œì ‚ä©‚ü® l ‚ü© A) √ó Œì ‚ä¢ A ‚à∑ U l √ó Œì ‚ä¢ A ‚âÖ A ‚à∑ U l           ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©‚ü®‚ü©U‚â°‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© U l ‚â° A ‚áî
    (l <·µò l‚Ä≤ √ó Œì ‚ä¢ A :‚áí*: U l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)
  ‚ä©‚ü®‚ü©U‚â°‚áî {l‚Ä≤} {l} =
      (Œª (‚ä©U , ‚ä©A , U‚â°A) ‚Üí
         let l<l‚Ä≤ , A‚áí*U =
               lemma (U-elim ‚ä©U)
                 (irrelevanceEq ‚ä©U (U-intr (U-elim ‚ä©U)) U‚â°A)
         in l<l‚Ä≤ , A‚áí*U , ‚ä©A)
    , (Œª (l<l‚Ä≤ , A‚áí*U@([ _ , ‚ä¢U , _ ]) , ‚ä©A) ‚Üí
         U·µ£ (U·µ£ l l<l‚Ä≤ (idRed:*: ‚ä¢U)) , ‚ä©A , A‚áí*U)
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l‚Ä≥ ‚ü©U U l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≥ ‚ü© U l ‚â° A / U-intr ‚ä©U ‚Üí
      l <·µò l‚Ä≥ √ó Œì ‚ä¢ A :‚áí*: U l
    lemma ‚ä©U@(noemb (U·µ£ _ l<l‚Ä≥ U‚áí*U)) A‚áí*U =
      case U‚áí*U‚Üí‚â° U‚áí*U of Œª {
        PE.refl ‚Üí
      l<l‚Ä≥ , A‚áí*U }
    lemma (emb ‚â§·µò-refl     ‚ä©U) = Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma ‚ä©U
    lemma (emb (‚â§·µò-step p) ‚ä©U) = Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma (emb p ‚ä©U)

opaque
  unfolding _‚ä©_ _‚ä©_‚â°_

  -- A characterisation lemma for _‚ä©_‚â°_.

  ‚ä©U‚â°‚áî :
    Œì ‚ä© U l ‚â° A ‚áî
    (Œì ‚ä¢ A :‚áí*: U l √ó Œì ‚ä© A)
  ‚ä©U‚â°‚áî {Œì} {l} {A} =
    Œì ‚ä© U l ‚â° A                                        ‚áî‚ü® id‚áî ‚ü©
    (‚àÉ Œª l‚Ä≤ ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© U l ‚â° A)                       ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí ‚ä©‚ü®‚ü©U‚â°‚áî) ‚ü©
    (‚àÉ Œª l‚Ä≤ ‚Üí l <·µò l‚Ä≤ √ó Œì ‚ä¢ A :‚áí*: U l √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A)  ‚áî‚ü® (Œª (_ , _ , A‚áí*U , ‚ä©A) ‚Üí A‚áí*U , _ , ‚ä©A)
                                                        , (Œª (A‚áí*U , l‚Ä≤ , ‚ä©A) ‚Üí l‚Ä≤ ‚äî·µò 1+ l , ‚â§·µò‚äî·µòÀ° {l‚ÇÅ = l‚Ä≤} , A‚áí*U , emb-‚â§-‚ä© ‚â§·µò‚äî·µò ≥ ‚ä©A)
                                                        ‚ü©
    Œì ‚ä¢ A :‚áí*: U l √ó Œì ‚ä© A                             ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑U‚áî :
    Œì ‚ä© A ‚â° B ‚à∑ U l ‚áî
    (Œì ‚ä©‚ü® l ‚ü© A ‚â° B √ó
     ‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
     Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l √ó
     Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l √ó
     Type A‚Ä≤ √ó
     Type B‚Ä≤ √ó
     Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l)
  ‚ä©‚â°‚à∑U‚áî {l} =
      (Œª (_ , ‚ä©U , _ , _ , A‚â°B) ‚Üí
         lemma (U-elim ‚ä©U)
           (irrelevanceEqTerm ‚ä©U (U-intr (U-elim ‚ä©U)) A‚â°B))
    , (Œª ((‚ä©A , ‚ä©B , A‚â°B) , _ , _ ,
          A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤) ‚Üí
           1+ l
         , U·µ£‚Ä≤ _ ‚â§·µò-refl (idRed:*: (U‚±º (wfTerm (‚ä¢t-red‚Çú A‚áí*A‚Ä≤))))
         , U‚Çú _ A‚áí*A‚Ä≤ A‚Ä≤-type (‚âÖ‚Çú-trans A‚Ä≤‚âÖB‚Ä≤ (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤)) ‚ä©A
         , U‚Çú _ B‚áí*B‚Ä≤ B‚Ä≤-type (‚âÖ‚Çú-trans (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤) A‚Ä≤‚âÖB‚Ä≤) ‚ä©B
         , U‚Çú‚Çå _ _ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B A‚â°B)
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©U U l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚â° B ‚à∑ U l / U-intr ‚ä©U ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B √ó
      ‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
      Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l √ó
      Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l √ó
      Type A‚Ä≤ √ó
      Type B‚Ä≤ √ó
      Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l
    lemma
      {l‚Ä≤}
      ‚ä©U@(noemb (U·µ£ _ l<l‚Ä≤ U‚áí*U))
      (U‚Çú‚Çå _ _ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B A‚â°B) =
        case U‚áí*U‚Üí‚â° U‚áí*U of Œª {
            PE.refl ‚Üí
          ( ‚ä©<‚áî‚ä© l<l‚Ä≤ .proj‚ÇÅ ‚ä©A
          , ‚ä©<‚áî‚ä© l<l‚Ä≤ .proj‚ÇÅ ‚ä©B
          , ‚ä©<‚â°‚áî‚ä©‚â° l<l‚Ä≤ .proj‚ÇÅ A‚â°B
          )
        , _ , _ , A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤ }
    lemma (emb ‚â§·µò-refl     ‚ä©U) = lemma ‚ä©U
    lemma (emb (‚â§·µò-step p) ‚ä©U) = lemma (emb p ‚ä©U)

opaque

  -- A variant of ‚ä©‚â°‚à∑U‚áî.

  Type‚Üí‚ä©‚â°‚à∑U‚áî :
    Type A ‚Üí
    Type B ‚Üí
    Œì ‚ä© A ‚â° B ‚à∑ U l ‚áî
    ((Œì ‚ä©‚ü® l ‚ü© A ‚â° B) √ó
     Œì ‚ä¢ A ‚à∑ U l √ó
     Œì ‚ä¢ B ‚à∑ U l √ó
     Œì ‚ä¢ A ‚âÖ B ‚à∑ U l)
  Type‚Üí‚ä©‚â°‚à∑U‚áî {A} {B} {Œì} {l} A-type B-type =
    Œì ‚ä© A ‚â° B ‚à∑ U l         ‚áî‚ü® ‚ä©‚â°‚à∑U‚áî ‚ü©

    ((Œì ‚ä©‚ü® l ‚ü© A ‚â° B) √ó
     ‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
     Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l √ó
     Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l √ó
     Type A‚Ä≤ √ó
     Type B‚Ä≤ √ó
     Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l)     ‚áî‚ü® (Œª (A‚â°B , _ , _ , A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤) ‚Üí
                                  case whnfRed*Term (red‚Çú A‚áí*A‚Ä≤) (typeWhnf A-type) of Œª {
                                    PE.refl ‚Üí
                                  case whnfRed*Term (red‚Çú B‚áí*B‚Ä≤) (typeWhnf B-type) of Œª {
                                    PE.refl ‚Üí
                                  A‚â°B , ‚ä¢t-red‚Çú A‚áí*A‚Ä≤ , ‚ä¢t-red‚Çú B‚áí*B‚Ä≤ , A‚Ä≤‚âÖB‚Ä≤ }})
                             , (Œª (A‚â°B ,  ‚ä¢A , ‚ä¢B , A‚âÖB) ‚Üí
                                    A‚â°B , _ , _
                                  , idRedTerm:*: ‚ä¢A , idRedTerm:*: ‚ä¢B
                                  , A-type , B-type , A‚âÖB)
                             ‚ü©
    (Œì ‚ä©‚ü® l ‚ü© A ‚â° B) √ó
    Œì ‚ä¢ A ‚à∑ U l √ó
    Œì ‚ä¢ B ‚à∑ U l √ó
    Œì ‚ä¢ A ‚âÖ B ‚à∑ U l         ‚ñ°‚áî

------------------------------------------------------------------------
-- Validity

opaque

  -- Validity of¬†U.

  ‚ä©·µõU : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ U l
  ‚ä©·µõU {Œì} {l} ‚ä©Œì =
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì              ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
          ‚ä¢ Œî                           ‚Üí‚ü® (Œª ‚ä¢Œî ‚Üí idRed:*: (U‚±º ‚ä¢Œî) , ‚ä©U‚áî .proj‚ÇÇ ‚ä¢Œî) ‚ü©
          Œî ‚ä¢ U l :‚áí*: U l √ó (Œî ‚ä© U l)  ‚áîÀò‚ü® ‚ä©U‚â°‚áî ‚ü©‚Üí
          Œî ‚ä© U l ‚â° U l                 ‚ñ°
      )

opaque

  -- Validity of U, seen as a term former.

  ‚ä©·µõU‚à∑U : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ U l ‚à∑ U (1+ l)
  ‚ä©·µõU‚à∑U {Œì} {l} ‚ä©Œì =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                          ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©

          ‚ä¢ Œî                                       ‚Üí‚ü® (Œª ‚ä¢Œî ‚Üí ‚ä©‚ü®‚ü©U‚áî .proj‚ÇÇ (‚â§·µò-refl , ‚ä¢Œî) , U‚±º ‚ä¢Œî , ‚âÖ-Urefl ‚ä¢Œî) ‚ü©

          (Œî ‚ä©‚ü® 1+ l ‚ü© U l) √ó Œî ‚ä¢ U l ‚à∑ U (1+ l) √ó
          Œî ‚ä¢ U l ‚âÖ U l ‚à∑ U (1+ l)                  ‚áîÀò‚ü® Type‚Üí‚ä©‚à∑U‚áî U‚Çô ‚ü©‚Üí

          Œî ‚ä© U l ‚à∑ U (1+ l)                        ‚Üí‚ü® L.refl-‚ä©‚â°‚à∑ ‚ü©

          Œî ‚ä© U l ‚â° U l ‚à∑ U (1+ l)                  ‚ñ°
      )

opaque

  -- Validity of one of the typing rules called univ.

  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ :
    Œì ‚ä©·µõ A ‚à∑ U l ‚Üí
    Œì ‚ä©·µõ A
  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ ‚ä©A‚à∑U =
    case ‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©A‚à∑U of Œª
      (‚ä©U , A‚â°A‚à∑U) ‚Üí
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , L.‚ä©‚â°-intro ‚àò‚Üí proj‚ÇÅ ‚àò‚Üí ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ ‚àò‚Üí A‚â°A‚à∑U
      )

opaque

  -- Validity of another of the typing rules called univ.

  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° :
    Œì ‚ä©·µõ A ‚â° B ‚à∑ U l ‚Üí
    Œì ‚ä©·µõ A ‚â° B
  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° A‚â°B‚à∑U =
    case ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ A‚â°B‚à∑U of Œª
      (‚ä©U , A‚â°B‚à∑U) ‚Üí
    ‚ä©·µõ‚â°‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , L.‚ä©‚â°-intro ‚àò‚Üí proj‚ÇÅ ‚àò‚Üí ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ ‚àò‚Üí A‚â°B‚à∑U
      )
