------------------------------------------------------------------------
-- Validity of the universe type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Universe
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Kit R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R

open import Tools.Function
open import Tools.Nat using (Nat; ‚â§‚Ä≤-step; ‚â§‚Ä≤-refl; 1+)
open import Tools.Product
open import Tools.Empty
import Tools.PropositionalEquality as PE

private
  variable
    n       : Nat
    Œì       : Con Term n
    A B     : Term n
    l l‚Ä≤ l‚Ä≥ : TypeLevel
    k       : LogRelKit

------------------------------------------------------------------------
-- Some characterisation lemmas

lem : {l< : l‚Ä≤ < l} ‚Üí {D : Œì ‚ä¢ U l‚Ä≥ :‚áí*: U l‚Ä≤} ‚Üí  (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ‚Üí ‚ä©U PE.‚â° noemb (U·µ£ l‚Ä≤ l< D) ‚Üí l‚Ä≥ PE.‚â° l‚Ä≤
lem (noemb (U·µ£ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , id x ])) PE.refl = PE.refl
lem (noemb (U·µ£ l‚Ä≤ l< [ ‚ä¢A , ‚ä¢B , x ‚á® D ])) e = ‚ä•-elim (whnfRed x U‚Çô)

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©U‚áî :
    Œì ‚ä©‚ü® l ‚ü© U l‚Ä≥ ‚áî
    ((l‚Ä≥ < l) √ó ‚ä¢ Œì)
  ‚ä©U‚áî =
      (Œª ‚ä©U ‚Üí lemma (U-elim (id (escape ‚ä©U)) ‚ä©U))
    , (Œª (l‚Ä≤<l , ‚ä¢Œì) ‚Üí
        U·µ£ (U·µ£ _ l‚Ä≤<l (idRed:*: (U‚±º ‚ä¢Œì))))
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥ ‚Üí
      (l‚Ä≥ < l) √ó ‚ä¢ Œì
    lemma ‚ä©U@(noemb (U·µ£ l‚Ä≤ l‚Ä≤<l ([ ‚ä¢A , ‚ä¢B , D ]))) =
      case lem ‚ä©U PE.refl of Œª {
         PE.refl ‚Üí l‚Ä≤<l , wf ‚ä¢A
         }
    lemma (emb ‚â§‚Ä≤-refl ‚ä©U) =
      case lemma ‚ä©U of Œª where
         (l< , ‚ä¢Œì) ‚Üí ‚â§‚Ä≤-step l< , ‚ä¢Œì
    lemma (emb (‚â§‚Ä≤-step s) ‚ä©U) =
      case lemma (emb s ‚ä©U) of Œª where
         (l< , ‚ä¢Œì) ‚Üí ‚â§‚Ä≤-step l< , ‚ä¢Œì

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑U‚áî :
    Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≥ ‚áî
    (l‚Ä≥ < l √ó Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A √ó
      (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l‚Ä≥ √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U l‚Ä≥))
  ‚ä©‚à∑U‚áî =
      (Œª (‚ä©U , ‚ä©A) ‚Üí
         lemma (U-elim (id (escape ‚ä©U)) ‚ä©U) (irrelevanceTerm ‚ä©U (U-intr (U-elim (id (escape ‚ä©U)) ‚ä©U)) ‚ä©A))
    , (Œª (l‚Ä≤<l , ‚ä©A , B , A‚áí*B , B-type , B‚âÖB) ‚Üí
         U·µ£ (U·µ£ _ l‚Ä≤<l (idRed:*: (U‚±º (wfTerm (‚ä¢t-red‚Çú A‚áí*B)))))
         , (U‚Çú B A‚áí*B B-type B‚âÖB
             (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©A)))
    where
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≥ / U-intr ‚ä©U ‚Üí
      (l‚Ä≥ < l √ó Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A √ó
      (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l‚Ä≥ √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U l‚Ä≥))
    lemma ‚ä©U@(noemb (U·µ£ l‚Ä≤ l‚Ä≤<l _)) (U‚Çú B A‚áí*B B-type B‚âÖB ‚ä©A) =
      case lem ‚ä©U PE.refl of Œª {
         PE.refl ‚Üí
              l‚Ä≤<l
              , PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l)) ‚ä©A
              , B , A‚áí*B , B-type , B‚âÖB
         }
    lemma (emb ‚â§‚Ä≤-refl ‚ä©U) ‚ä©A =
        case lemma ‚ä©U ‚ä©A of Œª where
            (l< , ‚ä©A‚Ä≤ , B , D , B-type , B‚â°B) ‚Üí ‚â§‚Ä≤-step l< , ‚ä©A‚Ä≤ , B , D , B-type , B‚â°B
    lemma (emb (‚â§‚Ä≤-step 0<1) ‚ä©U) ‚ä©A =
        case lemma (emb 0<1 ‚ä©U) ‚ä©A of Œª where
            (l< , ‚ä©A‚Ä≤ , B , D , B-type , B‚â°B) ‚Üí ‚â§‚Ä≤-step l< , ‚ä©A‚Ä≤ , B , D , B-type , B‚â°B

opaque

  -- A variant of ‚ä©‚à∑U‚áî.

  Type‚Üí‚ä©‚à∑U‚áî : {l‚Ä≥ : TypeLevel} ‚Üí
    Type A ‚Üí
    (Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≥ ‚áî
    ((l‚Ä≥ < l) √ó (Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A) √ó
     Œì ‚ä¢ A ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ A ‚âÖ A ‚à∑ U l‚Ä≥))
  Type‚Üí‚ä©‚à∑U‚áî {A} {Œì} {l} {l‚Ä≥ = l‚Ä≥} A-type =
    (Œì ‚ä©‚ü® l ‚ü© A ‚à∑ U l‚Ä≥)                               ‚áî‚ü® ‚ä©‚à∑U‚áî ‚ü©

    (l‚Ä≥ < l √ó Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A √ó
    (‚àÉ Œª B ‚Üí Œì ‚ä¢ A :‚áí*: B ‚à∑ U l‚Ä≥ √ó Type B √ó Œì ‚ä¢ B ‚âÖ B ‚à∑ U l‚Ä≥)) ‚áî‚ü® id‚áî √ó-cong-‚áî id‚áî √ó-cong-‚áî
                                                                ( (Œª (_ , A‚áí*B , _ , B‚âÖB) ‚Üí
                                                                    case whnfRed*Term (red‚Çú A‚áí*B) (typeWhnf A-type) of Œª {
                                                                      PE.refl ‚Üí
                                                                    ‚ä¢t-red‚Çú A‚áí*B , B‚âÖB })
                                                                , (Œª (‚ä¢A , A‚âÖA) ‚Üí _ , idRedTerm:*: ‚ä¢A , A-type , A‚âÖA)
                                                                )
                                                          ‚ü©

    ((l‚Ä≥  < l) √ó (Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A) √ó
     Œì ‚ä¢ A ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ A ‚âÖ A ‚à∑ U l‚Ä≥)                                         ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©U‚â°‚áî :
    Œì ‚ä©‚ü® l ‚ü© U l‚Ä≥ ‚â° A ‚áî
    (l‚Ä≥ < l √ó ‚ä¢ Œì √ó Œì ‚ä¢ A :‚áí*: U l‚Ä≥ √ó Œì ‚ä©‚ü® l ‚ü© A)
  ‚ä©U‚â°‚áî =
      (Œª (‚ä©U , ‚ä©A , U‚â°A) ‚Üí
         lemma (U-elim (id (escape ‚ä©U)) ‚ä©U)
         (irrelevanceEq ‚ä©U (U-intr (U-elim (id (escape ‚ä©U)) ‚ä©U)) U‚â°A) ‚ä©A)
    , (Œª where
         (l‚Ä≤<l , ‚ä¢Œì , D , ‚ä©A) ‚Üí
           let ‚ä©U = U·µ£ (U·µ£ _ l‚Ä≤<l (idRed:*: (U‚±º ‚ä¢Œì))) in
           ‚ä©U , ‚ä©A , D)
    where
    lemma2 :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© U l‚Ä≥ ‚â° A / U-intr ‚ä©U ‚Üí
      (l‚Ä≥ < l √ó ‚ä¢ Œì √ó Œì ‚ä¢ A :‚áí*: U l‚Ä≥)
    lemma2 ‚ä©U@(noemb (U·µ£ l‚Ä≤ l‚Ä≤<l ([ ‚ä¢A , ‚ä¢U , d ]))) A‚â°U =
      case lem ‚ä©U PE.refl of Œª {
         PE.refl ‚Üí
              l‚Ä≤<l , wf ‚ä¢A , A‚â°U
         }
    lemma2 (emb ‚â§‚Ä≤-refl ‚ä©U) A‚â°U =
      case lemma2 ‚ä©U A‚â°U of Œª where
        (l< , ‚ä¢Œì , D) ‚Üí ‚â§‚Ä≤-step l< , ‚ä¢Œì , D
    lemma2 (emb (‚â§‚Ä≤-step l<) ‚ä©U) A‚â°U =
      case lemma2 (emb l< ‚ä©U) A‚â°U of Œª where
        (l< , ‚ä¢Œì , D) ‚Üí ‚â§‚Ä≤-step l< , ‚ä¢Œì , D
    lemma :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© U l‚Ä≥ ‚â° A / U-intr ‚ä©U ‚Üí
      (Œì ‚ä©‚ü® l ‚ü© A) ‚Üí
      (l‚Ä≥ < l √ó ‚ä¢ Œì √ó Œì ‚ä¢ A :‚áí*: U l‚Ä≥ √ó Œì ‚ä©‚ü® l ‚ü© A)
    lemma ‚ä©U@(noemb (U·µ£ l‚Ä≤ l‚Ä≤<l ([ ‚ä¢A , ‚ä¢U , d ]))) A‚â°U ‚ä©A =
      case lem ‚ä©U PE.refl of Œª {
         PE.refl ‚Üí
              l‚Ä≤<l , wf ‚ä¢A , A‚â°U , ‚ä©A
         }
    lemma (emb l< ‚ä©U) A‚â°U ‚ä©A =
      case lemma2 (emb l< ‚ä©U) A‚â°U of Œª where
        (l< , ‚ä¢Œì , D) ‚Üí l< , ‚ä¢Œì , D , ‚ä©A

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑U‚áî :
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ ‚áî
    (‚àÉ Œª (l‚Ä≤<l : l‚Ä≥ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B √ó
     (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
      Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l‚Ä≥ √ó
      Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l‚Ä≥ √ó
      Type A‚Ä≤ √ó
      Type B‚Ä≤ √ó
      Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l‚Ä≥))
  ‚ä©‚â°‚à∑U‚áî =
      (Œª (‚ä©U , _ , _ , A‚â°B) ‚Üí
          lemma‚ÇÉ (U-elim (id (escape ‚ä©U)) ‚ä©U)
           (irrelevanceEqTerm ‚ä©U (U-intr (U-elim (id (escape ‚ä©U)) ‚ä©U)) A‚â°B) )
    , (Œª (l‚Ä≤<l , (‚ä©A , ‚ä©B , A‚â°B) , A‚Ä≤ , B‚Ä≤
         , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)) ‚Üí
         let ‚ä©A =
               PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©A
             ‚ä©B =
               PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ l‚Ä≤<l) ‚ä©B
         in
         U·µ£ (U·µ£ _ l‚Ä≤<l (idRed:*: (U‚±º (wfTerm (‚ä¢t-red‚Çú DA)))))
         , U‚Çú A‚Ä≤ DA A‚Ä≤-type (‚âÖ‚Çú-trans A‚Ä≤‚âÖB‚Ä≤ (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤)) ‚ä©A
         , U‚Çú B‚Ä≤ DB B‚Ä≤-type (‚âÖ‚Çú-trans (‚âÖ‚Çú-sym A‚Ä≤‚âÖB‚Ä≤) A‚Ä≤‚âÖB‚Ä≤) ‚ä©B
         , U‚Çú‚Çå A‚Ä≤ B‚Ä≤ DA DB A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B
             (lemma‚ÇÇ {l‚Ä≤<l = l‚Ä≤<l} (kit‚â°kit‚Ä≤ l‚Ä≤<l) A‚â°B))
    where
    lemma‚ÇÅ :
      {l‚Ä≤<l : l‚Ä≤ < l}
      {‚ä©A : LogRelKit._‚ä©_ (kit‚Ä≤ l‚Ä≤<l) Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l‚Ä≤<l) ‚Üí
      LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ l‚Ä≤<l) Œì A B ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_/_ k Œì A B
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (PE.sym eq) ‚ä©A)
    lemma‚ÇÅ PE.refl A‚â°B = A‚â°B

    lemma‚ÇÇ :
      {l‚Ä≤<l : l‚Ä≤ < l}
      {‚ä©A : LogRelKit._‚ä©_ k Œì A}
      (eq : k PE.‚â° kit‚Ä≤ l‚Ä≤<l) ‚Üí
      LogRelKit._‚ä©_‚â°_/_ k Œì A B ‚ä©A ‚Üí
      LogRelKit._‚ä©_‚â°_/_ (kit‚Ä≤ l‚Ä≤<l) Œì A B
        (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) eq ‚ä©A)
    lemma‚ÇÇ PE.refl A‚â°B = A‚â°B

    lemma‚ÇÉ :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U U l‚Ä≥) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ / U-intr ‚ä©U ‚Üí
      (‚àÉ Œª (l‚Ä≤<l : l‚Ä≥ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B √ó
      (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
       Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l‚Ä≥ √ó
       Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l‚Ä≥ √ó
       Type A‚Ä≤ √ó
       Type B‚Ä≤ √ó
       Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l‚Ä≥))
    lemma‚ÇÉ
      ‚ä©U@(noemb (U·µ£ l‚Ä≤ l‚Ä≤<l _))
      (U‚Çú‚Çå A‚Ä≤ B‚Ä≤ A‚áí*A‚Ä≤ B‚áí*B‚Ä≤ A‚Ä≤-type B‚Ä≤-type A‚Ä≤‚âÖB‚Ä≤ ‚ä©A ‚ä©B A‚â°B) =
        case lem ‚ä©U PE.refl of Œª {
            PE.refl ‚Üí
                (l‚Ä≤<l
                , ( PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _)
                    (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l)) ‚ä©A
                , PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _)
                    (PE.sym (kit‚â°kit‚Ä≤ l‚Ä≤<l)) ‚ä©B
                , lemma‚ÇÅ {l‚Ä≤<l = l‚Ä≤<l} (kit‚â°kit‚Ä≤ l‚Ä≤<l) A‚â°B
                )
            , A‚Ä≤ , B‚Ä≤ , (A‚áí*A‚Ä≤ , B‚áí*B‚Ä≤ , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)) 
            }
    lemma‚ÇÉ (emb ‚â§‚Ä≤-refl ‚ä©U) A‚â°B =
      case lemma‚ÇÉ ‚ä©U A‚â°B of Œª where
        (l‚Ä≤<l , (‚ä©A , ‚ä©B , A‚â°B) , A‚Ä≤ , B‚Ä≤
         , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)) ->
         (‚â§‚Ä≤-step l‚Ä≤<l , (‚ä©A , ‚ä©B , A‚â°B) , A‚Ä≤ , B‚Ä≤
         , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤))
    lemma‚ÇÉ (emb (‚â§‚Ä≤-step l<) ‚ä©U) A‚â°B =
      case lemma‚ÇÉ (emb l< ‚ä©U) A‚â°B of Œª where
        (l‚Ä≤<l , (‚ä©A , ‚ä©B , A‚â°B) , A‚Ä≤ , B‚Ä≤
         , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)) ->
         (‚â§‚Ä≤-step l‚Ä≤<l , (‚ä©A , ‚ä©B , A‚â°B) , A‚Ä≤ , B‚Ä≤
         , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤))

opaque

  -- A variant of ‚ä©‚â°‚à∑U‚áî.

  Type‚Üí‚ä©‚â°‚à∑U‚áî :
    {l‚Ä≥ : TypeLevel} ‚Üí
    Type A ‚Üí
    Type B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ ‚áî
    (‚àÉ Œª (l‚Ä≤<l : l‚Ä≥ < l) ‚Üí (Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B) √ó
     Œì ‚ä¢ A ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ B ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ A ‚âÖ B ‚à∑ U l‚Ä≥)
  Type‚Üí‚ä©‚â°‚à∑U‚áî {A} {B} {Œì} {l} {l‚Ä≥ = l‚Ä≥} A-type B-type =
    (Œì ‚ä©‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥)                           ‚áî‚ü® ‚ä©‚â°‚à∑U‚áî ‚ü©

    (‚àÉ Œª (l‚Ä≤<l : l‚Ä≥ < l) ‚Üí Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B √ó
     (‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí
      Œì ‚ä¢ A :‚áí*: A‚Ä≤ ‚à∑ U l‚Ä≥ √ó
      Œì ‚ä¢ B :‚áí*: B‚Ä≤ ‚à∑ U l‚Ä≥ √ó
      Type A‚Ä≤ √ó
      Type B‚Ä≤ √ó
      Œì ‚ä¢ A‚Ä≤ ‚âÖ B‚Ä≤ ‚à∑ U l‚Ä≥))                            ‚áî‚ü® (Œª ( l‚Ä≤<l , A‚â°B , A‚Ä≤ , B‚Ä≤ , (DA , DB , A‚Ä≤-type , B‚Ä≤-type , A‚Ä≤‚âÖB‚Ä≤)) ‚Üí
                                                       case whnfRed*Term (red‚Çú DA) (typeWhnf A-type) of Œª {
                                                         PE.refl ‚Üí
                                                       case whnfRed*Term (red‚Çú DB) (typeWhnf B-type) of Œª {
                                                         PE.refl ‚Üí
                                                       ( l‚Ä≤<l , A‚â°B , ‚ä¢t-red‚Çú DA , ‚ä¢t-red‚Çú DB , A‚Ä≤‚âÖB‚Ä≤)}})
                                                  , (Œª ( l‚Ä≤<l , A‚â°B , ‚ä¢A , ‚ä¢B , A‚âÖB) ‚Üí
                                                       ( l‚Ä≤<l , A‚â°B , _ , _ ,
                                                       (idRedTerm:*: ‚ä¢A , idRedTerm:*: ‚ä¢B ,
                                                       A-type , B-type , A‚âÖB)))
                                                  ‚ü©
    (‚àÉ Œª (l‚Ä≤<l : l‚Ä≥ < l) ‚Üí (Œì ‚ä©‚ü® l‚Ä≥ ‚ü© A ‚â° B) √ó
     Œì ‚ä¢ A ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ B ‚à∑ U l‚Ä≥ √ó
     Œì ‚ä¢ A ‚âÖ B ‚à∑ U l‚Ä≥)                            ‚ñ°‚áî

------------------------------------------------------------------------
-- Validity

opaque

  -- Validity of¬†U.

  ‚ä©·µõU : ‚ä©·µõ Œì ‚Üí Œì ‚ä©·µõ‚ü® 1+ l ‚ü© U l
  ‚ä©·µõU {Œì} {l = l} ‚ä©Œì =
    ‚ä©·µõ‚áî .proj‚ÇÇ (‚ä©Œì , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ}  ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                                      ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
    ‚ä¢ Œî                                                   ‚Üí‚ü® (Œª ‚ä¢Œî ‚Üí ‚â§‚Ä≤-refl , ‚ä¢Œî , idRed:*: (U‚±º ‚ä¢Œî)
                                                                      , ‚ä©U‚áî .proj‚ÇÇ (‚â§‚Ä≤-refl , ‚ä¢Œî)) ‚ü©
    (l < 1+ l √ó ‚ä¢ Œî √ó Œî ‚ä¢ U l :‚áí*: U l √ó Œî ‚ä©‚ü® 1+ l ‚ü© U l) ‚áîÀò‚ü® ‚ä©U‚â°‚áî  ‚ü©‚Üí
    Œî ‚ä©‚ü® 1+ l ‚ü© U l ‚â° U l                                 ‚ñ°
    )

opaque

  -- Validity of¬†U.

  ‚ä©·µõU< : ‚ä©·µõ Œì ‚Üí l < l‚Ä≤ ‚Üí Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© U l
  ‚ä©·µõU< {Œì} {l = l} {l‚Ä≤ = l‚Ä≤} ‚ä©Œì l< =
    ‚ä©·µõ‚áî .proj‚ÇÇ (‚ä©Œì , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ}  ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                                      ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ ‚ü©
    ‚ä¢ Œî                                                   ‚Üí‚ü® (Œª ‚ä¢Œî ‚Üí l< , ‚ä¢Œî , idRed:*: (U‚±º ‚ä¢Œî)
                                                                      , ‚ä©U‚áî .proj‚ÇÇ (l< , ‚ä¢Œî)) ‚ü©
    (l < l‚Ä≤ √ó ‚ä¢ Œî √ó Œî ‚ä¢ U l :‚áí*: U l √ó Œî ‚ä©‚ü® l‚Ä≤ ‚ü© U l)     ‚áîÀò‚ü® ‚ä©U‚â°‚áî  ‚ü©‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© U l ‚â° U l                                   ‚ñ°
    )


opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_

-- Validity of the

  univInUniv : (1+ l < l‚Ä≤) ‚Üí ([U] : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© U (1+ l)) ‚Üí Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© U l ‚à∑ U (1+ l)
  univInUniv {l = l} l< [U] = ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ ([U] , Œª ‚ä©œÉ ‚Üí
    case escape-‚ä©À¢‚â°‚à∑ ‚ä©œÉ of Œª
      (‚ä¢Œî , _) ‚Üí (
        let U:‚áí*:U = idRed:*: (U‚±º ‚ä¢Œî)
            U:‚áí*:U‚à∑ = idRedTerm:*: (U‚±º ‚ä¢Œî)
            [U]‚Ä≤ = U·µ£ (U·µ£ l ‚â§‚Ä≤-refl U:‚áí*:U)
        in ‚ä©‚â°‚à∑U‚áî .proj‚ÇÇ (l< , ([U]‚Ä≤ , [U]‚Ä≤ , U:‚áí*:U) ,
        U l ,
        (U l , U:‚áí*:U‚à∑ , U:‚áí*:U‚à∑ , U‚Çô , U‚Çô , ‚âÖ-Urefl ‚ä¢Œî))))

opaque

  -- Validity of one of the typing rules called univ.

  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚à∑ U l‚Ä≥ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© A
  ‚ä©·µõ‚à∑U‚Üí‚ä©·µõ ‚ä©A‚à∑U =
    case ‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©A‚à∑U of Œª
      (‚ä©U , A‚â°A‚à∑U) ‚Üí
    emb-‚ä©·µõ ‚â§‚Ä≤-refl $
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ $ A‚â°A‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª {
            (0<1 , ‚ä©A[œÉ‚ÇÅ]‚â°A[œÉ‚ÇÇ] , _) ‚Üí
          ‚ä©A[œÉ‚ÇÅ]‚â°A[œÉ‚ÇÇ] }
      )

opaque

  -- Validity of another of the typing rules called univ.

  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° :
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚â° B ‚à∑ U l‚Ä≥ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© A ‚â° B
  ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° A‚â°B‚à∑U =
    case ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ A‚â°B‚à∑U of Œª
      (‚ä©U , A‚â°B‚à∑U) ‚Üí
    ‚ä©·µõ‚â°‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©U
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ $ A‚â°B‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª {
            (l< , A‚â°B , _) ‚Üí
          emb-‚ä©‚â° ‚â§‚Ä≤-refl A‚â°B }
      )
