------------------------------------------------------------------------
-- Validity of pairs.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Prod
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M as U hiding (wk)
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Weakening R as T hiding (wk; wkTerm; wkEqTerm)
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Reflexivity R
open import
  Definition.LogicalRelation.Substitution.Introductions.DoubleSubst R
open import Definition.LogicalRelation.Substitution.Introductions.Pi R
open import Definition.LogicalRelation.Substitution.Introductions.SingleSubst R
open import Definition.LogicalRelation.Substitution.Introductions.Var R
import Definition.LogicalRelation.Substitution.Irrelevance R as IS
open import Definition.LogicalRelation.Substitution.Weakening R

open import Tools.Fin
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n   : Nat
    p q : M
    Œì   : Con Term n
    A F G : Term n
    m   : Strength

prod‚Ä≤ : ‚àÄ {Œì : Con Term n} {F : Term n} {G t u l l‚Ä≤ l‚Ä≥}
       ([F] : Œì ‚ä©‚ü® l ‚ü© F)
       ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ F / [F])
       ([Gt] : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© G [ t ]‚ÇÄ)
       ([u] : Œì ‚ä©‚ü® l‚Ä≥ ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Gt])
       ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ£ m p q ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G)
     ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© prod m p t u ‚à∑ Œ£ p , q ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG]
prod‚Ä≤
  {m = ùï§} {p = p} {q = q} {Œì = Œì} {F} {G} {t} {u} {l} {l‚Ä≤} {l‚Ä≥}
  [F] [t] [Gt] [u]
  [Œ£FG]@(noemb (B·µ£ F‚ÇÅ G‚ÇÅ D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G]‚ÇÅ G-ext ok))
  with B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let ‚ä¢t = escapeTerm [F] [t]
      ‚ä¢u = escapeTerm [Gt] [u]
      ‚ä¢Œì = wf ‚ä¢F
      ‚ä¢prod = prod‚±º ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u ok

      fst‚áít : Œì ‚ä¢ fst _ (prodÀ¢ _ t u) ‚áí t ‚à∑ F
      fst‚áít = Œ£-Œ≤‚ÇÅ ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u PE.refl ok
      [fstprod] , [fstprod‚â°t] = redSubstTerm fst‚áít [F] [t]
      [fstprod]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F))
                                    [F] ([F]‚ÇÅ id ‚ä¢Œì)
                                    [fstprod]

      wkLiftIdEq = PE.cong (Œª x ‚Üí x [ fst _ (prodÀ¢ _ t u ) ]‚ÇÄ)
                     (wk-lift-id G)
      [Gfst] = [G]‚ÇÅ id ‚ä¢Œì [fstprod]‚Ä≤
      [Gfst]‚Ä≤ = irrelevance‚Ä≤ wkLiftIdEq [Gfst]

      [t]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F))
                              [F] ([F]‚ÇÅ id ‚ä¢Œì)
                              [t]
      [fstprod‚â°t]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F))
                                        [F] ([F]‚ÇÅ id ‚ä¢Œì)
                                        [fstprod‚â°t]
      [Gt]‚Ä≤ = [G]‚ÇÅ id ‚ä¢Œì [t]‚Ä≤

      [Gfst‚â°Gt] = irrelevanceEq‚Ä≥ wkLiftIdEq (PE.cong (Œª x ‚Üí x [ t ]‚ÇÄ) (wk-lift-id G))
                                 [Gfst] [Gfst]‚Ä≤
                                 (G-ext id ‚ä¢Œì [fstprod]‚Ä≤ [t]‚Ä≤ [fstprod‚â°t]‚Ä≤)
      [u]‚Ä≤ = convTerm‚ÇÇ [Gfst]‚Ä≤ [Gt] [Gfst‚â°Gt] [u]

      snd‚áíu : Œì ‚ä¢ snd _ (prodÀ¢ _ t u) ‚áí u ‚à∑ G [ fst _ (prodÀ¢ _ t u) ]‚ÇÄ
      snd‚áíu = Œ£-Œ≤‚ÇÇ ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u PE.refl ok
      [sndprod] , [sndprod‚â°u] = redSubstTerm snd‚áíu [Gfst]‚Ä≤ [u]‚Ä≤
      [sndprod]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (_[ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
                                    [Gfst]‚Ä≤ [Gfst] [sndprod]


      [fstRefl] = transEqTerm [F] [fstprod‚â°t] (symEqTerm [F] [fstprod‚â°t])
      [sndRefl] = transEqTerm [Gfst]‚Ä≤ [sndprod‚â°u] (symEqTerm [Gfst]‚Ä≤ [sndprod‚â°u])
  in  Œ£‚Çú (prodÀ¢ _ t u) (idRedTerm:*: ‚ä¢prod)
         (‚âÖ-Œ£-Œ∑ ‚ä¢F ‚ä¢G ‚ä¢prod ‚ä¢prod prod‚Çô prod‚Çô
                (escapeTermEq [F] [fstRefl])
                (escapeTermEq [Gfst]‚Ä≤ [sndRefl]))
         prod‚Çô ([fstprod]‚Ä≤ , [sndprod]‚Ä≤)

prod‚Ä≤ {m = ùï®} {q = q} {Œì = Œì} {F} {G} {t} {u} {l} {l‚Ä≤} {l‚Ä≥} [F] [t] [Gt] [u]
      [Œ£FG]@(noemb (B·µ£ F‚ÇÅ G‚ÇÅ D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G]‚ÇÅ G-ext ok)) with
        B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let ‚ä¢t = escapeTerm [F] [t]
      ‚ä¢u = escapeTerm [Gt] [u]
      ‚ä¢Œì = wf ‚ä¢F
      ‚ä¢prod = prod‚±º ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u ok

      [t‚â°t] = reflEqTerm [F] [t]
      [u‚â°u] = reflEqTerm [Gt] [u]

      [t]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F)) [F] ([F]‚ÇÅ id ‚ä¢Œì) [t]
      [u]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.cong (_[ _ ]‚ÇÄ) (PE.sym (wk-lift-id G)))
                              [Gt] ([G]‚ÇÅ id ‚ä¢Œì [t]‚Ä≤) [u]

  in  Œ£‚Çú (prod ∑ _ t u) (idRedTerm:*: ‚ä¢prod)
         (‚âÖ-prod-cong ‚ä¢F ‚ä¢G (escapeTermEq [F] [t‚â°t])
            (escapeTermEq [Gt] [u‚â°u]) ok)
         prod‚Çô
         (PE.refl , [t]‚Ä≤ , [u]‚Ä≤ , PE.refl)
prod‚Ä≤ {Œì = Œì} {F} {G} {t} {u} {l} {l‚Ä≤} [F] [t] [Gt] [u]
      [Œ£FG]@(emb 0<1 x) = prod‚Ä≤ [F] [t] [Gt] [u] x

prod‚Ä≥ : ‚àÄ {Œì : Con Term n} {F : Term n} {G t u l l‚Ä≤}
       ([F] : Œì ‚ä©‚ü® l ‚ü© F)
       ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ F / [F])
       ([Gt] : Œì ‚ä©‚ü® l ‚ü© G [ t ]‚ÇÄ)
       ([u] : Œì ‚ä©‚ü® l ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Gt])
       ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G)
     ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© prod m p t u ‚à∑ Œ£ _ , _ ‚ñ∑ F ‚ñπ G / [Œ£FG]
prod‚Ä≥ {m = m} [F] [t] [Gt] [u] [Œ£FG] =
      let [prod] = prod‚Ä≤ {m = m} [F] [t] [Gt] [u] (B-elim BŒ£! [Œ£FG])
      in  irrelevanceTerm (B-intr BŒ£! (B-elim BŒ£! [Œ£FG])) [Œ£FG] [prod]

prod-cong‚Ä≤ :
  ‚àÄ {Œì : Con Term n} {F : Term n} {G t t‚Ä≤ u u‚Ä≤ l l‚Ä≤}
  ([F] : Œì ‚ä©‚ü® l ‚ü© F)
  ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ F / [F])
  ([t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t‚Ä≤ ‚à∑ F / [F])
  ([t‚â°t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ F / [F])
  ([Gt] : Œì ‚ä©‚ü® l ‚ü© G [ t ]‚ÇÄ)
  ([u] : Œì ‚ä©‚ü® l ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([u‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© u‚Ä≤ ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([u‚â°u‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ£ m p q ‚ü© Œ£‚ü® m ‚ü© p , q  ‚ñ∑ F ‚ñπ G) ‚Üí
  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© prod m p t u ‚â° prod m p t‚Ä≤ u‚Ä≤ ‚à∑ Œ£ p , q ‚ñ∑ F ‚ñπ G /
    B-intr BŒ£! [Œ£FG]
prod-cong‚Ä≤
  {m = ùï§} {p = p} {q = q} {Œì = Œì} {F} {G} {t} {t‚Ä≤} {u} {u‚Ä≤} {l} {l‚Ä≤}
  [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤] [u‚â°u‚Ä≤]
  [Œ£FG]@(noemb (B·µ£ F‚ÇÅ G‚ÇÅ D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G]‚ÇÅ G-ext ok))
  with B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let [prod] = prod‚Ä≤ {m = ùï§} [F] [t] [Gt] [u] [Œ£FG]

      ‚ä¢Œì = wf ‚ä¢F
      wk[F] = [F]‚ÇÅ id ‚ä¢Œì
      wk[t] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t]
      wk[t‚Ä≤] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t‚Ä≤]
      wk[t‚â°t‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t‚â°t‚Ä≤]
      wk[Gt] = [G]‚ÇÅ id ‚ä¢Œì wk[t]
      wk[Gt‚Ä≤] = [G]‚ÇÅ id ‚ä¢Œì wk[t‚Ä≤]
      wk[Gt‚â°Gt‚Ä≤] = G-ext id ‚ä¢Œì wk[t] wk[t‚Ä≤] wk[t‚â°t‚Ä≤]
      wk[u] = irrelevanceTerm‚Ä≤ (PE.cong (_[ t ]‚ÇÄ) (PE.sym (wk-lift-id G))) [Gt] wk[Gt] [u]

      [Gt‚Ä≤] = irrelevance‚Ä≤ (PE.cong (Œª x ‚Üí x [ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G)) wk[Gt‚Ä≤]
      [Gt‚â°Gt‚Ä≤] = irrelevanceEq‚Ä≥ (PE.cong (Œª x ‚Üí x [ t ]‚ÇÄ) (wk-lift-id G))
                                (PE.cong (Œª x ‚Üí x [ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G))
                                wk[Gt] [Gt]
                                wk[Gt‚â°Gt‚Ä≤]

      [u‚Ä≤]Gt‚Ä≤ = convTerm‚ÇÅ [Gt] [Gt‚Ä≤] [Gt‚â°Gt‚Ä≤] [u‚Ä≤]
      wk[u‚Ä≤] = irrelevanceTerm‚Ä≤ (PE.sym (PE.cong (_[ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G)))
                                [Gt‚Ä≤] wk[Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤

      [prod‚Ä≤] = prod‚Ä≤ [F] [t‚Ä≤] [Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤ [Œ£FG]

      ‚ä¢t = escapeTerm [F] [t]
      ‚ä¢t‚Ä≤ = escapeTerm [F] [t‚Ä≤]
      ‚ä¢u = escapeTerm [Gt] [u]
      ‚ä¢u‚Ä≤ = escapeTerm [Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤

      fst‚áít = Œ£-Œ≤‚ÇÅ ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u PE.refl ok
      [fst] , [fst‚â°t] = redSubstTerm fst‚áít [F] [t]
      fst‚áít‚Ä≤ = Œ£-Œ≤‚ÇÅ ‚ä¢F ‚ä¢G ‚ä¢t‚Ä≤ ‚ä¢u‚Ä≤ PE.refl ok
      [fst‚Ä≤] , [fst‚â°t‚Ä≤] = redSubstTerm fst‚áít‚Ä≤ [F] [t‚Ä≤]

      wk[fst‚â°t] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F))
                                      [F] wk[F]
                                      [fst‚â°t]
      wk[fst‚â°t‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F))
                                      [F] wk[F]
                                      [fst‚â°t‚Ä≤]

      wk[fst] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F))
                                 [F] wk[F]
                                 [fst]
      wk[fst‚Ä≤] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F))
                                 [F] wk[F]
                                 [fst‚Ä≤]

      -- fst t ‚â° fst t‚Ä≤ ‚à∑ F
      [fst‚â°fst‚Ä≤] = transEqTerm [F] [fst‚â°t] (transEqTerm [F] [t‚â°t‚Ä≤] (symEqTerm [F] [fst‚â°t‚Ä≤]))
      wk[fst‚â°fst‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F))
                                        [F] wk[F]
                                        [fst‚â°fst‚Ä≤]

      -- snd (prod t u) ‚â° u ‚à∑ G [ fst (prod t u) ]‚ÇÄ
      wkLiftIdEq = PE.cong (Œª x ‚Üí x [ fst _ (prodÀ¢ _ t u ) ]‚ÇÄ)
                     (wk-lift-id G)
      wk[Gfst] = [G]‚ÇÅ id ‚ä¢Œì wk[fst]
      [Gfst] = irrelevance‚Ä≤ wkLiftIdEq wk[Gfst]
      [Gfst‚â°Gt] = irrelevanceEq‚Ä≥ wkLiftIdEq (PE.cong (Œª x ‚Üí x [ t ]‚ÇÄ)
                                                     (wk-lift-id G))
                                 wk[Gfst] [Gfst]
                                 (G-ext id ‚ä¢Œì wk[fst] wk[t] wk[fst‚â°t])

      [u]fst = convTerm‚ÇÇ [Gfst] [Gt] [Gfst‚â°Gt] [u]
      snd‚áíu = Œ£-Œ≤‚ÇÇ ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢u PE.refl ok
      [snd] , [snd‚â°u] = redSubstTerm snd‚áíu [Gfst] [u]fst

      -- u ‚â° u‚Ä≤ ‚à∑ G [ fst (prod t u) ]‚ÇÄ
      [u‚â°u‚Ä≤]Gfst = convEqTerm‚ÇÇ [Gfst] [Gt] [Gfst‚â°Gt] [u‚â°u‚Ä≤]

      -- u‚Ä≤ ‚â° snd (prod t‚Ä≤ u‚Ä≤) ‚à∑ G [ fst (prod t u) ]‚ÇÄ
      wkLiftIdEq‚Ä≤ = PE.cong (Œª x ‚Üí x [ fst _ (prodÀ¢ _ t‚Ä≤ u‚Ä≤) ]‚ÇÄ)
                      (wk-lift-id G)
      wk[Gfst‚Ä≤] = [G]‚ÇÅ id ‚ä¢Œì wk[fst‚Ä≤]
      [Gfst‚Ä≤] = irrelevance‚Ä≤ wkLiftIdEq‚Ä≤ wk[Gfst‚Ä≤]
      [Gfst‚Ä≤‚â°Gt‚Ä≤] = irrelevanceEq‚Ä≥ wkLiftIdEq‚Ä≤ (PE.cong (Œª x ‚Üí x [ t‚Ä≤ ]‚ÇÄ)
                                                        (wk-lift-id G))
                                   wk[Gfst‚Ä≤] [Gfst‚Ä≤]
                                   (G-ext id ‚ä¢Œì wk[fst‚Ä≤] wk[t‚Ä≤] wk[fst‚â°t‚Ä≤])

      snd‚áíu‚Ä≤ = Œ£-Œ≤‚ÇÇ ‚ä¢F ‚ä¢G ‚ä¢t‚Ä≤ ‚ä¢u‚Ä≤ PE.refl ok

      [u‚Ä≤]Gfst‚Ä≤ = convTerm‚ÇÇ [Gfst‚Ä≤] [Gt‚Ä≤] [Gfst‚Ä≤‚â°Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤
      [snd‚â°u‚Ä≤]Gfst‚Ä≤ = proj‚ÇÇ (redSubstTerm snd‚áíu‚Ä≤ [Gfst‚Ä≤] [u‚Ä≤]Gfst‚Ä≤)

      [Gfst‚â°Gfst‚Ä≤] = irrelevanceEq‚Ä≥ wkLiftIdEq wkLiftIdEq‚Ä≤
                                    wk[Gfst] [Gfst]
                                    (G-ext id ‚ä¢Œì wk[fst] wk[fst‚Ä≤] wk[fst‚â°fst‚Ä≤])

      [snd‚â°u‚Ä≤]Gfst = convEqTerm‚ÇÇ [Gfst] [Gfst‚Ä≤] [Gfst‚â°Gfst‚Ä≤] [snd‚â°u‚Ä≤]Gfst‚Ä≤

      [snd‚â°snd‚Ä≤] = transEqTerm [Gfst] [snd‚â°u]
                               (transEqTerm [Gfst] [u‚â°u‚Ä≤]Gfst
                                            (symEqTerm [Gfst] [snd‚â°u‚Ä≤]Gfst))
      wk[snd‚â°snd‚Ä≤] = irrelevanceEqTerm‚Ä≤
        (PE.cong (Œª x ‚Üí x [ fst _ (prodÀ¢ _ t u) ]‚ÇÄ)
           (PE.sym (wk-lift-id G)))
        [Gfst] wk[Gfst]
        [snd‚â°snd‚Ä≤]

      ‚ä¢prod = escapeTerm (B-intr BŒ£! [Œ£FG]) [prod]
      ‚ä¢prod‚Ä≤ = escapeTerm (B-intr BŒ£! [Œ£FG]) [prod‚Ä≤]

  in  Œ£‚Çú‚Çå (prodÀ¢ _ t u) (prodÀ¢ _ t‚Ä≤ u‚Ä≤)
          (idRedTerm:*: ‚ä¢prod) (idRedTerm:*: ‚ä¢prod‚Ä≤)
          prod‚Çô prod‚Çô
          (‚âÖ-Œ£-Œ∑ ‚ä¢F ‚ä¢G ‚ä¢prod ‚ä¢prod‚Ä≤ prod‚Çô prod‚Çô
                 (escapeTermEq [F] [fst‚â°fst‚Ä≤])
                 (escapeTermEq [Gfst] [snd‚â°snd‚Ä≤]))
          [prod] [prod‚Ä≤]
          (wk[fst] , wk[fst‚Ä≤] , wk[fst‚â°fst‚Ä≤] , wk[snd‚â°snd‚Ä≤])

prod-cong‚Ä≤ {m = ùï®} {q = q} {Œì = Œì} {F} {G} {t} {t‚Ä≤} {u} {u‚Ä≤} {l} {l‚Ä≤}
           [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤] [u‚â°u‚Ä≤]
           [Œ£FG]@(noemb (B·µ£ F‚ÇÅ G‚ÇÅ D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G]‚ÇÅ G-ext ok))
           with B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let ‚ä¢Œì = wf ‚ä¢F
      wk[F] = [F]‚ÇÅ id ‚ä¢Œì
      wk[t] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t]
      wk[t‚Ä≤] = irrelevanceTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t‚Ä≤]
      wk[t‚â°t‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F)) [F] wk[F] [t‚â°t‚Ä≤]
      wk[Gt] = [G]‚ÇÅ id ‚ä¢Œì wk[t]
      wk[Gt‚Ä≤] = [G]‚ÇÅ id ‚ä¢Œì wk[t‚Ä≤]
      wk[Gt‚â°Gt‚Ä≤] = G-ext id ‚ä¢Œì wk[t] wk[t‚Ä≤] wk[t‚â°t‚Ä≤]
      wk[u] = irrelevanceTerm‚Ä≤ (PE.cong (_[ t ]‚ÇÄ) (PE.sym (wk-lift-id G))) [Gt] wk[Gt] [u]
      wk[u‚â°u‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.cong (_[ t ]‚ÇÄ) (PE.sym (wk-lift-id G))) [Gt] wk[Gt] [u‚â°u‚Ä≤]

      [Gt‚Ä≤] = irrelevance‚Ä≤ (PE.cong (Œª x ‚Üí x [ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G)) wk[Gt‚Ä≤]
      [Gt‚â°Gt‚Ä≤] = irrelevanceEq‚Ä≥ (PE.cong (Œª x ‚Üí x [ t ]‚ÇÄ) (wk-lift-id G))
                                (PE.cong (Œª x ‚Üí x [ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G))
                                wk[Gt] [Gt]
                                wk[Gt‚â°Gt‚Ä≤]

      [u‚Ä≤]Gt‚Ä≤ = convTerm‚ÇÅ [Gt] [Gt‚Ä≤] [Gt‚â°Gt‚Ä≤] [u‚Ä≤]
      wk[u‚Ä≤] = irrelevanceTerm‚Ä≤ (PE.sym (PE.cong (_[ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G)))
                                [Gt‚Ä≤] wk[Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤

      [prod] = prod‚Ä≤ {m = ùï®} [F] [t] [Gt] [u] [Œ£FG]
      [prod‚Ä≤] = prod‚Ä≤ [F] [t‚Ä≤] [Gt‚Ä≤] [u‚Ä≤]Gt‚Ä≤ [Œ£FG]
      ‚ä¢prod = escapeTerm (B-intr BŒ£! [Œ£FG]) [prod]
      ‚ä¢prod‚Ä≤ = escapeTerm (B-intr BŒ£! [Œ£FG]) [prod‚Ä≤]
  in  Œ£‚Çú‚Çå (prod ∑ _ t u) (prod ∑ _ t‚Ä≤ u‚Ä≤)
          (idRedTerm:*: ‚ä¢prod)
          (idRedTerm:*: ‚ä¢prod‚Ä≤)
          prod‚Çô prod‚Çô
          (‚âÖ-prod-cong ‚ä¢F ‚ä¢G
             (escapeTermEq [F] [t‚â°t‚Ä≤]) (escapeTermEq [Gt] [u‚â°u‚Ä≤])
             ok)
          [prod] [prod‚Ä≤]
          (PE.refl , PE.refl ,
           wk[t] , wk[t‚Ä≤] , wk[u] , wk[u‚Ä≤] , wk[t‚â°t‚Ä≤] , wk[u‚â°u‚Ä≤])
prod-cong‚Ä≤ [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤] [u‚â°u‚Ä≤] (emb 0<1 x) =
  prod-cong‚Ä≤ [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤] [u‚â°u‚Ä≤] x

prod-cong‚Ä≥ :
  ‚àÄ {Œì : Con Term n} {F : Term n} {G t t‚Ä≤ u u‚Ä≤ l l‚Ä≤}
  ([F] : Œì ‚ä©‚ü® l ‚ü© F)
  ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ F / [F])
  ([t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t‚Ä≤ ‚à∑ F / [F])
  ([t‚â°t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ F / [F])
  ([Gt] : Œì ‚ä©‚ü® l ‚ü© G [ t ]‚ÇÄ)
  ([u] : Œì ‚ä©‚ü® l ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([u‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© u‚Ä≤ ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([u‚â°u‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ G [ t ]‚ÇÄ / [Gt])
  ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G) ‚Üí
  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© prod m p t u ‚â° prod m p t‚Ä≤ u‚Ä≤ ‚à∑ Œ£ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG]
prod-cong‚Ä≥ {m = m} [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤] [u‚â°u‚Ä≤] [Œ£FG] =
  let [prod‚â°] = prod-cong‚Ä≤ {m = m} [F] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gt] [u] [u‚Ä≤]
                  [u‚â°u‚Ä≤] (B-elim BŒ£! [Œ£FG])
  in  irrelevanceEqTerm (B-intr BŒ£! (B-elim BŒ£! [Œ£FG])) [Œ£FG] [prod‚â°]

prod-cong·µõ :
  ‚àÄ {Œì : Con Term n} {F : Term n} {G t t‚Ä≤ u u‚Ä≤ l}
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  ([t] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ F / [Œì] / [F])
  ([t‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© t‚Ä≤ ‚à∑ F / [Œì] / [F])
  ([t‚â°t‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ F / [Œì] / [F])
  ([u] : Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Œì] / substS [Œì] [F] [G] [t])
  ([u‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© u‚Ä≤ ‚à∑ G [ t‚Ä≤ ]‚ÇÄ / [Œì] / substS [Œì] [F] [G] [t‚Ä≤])
  ([u‚â°u‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ G [ t ]‚ÇÄ / [Œì] / substS [Œì] [F] [G] [t])
  (ok : Œ£-allowed m p q) ‚Üí
  Œì ‚ä©·µõ‚ü® l ‚ü© prod m p t u ‚â° prod m p t‚Ä≤ u‚Ä≤ ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G / [Œì] /
    Œ£·µõ [Œì] [F] [G] ok
prod-cong·µõ
  {Œì = Œì} {F} {G} {t} {t‚Ä≤} {u} {u‚Ä≤}
  [Œì] [F] [G] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [u] [u‚Ä≤] [u‚â°u‚Ä≤] ok {Œî = Œî} {œÉ} ‚ä¢Œî [œÉ] =
  let ‚ä©œÉF = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [œÉ])
      ‚ä©œÉt = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ])
      ‚ä©œÉt‚Ä≤ = proj‚ÇÅ ([t‚Ä≤] ‚ä¢Œî [œÉ])
      œÉt‚â°œÉt‚Ä≤ = [t‚â°t‚Ä≤] ‚ä¢Œî [œÉ]

      [Gt] = substS {F = F} {G} [Œì] [F] [G] [t]
      ‚ä©œÉGt‚ÇÅ = proj‚ÇÅ (unwrap [Gt] ‚ä¢Œî [œÉ])
      ‚ä©œÉGt = irrelevance‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚ÇÅ

      ‚ä©œÉu = irrelevanceTerm‚Ä≤ (singleSubstLift G t)
                             ‚ä©œÉGt‚ÇÅ ‚ä©œÉGt
                             (proj‚ÇÅ ([u] ‚ä¢Œî [œÉ]))

      [Gt‚â°Gt‚Ä≤] = substSEq {F = F} {F‚Ä≤ = F} {G = G} {G‚Ä≤ = G} {t = t} {t‚Ä≤ = t‚Ä≤} [Œì]
                          [F] [F] (refl·µõ {A = F} [Œì] [F])
                          [G] [G] (refl·µõ {Œì = Œì ‚àô F} {A = G} ([Œì] ‚àô [F]) [G])
                          [t] [t‚Ä≤] [t‚â°t‚Ä≤]
      œÉGt‚â°œÉGt‚Ä≤ = [Gt‚â°Gt‚Ä≤] ‚ä¢Œî [œÉ]

      ‚ä©œÉGt‚Ä≤ = proj‚ÇÅ (unwrap (substS {F = F} {G} [Œì] [F] [G] [t‚Ä≤]) ‚ä¢Œî [œÉ])
      ‚ä©œÉu‚Ä≤‚ÇÇ = proj‚ÇÅ ([u‚Ä≤] ‚ä¢Œî [œÉ])
      ‚ä©œÉu‚Ä≤‚ÇÅ = convTerm‚ÇÇ ‚ä©œÉGt‚ÇÅ ‚ä©œÉGt‚Ä≤ œÉGt‚â°œÉGt‚Ä≤ ‚ä©œÉu‚Ä≤‚ÇÇ
      ‚ä©œÉu‚Ä≤ = irrelevanceTerm‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚ÇÅ ‚ä©œÉGt ‚ä©œÉu‚Ä≤‚ÇÅ

      œÉu‚â°œÉu‚Ä≤ = irrelevanceEqTerm‚Ä≤ (singleSubstLift G t)
                                  ‚ä©œÉGt‚ÇÅ ‚ä©œÉGt
                                  ([u‚â°u‚Ä≤] ‚ä¢Œî [œÉ])

      ‚ä©œÉŒ£FG = proj‚ÇÅ (unwrap (Œ£·µõ {F = F} {G} [Œì] [F] [G] ok) ‚ä¢Œî [œÉ])
  in prod-cong‚Ä≥ ‚ä©œÉF ‚ä©œÉt ‚ä©œÉt‚Ä≤ œÉt‚â°œÉt‚Ä≤ ‚ä©œÉGt ‚ä©œÉu ‚ä©œÉu‚Ä≤ œÉu‚â°œÉu‚Ä≤ ‚ä©œÉŒ£FG

prod·µõ :
  ‚àÄ {Œì : Con Term n} {F : Term n} {G t u l}
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  ([t] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ F / [Œì] / [F])
  ([u] : Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ G [ t ]‚ÇÄ / [Œì] / substS [Œì] [F] [G] [t])
  (ok : Œ£-allowed m p q) ‚Üí
  Œì ‚ä©·µõ‚ü® l ‚ü© prod m p t u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G / [Œì] /
    Œ£·µõ [Œì] [F] [G] ok
prod·µõ
  {Œì = Œì} {F} {G} {t} {u} {l} [Œì] [F] [G] [t] [u] ok
  {Œî = Œî} {œÉ = œÉ} ‚ä¢Œî [œÉ] =
  let [Gt] = substS {F = F} {G} [Œì] [F] [G] [t]
      [Œ£FG] = Œ£·µõ {F = F} {G} [Œì] [F] [G] ok

      ‚ä©œÉF = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [œÉ])
      ‚ä¢œÉF = escape ‚ä©œÉF
      ‚ä©œÉt = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ])
      ‚ä©œÉGt‚Ä≤ : Œî ‚ä©‚ü® l ‚ü© G [ t ]‚ÇÄ [ œÉ ]
      ‚ä©œÉGt‚Ä≤ = proj‚ÇÅ (unwrap [Gt] ‚ä¢Œî [œÉ])
      ‚ä©œÉGt : Œî ‚ä©‚ü® l ‚ü© G [ liftSubst œÉ ] [ t [ œÉ ] ]‚ÇÄ
      ‚ä©œÉGt = irrelevance‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚Ä≤
      ‚ä©œÉu‚Ä≤ = proj‚ÇÅ ([u] ‚ä¢Œî [œÉ])
      ‚ä©œÉu : Œî ‚ä©‚ü® l ‚ü© u [ œÉ ] ‚à∑ G [ liftSubst œÉ ] [ t [ œÉ ] ]‚ÇÄ / ‚ä©œÉGt
      ‚ä©œÉu = irrelevanceTerm‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚Ä≤ ‚ä©œÉGt ‚ä©œÉu‚Ä≤
      ‚ä©œÉŒ£FG = proj‚ÇÅ (unwrap [Œ£FG] ‚ä¢Œî [œÉ])

  in  prod‚Ä≥ ‚ä©œÉF ‚ä©œÉt ‚ä©œÉGt ‚ä©œÉu ‚ä©œÉŒ£FG ,
      (Œª {œÉ‚Ä≤} [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤] ‚Üí
        let ‚ä©œÉ‚Ä≤F = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [œÉ‚Ä≤])
            œÉF‚â°œÉ‚Ä≤F = proj‚ÇÇ (unwrap [F] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤]

            ‚ä©œÉ‚Ä≤t = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ‚Ä≤])
            ‚ä©œÉ‚Ä≤t = convTerm‚ÇÇ ‚ä©œÉF ‚ä©œÉ‚Ä≤F œÉF‚â°œÉ‚Ä≤F ‚ä©œÉ‚Ä≤t
            œÉt‚â°œÉ‚Ä≤t = proj‚ÇÇ ([t] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤]

            ‚ä©œÉ‚Ä≤Gt‚Ä≤ = proj‚ÇÅ (unwrap [Gt] ‚ä¢Œî [œÉ‚Ä≤])
            ‚ä©œÉ‚Ä≤Gt = irrelevance‚Ä≤ (singleSubstLift G t) ‚ä©œÉ‚Ä≤Gt‚Ä≤

            œÉGt‚â°œÉ‚Ä≤Gt = proj‚ÇÇ (unwrap [Gt] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤]

            ‚ä©œÉ‚Ä≤u‚Ä≥ = proj‚ÇÅ ([u] ‚ä¢Œî [œÉ‚Ä≤])
            ‚ä©œÉ‚Ä≤u‚Ä≤ = convTerm‚ÇÇ ‚ä©œÉGt‚Ä≤ ‚ä©œÉ‚Ä≤Gt‚Ä≤ œÉGt‚â°œÉ‚Ä≤Gt ‚ä©œÉ‚Ä≤u‚Ä≥
            ‚ä©œÉ‚Ä≤u = irrelevanceTerm‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚Ä≤ ‚ä©œÉGt ‚ä©œÉ‚Ä≤u‚Ä≤

            œÉu‚â°œÉ‚Ä≤u : Œî ‚ä©‚ü® l ‚ü© u [ œÉ ] ‚â° u [ œÉ‚Ä≤ ] ‚à∑ G [ liftSubst œÉ ] [ t [ œÉ ] ]‚ÇÄ / ‚ä©œÉGt
            œÉu‚â°œÉ‚Ä≤u = irrelevanceEqTerm‚Ä≤ (singleSubstLift G t) ‚ä©œÉGt‚Ä≤ ‚ä©œÉGt (proj‚ÇÇ ([u] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤])
        in  prod-cong‚Ä≥ ‚ä©œÉF ‚ä©œÉt ‚ä©œÉ‚Ä≤t œÉt‚â°œÉ‚Ä≤t ‚ä©œÉGt ‚ä©œÉu ‚ä©œÉ‚Ä≤u œÉu‚â°œÉ‚Ä≤u ‚ä©œÉŒ£FG)

private

  [prod] : ‚àÄ {l m}
         ‚Üí ([Œì] : ‚ä©·µõ Œì)
           ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
           ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
           ([Œ£] : Œì ‚ä©·µõ‚ü® l ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G / [Œì])
           ([A] : Œì ‚àô (Œ£ p , q ‚ñ∑ F ‚ñπ G) ‚ä©·µõ‚ü® l ‚ü© A / [Œì] ‚àô [Œ£]) ‚Üí
           Œ£-allowed m p q ‚Üí
           Œì ‚àô F ‚àô G ‚ä©·µõ‚ü® l ‚ü© prod m p (var x1) (var x0) ‚à∑ wk1 (wk1 (Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G))
                           / [Œì] ‚àô [F] ‚àô [G] / wk1·µõ ([Œì] ‚àô [F]) [G] (wk1·µõ [Œì] [F] [Œ£])
  [prod] {Œì} {F} {G} {l} [Œì] [F] [G] [Œ£] _ ok =
    let [ŒìF] = [Œì] ‚àô [F]
        [ŒìFG] = [ŒìF] ‚àô [G]
        wk[F] = wk1·µõ [ŒìF] [G] (wk1·µõ [Œì] [F] [F])
        wk[G] : Œì ‚àô F ‚àô G ‚àô wk1 (wk1 F) ‚ä©·µõ‚ü® l ‚ü© U.wk (lift (step (step id))) G / [Œì] ‚àô [F] ‚àô [G] ‚àô wk[F]
        wk[G] = wrap Œª {_} {Œî} {œÉ} ‚ä¢Œî [œÉ] ‚Üí
          let [tail] = proj‚ÇÅ (proj‚ÇÅ (proj‚ÇÅ [œÉ]))
              [œÉF] = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [tail])
              wk2[œÉF] = proj‚ÇÅ (unwrap wk[F] {œÉ = tail œÉ} ‚ä¢Œî (proj‚ÇÅ [œÉ]))
              [head] = proj‚ÇÇ [œÉ]
              [head]‚Ä≤ = irrelevanceTerm‚Ä≤ (PE.trans (wk1-tail (wk1 F)) (wk1-tail F)) wk2[œÉF] [œÉF] [head]
              [œÅœÉ] : Œî ‚ä©À¢ consSubst (tail (tail (tail œÉ))) (head œÉ) ‚à∑ Œì ‚àô F / [ŒìF] / ‚ä¢Œî
              [œÅœÉ] = [tail] , [head]‚Ä≤
              [œÅœÉG] = proj‚ÇÅ (unwrap [G] {œÉ = consSubst (tail (tail (tail œÉ))) (head œÉ)} ‚ä¢Œî [œÅœÉ])
              [œÅœÉG]‚Ä≤ = irrelevance‚Ä≤ (PE.sym (PE.trans (subst-wk {œÅ = lift (step (step id))} {œÉ = œÉ} G)
                                                      (substVar-to-subst (Œª {x0 ‚Üí PE.refl
                                                                            ;(x +1) ‚Üí PE.refl}) G)))
                                    [œÅœÉG]
          in  [œÅœÉG]‚Ä≤ , Œª {œÉ‚Ä≤} [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤] ‚Üí
            let [tail‚Ä≤] = proj‚ÇÅ (proj‚ÇÅ (proj‚ÇÅ [œÉ‚Ä≤]))
                [head‚Ä≤] = proj‚ÇÇ [œÉ‚Ä≤]
                [œÉ‚Ä≤F] = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [tail‚Ä≤])
                wk2[œÉ‚Ä≤F] = proj‚ÇÅ (unwrap wk[F] {œÉ = tail œÉ‚Ä≤} ‚ä¢Œî (proj‚ÇÅ [œÉ‚Ä≤]))
                [head‚Ä≤]‚Ä≤ = irrelevanceTerm‚Ä≤ (wk2-tail F) wk2[œÉ‚Ä≤F] [œÉ‚Ä≤F] [head‚Ä≤]
                [œÅœÉ‚Ä≤] : Œî ‚ä©À¢ consSubst (tail (tail (tail œÉ‚Ä≤))) (head œÉ‚Ä≤) ‚à∑ Œì ‚àô F / [ŒìF] / ‚ä¢Œî
                [œÅœÉ‚Ä≤] = [tail‚Ä≤] , [head‚Ä≤]‚Ä≤
                [tail‚â°] = proj‚ÇÅ (proj‚ÇÅ (proj‚ÇÅ [œÉ‚â°œÉ‚Ä≤]))
                [head‚â°] = proj‚ÇÇ [œÉ‚â°œÉ‚Ä≤]
                [head‚â°]‚Ä≤ = irrelevanceEqTerm‚Ä≤ (wk2-tail F) wk2[œÉF] [œÉF] [head‚â°]
                [œÅœÉ‚â°] : Œî ‚ä©À¢ consSubst (tail (tail (tail œÉ))) (head œÉ)
                           ‚â° consSubst (tail (tail (tail œÉ‚Ä≤))) (head œÉ‚Ä≤) ‚à∑ Œì ‚àô F / [ŒìF] / ‚ä¢Œî / [œÅœÉ]
                [œÅœÉ‚â°] = [tail‚â°] , [head‚â°]‚Ä≤
                [œÅœÉG‚â°] = proj‚ÇÇ (unwrap [G] {œÉ = consSubst (tail (tail (tail œÉ))) (head œÉ)} ‚ä¢Œî [œÅœÉ])
                               {œÉ‚Ä≤ = consSubst (tail (tail (tail œÉ‚Ä≤))) (head œÉ‚Ä≤)} [œÅœÉ‚Ä≤] [œÅœÉ‚â°]
            in  irrelevanceEq‚Ä≥ (PE.sym (PE.trans (subst-wk G) (substVar-to-subst (Œª { x0 ‚Üí PE.refl ; (x +1) ‚Üí PE.refl }) G)))
                               (PE.sym (PE.trans (subst-wk G) (substVar-to-subst (Œª { x0 ‚Üí PE.refl ; (x +1) ‚Üí PE.refl }) G)))
                               [œÅœÉG] [œÅœÉG]‚Ä≤ [œÅœÉG‚â°]
        [x1] = var-‚ä©·µõ‚à∑// (there here) [ŒìFG] wk[F]
        [x0]‚Ä≤ = var-‚ä©·µõ‚à∑// here [ŒìFG] (wk1·µõ [ŒìF] [G] [G])
        wk[G[x1]] = substS [ŒìFG] wk[F] wk[G] [x1]
        [x0] = IS.irrelevanceTerm‚Ä≤ (PE.sym (wkSingleSubstWk1 G)) [ŒìFG] [ŒìFG]
                                   (wk1·µõ [ŒìF] [G] [G]) wk[G[x1]] [x0]‚Ä≤
        [prod]‚Ä≤ = prod·µõ {F = wk1 (wk1 F)} {U.wk (lift (step (step id))) G} {var x1} {var x0}
                        [ŒìFG] wk[F] wk[G] [x1] [x0] ok
        wk[Œ£] = wk1·µõ [ŒìF] [G] (wk1·µõ [Œì] [F] [Œ£])
        wk[Œ£]‚Ä≤ = Œ£·µõ [ŒìFG] wk[F] wk[G] ok
    in  IS.irrelevanceTerm‚Ä≤ {t = prod _ _ (var x1) (var x0)}
                            (wk2-B BŒ£! F G) [ŒìFG] [ŒìFG] wk[Œ£]‚Ä≤ wk[Œ£] [prod]‚Ä≤

subst‚Üë¬≤S-prod :
  ‚àÄ {Œì : Con Term n} {F G A m l}
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  ([Œ£] : Œì ‚ä©·µõ‚ü® l ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G / [Œì])
  ([A] : Œì ‚àô (Œ£ p , q ‚ñ∑ F ‚ñπ G) ‚ä©·µõ‚ü® l ‚ü© A / [Œì] ‚àô [Œ£]) ‚Üí
  Œ£-allowed m p q ‚Üí
  Œì ‚àô F ‚àô G ‚ä©·µõ‚ü® l ‚ü© A [ prod m p (var x1) (var x0) ]‚Üë¬≤ /
    [Œì] ‚àô [F] ‚àô [G]
subst‚Üë¬≤S-prod [Œì] [F] [G] [Œ£] [A] ok =
  subst‚Üë¬≤S [Œì] [F] [G] [Œ£] [A] ([prod] [Œì] [F] [G] [Œ£] [A] ok)

subst‚Üë¬≤SEq-prod :
  ‚àÄ {Œì : Con Term n} {F G A A‚Ä≤ m l} ‚Üí
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  ([Œ£] : Œì ‚ä©·µõ‚ü® l ‚ü© Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G / [Œì])
  ([A] : Œì ‚àô (Œ£ p , q ‚ñ∑ F ‚ñπ G) ‚ä©·µõ‚ü® l ‚ü© A / [Œì] ‚àô [Œ£])
  ([A‚Ä≤] : Œì ‚àô (Œ£ p , q ‚ñ∑ F ‚ñπ G) ‚ä©·µõ‚ü® l ‚ü© A‚Ä≤ / [Œì] ‚àô [Œ£])
  ([A‚â°A‚Ä≤] : Œì ‚àô (Œ£ p , q ‚ñ∑ F ‚ñπ G) ‚ä©·µõ‚ü® l ‚ü© A ‚â° A‚Ä≤ / [Œì] ‚àô [Œ£] / [A])
  ([A‚Çä] : Œì ‚àô F ‚àô G ‚ä©·µõ‚ü® l ‚ü© A [ prod m p (var x1) (var x0) ]‚Üë¬≤ /
            [Œì] ‚àô [F] ‚àô [G]) ‚Üí
  Œ£-allowed m p q ‚Üí
  Œì ‚àô F ‚àô G ‚ä©·µõ‚ü® l ‚ü© A  [ prod m p (var x1) (var x0) ]‚Üë¬≤ ‚â°
    A‚Ä≤ [ prod m p (var x1) (var x0) ]‚Üë¬≤ / [Œì] ‚àô [F] ‚àô [G] / [A‚Çä]
subst‚Üë¬≤SEq-prod
  {n = n} {q = q} {Œì = Œì} {F} {G} {A} {A‚Ä≤} {m} {l}
  [Œì] [F] [G] [Œ£] [A] [A‚Ä≤] [A‚â°A‚Ä≤] [A‚Çä] ok =
    let [A‚Çä‚â°A‚Ä≤‚Çä] = subst‚Üë¬≤SEq {t = prod! (var x1) (var x0)} [Œì] [F] [G] [Œ£] [A] [A‚Ä≤] [A‚â°A‚Ä≤] ([prod] [Œì] [F] [G] [Œ£] [A] ok)
        [A‚Çä]‚Ä≤ = subst‚Üë¬≤S-prod [Œì] [F] [G] [Œ£] [A] ok
    in  IS.irrelevanceEq {B = A‚Ä≤ [ prod! (var x1) (var x0) ]‚Üë¬≤}
                         ([Œì] ‚àô [F] ‚àô [G]) ([Œì] ‚àô [F] ‚àô [G]) [A‚Çä]‚Ä≤ [A‚Çä] [A‚Çä‚â°A‚Ä≤‚Çä]
