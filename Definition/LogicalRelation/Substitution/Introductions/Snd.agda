------------------------------------------------------------------------
-- Validity of the second projection.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Snd
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M as U hiding (wk ; _‚à∑_)
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Weakening R as T hiding (wk; wkTerm; wkEqTerm)
open import Definition.Typed.RedSteps R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Introductions.Pi R
open import Definition.LogicalRelation.Substitution.Introductions.SingleSubst R
open import Definition.LogicalRelation.Substitution.Introductions.Fst R

open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n   : Nat
    Œì   : Con Term n
    p q : M

snd-subst*‚Ä≤ :
  ‚àÄ {l l‚Ä≤ F G t t‚Ä≤}
  ([F] : Œì ‚ä©‚ü® l ‚ü© F)
  ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
  ([t‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ Œ£ p , q ‚ñ∑ F ‚ñπ G / B-intr (BŒ£ ùï§ p q) [Œ£FG]) ‚Üí
  Œì ‚ä¢ t ‚áí* t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G ‚Üí
  Œì ‚ä¢ snd p t ‚áí* snd p t‚Ä≤ ‚à∑ G [ fst p t ]‚ÇÄ
snd-subst*‚Ä≤ [F] (noemb (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G] G-ext _)) _ (id x)
  with B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ = id (snd‚±º ‚ä¢F ‚ä¢G x)
snd-subst*‚Ä≤
  {Œì = Œì} {p = p} {q = q} {F = F} {G = G} {t = t} {t‚Ä≤ = t‚Ä≥} [F]
  [Œ£FG]‚ÇÄ@(noemb (B·µ£ F‚ÇÅ G‚ÇÅ D ‚ä¢F ‚ä¢G A‚â°A [F]‚ÇÅ [G] G-ext _))
  [t‚Ä≥]
  t‚áí*t‚Ä≥@(_‚á®_ {t‚Ä≤ = t‚Ä≤} t‚áít‚Ä≤ t‚Ä≤‚áí*t‚Ä≥)
  with B-PE-injectivity (BŒ£ ùï§ p q) (BŒ£ ùï§ p q) (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let [Œ£FG] = B-intr (BŒ£ ùï§ p q) [Œ£FG]‚ÇÄ
      [t] , _ = redSubst*Term t‚áí*t‚Ä≥ [Œ£FG] [t‚Ä≥]
      [t‚Ä≤] , _ = redSubst*Term t‚Ä≤‚áí*t‚Ä≥ [Œ£FG] [t‚Ä≥]
      [t‚â°t‚Ä≤] : Œì ‚ä©‚ü® _ ‚ü© t ‚â° t‚Ä≤ ‚à∑ Œ£ _ , _ ‚ñ∑ F ‚ñπ G / [Œ£FG]
      [t‚â°t‚Ä≤] = proj‚ÇÇ (redSubstTerm t‚áít‚Ä≤ [Œ£FG] [t‚Ä≤])
      [fstt] : Œì ‚ä©‚ü® _ ‚ü© fst p t ‚à∑ F / [F]
      [fstt] = fst‚Ä≥ [F] [Œ£FG] [t]
      [fstt‚Ä≤] : Œì ‚ä©‚ü® _ ‚ü© fst p t‚Ä≤ ‚à∑ F / [F]
      [fstt‚Ä≤] = fst‚Ä≥ [F] [Œ£FG] [t‚Ä≤]
      [Gfstt] : Œì ‚ä©‚ü® _ ‚ü© G [ fst p t ]‚ÇÄ
      [Gfstt] = substSŒ†‚ÇÅ BŒ£! [Œ£FG] [F] [fstt]
      [Gfstt‚Ä≤] : Œì ‚ä©‚ü® _ ‚ü© G [ fst p t‚Ä≤ ]‚ÇÄ
      [Gfstt‚Ä≤] = substSŒ†‚ÇÅ BŒ£! [Œ£FG] [F] [fstt‚Ä≤]
      [fstt‚Ä≤‚â°fstt] : Œì ‚ä©‚ü® _ ‚ü© fst p t‚Ä≤ ‚â° fst p t ‚à∑ F / [F]
      [fstt‚Ä≤‚â°fstt] = symEqTerm [F] (fst-cong‚Ä≥ [F] [Œ£FG] [t‚â°t‚Ä≤])
      [Gfstt‚Ä≤‚â°Gfstt] :
        Œì ‚ä©‚ü® _ ‚ü© G [ fst p t‚Ä≤ ]‚ÇÄ ‚â° G [ fst p t ]‚ÇÄ / [Gfstt‚Ä≤]
      [Gfstt‚Ä≤‚â°Gfstt] = substSŒ†‚ÇÇ BŒ£! [Œ£FG] (reflEq [Œ£FG]) [F] [F] [fstt‚Ä≤] [fstt] [fstt‚Ä≤‚â°fstt] [Gfstt‚Ä≤] [Gfstt]
  in  snd-subst ‚ä¢F ‚ä¢G t‚áít‚Ä≤ ‚á® conv* (snd-subst*‚Ä≤ [F] [Œ£FG]‚ÇÄ [t‚Ä≥] t‚Ä≤‚áí*t‚Ä≥)
                                               (‚âÖ-eq (escapeEq [Gfstt‚Ä≤] [Gfstt‚Ä≤‚â°Gfstt]))
snd-subst*‚Ä≤ [F] (emb 0<1 x) = snd-subst*‚Ä≤ [F] x

-- NOTE this has a horrible interface (and implementation)
snd-subst* : ‚àÄ {l l‚Ä≤ F G t t‚Ä≤}
             ([F] : Œì ‚ä©‚ü® l ‚ü© F)
             ([Œ£FG] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
             ([t‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG])
             ‚Üí Œì ‚ä¢ t ‚áí* t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G
             ‚Üí Œì ‚ä¢ snd p t ‚áí* snd p t‚Ä≤ ‚à∑ G [ fst p t ]‚ÇÄ
snd-subst* [F] [Œ£FG] [t‚Ä≤] t‚áí*t‚Ä≤ =
  let [t‚Ä≤]‚Ä≤ = irrelevanceTerm [Œ£FG] (B-intr BŒ£! (B-elim BŒ£! [Œ£FG])) [t‚Ä≤]
  in  snd-subst*‚Ä≤ [F] (B-elim BŒ£! [Œ£FG]) [t‚Ä≤]‚Ä≤ t‚áí*t‚Ä≤

snd‚Ä≤ : ‚àÄ {F G t l l‚Ä≤}
       ([Œ£FG] : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
       ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG])
       ([Gfst] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© G [ fst p t ]‚ÇÄ)
       ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p t ‚à∑ G [ fst p t ]‚ÇÄ / [Gfst]
snd‚Ä≤ {Œì = Œì} {p = p‚Ä≤} {q = q} {F = F} {G = G} {t = t} {l = l} {l‚Ä≤ = l‚Ä≤}
     [Œ£FG]@(noemb [Œ£]@(B·µ£ F' G' D ‚ä¢F ‚ä¢G A‚â°A [F'] [G'] G-ext _))
     [t]@(Œ£‚Çú p d p‚âÖp pProd pProp) [Gfst] with
       B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
... | PE.refl , PE.refl , _ =
  let ‚ä¢Œì = wf ‚ä¢F
      [fstp] , [sndp] = pProp
      [p] = Œ£‚Çú p (idRedTerm:*: (‚ä¢u-red‚Çú d)) p‚âÖp pProd pProp
      [fstt] , [fstt‚â°fstp] = redSubst*Term
                               (PE.subst
                                  (Œª x ‚Üí Œì ‚ä¢ fst p‚Ä≤ t ‚áí* fst p‚Ä≤ p ‚à∑ x)
                                  (PE.sym (wk-id F))
                                  (fst-subst* (red‚Çú d) ‚ä¢F ‚ä¢G))
                               ([F'] id ‚ä¢Œì) [fstp]

      [Gfstt] = [G'] id ‚ä¢Œì [fstt]
      [Gfstp] = [G'] id ‚ä¢Œì [fstp]
      [Gfstt‚â°Gfstp] = G-ext id ‚ä¢Œì [fstt] [fstp] [fstt‚â°fstp]

      [sndp] = convTerm‚ÇÇ [Gfstt] [Gfstp] [Gfstt‚â°Gfstp] [sndp]

      [sndp] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p‚Ä≤ p ‚à∑ G [ fst p‚Ä≤ t ]‚ÇÄ / [Gfst]
      [sndp] = irrelevanceTerm‚Ä≤ (PE.cong (Œª x ‚Üí x [ fst p‚Ä≤ t ]‚ÇÄ) (wk-lift-id G))
                                [Gfstt] [Gfst] [sndp]
  in  redSubst*Term
        (snd-subst*
           (PE.subst (Œª x ‚Üí Œì ‚ä©‚ü® l ‚ü© x) (wk-id F) ([F'] id ‚ä¢Œì))
           (B-intr BŒ£! [Œ£FG])
           [p] (red‚Çú d))
        [Gfst] [sndp] .proj‚ÇÅ
snd‚Ä≤ (emb 0<1 x) = snd‚Ä≤ x

snd‚Ä≥ : ‚àÄ {F G t l l‚Ä≤}
       ([Œ£FG] : Œì ‚ä©‚ü® l ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
       ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG])
       ([Gfst] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© G [ fst p t ]‚ÇÄ)
       ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p t ‚à∑ G [ fst p t ]‚ÇÄ / [Gfst]
snd‚Ä≥ {Œì = Œì} {t = t} {l = l} [Œ£FG] [t] [Gfst] =
  let [t]‚Ä≤ = irrelevanceTerm [Œ£FG] (B-intr BŒ£! (Œ£-elim [Œ£FG])) [t]
  in  snd‚Ä≤ (Œ£-elim [Œ£FG]) [t]‚Ä≤ [Gfst]

snd-cong‚Ä≤ :
  ‚àÄ {F G t t‚Ä≤ l l‚Ä≤}
  ([Œ£FG] : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
  ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG])
  ([t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG])
  ([t‚â°t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ Œ£À¢ _ , _ ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG])
  ([Gfst] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© G [ fst p t ]‚ÇÄ) ‚Üí
  Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p t ‚â° snd p t‚Ä≤ ‚à∑ G [ fst p t ]‚ÇÄ / [Gfst]
snd-cong‚Ä≤ {Œì = Œì} {p = p‚Ä≥} {q = q} {F = F} {G} {t} {t‚Ä≤} {l} {l‚Ä≤}
          [Œ£FG]@(noemb [Œ£]@(B·µ£ F' G' D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _))
          [t]@(Œ£‚Çú p d p‚âÖp pProd pProp)
          [t‚Ä≤]@(Œ£‚Çú p‚Ä≤ d‚Ä≤ p‚Ä≤‚âÖp‚Ä≤ pProd‚Ä≤ pProp‚Ä≤)
          [t‚â°t‚Ä≤]@(Œ£‚Çú‚Çå p‚ÇÅ p‚Ä≤‚ÇÅ d‚ÇÅ d‚Ä≤‚ÇÅ pProd‚ÇÅ pProd‚Ä≤‚ÇÅ p‚âÖp‚Ä≤ [t]‚ÇÅ [t‚Ä≤]‚ÇÅ prop)
          [Gfst] with
            B-PE-injectivity BŒ£! BŒ£! (whnfRed* (red D) Œ†Œ£‚Çô)
          | whrDet*Term (red‚Çú d , productWhnf pProd) (red‚Çú d‚ÇÅ , productWhnf pProd‚ÇÅ)
          | whrDet*Term (red‚Çú d‚Ä≤ , productWhnf pProd‚Ä≤) (red‚Çú d‚Ä≤‚ÇÅ , productWhnf pProd‚Ä≤‚ÇÅ)
... | PE.refl , PE.refl , _ | PE.refl | PE.refl =
  let ‚ä¢Œì = wf ‚ä¢F
      [fstp] , [sndp] = pProp
      [fstp‚Ä≤] , [sndp‚Ä≤] = pProp‚Ä≤
      [fstp]‚ÇÅ , [fstr]‚ÇÅ , [fst‚â°] , [snd‚â°] = prop
      [p] : Œì ‚ä©‚ü® l ‚ü© p ‚à∑ Œ£ _ , _ ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG]
      [p] = Œ£‚Çú p (idRedTerm:*: (‚ä¢u-red‚Çú d)) p‚âÖp pProd pProp
      [p‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© p‚Ä≤ ‚à∑ Œ£ _ , _ ‚ñ∑ F ‚ñπ G / B-intr BŒ£! [Œ£FG]
      [p‚Ä≤] = Œ£‚Çú p‚Ä≤ (idRedTerm:*: (‚ä¢u-red‚Çú d‚Ä≤)) p‚Ä≤‚âÖp‚Ä≤ pProd‚Ä≤ pProp‚Ä≤
      [F]‚Ä≤ = irrelevance‚Ä≤ (wk-id F) ([F] id ‚ä¢Œì)

      [fstt] , [fstt‚â°fstp] = redSubst*Term
        (PE.subst (Œª x ‚Üí Œì ‚ä¢ fst p‚Ä≥ t ‚áí* fst p‚Ä≥ p ‚à∑ x)
           (PE.sym (wk-id F))
           (fst-subst* (red‚Çú d) ‚ä¢F ‚ä¢G))
        ([F] id ‚ä¢Œì) [fstp]
      [Gfstt‚â°Gfstp] = G-ext id ‚ä¢Œì [fstt] [fstp] [fstt‚â°fstp]

      [sndp]‚Ä≤ : Œì ‚ä©‚ü® l ‚ü© snd p‚Ä≥ p ‚à∑ U.wk (lift id) G [ fst p‚Ä≥ t ]‚ÇÄ /
                  [G] id ‚ä¢Œì [fstt]
      [sndp]‚Ä≤ = convTerm‚ÇÇ ([G] id ‚ä¢Œì [fstt]) ([G] id ‚ä¢Œì [fstp]) [Gfstt‚â°Gfstp] [sndp]
      sndt‚áí*sndp = snd-subst* [F]‚Ä≤ (B-intr BŒ£! [Œ£FG]) [p] (red‚Çú d)
      [sndp]‚Ä≥ = irrelevanceTerm‚Ä≤
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t ]‚ÇÄ) (wk-lift-id G))
        ([G] id ‚ä¢Œì [fstt]) [Gfst]
        [sndp]‚Ä≤
      [sndt‚â°sndp] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p‚Ä≥ t ‚â° snd p‚Ä≥ p ‚à∑ G [ fst p‚Ä≥ t ]‚ÇÄ /
                      [Gfst]
      [sndt‚â°sndp] = proj‚ÇÇ (redSubst*Term sndt‚áí*sndp [Gfst] [sndp]‚Ä≥)

      [snd‚â°]‚Ä≤ = convEqTerm‚ÇÇ ([G] id ‚ä¢Œì [fstt]) ([G] id ‚ä¢Œì [fstp]‚ÇÅ) [Gfstt‚â°Gfstp] [snd‚â°]
      [sndp‚â°sndp‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p‚Ä≥ p ‚â° snd p‚Ä≥ p‚Ä≤ ‚à∑ G [ fst p‚Ä≥ t ]‚ÇÄ /
                       [Gfst]
      [sndp‚â°sndp‚Ä≤] = irrelevanceEqTerm‚Ä≤
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t ]‚ÇÄ) (wk-lift-id G))
        ([G] id ‚ä¢Œì [fstt]) [Gfst]
        [snd‚â°]‚Ä≤

      [fstt‚Ä≤] , [fstt‚Ä≤‚â°fstp‚Ä≤] = redSubst*Term
        (PE.subst (Œª x ‚Üí Œì ‚ä¢ fst p‚Ä≥ t‚Ä≤ ‚áí* fst p‚Ä≥ p‚Ä≤ ‚à∑ x)
           (PE.sym (wk-id F))
           (fst-subst* (red‚Çú d‚Ä≤) ‚ä¢F ‚ä¢G))
        ([F] id ‚ä¢Œì) [fstp‚Ä≤]
      [fstt‚â°fstt‚Ä≤] = irrelevanceEqTerm‚Ä≤ (PE.sym (wk-id F))
                                        [F]‚Ä≤ ([F] id ‚ä¢Œì)
                                        (fst-cong‚Ä≤ [F]‚Ä≤ [Œ£FG] [t‚â°t‚Ä≤])
      [fstt‚â°fstp‚Ä≤] = transEqTerm ([F] id ‚ä¢Œì) [fstt‚â°fstt‚Ä≤] [fstt‚Ä≤‚â°fstp‚Ä≤]
      [Gfstt‚â°Gfstp‚Ä≤] = G-ext id ‚ä¢Œì [fstt] [fstp‚Ä≤] [fstt‚â°fstp‚Ä≤]
      [sndp‚Ä≤]‚Ä≤ : Œì ‚ä©‚ü® l ‚ü© snd p‚Ä≥ p‚Ä≤ ‚à∑ U.wk (lift id) G [ fst p‚Ä≥ t ]‚ÇÄ /
                   [G] id ‚ä¢Œì [fstt]
      [sndp‚Ä≤]‚Ä≤ = convTerm‚ÇÇ ([G] id ‚ä¢Œì [fstt]) ([G] id ‚ä¢Œì [fstp‚Ä≤]) [Gfstt‚â°Gfstp‚Ä≤] [sndp‚Ä≤]
      [sndp‚Ä≤]‚Ä≥ = irrelevanceTerm‚Ä≤
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t ]‚ÇÄ) (wk-lift-id G))
        ([G] id ‚ä¢Œì [fstt]) [Gfst]
        [sndp‚Ä≤]‚Ä≤
      [Gfstt]‚Ä≤ = irrelevance‚Ä≤
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t ]‚ÇÄ) (wk-lift-id G))
        ([G] id ‚ä¢Œì [fstt])
      [Gfstt‚â°Gfstt‚Ä≤] = irrelevanceEq‚Ä≥
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t ]‚ÇÄ) (wk-lift-id G))
        (PE.cong (Œª x ‚Üí x [ fst p‚Ä≥ t‚Ä≤ ]‚ÇÄ) (wk-lift-id G))
        ([G] id ‚ä¢Œì [fstt]) [Gfstt]‚Ä≤
        (G-ext id ‚ä¢Œì [fstt] [fstt‚Ä≤] [fstt‚â°fstt‚Ä≤])
      sndt‚Ä≤‚áí*sndp‚Ä≤ : Œì ‚ä¢ snd p‚Ä≥ t‚Ä≤ ‚áí* snd p‚Ä≥ p‚Ä≤ ‚à∑ G [ fst p‚Ä≥ t ]‚ÇÄ
      sndt‚Ä≤‚áí*sndp‚Ä≤ = conv* (snd-subst* [F]‚Ä≤ (B-intr BŒ£! [Œ£FG]) [p‚Ä≤] (red‚Çú d‚Ä≤))
                           (‚âÖ-eq (‚âÖ-sym (escapeEq [Gfstt]‚Ä≤ [Gfstt‚â°Gfstt‚Ä≤])))
      [sndt‚Ä≤‚â°sndp‚Ä≤] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p‚Ä≥ t‚Ä≤ ‚â° snd p‚Ä≥ p‚Ä≤ ‚à∑ G [ fst p‚Ä≥ t ]‚ÇÄ /
                        [Gfst]
      [sndt‚Ä≤‚â°sndp‚Ä≤] = proj‚ÇÇ (redSubst*Term sndt‚Ä≤‚áí*sndp‚Ä≤ [Gfst] [sndp‚Ä≤]‚Ä≥)

  in  transEqTerm [Gfst] [sndt‚â°sndp] (transEqTerm [Gfst] [sndp‚â°sndp‚Ä≤] (symEqTerm [Gfst] [sndt‚Ä≤‚â°sndp‚Ä≤]))
snd-cong‚Ä≤ {F} {G} (emb 0<1 x) = snd-cong‚Ä≤ x

snd-cong‚Ä≥ : ‚àÄ {F G t t‚Ä≤ l l‚Ä≤}
            ([Œ£FG] : Œì ‚ä©‚ü® l ‚ü© Œ£À¢ p , q ‚ñ∑ F ‚ñπ G)
            ([t] : Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG])
            ([t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG])
            ([t‚â°t‚Ä≤] : Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œ£FG])
            ([Gfst] : Œì ‚ä©‚ü® l‚Ä≤ ‚ü© G [ fst p t ]‚ÇÄ)
            ‚Üí Œì ‚ä©‚ü® l‚Ä≤ ‚ü© snd p t ‚â° snd p t‚Ä≤ ‚à∑ G [ fst p t ]‚ÇÄ / [Gfst]
snd-cong‚Ä≥ {F} {G} [Œ£FG] [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gfst] =
  let [t] = irrelevanceTerm [Œ£FG] (B-intr BŒ£! (Œ£-elim [Œ£FG])) [t]
      [t‚Ä≤] = irrelevanceTerm [Œ£FG] (B-intr BŒ£! (Œ£-elim [Œ£FG])) [t‚Ä≤]
      [t‚â°t‚Ä≤] = irrelevanceEqTerm [Œ£FG] (B-intr BŒ£! (Œ£-elim [Œ£FG])) [t‚â°t‚Ä≤]
  in  snd-cong‚Ä≤ (B-elim BŒ£! [Œ£FG]) [t] [t‚Ä≤] [t‚â°t‚Ä≤] [Gfst]

snd-cong·µõ :
  ‚àÄ {F G t t‚Ä≤ l}
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  (ok : Œ£À¢-allowed p q)
  ([t] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œì] / Œ£·µõ [Œì] [F] [G] ok)
  ([t‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œì] / Œ£·µõ [Œì] [F] [G] ok)
  ([t‚â°t‚Ä≤] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ Œ£À¢ p , q ‚ñ∑ F ‚ñπ G / [Œì] /
              Œ£·µõ [Œì] [F] [G] ok) ‚Üí
  Œì ‚ä©·µõ‚ü® l ‚ü© snd p t ‚â° snd p t‚Ä≤ ‚à∑ G [ fst p t ]‚ÇÄ / [Œì] /
    substS [Œì] [F] [G] (fst·µõ {t = t} [Œì] [F] [G] ok [t])
snd-cong·µõ
  {Œì = Œì} {F = F} {G} {t} {t‚Ä≤} {l}
  [Œì] [F] [G] ok [t] [t‚Ä≤] [t‚â°t‚Ä≤] {Œî} {œÉ} ‚ä¢Œî [œÉ] =
  let [Œ£FG] = Œ£·µõ {F = F} {G} [Œì] [F] [G] ok
      [fst] = fst·µõ {F = F} {G} {t} [Œì] [F] [G] ok [t]
      [Gfst] = substS {F = F} {G} [Œì] [F] [G] [fst]

      ‚ä©œÉŒ£FG = proj‚ÇÅ (unwrap [Œ£FG] ‚ä¢Œî [œÉ])
      ‚ä©œÉt = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ])
      ‚ä©œÉt‚Ä≤ = proj‚ÇÅ ([t‚Ä≤] ‚ä¢Œî [œÉ])
      œÉt‚â°œÉt‚Ä≤ = [t‚â°t‚Ä≤] ‚ä¢Œî [œÉ]

      ‚ä©œÉGfst‚ÇÅ = proj‚ÇÅ (unwrap [Gfst] ‚ä¢Œî [œÉ])
      ‚ä©œÉGfst = irrelevance‚Ä≤ (singleSubstLift G (fst _ t)) ‚ä©œÉGfst‚ÇÅ

      œÉsnd‚â°‚ÇÅ = snd-cong‚Ä≥ ‚ä©œÉŒ£FG ‚ä©œÉt ‚ä©œÉt‚Ä≤ œÉt‚â°œÉt‚Ä≤ ‚ä©œÉGfst
      œÉsnd‚â° = irrelevanceEqTerm‚Ä≤ (PE.sym (singleSubstLift G (fst _ t)))
                ‚ä©œÉGfst ‚ä©œÉGfst‚ÇÅ œÉsnd‚â°‚ÇÅ
  in  œÉsnd‚â°

-- Validity of second projection
snd·µõ :
  ‚àÄ {F G t l}
  ([Œì] : ‚ä©·µõ Œì)
  ([F] : Œì ‚ä©·µõ‚ü® l ‚ü© F / [Œì])
  ([G] : Œì ‚àô F ‚ä©·µõ‚ü® l ‚ü© G / [Œì] ‚àô [F])
  (ok : Œ£À¢-allowed p q)
  ([t] : Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ Œ£ p , q ‚ñ∑ F ‚ñπ G / [Œì] / Œ£·µõ [Œì] [F] [G] ok) ‚Üí
  Œì ‚ä©·µõ‚ü® l ‚ü© snd p t ‚à∑ G [ fst p t ]‚ÇÄ / [Œì] /
    substS [Œì] [F] [G] (fst·µõ {t = t} [Œì] [F] [G] ok [t])
snd·µõ
  {Œì = Œì} {F = F} {G} {t} {l}
  [Œì] [F] [G] ok [t] {Œî = Œî} {œÉ = œÉ} ‚ä¢Œî [œÉ] =
  let [Œ£FG] = Œ£·µõ {F = F} {G} [Œì] [F] [G] ok
      [Gfst] : Œì ‚ä©·µõ‚ü® l ‚ü© G [ fst _ t ]‚ÇÄ / [Œì]
      [Gfst] = substS [Œì] [F] [G] (fst·µõ {t = t} [Œì] [F] [G] ok [t])

      œÉsnd : ‚àÄ {Œî œÉ} (‚ä¢Œî : ‚ä¢ Œî) ([œÉ] : Œî ‚ä©À¢ œÉ ‚à∑ Œì / [Œì] / ‚ä¢Œî)
           ‚Üí Œî ‚ä©‚ü® l ‚ü© snd _ t [ œÉ ] ‚à∑ G [ fst _ t ]‚ÇÄ [ œÉ ] /
               proj‚ÇÅ (unwrap [Gfst] ‚ä¢Œî [œÉ])
      œÉsnd {Œî} {œÉ} ‚ä¢Œî [œÉ] =
        let ‚ä©œÉŒ£FG = proj‚ÇÅ (unwrap [Œ£FG] ‚ä¢Œî [œÉ])
            ‚ä©œÉt = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ])
            ‚ä©œÉGfstt = proj‚ÇÅ (unwrap [Gfst] ‚ä¢Œî [œÉ])
            ‚ä©œÉGfstt‚Ä≤ = PE.subst (Œª x ‚Üí Œî ‚ä©‚ü® l ‚ü© x)
                         (singleSubstLift G (fst _ t)) ‚ä©œÉGfstt
            ‚ä©œÉsnd = snd‚Ä≥ ‚ä©œÉŒ£FG ‚ä©œÉt ‚ä©œÉGfstt‚Ä≤
        in  irrelevanceTerm‚Ä≤
              (PE.sym (singleSubstLift G (fst _ t)))
              ‚ä©œÉGfstt‚Ä≤  ‚ä©œÉGfstt
              ‚ä©œÉsnd

  in  œÉsnd ‚ä¢Œî [œÉ] ,
      (Œª {œÉ‚Ä≤} [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤] ‚Üí
        let [œÉF] = proj‚ÇÅ (unwrap [F] ‚ä¢Œî [œÉ])
            [œÉŒ£FG] = proj‚ÇÅ (unwrap [Œ£FG] ‚ä¢Œî [œÉ])
            [œÉ‚Ä≤Œ£FG] = proj‚ÇÅ (unwrap [Œ£FG] ‚ä¢Œî [œÉ‚Ä≤])
            [œÉŒ£FG‚â°œÉ‚Ä≤Œ£FG] = proj‚ÇÇ (unwrap [Œ£FG] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤]
            [œÉt] = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ])
            [œÉ‚Ä≤t] = proj‚ÇÅ ([t] ‚ä¢Œî [œÉ‚Ä≤])
            [œÉ‚Ä≤t] : Œî ‚ä©‚ü® l ‚ü© t [ œÉ‚Ä≤ ] ‚à∑ (Œ£ _ , _ ‚ñ∑ F ‚ñπ G) [ œÉ ] /
                      [œÉŒ£FG]
            [œÉ‚Ä≤t] = convTerm‚ÇÇ [œÉŒ£FG] [œÉ‚Ä≤Œ£FG] [œÉŒ£FG‚â°œÉ‚Ä≤Œ£FG] [œÉ‚Ä≤t]
            [œÉt‚â°œÉ‚Ä≤t] = proj‚ÇÇ ([t] ‚ä¢Œî [œÉ]) [œÉ‚Ä≤] [œÉ‚â°œÉ‚Ä≤]
            [œÉGfstt] = proj‚ÇÅ (unwrap [Gfst] ‚ä¢Œî [œÉ])
            [œÉGfstt]‚Ä≤ = PE.subst (Œª x ‚Üí _ ‚ä©‚ü® l ‚ü© x)
                                (singleSubstLift G (fst _ t))
                                [œÉGfstt]
            [sndt‚â°sndt‚Ä≤] = snd-cong‚Ä≥ [œÉŒ£FG] [œÉt] [œÉ‚Ä≤t] [œÉt‚â°œÉ‚Ä≤t] [œÉGfstt]‚Ä≤
        in  irrelevanceEqTerm‚Ä≤ (PE.sym (singleSubstLift G (fst _ t)))
                               [œÉGfstt]‚Ä≤ [œÉGfstt]
                               [sndt‚â°sndt‚Ä≤])
