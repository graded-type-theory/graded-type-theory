------------------------------------------------------------------------
-- Validity for Œ†- and Œ£-types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Pi-Sigma
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import
  Definition.LogicalRelation.Substitution.Introductions.Universe R
open import Definition.LogicalRelation.Substitution.Introductions.Var R
import Definition.LogicalRelation.Weakening R as W

open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Weakening R as TW using (_‚à∑ ∑_‚äá_)
open import Definition.Typed.Well-formed R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
import Tools.PropositionalEquality as PE
import Tools.Reasoning.PropositionalEquality

private variable
  n                         : Nat
  Œì Œî                       : Con Term _
  A A‚ÇÅ A‚ÇÇ B B‚ÇÅ B‚ÇÇ C t t‚ÇÅ t‚ÇÇ : Term _
  œÉ œÉ‚ÇÅ œÉ‚ÇÇ                   : Subst _ _
  p p‚ÇÅ p‚ÇÇ q q‚ÇÅ q‚ÇÇ           : M
  l l‚Ä≤ l‚ÇÅ l‚ÇÇ                : Universe-level
  b b‚ÇÅ b‚ÇÇ                   : BinderMode

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Œ†Œ£‚áî :
    {A : Term n} {B : Term (1+ n)} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œ†Œ£-allowed b p q √ó
     ‚ä¢ Œì √ó
     (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ A √ó
      (‚àÄ {t u} ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B [ t ]‚ÇÄ ‚â° wk (lift œÅ) B [ u ]‚ÇÄ)))
  ‚ä©Œ†Œ£‚áî {n} {b} {p} {q} {A} {B} =
      lemma ‚àò‚Üí B-elim _
    , (Œª (ok , ‚ä¢Œì , rest) ‚Üí
         case PE.subst (_‚ä©‚ü®_‚ü©_ _ _) (wk-id _) $
              rest (TW.id ∑ ‚ä¢Œì) .proj‚ÇÅ of Œª
           ‚ä©A ‚Üí
         case escape ‚ä©A of Œª
           ‚ä¢A ‚Üí
         case TW.step ∑ TW.id ‚ä¢A of Œª
           step-id ‚Üí
         case var (‚àô ‚ä¢A) here of Œª
           ‚ä¢x0 ‚Üí
         case PE.subst (Œª B ‚Üí _ ‚ä©‚ü® _ ‚ü© B ‚â° B) (wkSingleSubstId _) $
              rest step-id .proj‚ÇÇ $
              refl-‚ä©‚â°‚à∑ $
              neutral-‚ä©‚à∑ (W.wk step-id ‚ä©A) (var _) (~-var ‚ä¢x0) of Œª
           B‚â°B ‚Üí
         case escape $ wf-‚ä©‚â° B‚â°B .proj‚ÇÅ of Œª
           ‚ä¢B ‚Üí
         B·µ£ (BM b p q)
           (B·µ£ _ _ (idRed:*: (Œ†Œ£‚±º ‚ä¢B ok))
              (‚âÖ-Œ†Œ£-cong (escape-‚ä©‚â° $ refl-‚ä©‚â° ‚ä©A) (escape-‚ä©‚â° B‚â°B) ok)
              (Œª œÅ‚äá ‚Üí rest œÅ‚äá .proj‚ÇÅ)
              (Œª œÅ‚äá ‚ä©t ‚Üí
                 wf-‚ä©‚â°
                   (rest œÅ‚äá .proj‚ÇÇ $
                    refl-‚ä©‚â°‚à∑ (rest _ .proj‚ÇÅ , ‚ä©t))
                   .proj‚ÇÅ)
              (Œª œÅ‚äá ‚ä©t ‚ä©u t‚â°u ‚Üí
                 ‚ä©‚â°‚Üí‚ä©‚â°/
                   (wf-‚ä©‚â°
                      (rest œÅ‚äá .proj‚ÇÇ $
                       refl-‚ä©‚â°‚à∑ (rest _ .proj‚ÇÅ , ‚ä©t))
                      .proj‚ÇÅ) $
                 rest œÅ‚äá .proj‚ÇÇ (rest _ .proj‚ÇÅ , ‚ä©t , ‚ä©u , t‚â°u))
              ok))
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü©B‚ü® BM b p q ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
      Œ†Œ£-allowed b p q √ó
      ‚ä¢ Œì √ó
      (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ A √ó
       (‚àÄ {t u} ‚Üí
        Œî ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ wk œÅ A ‚Üí
        Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B [ t ]‚ÇÄ ‚â° wk (lift œÅ) B [ u ]‚ÇÄ))
    lemma (emb p ‚ä©Œ†Œ£) =
      case lemma ‚ä©Œ†Œ£ of Œª
        (ok , ‚ä¢Œì , rest) ‚Üí
        ok , ‚ä¢Œì
      , Œª œÅ‚äá ‚Üí
          case rest œÅ‚äá of Œª
            (‚ä©A , B‚â°B) ‚Üí
            emb p (PE.subst (Œª k ‚Üí LogRelKit._‚ä©_ k _ _) (kit‚â°kit‚Ä≤ p) ‚ä©A)
          , emb-‚ä©‚â° (<·µò‚Üí‚â§·µò p) ‚àò‚Üí B‚â°B ‚àò‚Üí level-‚ä©‚â°‚à∑ ‚ä©A
    lemma (noemb (B·µ£ _ _ ‚áí*Œ†Œ£ _ ‚ä©wk-A ‚ä©wk-B wk-B‚â°wk-B ok)) =
      case B-PE-injectivity _ _ $ whnfRed* (red ‚áí*Œ†Œ£) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
        ok , wfEq (subset* (red ‚áí*Œ†Œ£))
      , Œª œÅ‚äá ‚Üí
          let ‚ä©wk-œÅ-A = ‚ä©wk-A œÅ‚äá in
            ‚ä©wk-œÅ-A
          , Œª (‚ä©wk-œÅ-A‚Ä≤ , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
              case irrelevanceTerm ‚ä©wk-œÅ-A‚Ä≤ ‚ä©wk-œÅ-A ‚ä©t of Œª
                ‚ä©t ‚Üí
              case irrelevanceTerm ‚ä©wk-œÅ-A‚Ä≤ ‚ä©wk-œÅ-A ‚ä©u of Œª
                ‚ä©u ‚Üí
                ‚ä©wk-B œÅ‚äá ‚ä©t
              , ‚ä©wk-B œÅ‚äá ‚ä©u
              , wk-B‚â°wk-B œÅ‚äá ‚ä©t ‚ä©u
                  (irrelevanceEqTerm ‚ä©wk-œÅ-A‚Ä≤ ‚ä©wk-œÅ-A t‚â°u) }

opaque

  -- A variant of ‚ä©Œ†Œ£‚áî.

  ‚ä©Œ†Œ£‚Üí :
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œ†Œ£-allowed b p q √ó Œì ‚ä©‚ü® l ‚ü© A √ó Œì ‚àô A ‚ä©‚ü® l ‚ü© B
  ‚ä©Œ†Œ£‚Üí ‚ä©Œ†Œ£ =
    case ‚ä©Œ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†Œ£ of Œª
      (ok , ‚ä¢Œì , rest) ‚Üí
    case rest (TW.id ∑ ‚ä¢Œì) of Œª
      (‚ä©wk-id-A , _) ‚Üí
    case PE.subst (_‚ä©‚ü®_‚ü©_ _ _) (wk-id _) ‚ä©wk-id-A of Œª
      ‚ä©A ‚Üí
    case rest (TW.step ∑ TW.id (escape-‚ä© ‚ä©A)) of Œª
      (‚ä©wk‚ÇÅ-A , wk-lift-step-id-B[]‚ÇÄ‚â°wk-lift-step-id-B[]‚ÇÄ) ‚Üí
      ok , ‚ä©A
    , PE.subst (_‚ä©‚ü®_‚ü©_ _ _) (wkSingleSubstId _)
        (proj‚ÇÅ $ wf-‚ä©‚â° $
         wk-lift-step-id-B[]‚ÇÄ‚â°wk-lift-step-id-B[]‚ÇÄ $
         refl-‚ä©‚â°‚à∑ (‚ä©var here ‚ä©wk‚ÇÅ-A))

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Œ†Œ£‚â°‚áî :
    {C : Term n} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚â° C ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© C √ó
     ‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí Œì ‚ä¢ C :‚áí*: Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤ √ó
     (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ A ‚â° wk œÅ A‚Ä≤ √ó
      (‚àÄ {t} ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B [ t ]‚ÇÄ ‚â° wk (lift œÅ) B‚Ä≤ [ t ]‚ÇÄ)))
  ‚ä©Œ†Œ£‚â°‚áî =
      (Œª (‚ä©Œ†Œ£ , ‚ä©C , Œ†Œ£‚â°C) ‚Üí
         case B-elim _ ‚ä©Œ†Œ£ of Œª
           ‚ä©Œ†Œ£‚Ä≤ ‚Üí
           ‚ä©Œ†Œ£ , ‚ä©C
         , lemma‚ÇÅ ‚â§·µò-refl ‚ä©Œ†Œ£‚Ä≤ ‚ä©C
             (irrelevanceEq ‚ä©Œ†Œ£ (B-intr _ ‚ä©Œ†Œ£‚Ä≤) Œ†Œ£‚â°C))
    , (Œª (‚ä©Œ†Œ£ , ‚ä©C , _ , _ , C‚áí* , rest) ‚Üí
         case B-elim _ ‚ä©Œ†Œ£ of Œª
           ‚ä©Œ†Œ£‚Ä≤ ‚Üí
         B-intr _ ‚ä©Œ†Œ£‚Ä≤ , ‚ä©C , lemma‚ÇÇ ‚ä©Œ†Œ£‚Ä≤ C‚áí* rest)
    where
    lemma‚ÇÅ :
      l‚Ä≤ ‚â§·µò l ‚Üí
      (‚ä©Œ†Œ£ : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BM b p q ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© C ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚â° C / B-intr _ ‚ä©Œ†Œ£ ‚Üí
      ‚àÉ‚ÇÇ Œª A‚Ä≤ B‚Ä≤ ‚Üí Œì ‚ä¢ C :‚áí*: Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤ √ó
      (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ A ‚â° wk œÅ A‚Ä≤ √ó
       (‚àÄ {t} ‚Üí
        Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A ‚Üí
        Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B [ t ]‚ÇÄ ‚â° wk (lift œÅ) B‚Ä≤ [ t ]‚ÇÄ))
    lemma‚ÇÅ l‚Ä≤‚â§l (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†Œ£‚ÇÅ) ‚ä©Œ†Œ£‚ÇÇ Œ†Œ£‚â°Œ†Œ£ =
      lemma‚ÇÅ (‚â§·µò-trans (<·µò‚Üí‚â§·µò l‚Ä≥<l‚Ä≤) l‚Ä≤‚â§l) ‚ä©Œ†Œ£‚ÇÅ ‚ä©Œ†Œ£‚ÇÇ
        (irrelevanceEq (B-intr _ (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†Œ£‚ÇÅ)) (B-intr _ ‚ä©Œ†Œ£‚ÇÅ)
           Œ†Œ£‚â°Œ†Œ£)
    lemma‚ÇÅ
      l‚Ä≤‚â§l (noemb (B·µ£ _ _ ‚áí*Œ†Œ£ _ ‚ä©wk-A ‚ä©wk-B _ ok)) ‚ä©C
      (B‚Çå _ _ ‚áí*Œ†Œ£‚Ä≤ _ wk-A‚â°wk-A‚Ä≤ wk-B‚â°wk-B‚Ä≤) =
      case B-PE-injectivity _ _ $ whnfRed* (red ‚áí*Œ†Œ£) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
        _ , _ , ‚áí*Œ†Œ£‚Ä≤
      , Œª œÅ‚äá ‚Üí
          case ‚ä©Œ†Œ£‚áî .proj‚ÇÅ (wf-‚ä©‚â° (‚ä©-‚áí* ‚áí*Œ†Œ£‚Ä≤ ‚ä©C) .proj‚ÇÇ)
                 .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá of Œª
            (‚ä©wk-œÅ-A‚Ä≤ , wk-œÅ‚áë-B‚Ä≤‚â°wk-œÅ‚áë-B‚Ä≤) ‚Üí
          case   emb-‚â§-‚ä© l‚Ä≤‚â§l (‚ä©wk-A œÅ‚äá)
               , ‚ä©wk-œÅ-A‚Ä≤
               , emb-‚â§-‚ä©‚â° (wk-A‚â°wk-A‚Ä≤ œÅ‚äá) of Œª
            wk-œÅ-A‚â°wk-œÅ-A‚Ä≤ ‚Üí
            wk-œÅ-A‚â°wk-œÅ-A‚Ä≤
          , Œª ‚ä©t@(‚ä©wk-œÅ-A , ‚ä©t‚Ä≤) ‚Üí
              let ‚ä©wk-œÅ‚áë-B[t] =
                    ‚ä©wk-B œÅ‚äá (irrelevanceTerm ‚ä©wk-œÅ-A (‚ä©wk-A œÅ‚äá) ‚ä©t‚Ä≤)
                  ‚ä©wk-œÅ‚áë-B[t]‚Ä≤ = emb-‚â§-‚ä© l‚Ä≤‚â§l ‚ä©wk-œÅ‚áë-B[t]
              in
                ‚ä©wk-œÅ‚áë-B[t]‚Ä≤
              , wf-‚ä©‚â°
                  (wk-œÅ‚áë-B‚Ä≤‚â°wk-œÅ‚áë-B‚Ä≤ $
                   refl-‚ä©‚â°‚à∑ (conv-‚ä©‚à∑ wk-œÅ-A‚â°wk-œÅ-A‚Ä≤ ‚ä©t))
                  .proj‚ÇÅ
              , irrelevanceEq ‚ä©wk-œÅ‚áë-B[t] ‚ä©wk-œÅ‚áë-B[t]‚Ä≤
                  (wk-B‚â°wk-B‚Ä≤ œÅ‚äá $
                   irrelevanceTerm ‚ä©wk-œÅ-A (‚ä©wk-A œÅ‚äá) ‚ä©t‚Ä≤) }

    lemma‚ÇÇ :
      (‚ä©Œ†Œ£ : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BM b p q ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚Üí
      Œì ‚ä¢ C :‚áí*: Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ ‚Üí
      (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ A‚ÇÅ ‚â° wk œÅ A‚ÇÇ √ó
       (‚àÄ {t} ‚Üí
        Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A‚ÇÅ ‚Üí
        Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B‚ÇÅ [ t ]‚ÇÄ ‚â° wk (lift œÅ) B‚ÇÇ [ t ]‚ÇÄ)) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° C / B-intr _ ‚ä©Œ†Œ£
    lemma‚ÇÇ (emb ‚â§·µò-refl     ‚ä©Œ†Œ£‚ÇÅ) = lemma‚ÇÇ ‚ä©Œ†Œ£‚ÇÅ
    lemma‚ÇÇ (emb (‚â§·µò-step p) ‚ä©Œ†Œ£‚ÇÅ) = lemma‚ÇÇ (emb p ‚ä©Œ†Œ£‚ÇÅ)
    lemma‚ÇÇ
      {B‚ÇÅ} {B‚ÇÇ} (noemb ‚ä©Œ†Œ£‚ÇÅ@(B·µ£ _ _ ‚áí*Œ†Œ£‚ÇÅ _ ‚ä©wk-A‚ÇÅ ‚ä©wk-B‚ÇÅ _ ok))
      C‚áí* rest =
      case B-PE-injectivity _ _ $ whnfRed* (red ‚áí*Œ†Œ£‚ÇÅ) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      let ‚ä¢A‚ÇÅ , _ = inversion-Œ†Œ£ (wf-‚ä¢‚â° (subset* (red ‚áí*Œ†Œ£‚ÇÅ)) .proj‚ÇÅ) in
      case PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _) (wk-id _) (wk-id _) $
           rest (TW.id ∑ (wf ‚ä¢A‚ÇÅ)) .proj‚ÇÅ of Œª
        A‚ÇÅ‚â°A‚ÇÇ ‚Üí
      case TW.step ∑ TW.id ‚ä¢A‚ÇÅ of Œª
        step-id ‚Üí
      case var (‚àô ‚ä¢A‚ÇÅ) here of Œª
        ‚ä¢x0 ‚Üí
      case PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _) {y = B‚ÇÅ} {v = B‚ÇÇ}
             (wkSingleSubstId _) (wkSingleSubstId _) $
           rest step-id .proj‚ÇÇ $
           neutral-‚ä©‚à∑ (W.wk step-id (wf-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ)) (var _)
             (~-var ‚ä¢x0) of Œª
        B‚ÇÅ‚â°B‚ÇÇ ‚Üí
      _ ‚ä©‚ü® _ ‚ü© _ ‚â° _ / B·µ£ _ ‚ä©Œ†Œ£‚ÇÅ ‚àã
      B‚Çå _ _ C‚áí* (‚âÖ-Œ†Œ£-cong (escape-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ) (escape-‚ä©‚â° B‚ÇÅ‚â°B‚ÇÇ) ok)
        (Œª œÅ‚äá ‚Üí ‚ä©‚â°‚Üí‚ä©‚â°/ (‚ä©wk-A‚ÇÅ œÅ‚äá) (rest œÅ‚äá .proj‚ÇÅ))
        (Œª œÅ‚äá ‚ä©t ‚Üí
           case rest œÅ‚äá of Œª
             (wk-œÅ-A‚ÇÅ‚â°wk-œÅ-A‚ÇÇ , wk-œÅ‚áë-B‚ÇÅ‚â°wk-œÅ‚áë-B‚ÇÇ) ‚Üí
           case wf-‚ä©‚â° wk-œÅ-A‚ÇÅ‚â°wk-œÅ-A‚ÇÇ .proj‚ÇÅ of Œª
             ‚ä©wk-œÅ-A‚ÇÅ ‚Üí
           ‚ä©‚â°‚Üí‚ä©‚â°/ (‚ä©wk-B‚ÇÅ œÅ‚äá ‚ä©t) $
           wk-œÅ‚áë-B‚ÇÅ‚â°wk-œÅ‚áë-B‚ÇÇ
             ( ‚ä©wk-œÅ-A‚ÇÅ
             , irrelevanceTerm (‚ä©wk-A‚ÇÅ œÅ‚äá) ‚ä©wk-œÅ-A‚ÇÅ ‚ä©t
             )) }

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî :
    {A‚ÇÅ A‚ÇÇ : Term n} {B‚ÇÅ B‚ÇÇ : Term (1+ n)} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ √ó
     Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ √ó
     b‚ÇÅ PE.‚â° b‚ÇÇ √ó p‚ÇÅ PE.‚â° p‚ÇÇ √ó q‚ÇÅ PE.‚â° q‚ÇÇ √ó
     (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ A‚ÇÅ ‚â° wk œÅ A‚ÇÇ √ó
      (‚àÄ {t} ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A‚ÇÅ ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B‚ÇÅ [ t ]‚ÇÄ ‚â° wk (lift œÅ) B‚ÇÇ [ t ]‚ÇÄ)))
  ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî
    {n} {Œì} {l} {b‚ÇÅ} {p‚ÇÅ} {q‚ÇÅ} {b‚ÇÇ} {p‚ÇÇ} {q‚ÇÇ} {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ} {B‚ÇÇ} =

    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ  ‚áî‚ü® ‚ä©Œ†Œ£‚â°‚áî ‚ü©

    (Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ √ó
     Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ √ó
     ‚àÉ‚ÇÇ Œª A B ‚Üí
     Œì ‚ä¢ Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ :‚áí*: Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A ‚ñπ B √ó
     (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ A‚ÇÅ ‚â° wk œÅ A √ó
      (‚àÄ {t} ‚Üí
       Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A‚ÇÅ ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B‚ÇÅ [ t ]‚ÇÄ ‚â° wk (lift œÅ) B [ t ]‚ÇÄ)))       ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí Œ£-cong-‚áî Œª ‚ä©Œ†Œ£‚ÇÇ ‚Üí
                                                                            (Œª (_ , _ , Œ†Œ£‚áí*Œ†Œ£ , rest) ‚Üí
                                                                               case whnfRed* (red Œ†Œ£‚áí*Œ†Œ£) Œ†Œ£‚Çô of Œª {
                                                                                 PE.refl ‚Üí
                                                                               PE.refl , PE.refl , PE.refl , rest })
                                                                          , Œª { (PE.refl , PE.refl , PE.refl , rest) ‚Üí
                                                                                _ , _ , idRed:*: (escape-‚ä© ‚ä©Œ†Œ£‚ÇÇ) , rest }) ‚ü©
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ √ó
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ √ó
    b‚ÇÅ PE.‚â° b‚ÇÇ √ó p‚ÇÅ PE.‚â° p‚ÇÇ √ó q‚ÇÅ PE.‚â° q‚ÇÇ √ó
    (‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} ‚Üí
     œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© wk œÅ A‚ÇÅ ‚â° wk œÅ A‚ÇÇ √ó
     (‚àÄ {t} ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t ‚à∑ wk œÅ A‚ÇÅ ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk (lift œÅ) B‚ÇÅ [ t ]‚ÇÄ ‚â° wk (lift œÅ) B‚ÇÇ [ t ]‚ÇÄ))        ‚ñ°‚áî

opaque

  -- A variant of ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî.

  ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí :
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ ‚Üí
    Œ†Œ£-allowed b‚ÇÅ p‚ÇÅ q‚ÇÅ √ó b‚ÇÅ PE.‚â° b‚ÇÇ √ó p‚ÇÅ PE.‚â° p‚ÇÇ √ó q‚ÇÅ PE.‚â° q‚ÇÇ √ó
    Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ √ó Œì ‚àô A‚ÇÅ ‚ä©‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ
  ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí Œ†Œ£‚â°Œ†Œ£ =
    case ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî .proj‚ÇÅ Œ†Œ£‚â°Œ†Œ£ of Œª
      (‚ä©Œ†Œ£‚ÇÅ , _ , b‚ÇÅ‚â°b‚ÇÇ , p‚ÇÅ‚â°p‚ÇÇ , q‚ÇÅ‚â°q‚ÇÇ , rest) ‚Üí
    case ‚ä©Œ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†Œ£‚ÇÅ of Œª
      (ok , ‚ä¢Œì , _) ‚Üí
    case rest (TW.id ∑ ‚ä¢Œì) of Œª
      (wk-id-A‚ÇÅ‚â°wk-id-A‚ÇÇ , _) ‚Üí
    case PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _) (wk-id _) (wk-id _)
           wk-id-A‚ÇÅ‚â°wk-id-A‚ÇÇ of Œª
      A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case rest (TW.step ∑ TW.id (escape-‚ä© (wf-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ))) of Œª
      (wk‚ÇÅ-A‚ÇÅ‚â°wk‚ÇÅ-A‚ÇÇ , wk-lift-step-id-B‚ÇÅ[]‚ÇÄ‚â°wk-lift-step-id-B‚ÇÇ[]‚ÇÄ) ‚Üí
      ok , b‚ÇÅ‚â°b‚ÇÇ , p‚ÇÅ‚â°p‚ÇÇ , q‚ÇÅ‚â°q‚ÇÇ , A‚ÇÅ‚â°A‚ÇÇ
    , PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _) (wkSingleSubstId _) (wkSingleSubstId _)
        (wk-lift-step-id-B‚ÇÅ[]‚ÇÄ‚â°wk-lift-step-id-B‚ÇÇ[]‚ÇÄ $
         ‚ä©var here (wf-‚ä©‚â° wk‚ÇÅ-A‚ÇÅ‚â°wk‚ÇÅ-A‚ÇÇ .proj‚ÇÅ))

-- See also ‚ä©·µõŒ†Œ£‚áî below.

------------------------------------------------------------------------
-- Some substitution lemmas

opaque

  -- A substitution lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ :
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b‚ÇÅ ‚ü© p‚ÇÅ , q‚ÇÅ ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° Œ†Œ£‚ü® b‚ÇÇ ‚ü© p‚ÇÇ , q‚ÇÇ ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B‚ÇÅ [ t‚ÇÅ ]‚ÇÄ ‚â° B‚ÇÇ [ t‚ÇÇ ]‚ÇÄ
  ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ {B‚ÇÅ} {B‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} Œ†Œ£‚â°Œ†Œ£ t‚ÇÅ‚â°t‚ÇÇ =
    case ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî .proj‚ÇÅ Œ†Œ£‚â°Œ†Œ£ of Œª
      (‚ä©Œ†Œ£‚ÇÅ , _ , _ , _ , _ , rest) ‚Üí
    case ‚ä©Œ†Œ£‚Üí ‚ä©Œ†Œ£‚ÇÅ of Œª
      (_ , ‚ä©A‚ÇÅ , _) ‚Üí
    case ‚ä©Œ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†Œ£‚ÇÅ of Œª
      (_ , ‚ä¢Œì , rest‚ÇÅ) ‚Üí
    B‚ÇÅ [ t‚ÇÅ ]‚ÇÄ  ‚â°‚ü® PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
                     (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B‚ÇÅ)
                     (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B‚ÇÅ) $
                   rest‚ÇÅ (TW.id ∑ ‚ä¢Œì) .proj‚ÇÇ $
                   PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ wk-id _) $
                   level-‚ä©‚â°‚à∑ ‚ä©A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚ä©
    B‚ÇÅ [ t‚ÇÇ ]‚ÇÄ  ‚â°‚ü® PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
                     (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B‚ÇÅ)
                     (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B‚ÇÇ) $
                   rest (TW.id ∑ ‚ä¢Œì) .proj‚ÇÇ $
                   PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) $
                   level-‚ä©‚à∑ ‚ä©A‚ÇÅ $
                   wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ ‚ü©‚ä©‚àé
    B‚ÇÇ [ t‚ÇÇ ]‚ÇÄ  ‚àé

opaque

  -- A substitution lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Œ†Œ£‚Üí‚ä©‚à∑‚Üí‚ä©[]‚ÇÄ :
    Œì ‚ä©‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© B [ t ]‚ÇÄ
  ‚ä©Œ†Œ£‚Üí‚ä©‚à∑‚Üí‚ä©[]‚ÇÄ ‚ä©Œ†Œ£ ‚ä©t =
    wf-‚ä©‚â° (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ†Œ£) (refl-‚ä©‚â°‚à∑ ‚ä©t)) .proj‚ÇÅ

------------------------------------------------------------------------
-- Validity of Œ† and¬†Œ£, seen as type formers

opaque

  -- Reducibility for Œ† and¬†Œ£, seen as type formers.

  ‚ä©Œ†Œ£ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B) [ œÉ ]
  ‚ä©Œ†Œ£ {A} {B} ok ‚ä©A ‚ä©B ‚ä©œÉ =
    ‚ä©Œ†Œ£‚áî .proj‚ÇÇ
      ( ok
      , escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ
      , Œª œÅ‚äá ‚Üí
            PE.subst (_‚ä©‚ü®_‚ü©_ _ _) (PE.sym $ wk-subst A)
              (‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A $ ‚ä©À¢‚à∑-‚Ä¢‚Çõ œÅ‚äá ‚ä©œÉ)
          , Œª t‚â°u ‚Üí
              PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
                (PE.sym $ singleSubstWkComp _ _ B)
                (PE.sym $ singleSubstWkComp _ _ B) $
              ‚ä©·µõ‚áî .proj‚ÇÅ ‚ä©B .proj‚ÇÇ $
              ‚ä©À¢‚â°‚à∑‚àô‚áî .proj‚ÇÇ
                ( ( _ , ‚ä©A
                  , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-subst A) t‚â°u
                  )
                , refl-‚ä©À¢‚â°‚à∑ (‚ä©À¢‚à∑-‚Ä¢‚Çõ œÅ‚äá ‚ä©œÉ)
                )
      )

opaque

  -- Reducibility of equality between Œ† and Œ† or Œ£ and¬†Œ£, seen as type
  -- formers.

  ‚ä©Œ†Œ£‚â°Œ†Œ£ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) [ œÉ‚ÇÅ ] ‚â°
      (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ) [ œÉ‚ÇÇ ]
  ‚ä©Œ†Œ£‚â°Œ†Œ£ {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ} {B‚ÇÇ} ok A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ of Œª
      (‚ä©B‚ÇÅ , ‚ä©B‚ÇÇ) ‚Üí
    case conv-‚àô-‚ä©·µõ A‚ÇÅ‚â°A‚ÇÇ ‚ä©B‚ÇÇ of Œª
      ‚ä©B‚ÇÇ ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    ‚ä©Œ†Œ£‚â°Œ†Œ£‚áî .proj‚ÇÇ
      ( ‚ä©Œ†Œ£ ok ‚ä©A‚ÇÅ ‚ä©B‚ÇÅ ‚ä©œÉ‚ÇÅ
      , ‚ä©Œ†Œ£ ok ‚ä©A‚ÇÇ ‚ä©B‚ÇÇ ‚ä©œÉ‚ÇÇ
      , PE.refl , PE.refl , PE.refl
      , Œª œÅ‚äá ‚Üí
            PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _) (PE.sym $ wk-subst A‚ÇÅ)
              (PE.sym $ wk-subst A‚ÇÇ)
              (‚ä©·µõ‚â°‚áî .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÇ $
               ‚ä©À¢‚â°‚à∑-‚Ä¢‚Çõ œÅ‚äá œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
          , Œª ‚ä©t ‚Üí
              PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
                (PE.sym $ singleSubstWkComp _ _ B‚ÇÅ)
                (PE.sym $ singleSubstWkComp _ _ B‚ÇÇ) $
              ‚ä©·µõ‚â°‚áî .proj‚ÇÅ B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÇ $
              ‚ä©À¢‚â°‚à∑‚àô‚áî .proj‚ÇÇ
                ( ( _ , ‚ä©A‚ÇÅ
                  , refl-‚ä©‚â°‚à∑
                      (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (wk-subst A‚ÇÅ) ‚ä©t)
                  )
                , ‚ä©À¢‚â°‚à∑-‚Ä¢‚Çõ œÅ‚äá œÉ‚ÇÅ‚â°œÉ‚ÇÇ
                )
      )

opaque

  -- Validity of equality preservation for Œ† and¬†Œ£, seen as type
  -- formers.

  Œ†Œ£-cong·µõ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â° Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ
  Œ†Œ£-cong·µõ ok A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ =
    ‚ä©·µõ‚â°‚áî .proj‚ÇÇ
      ( wf-‚ä©·µõ (wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ)
      , ‚ä©Œ†Œ£‚â°Œ†Œ£ ok A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ
      )

opaque

  -- Validity of Œ† and¬†Œ£, seen as type formers.

  Œ†Œ£·µõ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B
  Œ†Œ£·µõ ok ‚ä©A ‚ä©B =
    ‚ä©·µõ‚áî‚ä©·µõ‚â° .proj‚ÇÇ $ Œ†Œ£-cong·µõ ok (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â° ‚ä©B)

opaque

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõŒ†Œ£‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œ†Œ£-allowed b p q √ó Œì ‚ä©·µõ‚ü® l ‚ü© A √ó Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B)
  ‚ä©·µõŒ†Œ£‚áî {B} =
      (Œª ‚ä©Œ†Œ£AB ‚Üí
         case ‚ä©·µõ‚áî .proj‚ÇÅ ‚ä©Œ†Œ£AB of Œª
           (‚ä©Œì , Œ†Œ£AB‚â°Œ†Œ£AB) ‚Üí
         case ‚ä©·µõ‚áî .proj‚ÇÇ
                ( ‚ä©Œì
                , proj‚ÇÅ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí
                  ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí ‚àò‚Üí Œ†Œ£AB‚â°Œ†Œ£AB
                ) of Œª
           ‚ä©A ‚Üí
           ‚ä©Œ†Œ£‚áî .proj‚ÇÅ
             (wf-‚ä©‚â° (Œ†Œ£AB‚â°Œ†Œ£AB (refl-‚ä©À¢‚â°‚à∑ $ ‚ä©À¢‚à∑-idSubst ‚ä©Œì)) .proj‚ÇÅ)
             .proj‚ÇÅ
         , ‚ä©A
         , ‚ä©·µõ‚áî .proj‚ÇÇ
             ( ‚ä©·µõ-‚àô-intro ‚ä©A
             , Œª {_ _} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
                 case ‚ä©À¢‚â°‚à∑‚àô‚áî .proj‚ÇÅ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
                   ((_ , _ , head-œÉ‚ÇÅ‚â°head-œÉ‚ÇÇ) , tail-œÉ‚ÇÅ‚â°tail-œÉ‚ÇÇ) ‚Üí
                 B [ œÉ‚ÇÅ ]                             ‚â°Àò‚ü® substVar-to-subst consSubst-Œ∑ B ‚ü©‚ä©‚â°
                 B [ consSubst (tail œÉ‚ÇÅ) (head œÉ‚ÇÅ) ]  ‚â°Àò‚ü® singleSubstComp _ _ B ‚ü©‚ä©‚â°
                 B [ tail œÉ‚ÇÅ ‚áë ] [ head œÉ‚ÇÅ ]‚ÇÄ         ‚â°‚ü® ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (Œ†Œ£AB‚â°Œ†Œ£AB tail-œÉ‚ÇÅ‚â°tail-œÉ‚ÇÇ) head-œÉ‚ÇÅ‚â°head-œÉ‚ÇÇ ‚ü©‚ä©‚àé‚â°
                 B [ tail œÉ‚ÇÇ ‚áë ] [ head œÉ‚ÇÇ ]‚ÇÄ         ‚â°‚ü® singleSubstComp _ _ B ‚ü©
                 B [ consSubst (tail œÉ‚ÇÇ) (head œÉ‚ÇÇ) ]  ‚â°‚ü® substVar-to-subst consSubst-Œ∑ B ‚ü©
                 B [ œÉ‚ÇÇ ]                             ‚àé
             ))
    , (Œª (ok , ‚ä©A , ‚ä©B) ‚Üí Œ†Œ£·µõ ok ‚ä©A ‚ä©B)
    where
    open Tools.Reasoning.PropositionalEquality

------------------------------------------------------------------------
-- Validity of Œ† and¬†Œ£, seen as term formers

opaque

  -- Reducibility of equality between Œ† and Œ† or Œ£ and¬†Œ£, seen as term
  -- formers.

  ‚ä©Œ†Œ£‚â°Œ†Œ£‚à∑U :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚à∑ U l‚ÇÇ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) [ œÉ‚ÇÅ ] ‚â°
      (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ) [ œÉ‚ÇÇ ] ‚à∑ U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
  ‚ä©Œ†Œ£‚â°Œ†Œ£‚à∑U ok A‚ÇÅ‚â°A‚ÇÇ‚à∑U B‚ÇÅ‚â°B‚ÇÇ‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ‚à∑U of Œª
      A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case ‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ‚à∑U of Œª
      B‚ÇÅ‚â°B‚ÇÇ ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ‚à∑U .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ]‚à∑U ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë]‚à∑ B‚ÇÅ‚â°B‚ÇÇ‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      B‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë]‚à∑U ‚Üí
    case wf-‚ä©‚â°‚à∑ A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ]‚à∑U of Œª
      (‚ä©A‚ÇÅ[œÉ‚ÇÅ] , ‚ä©A‚ÇÇ[œÉ‚ÇÇ]) ‚Üí
    case wf-‚ä©‚â°‚à∑ B‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë]‚à∑U of Œª
      (‚ä©B‚ÇÅ[œÉ‚ÇÅ] , _) ‚Üí
    case ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ (conv-‚àô-‚ä©·µõ‚à∑ A‚ÇÅ‚â°A‚ÇÇ (wf-‚ä©·µõ‚â°‚à∑ B‚ÇÅ‚â°B‚ÇÇ‚à∑U .proj‚ÇÇ)) $
         wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ of Œª
      ‚ä©B‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case escape-‚ä©‚à∑ ‚ä©A‚ÇÅ[œÉ‚ÇÅ] of Œª
      ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case escape-‚ä©‚à∑ ‚ä©B‚ÇÅ[œÉ‚ÇÅ] of Œª
      ‚ä¢B‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    Type‚Üí‚ä©‚â°‚à∑U‚áî Œ†Œ£‚Çô Œ†Œ£‚Çô .proj‚ÇÇ
      ( PE.subst (_ <·µò_) ‚äî·µò-idem
          (‚äî·µò-mono (‚ä©‚à∑U‚áî .proj‚ÇÅ ‚ä©A‚ÇÅ[œÉ‚ÇÅ] .proj‚ÇÅ)
             (‚ä©‚à∑U‚áî .proj‚ÇÅ ‚ä©B‚ÇÅ[œÉ‚ÇÅ] .proj‚ÇÅ))
      , ‚ä©·µõ‚â°‚áî .proj‚ÇÅ
          (Œ†Œ£-cong·µõ ok (emb-‚ä©·µõ‚â° ‚â§·µò‚äî·µò ≥ A‚ÇÅ‚â°A‚ÇÇ) (emb-‚ä©·µõ‚â° ‚â§·µò‚äî·µòÀ° B‚ÇÅ‚â°B‚ÇÇ))
          .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ
      , Œ†Œ£‚±º ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] ‚ä¢B‚ÇÅ[œÉ‚ÇÅ] ok
      , Œ†Œ£‚±º (escape-‚ä©‚à∑ ‚ä©A‚ÇÇ[œÉ‚ÇÇ]) (escape-‚ä©‚à∑ ‚ä©B‚ÇÇ[œÉ‚ÇÇ]) ok
      , ‚âÖ‚Çú-Œ†Œ£-cong (escape-‚ä©‚â°‚à∑ A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ]‚à∑U)
          (escape-‚ä©‚â°‚à∑ B‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë]‚à∑U) ok
      )

opaque

  -- Validity of equality preservation for Œ† and¬†Œ£, seen as term
  -- formers.

  Œ†Œ£-cong·µó·µõ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚à∑ U l‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚â°
      Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ ‚à∑ U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
  Œ†Œ£-cong·µó·µõ ok A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ =
    case wf-‚ä©·µõ‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ B‚ÇÅ‚â°B‚ÇÇ of Œª
      (‚ä©B‚ÇÅ , ‚ä©B‚ÇÇ) ‚Üí
    case conv-‚àô-‚ä©·µõ‚à∑ (‚ä©·µõ‚â°‚à∑U‚Üí‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ) ‚ä©B‚ÇÇ of Œª
      ‚ä©B‚ÇÇ ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( PE.subst (_ ‚ä©·µõ‚ü®_‚ü© _) ‚äî·µò-idem
          (emb-‚ä©·µõ
             (‚äî·µò-mono (‚ä©‚à∑U‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ ‚ä©A‚ÇÅ) .proj‚ÇÅ)
                (‚ä©‚à∑U‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ ‚ä©B‚ÇÅ) .proj‚ÇÅ))
             (‚ä©·µõU (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ)))))
      , ‚ä©Œ†Œ£‚â°Œ†Œ£‚à∑U ok A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ
      )

opaque
  unfolding _‚ä©·µõ‚ü®_‚ü©_‚à∑_

  -- Validity of Œ† and¬†Œ£, seen as term formers.

  Œ†Œ£·µó·µõ :
    Œ†Œ£-allowed b p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚à∑ U l‚ÇÅ ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚à∑ U l‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚à∑ U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
  Œ†Œ£·µó·µõ ok ‚ä©A ‚ä©B =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( PE.subst (_ ‚ä©·µõ‚ü®_‚ü© _) ‚äî·µò-idem
          (emb-‚ä©·µõ
             (‚äî·µò-mono (‚ä©‚à∑U‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ ‚ä©A) .proj‚ÇÅ)
                (‚ä©‚à∑U‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©‚à∑ ‚ä©B) .proj‚ÇÅ))
             (‚ä©·µõU (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©A))))
      , ‚ä©Œ†Œ£‚â°Œ†Œ£‚à∑U ok (refl-‚ä©·µõ‚â°‚à∑ ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©B)
      )
