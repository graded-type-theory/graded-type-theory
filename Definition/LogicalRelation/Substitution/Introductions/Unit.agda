------------------------------------------------------------------------
-- Validity for unit types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Unit
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.Substitution.Primitive R
open import Definition.Typed.Well-formed R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
import Definition.LogicalRelation.Hidden.Restricted R as R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Introductions.Universe R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Sum

private
  variable
    n : Nat
    Œì Œî : Con Term n
    œÉ œÉ‚ÇÅ œÉ‚ÇÇ : Subst _ _
    s s‚ÇÅ s‚ÇÇ : Strength
    l l‚Ä≤ l‚Ä≥ l‚Ä¥ l‚ÇÅ l‚ÇÇ : Universe-level
    A A‚ÇÅ A‚ÇÇ t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ : Term n
    p q : M

------------------------------------------------------------------------
-- Characterisation lemmas

opaque
  unfolding emb-‚ä©

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Unit‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Unit s l ‚áî
    (l ‚â§·µò l‚Ä≤ √ó ‚ä¢ Œì √ó Unit-allowed s)
  ‚ä©Unit‚áî =
      (Œª ‚ä©Unit ‚Üí lemma (Unit-elim ‚ä©Unit))
    , (Œª (l‚â§l‚Ä≤ , ‚ä¢Œì , ok) ‚Üí
         emb-‚ä© l‚â§l‚Ä≤ $
         Unit·µ£ (Unit‚Çú (id (Unit‚±º ‚ä¢Œì ok)) ok))
    where
    lemma :
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Unit‚ü® s ‚ü© Unit s l ‚Üí
      l ‚â§·µò l‚Ä≤ √ó ‚ä¢ Œì √ó Unit-allowed s
    lemma (emb p ‚ä©Unit) =
      Œ£.map (flip ‚â§·µò-trans (<·µò‚Üí‚â§·µò p)) id·∂† (lemma ‚ä©Unit)
    lemma (noemb (Unit‚Çú Unit‚áí*Unit ok)) =
      case Unit-PE-injectivity $
           whnfRed* Unit‚áí*Unit Unit‚Çô of Œª {
        (_ , PE.refl) ‚Üí
      ‚â§·µò-refl , wfEq (subset* Unit‚áí*Unit) , ok }

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ ‚ä©Unit‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Unit‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit s l ‚áî
    (l ‚â§·µò l‚Ä≤ √ó Unit-allowed s √ó Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit)
  ‚ä©‚à∑Unit‚áî =
      (Œª (‚ä©Unit , ‚ä©t) ‚Üí
         lemma‚ÇÅ (Unit-elim ‚ä©Unit)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©t))
    , (Œª (l‚â§l‚Ä≤ , ok , ‚ä©t@(Unit‚Çú _ _ ‚âÖn _)) ‚Üí
         emb-‚ä©‚à∑ l‚â§l‚Ä≤
           (‚ä©Unit‚áî .proj‚ÇÇ (‚â§·µò-refl , wfEqTerm (‚âÖ‚Çú-eq ‚âÖn) , ok) , ‚ä©t))
    where
    lemma‚ÇÅ :
      (‚ä©Unit : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Unit‚ü® s ‚ü© Unit s l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit s l / Unit-intr ‚ä©Unit ‚Üí
      l ‚â§·µò l‚Ä≤ √ó Unit-allowed s √ó Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit
    lemma‚ÇÅ (emb ‚â§·µò-refl     ‚ä©Unit) = Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma‚ÇÅ ‚ä©Unit
    lemma‚ÇÅ (emb (‚â§·µò-step p) ‚ä©Unit) =
      Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma‚ÇÅ (emb p ‚ä©Unit)
    lemma‚ÇÅ (noemb (Unit‚Çú Unit‚áí*Unit ok)) ‚ä©t =
      case Unit-PE-injectivity $
           whnfRed* Unit‚áí*Unit Unit‚Çô of Œª {
        (_ , PE.refl) ‚Üí
      ‚â§·µò-refl , ok , ‚ä©t }

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Unit‚â°‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Unit s l ‚â° A ‚áî
    (l ‚â§·µò l‚Ä≤ √ó ‚ä¢ Œì √ó Unit-allowed s √ó Œì ‚ä©Unit‚ü® l , s ‚ü© Unit s l ‚â° A)
  ‚ä©Unit‚â°‚áî {s} {l} {A} =
      (Œª (‚ä©Unit‚ÇÅ , _ , Unit‚ÇÅ‚â°Unit‚ÇÇ) ‚Üí
         case Unit-elim ‚ä©Unit‚ÇÅ of Œª
           ‚ä©Unit‚ÇÅ‚Ä≤ ‚Üí
         lemma ‚ä©Unit‚ÇÅ‚Ä≤
           (irrelevanceEq ‚ä©Unit‚ÇÅ (Unit-intr ‚ä©Unit‚ÇÅ‚Ä≤) Unit‚ÇÅ‚â°Unit‚ÇÇ))
    , (Œª (l‚â§l‚Ä≤ , ‚ä¢Œì , ok , A‚áí*Unit) ‚Üí
         sym-‚ä©‚â°
           (A         ‚áí*‚ü® A‚áí*Unit ‚ü©‚ä©
            Unit s l  ‚àé‚ü® ‚ä©Unit‚áî .proj‚ÇÇ (l‚â§l‚Ä≤ , ‚ä¢Œì , ok) ‚ü©‚ä©))
    where
    lemma :
      (‚ä©Unit : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Unit‚ü® s ‚ü© Unit s l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Unit s l ‚â° A / Unit-intr ‚ä©Unit ‚Üí
      l ‚â§·µò l‚Ä≤ √ó ‚ä¢ Œì √ó Unit-allowed s √ó Œì ‚ä©Unit‚ü® l , s ‚ü© Unit s l ‚â° A
    lemma (emb ‚â§·µò-refl ‚ä©Unit) =
      Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma ‚ä©Unit
    lemma (emb (‚â§·µò-step l<) ‚ä©Unit) =
      Œ£.map ‚â§·µò-step id·∂† ‚àò‚Üí lemma (emb l< ‚ä©Unit)
    lemma ‚ä©Unit@(noemb (Unit‚Çú Unit‚áí*Unit _)) A‚áí*Unit =
      case ‚ä©Unit‚áî .proj‚ÇÅ $ Unit-intr ‚ä©Unit of Œª
        (l‚â§l‚Ä≤ , ‚ä¢Œì , ok) ‚Üí
      case Unit-PE-injectivity $
           whnfRed* Unit‚áí*Unit Unit‚Çô of Œª {
        (_ , PE.refl) ‚Üí
      l‚â§l‚Ä≤ , ‚ä¢Œì , ok , A‚áí*Unit }

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Unit‚â°Unit‚áî :
    Œì ‚ä©‚ü® l ‚ü© Unit s‚ÇÅ l‚ÇÅ ‚â° Unit s‚ÇÇ l‚ÇÇ ‚áî
    (l‚ÇÅ ‚â§·µò l √ó ‚ä¢ Œì √ó Unit-allowed s‚ÇÅ √ó s‚ÇÅ PE.‚â° s‚ÇÇ √ó l‚ÇÅ PE.‚â° l‚ÇÇ)
  ‚ä©Unit‚â°Unit‚áî {Œì} {l} {s‚ÇÅ} {l‚ÇÅ} {s‚ÇÇ} {l‚ÇÇ} =
    Œì ‚ä©‚ü® l ‚ü© Unit s‚ÇÅ l‚ÇÅ ‚â° Unit s‚ÇÇ l‚ÇÇ                                ‚áî‚ü® ‚ä©Unit‚â°‚áî ‚ü©
    l‚ÇÅ ‚â§·µò l √ó ‚ä¢ Œì √ó Unit-allowed s‚ÇÅ √ó Œì ‚ä¢ Unit s‚ÇÇ l‚ÇÇ ‚áí* Unit s‚ÇÅ l‚ÇÅ  ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí Œ£-cong-‚áî Œª ‚ä¢Œì ‚Üí Œ£-cong-‚áî Œª ok ‚Üí
                                                                          Œ£.map PE.sym PE.sym ‚àò‚Üí Unit-PE-injectivity ‚àò‚Üí flip whnfRed* Unit‚Çô
                                                                        , (Œª { (PE.refl , PE.refl) ‚Üí id (Unit‚±º ‚ä¢Œì ok) }))
                                                                     ‚ü©
    l‚ÇÅ ‚â§·µò l √ó ‚ä¢ Œì √ó Unit-allowed s‚ÇÅ √ó s‚ÇÅ PE.‚â° s‚ÇÇ √ó l‚ÇÅ PE.‚â° l‚ÇÇ       ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ ‚ä©Unit‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Unit‚áî :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ Unit s l ‚áî
    (l ‚â§·µò l‚Ä≤ √ó
     Unit-allowed s √ó
     Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit √ó
     Œì ‚ä©Unit‚ü® l , s ‚ü© u ‚à∑Unit √ó
     Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑Unit)
  ‚ä©‚â°‚à∑Unit‚áî {s} =
      (Œª (‚ä©Unit , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         lemma (Unit-elim ‚ä©Unit)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©t)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©u)
           (irrelevanceEqTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) t‚â°u))
    , (Œª (l‚â§l‚Ä≤ , ok , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         case
           (case t‚â°u of Œª where
              (Unit‚Çú‚ÇåÀ¢ ‚ä¢t _ _)           ‚Üí wfTerm ‚ä¢t
              (Unit‚Çú‚Çå ∑ _ _ _ _ k‚âÖk‚Ä≤ _ _) ‚Üí wfEqTerm (‚âÖ‚Çú-eq k‚âÖk‚Ä≤))
         of Œª
           ‚ä¢Œì ‚Üí
         emb-‚ä©‚â°‚à∑ l‚â§l‚Ä≤ $
         ‚ä©Unit‚áî .proj‚ÇÇ (‚â§·µò-refl , ‚ä¢Œì , ok) , ‚ä©t , ‚ä©u , t‚â°u)
    where
    lemma :
      (‚ä©Unit : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Unit‚ü® s ‚ü© Unit s l) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit s l / Unit-intr ‚ä©Unit ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© u ‚à∑ Unit s l / Unit-intr ‚ä©Unit ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ Unit s l / Unit-intr ‚ä©Unit ‚Üí
      l ‚â§·µò l‚Ä≤ √ó
      Unit-allowed s √ó
      Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚à∑Unit √ó
      Œì ‚ä©Unit‚ü® l , s ‚ü© u ‚à∑Unit √ó
      Œì ‚ä©Unit‚ü® l , s ‚ü© t ‚â° u ‚à∑Unit
    lemma (emb ‚â§·µò-refl ‚ä©Unit) ‚ä©t ‚ä©u t‚â°u =
      Œ£.map ‚â§·µò-step id·∂† (lemma ‚ä©Unit ‚ä©t ‚ä©u t‚â°u)
    lemma (emb (‚â§·µò-step p) ‚ä©Unit) ‚ä©t ‚ä©u t‚â°u =
      Œ£.map ‚â§·µò-step id·∂† (lemma (emb p ‚ä©Unit) ‚ä©t ‚ä©u t‚â°u)
    lemma (noemb (Unit‚Çú Unit‚áí*Unit ok)) ‚ä©t ‚ä©u t‚â°u =
      case Unit-PE-injectivity $
           whnfRed* Unit‚áí*Unit Unit‚Çô of Œª {
        (_ , PE.refl) ‚Üí
      ‚â§·µò-refl , ok , ‚ä©t , ‚ä©u , t‚â°u }

------------------------------------------------------------------------
-- Unit

opaque

  -- If the type Unit¬†s¬†l is valid, then it is allowed (given a
  -- certain assumption).

  ‚ä©·µõUnit‚ÜíUnit-allowed :
    Neutrals-included-or-empty Œì ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© Unit s l ‚Üí
    Unit-allowed s
  ‚ä©·µõUnit‚ÜíUnit-allowed {Œì} {l‚Ä≤} {s} {l} inc =
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© Unit s l             ‚Üí‚ü® R.‚ä©‚Üí inc ‚àò‚Üí ‚ä©·µõ‚Üí‚ä© ‚ü©
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Unit s l              ‚áî‚ü® ‚ä©Unit‚áî ‚ü©‚Üí
    l ‚â§·µò l‚Ä≤ √ó ‚ä¢ Œì √ó Unit-allowed s  ‚Üí‚ü® proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚ü©
    Unit-allowed s                  ‚ñ°

opaque

  -- Reducibility for Unit.

  ‚ä©Unit :
    ‚ä¢ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Unit s l
  ‚ä©Unit ‚ä¢Œì ok = ‚ä©Unit‚áî .proj‚ÇÇ (‚â§·µò-refl , ‚ä¢Œì , ok)

opaque

  -- Validity for Unit, seen as a type former.

  Unit·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Unit s l
  Unit·µõ {Œì} {s} {l} ‚ä©Œì ok =
    ‚ä©·µõ‚áî ∞ .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} inc ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì              ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ inc ‚ü©
          ‚ä¢ Œî                           ‚Üí‚ü® flip ‚ä©Unit ok ‚ü©
          (Œî ‚ä©‚ü® l ‚ü© Unit s l)           ‚Üí‚ü® refl-‚ä©‚â° ‚ü©
          Œî ‚ä©‚ü® l ‚ü© Unit s l ‚â° Unit s l  ‚ñ°
      )

opaque

  -- Validity for Unit, seen as a term former.

  Unit·µó·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® 1+ l ‚ü© Unit s l ‚à∑ U l
  Unit·µó·µõ ‚ä©Œì ok =
    ‚ä©·µõ‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
      , Œª inc œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case escape-‚ä©À¢‚â°‚à∑ inc œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
            (‚ä¢Œî , _) ‚Üí
          Type‚Üí‚ä©‚â°‚à∑U‚áî Unit‚Çô Unit‚Çô .proj‚ÇÇ
            (‚â§·µò-refl , refl-‚ä©‚â° (‚ä©Unit ‚ä¢Œî ok) , ‚âÖ‚Çú-Unitrefl ‚ä¢Œî ok)
      )

------------------------------------------------------------------------
-- The constructor star

opaque

  -- Reducibility for star.

  ‚ä©star :
    ‚ä¢ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©‚ü® l ‚ü© star s l ‚à∑ Unit s l
  ‚ä©star ‚ä¢Œì ok =
    ‚ä©‚à∑Unit‚áî .proj‚ÇÇ
      ( ‚â§·µò-refl
      , ok
      , Unit‚Çú _ (id (star‚±º ‚ä¢Œì ok)) (‚âÖ‚Çú-starrefl ‚ä¢Œì ok) star·µ£
      )

opaque

  -- Validity of star.

  star·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© star s l ‚à∑ Unit s l
  star·µõ {Œì} {s} {l} ‚ä©Œì ok =
    ‚ä©·µõ‚à∑‚áî ∞ .proj‚ÇÇ
      ( Unit·µõ ‚ä©Œì ok
      , Œª {_} {Œî = Œî} {œÉ‚ÇÅ = œÉ‚ÇÅ} {œÉ‚ÇÇ = œÉ‚ÇÇ} inc ‚Üí
          Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                         ‚Üí‚ü® proj‚ÇÅ ‚àò‚Üí escape-‚ä©À¢‚â°‚à∑ inc ‚ü©
          ‚ä¢ Œî                                      ‚Üí‚ü® flip ‚ä©star ok ‚ü©
          Œî ‚ä©‚ü® l ‚ü© star s l ‚à∑ Unit s l             ‚Üí‚ü® refl-‚ä©‚â°‚à∑ ‚ü©
          Œî ‚ä©‚ü® l ‚ü© star s l ‚â° star s l ‚à∑ Unit s l  ‚ñ°
      )

------------------------------------------------------------------------
-- The typing rule Œ∑-unit

opaque

  -- Validity of Œ∑-unit.

  Œ∑-unit·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit s l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ Unit s l ‚Üí
    Unit-with-Œ∑ s ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚â° u ‚à∑ Unit s l
  Œ∑-unit·µõ ‚ä©t ‚ä©u Œ∑ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( wf-‚ä©·µõ‚à∑ ‚ä©t
      , Œª inc œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
            (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
          case ‚ä©‚à∑Unit‚áî .proj‚ÇÅ $ R.‚ä©‚à∑‚Üí inc $
               ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ‚ÇÅ of Œª
            (l‚â§l‚Ä≤ , ok , ‚ä©t@(Unit‚Çú _ t‚áí*t‚Ä≤ _ _)) ‚Üí
          case ‚ä©‚à∑Unit‚áî .proj‚ÇÅ $ R.‚ä©‚à∑‚Üí inc $
               ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ‚ÇÇ of Œª
            (_ , _ , ‚ä©u@(Unit‚Çú _ u‚áí*u‚Ä≤ _ _)) ‚Üí
          ‚ä©‚â°‚à∑Unit‚áî .proj‚ÇÇ
            (l‚â§l‚Ä≤ , ok , ‚ä©t , ‚ä©u ,
             Unit‚Çú‚ÇåÀ¢ (redFirst*Term t‚áí*t‚Ä≤) (redFirst*Term u‚áí*u‚Ä≤) Œ∑)
      )

------------------------------------------------------------------------
-- The eliminator unitrec

opaque

  -- Reducibility of equality between applications of unitrec.

  ‚ä©unitrec‚â°unitrec :
    Œì ‚àô Unit ∑ l ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô Unit ∑ l ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ star ∑ l ]‚ÇÄ ‚Üí
    Neutrals-included-or-empty Œî ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© unitrec l p q A‚ÇÅ t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚â°
      unitrec l p q A‚ÇÇ t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]
  ‚ä©unitrec‚â°unitrec
    {l} {A‚ÇÅ} {A‚ÇÇ} {l‚Ä≤} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {Œî} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {p} {q}
    ‚ä¢A‚ÇÅ‚â°A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ inc œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≥ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≥ .proj‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©t‚ÇÅ .proj‚ÇÅ of Œª
      ‚ä©Unit ‚Üí
    case ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä©t‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÇ ‚ä©œÉ‚ÇÇ of Œª
      ‚ä©t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚Üí
    case R.escape-‚ä© inc $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©Unit ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢Unit ‚Üí
    case wf-‚ä¢‚â° $ subst-‚ä¢‚â° ‚ä¢A‚ÇÅ‚â°A‚ÇÇ $
         ‚ä¢À¢ ∑‚â°‚à∑-‚áë (refl ‚ä¢Unit) $ escape-‚ä©À¢‚â°‚à∑ inc œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ of Œª
      (‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] , ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë]) ‚Üí
    case (R.refl-‚ä©‚â°‚à∑ $ R.‚Üí‚ä©‚à∑ $
          ‚ä©star (escape-‚ä©À¢‚à∑ inc ‚ä©œÉ‚ÇÅ .proj‚ÇÅ) $
          inversion-Unit ‚ä¢Unit) of Œª
      ‚ãÜ‚â°‚ãÜ ‚Üí
    case PE.subst‚ÇÇ (_‚ä¢_‚â°_ _) (substConsId {t = star!} A‚ÇÅ)
           (substConsId {t = star!} A‚ÇÇ) $
         ‚âÖ-eq $ R.escape-‚ä©‚â° inc $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ãÜ‚â°‚ãÜ of Œª
      A‚ÇÅ[‚ãÜ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÇ[‚ãÜ]‚ÇÄ[œÉ‚ÇÇ] ‚Üí
    case R.escape-‚ä©‚à∑ inc $
         PE.subst (R._‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ (star ∑ _)) $
         ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case R.escape-‚ä©‚à∑ inc $
         R.conv-‚ä©‚à∑
           (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ) ‚ãÜ‚â°‚ãÜ) $
         PE.subst (R._‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ (star ∑ _)) $
         ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÇ ‚ä©œÉ‚ÇÇ of Œª
      ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©‚â°‚à∑Unit‚áî .proj‚ÇÅ (R.‚ä©‚â°‚à∑‚áî .proj‚ÇÅ (t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ) inc) of Œª where
      (_ , ok , _ , _ , Unit‚Çú‚ÇåÀ¢ ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ (inj‚ÇÇ Œ∑)) ‚Üí
        case star·µõ (wf-‚ä©·µõ ‚ä©Unit) ok of Œª
          ‚ä©‚ãÜ ‚Üí
        unitrec l p q A‚ÇÅ t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]         ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A‚ÇÅ t‚ÇÅ) $
                                                                     unitrec-Œ≤-Œ∑ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] (R.escape-‚ä©‚à∑ inc ‚ä©t‚ÇÅ[œÉ‚ÇÅ]) ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ok Œ∑ ‚ü©‚ä©‚à∑‚à∑
                                                                   ‚ü® flip (R.‚ä©‚â°‚áî .proj‚ÇÅ) inc $
                                                                     ‚ä©·µõ‚â°‚Üí‚ä©‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚ÇÄ[]‚â°[]‚ÇÄ[] (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÅ)
                                                                       (‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ (Œ∑-unit·µõ ‚ä©t‚ÇÅ ‚ä©‚ãÜ (inj‚ÇÇ Œ∑)) $
                                                                        refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ)
                                                                       (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) ‚ü©‚ä©‚à∑
        u‚ÇÅ [ œÉ‚ÇÅ ]                     ‚à∑ A‚ÇÅ [ star ∑ l ]‚ÇÄ [ œÉ‚ÇÅ ]    ‚â°‚ü® R.‚ä©‚â°‚à∑‚áî .proj‚ÇÅ (u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ) inc ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                   ‚ü® A‚ÇÅ[‚ãÜ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÇ[‚ãÜ]‚ÇÄ[œÉ‚ÇÇ] ‚ü©‚áí
                                      ‚à∑ A‚ÇÇ [ star ∑ l ]‚ÇÄ [ œÉ‚ÇÇ ]     ‚ü® singleSubstLift A‚ÇÇ (star ∑ _) ‚ü©‚áê‚â°
        u‚ÇÇ [ œÉ‚ÇÇ ]                     ‚à∑ A‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ star ∑ l ]‚ÇÄ  ‚áê‚ü® conv (unitrec-Œ≤-Œ∑ ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë] (R.escape-‚ä©‚à∑ inc ‚ä©t‚ÇÇ[œÉ‚ÇÇ]) ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ok Œ∑)
                                                                       (‚âÖ-eq $ R.escape-‚ä©‚â° inc $
                                                                        ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÇ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ) $
                                                                        ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ (Œ∑-unit·µõ ‚ä©t‚ÇÇ ‚ä©‚ãÜ (inj‚ÇÇ Œ∑)) $
                                                                        refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ)
                                                                   ‚ü©‚àé‚à∑
        unitrec l p q A‚ÇÇ t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ]                             ‚àé

      (_ , ok , _ , _ ,
       Unit‚Çú‚Çå ∑ t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤ t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤ _ rest no-Œ∑) ‚Üí
        case PE.subst (_‚ä¢_‚áí*_‚à∑_ _ _ _)
               (PE.sym $ singleSubstLift A‚ÇÅ t‚ÇÅ) $
             unitrec-subst* {p = p} {q = q} t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ]
               no-Œ∑ of Œª
          unitrec‚áí*‚ÇÅ ‚Üí
        case PE.subst (_‚ä¢_‚áí*_‚à∑_ _ _ _)
               (PE.sym $ singleSubstLift A‚ÇÇ t‚ÇÇ) $
             unitrec-subst* {p = p} {q = q} t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤ ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ]
               no-Œ∑ of Œª
          unitrec‚áí*‚ÇÇ ‚Üí
        case PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
               (PE.sym $ singleSubstLift A‚ÇÅ t‚ÇÅ) PE.refl $
             R.‚ä©‚â°‚Üí inc $
             ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÅ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ)
               (R.‚Üí‚ä©‚â°‚à∑ $ ‚ä©‚à∑-‚áí* t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤ $ R.‚ä©‚à∑‚Üí inc ‚ä©t‚ÇÅ[œÉ‚ÇÅ]) of Œª
          A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚Üí
        case ‚âÖ-eq $ escape-‚ä©‚â° $
             PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
               (PE.sym $ singleSubstLift A‚ÇÇ t‚ÇÇ) PE.refl $
             R.‚ä©‚â°‚Üí inc $
             ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÇ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ)
               (R.‚Üí‚ä©‚â°‚à∑ $ ‚ä©‚à∑-‚áí* t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤ $ R.‚ä©‚à∑‚Üí inc ‚ä©t‚ÇÇ[œÉ‚ÇÇ]) of Œª
          ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚Üí
        case rest of Œª where
          star·µ£ ‚Üí
            unitrec l p q A‚ÇÅ t‚ÇÅ        u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]         ‚áí*‚ü® unitrec‚áí*‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
                                                                               ‚ü® A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚ü©‚ä©‚à∑
            unitrec l p q A‚ÇÅ (star ∑ l) u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ star ∑ l ]‚ÇÄ  ‚áí‚ü® unitrec-Œ≤ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ok no-Œ∑ ‚ü©‚ä©‚à∑‚à∑
                                                                             Àò‚ü® singleSubstLift A‚ÇÅ (star ∑ _) ‚ü©‚ä©‚à∑‚â°
            u‚ÇÅ [ œÉ‚ÇÅ ]                            ‚à∑ A‚ÇÅ [ star ∑ l ]‚ÇÄ [ œÉ‚ÇÅ ]    ‚â°‚ü® R.‚ä©‚â°‚à∑‚Üí inc $ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                              ‚ü® A‚ÇÅ[‚ãÜ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÇ[‚ãÜ]‚ÇÄ[œÉ‚ÇÇ] ‚ü©‚áí
                                                 ‚à∑ A‚ÇÇ [ star ∑ l ]‚ÇÄ [ œÉ‚ÇÇ ]     ‚ü® singleSubstLift A‚ÇÇ (star ∑ _) ‚ü©‚áê‚â°
            u‚ÇÇ [ œÉ‚ÇÇ ]                            ‚à∑ A‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ star ∑ l ]‚ÇÄ  ‚áê‚ü® unitrec-Œ≤ ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ok no-Œ∑ ‚ü©‚à∑
                                                                             Àò‚ü® ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí
            unitrec l p q A‚ÇÇ (star ∑ l) u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A‚ÇÇ [ t‚ÇÇ ]‚ÇÄ [ œÉ‚ÇÇ ]         ‚áê*‚ü® unitrec‚áí*‚ÇÇ ‚ü©‚àé‚à∑
            unitrec l p q A‚ÇÇ t‚ÇÇ        u‚ÇÇ [ œÉ‚ÇÇ ]                             ‚àé

          (ne (neNf‚Çú‚Çå inc t‚ÇÅ‚Ä≤-ne t‚ÇÇ‚Ä≤-ne t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤)) ‚Üí
            Œî ‚ä©‚ü® l‚Ä≤ ‚ü©
              unitrec l p q (A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) (t‚ÇÅ [ œÉ‚ÇÅ ]) (u‚ÇÅ [ œÉ‚ÇÅ ]) ‚â°
              unitrec l p q (A‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) (t‚ÇÇ [ œÉ‚ÇÇ ]) (u‚ÇÇ [ œÉ‚ÇÇ ]) ‚à∑
              A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ] ‚àã
            (unitrec l p q (A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) (t‚ÇÅ [ œÉ‚ÇÅ ]) (u‚ÇÅ [ œÉ‚ÇÅ ])
               ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]                                ‚áí*‚ü® unitrec‚áí*‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
                                                                    ‚ü® A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚ü©‚ä©‚à∑
             unitrec l p q (A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) t‚ÇÅ‚Ä≤         (u‚ÇÅ [ œÉ‚ÇÅ ])
               ‚à∑ A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ t‚ÇÅ‚Ä≤ ]‚ÇÄ                             ‚â°‚ü® neutral-‚ä©‚â°‚à∑ inc (wf-‚ä©‚â° A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ .proj‚ÇÇ)
                                                                       (unitrec‚Çô no-Œ∑ t‚ÇÅ‚Ä≤-ne) (unitrec‚Çô no-Œ∑ t‚ÇÇ‚Ä≤-ne)
                                                                       (~-unitrec (escape-‚ä©‚â° (R.‚ä©‚â°‚Üí (inj‚ÇÅ inc) $ A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë]))
                                                                          t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤
                                                                          (PE.subst (_‚ä¢_‚âÖ_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ _) $
                                                                           escape-‚ä©‚â°‚à∑ (R.‚ä©‚â°‚à∑‚Üí (inj‚ÇÅ inc) $ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ))
                                                                          ok no-Œ∑) ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                    ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $ R.‚ä©‚â°‚Üí (inj‚ÇÅ inc) $
                                                                      ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ $ R.‚Üí‚ä©‚â°‚à∑ $
                                                                      neutral-‚ä©‚â°‚à∑ inc (R.‚ä©‚Üí (inj‚ÇÅ inc) $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©Unit ‚ä©œÉ‚ÇÅ)
                                                                        t‚ÇÅ‚Ä≤-ne t‚ÇÇ‚Ä≤-ne t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤ ‚ü©‚áí
               ‚à∑ A‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ t‚ÇÇ‚Ä≤ ]‚ÇÄ                              Àò‚ü® ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí

             unitrec l p q (A‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) t‚ÇÇ‚Ä≤         (u‚ÇÇ [ œÉ‚ÇÇ ])
               ‚à∑ A‚ÇÇ [ t‚ÇÇ ]‚ÇÄ [ œÉ‚ÇÇ ]                                ‚áê*‚ü® unitrec‚áí*‚ÇÇ ‚ü©‚àé‚à∑

             unitrec l p q (A‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) (t‚ÇÇ [ œÉ‚ÇÇ ]) (u‚ÇÇ [ œÉ‚ÇÇ ])  ‚àé)

opaque

  -- Validity of equality between applications of unitrec.

  unitrec-cong·µõ :
    Œì ‚àô Unit ∑ l ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô Unit ∑ l ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ star ∑ l ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© unitrec l p q A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° unitrec l p q A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑
      A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ
  unitrec-cong·µõ ‚ä¢A‚ÇÅ‚â°A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ (wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ) (wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)
      , ‚ä©unitrec‚â°unitrec ‚ä¢A‚ÇÅ‚â°A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
      )

opaque

  -- Validity of unitrec.

  unitrec·µõ :
    Œì ‚àô Unit ∑ l ‚ä¢ A ‚Üí
    Œì ‚àô Unit ∑ l ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u ‚à∑ A [ star ∑ l ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© unitrec l p q A t u ‚à∑ A [ t ]‚ÇÄ
  unitrec·µõ ‚ä¢A ‚ä©A ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    unitrec-cong·µõ (refl ‚ä¢A) (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

opaque

  -- Validity of the unitrec Œ≤ rule.

  unitrec-Œ≤·µõ :
    Œì ‚àô Unit ∑ l ‚ä¢ A ‚Üí
    Œì ‚àô Unit ∑ l ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A [ star ∑ l ]‚ÇÄ ‚Üí
    ¬¨ Unit ∑-Œ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© unitrec l p q A (star ∑ l) t ‚â° t ‚à∑ A [ star ∑ l ]‚ÇÄ
  unitrec-Œ≤·µõ {A} ‚ä¢A ‚ä©A ‚ä©t no-Œ∑ =
    let ‚ä¢Unit = ‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢A) in
    ‚ä©·µõ‚à∑-‚áê
      (Œª inc ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A _) $
         unitrec-Œ≤
           (subst-‚ä¢ ‚ä¢A (‚ä¢À¢ ∑‚à∑-‚áë‚Ä≤ ‚ä¢Unit (escape-‚ä©À¢‚à∑ inc ‚ä©œÉ .proj‚ÇÇ)))
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A _) $
            R.escape-‚ä©‚à∑ inc (‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ))
           (inversion-Unit ‚ä¢Unit) no-Œ∑)
      ‚ä©t

opaque

  -- Validity of the rule called unitrec-Œ≤-Œ∑.

  unitrec-Œ≤-Œ∑·µõ :
    Œì ‚àô Unit ∑ l ‚ä¢ A ‚Üí
    Œì ‚àô Unit ∑ l ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ Unit ∑ l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u ‚à∑ A [ star ∑ l ]‚ÇÄ ‚Üí
    Unit ∑-Œ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© unitrec l p q A t u ‚â° u ‚à∑ A [ t ]‚ÇÄ
  unitrec-Œ≤-Œ∑·µõ {A} ‚ä¢A ‚ä©A ‚ä©t ‚ä©u Œ∑ =
    let ‚ä¢Unit = ‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢A)
        ok    = inversion-Unit ‚ä¢Unit
    in
    ‚ä©·µõ‚à∑-‚áê
      (Œª inc ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A _) $
         unitrec-Œ≤-Œ∑
           (subst-‚ä¢ ‚ä¢A (‚ä¢À¢ ∑‚à∑-‚áë‚Ä≤ ‚ä¢Unit (escape-‚ä©À¢‚à∑ inc ‚ä©œÉ .proj‚ÇÇ)))
           (R.escape-‚ä©‚à∑ inc (‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ))
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A _) $
            R.escape-‚ä©‚à∑ inc (‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ))
           ok Œ∑)
      (conv-‚ä©·µõ‚à∑
         (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A) $
          Œ∑-unit·µõ (star·µõ (wf-‚ä©·µõ (wf-‚ä©·µõ‚à∑ ‚ä©t)) ok) ‚ä©t (inj‚ÇÇ Œ∑))
         ‚ä©u)
