------------------------------------------------------------------------
-- Validity of the unit type.
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Unit
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  {{eqrel : EqRelSet R}}
  where

open EqRelSet {{...}}
open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction.Primitive R
open import Definition.Typed.RedSteps R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import Definition.LogicalRelation.Substitution.Introductions.Universe R
open import Definition.LogicalRelation.Irrelevance R

open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì Œî : Con Term n
    œÉ œÉ‚ÇÅ œÉ‚ÇÇ : Subst _ _
    s : Strength
    l l‚Ä≤ l‚Ä≥ : TypeLevel
    A A‚ÇÅ A‚ÇÇ t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ : Term n
    p q : M

------------------------------------------------------------------------
-- Characterisation lemmas

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Unit‚áî :
    Œì ‚ä©‚ü® l ‚ü© Unit s ‚áî
    (‚ä¢ Œì √ó Unit-allowed s)
  ‚ä©Unit‚áî =
      (Œª ‚ä©Unit ‚Üí lemma (Unit-elim ‚ä©Unit))
    , (Œª (‚ä¢Œì , ok) ‚Üí
         Unit·µ£ $
         Unit‚Çú (idRed:*: (Unit‚±º ‚ä¢Œì ok)) ok)
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü©Unit‚ü® s ‚ü© Unit s ‚Üí
      ‚ä¢ Œì √ó Unit-allowed s
    lemma (emb 0<1 ‚ä©Unit)               = lemma ‚ä©Unit
    lemma (noemb (Unit‚Çú Unit‚áí*Unit ok)) = wf (‚ä¢A-red Unit‚áí*Unit) , ok

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ ‚ä©Unit‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Unit‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Unit s ‚áî
    (Unit-allowed s √ó
     Œì ‚ä©Unit‚ü® s ‚ü© t ‚à∑Unit)
  ‚ä©‚à∑Unit‚áî =
      (Œª (‚ä©Unit , ‚ä©t) ‚Üí
         lemma (Unit-elim ‚ä©Unit)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©t))
    , (Œª (ok , ‚ä©t@(Unit‚Çú _ t‚áí*u _ _)) ‚Üí
         ‚ä©Unit‚áî .proj‚ÇÇ (wfTerm (‚ä¢t-red‚Çú t‚áí*u) , ok) , ‚ä©t)
    where
    lemma :
      (‚ä©Unit : Œì ‚ä©‚ü® l ‚ü©Unit‚ü® s ‚ü© Unit s) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Unit s / Unit-intr ‚ä©Unit ‚Üí
      Unit-allowed s √ó
      Œì ‚ä©Unit‚ü® s ‚ü© t ‚à∑Unit
    lemma (emb 0<1 ‚ä©Unit)      ‚ä©t = lemma ‚ä©Unit ‚ä©t
    lemma (noemb (Unit‚Çú _ ok)) ‚ä©t = ok , ‚ä©t

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_ ‚ä©Unit‚áî

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Unit‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Unit s ‚áî
    (Unit-allowed s √ó
     Œì ‚ä©Unit‚ü® s ‚ü© t ‚à∑Unit √ó
     Œì ‚ä©Unit‚ü® s ‚ü© u ‚à∑Unit √ó
     Œì ‚ä©Unit‚ü® s ‚ü© t ‚â° u ‚à∑Unit)
  ‚ä©‚â°‚à∑Unit‚áî {s} =
      (Œª (‚ä©Unit , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         lemma (Unit-elim ‚ä©Unit)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©t)
           (irrelevanceTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) ‚ä©u)
           (irrelevanceEqTerm ‚ä©Unit (Unit-intr (Unit-elim ‚ä©Unit)) t‚â°u))
    , (Œª (ok , ‚ä©t , ‚ä©u , t‚â°u) ‚Üí
         case (case PE.singleton s of Œª where
                 (ùï§ , PE.refl) ‚Üí wfTerm (_‚ä©UnitÀ¢_‚â°_‚à∑Unit.‚ä¢t t‚â°u)
                 (ùï® , PE.refl) ‚Üí
                   wfTerm (‚ä¢t-red‚Çú (_‚ä©Unit ∑_‚â°_‚à∑Unit.d t‚â°u))) of Œª
           ‚ä¢Œì ‚Üí
         ‚ä©Unit‚áî .proj‚ÇÇ (‚ä¢Œì , ok) , ‚ä©t , ‚ä©u , t‚â°u)
    where
    lemma :
      (‚ä©Unit : Œì ‚ä©‚ü® l ‚ü©Unit‚ü® s ‚ü© Unit s) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Unit s / Unit-intr ‚ä©Unit ‚Üí
      Œì ‚ä©‚ü® l ‚ü© u ‚à∑ Unit s / Unit-intr ‚ä©Unit ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ Unit s / Unit-intr ‚ä©Unit ‚Üí
      Unit-allowed s √ó
      Œì ‚ä©Unit‚ü® s ‚ü© t ‚à∑Unit √ó
      Œì ‚ä©Unit‚ü® s ‚ü© u ‚à∑Unit √ó
      Œì ‚ä©Unit‚ü® s ‚ü© t ‚â° u ‚à∑Unit
    lemma (emb 0<1 ‚ä©Unit)      ‚ä©t ‚ä©u t‚â°u = lemma ‚ä©Unit ‚ä©t ‚ä©u t‚â°u
    lemma (noemb (Unit‚Çú _ ok)) ‚ä©t ‚ä©u t‚â°u = ok , ‚ä©t , ‚ä©u , t‚â°u

------------------------------------------------------------------------
-- Unit

opaque

  -- If the type Unit¬†s is valid, then it is allowed.

  ‚ä©·µõUnit‚ÜíUnit-allowed :
    Œì ‚ä©·µõ‚ü® l ‚ü© Unit s ‚Üí
    Unit-allowed s
  ‚ä©·µõUnit‚ÜíUnit-allowed {Œì} {l} {s} =
    Œì ‚ä©·µõ‚ü® l ‚ü© Unit s      ‚Üí‚ü® ‚ä©·µõ‚Üí‚ä© ‚ü©
    Œì ‚ä©‚ü® l ‚ü© Unit s       ‚áî‚ü® ‚ä©Unit‚áî ‚ü©‚Üí
    ‚ä¢ Œì √ó Unit-allowed s  ‚Üí‚ü® proj‚ÇÇ ‚ü©
    Unit-allowed s        ‚ñ°

opaque

  -- Reducibility for Unit.

  ‚ä©Unit :
    ‚ä¢ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Unit s
  ‚ä©Unit ‚ä¢Œì ok = ‚ä©Unit‚áî .proj‚ÇÇ (‚ä¢Œì , ok)

opaque

  -- Validity for Unit, seen as a type former.

  Unit·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Unit s
  Unit·µõ ‚ä©Œì ok =
    ‚ä©·µõ‚áî .proj‚ÇÇ
      ( ‚ä©Œì
      , Œª ‚ä©œÉ ‚Üí
          case ‚ä©Unit (escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ) ok of Œª
            ‚ä©Unit ‚Üí
          ‚ä©Unit , Œª {œÉ‚Ä≤ = _} _ ‚Üí refl-‚ä©‚â° ‚ä©Unit
      )

opaque

  -- Validity for Unit, seen as a term former.

  Unit·µó·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® ¬π ‚ü© Unit s ‚à∑ U
  Unit·µó·µõ ‚ä©Œì ok =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõU ‚ä©Œì
      , Œª ‚ä©œÉ ‚Üí
          case escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ of Œª
            ‚ä¢Œî ‚Üí
          case ‚ä©Unit ‚ä¢Œî ok of Œª
            ‚ä©Unit ‚Üí
          case Unit‚±º ‚ä¢Œî ok of Œª
            ‚ä¢Unit ‚Üí
          case ‚âÖ‚Çú-Unitrefl ‚ä¢Œî ok of Œª
            Unit‚âÖUnit ‚Üí
            Type‚Üí‚ä©‚à∑U‚áî Unit‚Çô .proj‚ÇÇ
              ( (_ , 0<1 , ‚ä©Unit)
              , (‚ä¢Unit , Unit‚âÖUnit)
              )
          , Œª _ ‚Üí
              Type‚Üí‚ä©‚â°‚à∑U‚áî Unit‚Çô Unit‚Çô .proj‚ÇÇ
                ( ‚ä¢Unit , ‚ä¢Unit , Unit‚âÖUnit
                , (_ , 0<1 , refl-‚ä©‚â° ‚ä©Unit)
                )
      )

------------------------------------------------------------------------
-- The constructor star

opaque

  -- Reducibility for star.

  ‚ä©star :
    ‚ä¢ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©‚ü® l ‚ü© star s ‚à∑ Unit s
  ‚ä©star ‚ä¢Œì ok =
    ‚ä©‚à∑Unit‚áî .proj‚ÇÇ
      ( ok
      , Unit‚Çú _ (idRedTerm:*: (star‚±º ‚ä¢Œì ok)) (‚âÖ‚Çú-starrefl ‚ä¢Œì ok) star·µ£
      )

opaque

  -- Validity of star.

  star·µõ :
    ‚ä©·µõ Œì ‚Üí
    Unit-allowed s ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© star s ‚à∑ Unit s
  star·µõ ‚ä©Œì ok =
    ‚ä©·µõ‚à∑‚áî .proj‚ÇÇ
      ( Unit·µõ ‚ä©Œì ok
      , Œª ‚ä©œÉ ‚Üí
          case ‚ä©star (escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÅ) ok of Œª
            ‚ä©star ‚Üí
          ‚ä©star , Œª {œÉ‚Ä≤ = _} _ ‚Üí refl-‚ä©‚â°‚à∑ ‚ä©star
      )

------------------------------------------------------------------------
-- The typing rule Œ∑-unit

opaque

  -- Validity of Œ∑-unit.

  Œ∑-unit·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ UnitÀ¢ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ UnitÀ¢ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ UnitÀ¢
  Œ∑-unit·µõ ‚ä©t ‚ä©u =
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©t
      , level-‚ä©·µõ‚à∑ (wf-‚ä©·µõ‚à∑ ‚ä©t) ‚ä©u
      , Œª ‚ä©œÉ ‚Üí
          case ‚ä©‚à∑Unit‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ) of Œª
            (ok , ‚ä©t@(Unit‚Çú _ t‚áí*t‚Ä≤ _ _)) ‚Üí
          case ‚ä©‚à∑Unit‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©u .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ) of Œª
            (_ , ‚ä©u@(Unit‚Çú _ u‚áí*u‚Ä≤ _ _)) ‚Üí
          ‚ä©‚â°‚à∑Unit‚áî .proj‚ÇÇ
            (ok , ‚ä©t , ‚ä©u , Unit‚Çú‚Çå (‚ä¢t-red‚Çú t‚áí*t‚Ä≤) (‚ä¢t-red‚Çú u‚áí*u‚Ä≤))
      )

------------------------------------------------------------------------
-- The eliminator unitrec

private opaque

  -- A variant of unitrec-subst for _‚ä¢_‚áí*_‚à∑_.

  unitrec-subst* :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚à∑ Unit ∑ ‚Üí
    Œî ‚ä¢ t‚ÇÅ ‚áí* t‚ÇÇ ‚à∑ Unit ∑ ‚Üí
    Œî ‚ä¢ u ‚à∑ A [ œÉ ‚áë ] [ star ∑ ]‚ÇÄ ‚Üí
    Œî ‚ä¢ unitrec p q (A [ œÉ ‚áë ]) t‚ÇÅ u ‚áí* unitrec p q (A [ œÉ ‚áë ]) t‚ÇÇ u ‚à∑
      A [ œÉ ‚áë ] [ t‚ÇÅ ]‚ÇÄ
  unitrec-subst* {l} {A} ‚ä©A ‚ä©œÉ ‚ä©t‚ÇÅ t‚ÇÅ‚áí*t‚ÇÇ ‚ä¢u =
    case ‚ä©·µõUnit‚ÜíUnit-allowed $ wf-‚àô-‚ä©·µõ ‚ä©A .proj‚ÇÇ of Œª
      ok ‚Üí
    case escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©A ‚ä©œÉ of Œª
      ‚ä¢A[œÉ‚áë] ‚Üí
    case t‚ÇÅ‚áí*t‚ÇÇ of Œª where
      (id ‚ä¢t‚ÇÅ)         ‚Üí id (unitrec‚±º ‚ä¢A[œÉ‚áë] ‚ä¢t‚ÇÅ ‚ä¢u ok)
      (t‚ÇÅ‚áít‚ÇÉ ‚á® t‚ÇÉ‚áí*t‚ÇÇ) ‚Üí
        case redFirst*Term t‚ÇÉ‚áí*t‚ÇÇ of Œª
          ‚ä¢t‚ÇÉ ‚Üí
        case ‚ä©‚à∑-‚áí* [ redFirstTerm t‚ÇÅ‚áít‚ÇÉ , ‚ä¢t‚ÇÉ , t‚ÇÅ‚áít‚ÇÉ ‚á® id ‚ä¢t‚ÇÉ ]
               ‚ä©t‚ÇÅ of Œª
          (‚ä©t‚ÇÉ , t‚ÇÅ‚â°t‚ÇÉ) ‚Üí
        unitrec-subst ‚ä¢A[œÉ‚áë] ‚ä¢u t‚ÇÅ‚áít‚ÇÉ ok ‚á®
        conv* (unitrec-subst* ‚ä©A ‚ä©œÉ ‚ä©t‚ÇÉ t‚ÇÉ‚áí*t‚ÇÇ ‚ä¢u)
          (‚âÖ-eq $ escape-‚ä©‚â° $
           ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)
             (sym-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÉ))

opaque

  -- Reducibility of equality between applications of unitrec.

  ‚ä©unitrec‚â°unitrec :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Unit ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ star ∑ ]‚ÇÄ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© unitrec p q A‚ÇÅ t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚â° unitrec p q A‚ÇÇ t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑
      A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]
  ‚ä©unitrec‚â°unitrec
    {l} {A‚ÇÅ} {A‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {p} {q}
    A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t‚ÇÅ .proj‚ÇÅ of Œª
      ‚ä©Unit ‚Üí
    case ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t‚ÇÅ .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä©t‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÇ of Œª
      ‚ä©t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚Üí
    case Œ£.map escape escape (wf-‚ä©‚â° A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë]) of Œª
      (‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] , ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë]) ‚Üí
    case refl-‚ä©‚â°‚à∑ $
         ‚ä©star {l = l} (escape-‚ä©À¢‚à∑ ‚ä©œÉ‚ÇÅ .proj‚ÇÅ) $
         ‚ä©·µõUnit‚ÜíUnit-allowed ‚ä©Unit of Œª
      ‚ãÜ‚â°‚ãÜ ‚Üí
    case escape-‚ä©‚à∑ $
         PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ star ∑) $
         ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©u‚ÇÅ .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case escape-‚ä©‚à∑ $
         conv-‚ä©‚à∑
           (‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ) ‚ãÜ‚â°‚ãÜ) $
         PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ star ∑) $
         ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©u‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÇ of Œª
      ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©‚â°‚à∑Unit‚áî .proj‚ÇÅ (t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ) of Œª
      (ok , _ , _ ,
       Unit‚Çú‚Çå t‚ÇÅ‚Ä≤ t‚ÇÇ‚Ä≤ t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤@([ _ , ‚ä¢t‚ÇÅ‚Ä≤ , _ ])
         t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤@([ _ , ‚ä¢t‚ÇÇ‚Ä≤ , _ ]) _ rest) ‚Üí
    case PE.subst (_‚ä¢_‚áí*_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A‚ÇÅ t‚ÇÅ) $
         unitrec-subst* ‚ä©A‚ÇÅ ‚ä©œÉ‚ÇÅ ‚ä©t‚ÇÅ[œÉ‚ÇÅ] (red‚Çú t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤)
           ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] of Œª
      unitrec‚áí*‚ÇÅ ‚Üí
    case PE.subst (_‚ä¢_‚áí*_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A‚ÇÇ t‚ÇÇ) $
         unitrec-subst* ‚ä©A‚ÇÇ ‚ä©œÉ‚ÇÇ ‚ä©t‚ÇÇ[œÉ‚ÇÇ] (red‚Çú t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤)
           ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] of Œª
      unitrec‚áí*‚ÇÇ ‚Üí
    case PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
           (PE.sym $ singleSubstLift A‚ÇÅ t‚ÇÅ) PE.refl $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÅ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ)
           (‚ä©‚à∑-‚áí* t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤ ‚ä©t‚ÇÅ[œÉ‚ÇÅ] .proj‚ÇÇ) of Œª
      A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚Üí
    case ‚âÖ-eq $ escape-‚ä©‚â° $
         PE.subst‚ÇÇ (_‚ä©‚ü®_‚ü©_‚â°_ _ _)
           (PE.sym $ singleSubstLift A‚ÇÇ t‚ÇÇ) PE.refl $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©A‚ÇÇ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ)
           (‚ä©‚à∑-‚áí* t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤ ‚ä©t‚ÇÇ[œÉ‚ÇÇ] .proj‚ÇÇ) of Œª
      ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚Üí
    case rest of Œª where
      star·µ£ ‚Üí
        unitrec p q A‚ÇÅ t‚ÇÅ    u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]       ‚áí*‚ü® unitrec‚áí*‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
                                                                   ‚ü® A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚ü©‚ä©‚à∑
        unitrec p q A‚ÇÅ star ∑ u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ star ∑ ]‚ÇÄ  ‚áí‚ü® unitrec-Œ≤ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ok ‚ü©‚ä©‚à∑‚à∑
                                                                 Àò‚ü® singleSubstLift A‚ÇÅ star ∑ ‚ü©‚ä©‚à∑‚â°
        u‚ÇÅ [ œÉ‚ÇÅ ]                      ‚à∑ A‚ÇÅ [ star ∑ ]‚ÇÄ [ œÉ‚ÇÅ ]    ‚â°‚ü® u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                  ‚ü® PE.subst‚ÇÇ (_‚ä¢_‚â°_ _) (substConsId A‚ÇÅ) (substConsId A‚ÇÇ) $
                                                                    ‚âÖ-eq $ escape-‚ä©‚â° $
                                                                    ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚ãÜ‚â°‚ãÜ ‚ü©‚áí
                                       ‚à∑ A‚ÇÇ [ star ∑ ]‚ÇÄ [ œÉ‚ÇÇ ]     ‚ü® singleSubstLift A‚ÇÇ star ∑ ‚ü©‚áê‚â°
        u‚ÇÇ [ œÉ‚ÇÇ ]                      ‚à∑ A‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ star ∑ ]‚ÇÄ  ‚áê‚ü® unitrec-Œ≤ ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ok , ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚à∑
                                                                 Àò‚ü® ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí
        unitrec p q A‚ÇÇ star ∑ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ A‚ÇÇ [ t‚ÇÇ ]‚ÇÄ [ œÉ‚ÇÇ ]       ‚áê*‚ü® unitrec‚áí*‚ÇÇ ‚ü©‚àé‚à∑
        unitrec p q A‚ÇÇ t‚ÇÇ    u‚ÇÇ [ œÉ‚ÇÇ ]                           ‚àé

      (ne (neNf‚Çú‚Çå t‚ÇÅ‚Ä≤-ne t‚ÇÇ‚Ä≤-ne t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤)) ‚Üí
        case ‚âÖ-eq $ escape-‚ä©‚â° $
             ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ $
             neutral-‚ä©‚â°‚à∑ (‚ä©·µõ‚áî‚Ä≤ .proj‚ÇÅ ‚ä©Unit .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ‚ÇÅ)
               t‚ÇÅ‚Ä≤-ne t‚ÇÇ‚Ä≤-ne ‚ä¢t‚ÇÅ‚Ä≤ ‚ä¢t‚ÇÇ‚Ä≤ t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤ of Œª
          ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚Üí
        unitrec p q (A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) (t‚ÇÅ [ œÉ‚ÇÅ ]) (u‚ÇÅ [ œÉ‚ÇÅ ])
          ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]                              ‚áí*‚ü® unitrec‚áí*‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
                                                             ‚ü® A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ ‚ü©‚ä©‚à∑
        unitrec p q (A‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) t‚ÇÅ‚Ä≤         (u‚ÇÅ [ œÉ‚ÇÅ ])
          ‚à∑ A‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ t‚ÇÅ‚Ä≤ ]‚ÇÄ                           ‚â°‚ü® neutral-‚ä©‚â°‚à∑ (wf-‚ä©‚â° A‚ÇÅ[t‚ÇÅ]‚ÇÄ[œÉ‚ÇÅ]‚â°A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ .proj‚ÇÇ)
                                                                (unitrec‚Çô t‚ÇÅ‚Ä≤-ne) (unitrec‚Çô t‚ÇÇ‚Ä≤-ne)
                                                                (unitrec‚±º ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢t‚ÇÅ‚Ä≤ ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ok)
                                                                (conv (unitrec‚±º ‚ä¢A‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢t‚ÇÇ‚Ä≤ ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ok)
                                                                   (sym ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ))
                                                                (~-unitrec (escape-‚ä©‚â° A‚ÇÅ[œÉ‚ÇÅ‚áë]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë]) t‚ÇÅ‚Ä≤~t‚ÇÇ‚Ä≤
                                                                   (PE.subst (_‚ä¢_‚âÖ_‚à∑_ _ _ _) (singleSubstLift A‚ÇÅ _) $
                                                                    escape-‚ä©‚â°‚à∑ (u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ))
                                                                   ok) ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                             ‚ü® ‚ä¢A‚ÇÅ[œÉ‚ÇÅ‚áë][t‚ÇÅ‚Ä≤]‚ÇÄ‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí
          ‚à∑ A‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ t‚ÇÇ‚Ä≤ ]‚ÇÄ                            Àò‚ü® ‚ä¢A‚ÇÇ[t‚ÇÇ]‚ÇÄ[œÉ‚ÇÇ]‚â°A‚ÇÇ[œÉ‚ÇÇ‚áë][t‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí

        unitrec p q (A‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) t‚ÇÇ‚Ä≤         (u‚ÇÇ [ œÉ‚ÇÇ ])
          ‚à∑ A‚ÇÇ [ t‚ÇÇ ]‚ÇÄ [ œÉ‚ÇÇ ]                              ‚áê*‚ü® unitrec‚áí*‚ÇÇ ‚ü©‚àé‚à∑

        unitrec p q (A‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) (t‚ÇÇ [ œÉ‚ÇÇ ]) (u‚ÇÇ [ œÉ‚ÇÇ ])  ‚àé

opaque

  -- Reducibility for unitrec.

  ‚ä©unitrec :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ A [ star ∑ ]‚ÇÄ ‚Üí
    Œî ‚ä©À¢ œÉ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© unitrec p q A t u [ œÉ ] ‚à∑ A [ t ]‚ÇÄ [ œÉ ]
  ‚ä©unitrec ‚ä©A ‚ä©t ‚ä©u ‚ä©œÉ =
    wf-‚ä©‚â°‚à∑
      (‚ä©unitrec‚â°unitrec (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)
         (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ))
      .proj‚ÇÅ

opaque

  -- Validity of unitrec.

  unitrec·µõ :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ Unit ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ A [ star ∑ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© unitrec p q A t u ‚à∑ A [ t ]‚ÇÄ
  unitrec·µõ ‚ä©A ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©A ‚ä©t
      , ‚ä©unitrec ‚ä©A ‚ä©t ‚ä©u
      , ‚ä©unitrec‚â°unitrec (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)
      )

opaque

  -- Validity of equality between applications of unitrec.

  unitrec-cong·µõ :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Unit ∑ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ star ∑ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© unitrec p q A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° unitrec p q A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ
  unitrec-cong·µõ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , ‚ä©A‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case wf-‚àô-‚ä©·µõ ‚ä©A‚ÇÅ of Œª
      (_ , ‚ä©Unit) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( unitrec·µõ ‚ä©A‚ÇÅ ‚ä©t‚ÇÅ ‚ä©u‚ÇÅ
      , conv-‚ä©·µõ‚à∑ (sym-‚ä©·µõ‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)
          (unitrec·µõ ‚ä©A‚ÇÇ ‚ä©t‚ÇÇ
             (conv-‚ä©·µõ‚à∑
                (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ A‚ÇÅ‚â°A‚ÇÇ $ refl-‚ä©·µõ‚â°‚à∑ $
                 star·µõ {l = ‚Å∞} (wf-‚ä©·µõ ‚ä©Unit)
                   (‚ä©·µõUnit‚ÜíUnit-allowed ‚ä©Unit))
              ‚ä©u‚ÇÇ))
      , ‚ä©unitrec‚â°unitrec A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
      )

opaque

  -- Validity of the unitrec Œ≤ rule.

  unitrec-Œ≤·µõ :
    Œì ‚àô Unit ∑ ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A [ star ∑ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© unitrec p q A star ∑ t ‚â° t ‚à∑ A [ star ∑ ]‚ÇÄ
  unitrec-Œ≤·µõ {A} ‚ä©A ‚ä©t =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift A _) $
         unitrec-Œ≤
           (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©A ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift A _) $
            escape-‚ä©‚à∑ (‚ä©·µõ‚à∑‚áî‚Ä≤ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ .proj‚ÇÅ ‚ä©œÉ))
           (‚ä©·µõUnit‚ÜíUnit-allowed (wf-‚àô-‚ä©·µõ ‚ä©A .proj‚ÇÇ)))
      ‚ä©t
      .proj‚ÇÇ
