------------------------------------------------------------------------
-- Validity for Œ†-types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Pi
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import
  Definition.LogicalRelation.Substitution.Introductions.Pi-Sigma R
open import Definition.LogicalRelation.Substitution.Introductions.Var R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction.Primitive R
open import Definition.Typed.Reasoning.Reduction.Well-typed R
open import Definition.Typed.RedSteps R
open import Definition.Typed.Weakening R as W using (_‚à∑ ∑_‚äá_)

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

private variable
  m n                 : Nat
  Œì Œî                 : Con Term _
  A B t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ : Term _
  œÅ                   : Wk _ _
  œÉ œÉ‚ÇÅ œÉ‚ÇÇ             : Subst _ _
  p q                 : M
  l l‚Ä≤ l‚Ä≥             : Universe-level

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Œ†‚áî :
    {A : Term n} {B : Term (1+ n)} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ Œª u ‚Üí
     Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     Function u √ó
     Œì ‚ä¢‚âÖ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
     œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
     Œî ‚ä©‚ü® l ‚ü© wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
       wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ)
  ‚ä©‚à∑Œ†‚áî {n} {Œì} {t} {p} {q} {A} {B} =
      (Œª (‚ä©Œ† , ‚ä©t) ‚Üí
         case B-elim _ ‚ä©Œ† of Œª
           ‚ä©Œ†‚Ä≤ ‚Üí
         ‚ä©Œ† , lemma‚ÇÅ ‚ä©Œ†‚Ä≤ (irrelevanceTerm ‚ä©Œ† (B-intr _ ‚ä©Œ†‚Ä≤) ‚ä©t))
    , (Œª (‚ä©Œ† , rest) ‚Üí
         case B-elim _ ‚ä©Œ† of Œª
           ‚ä©Œ†‚Ä≤ ‚Üí
         B-intr _ ‚ä©Œ†‚Ä≤ , lemma‚ÇÇ ‚â§·µò-refl ‚ä©Œ†‚Ä≤ rest)
    where
    lemma‚ÇÅ :
      (‚ä©Œ† : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ† p q) ‚ä©Œ† ‚Üí
      ‚àÉ Œª u ‚Üí
      Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
      Function u √ó
      Œì ‚ä¢‚âÖ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
      ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
        wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ
    lemma‚ÇÅ (emb ‚â§·µò-refl ‚ä©Œ†) ‚ä©t =
      case lemma‚ÇÅ ‚ä©Œ†  ‚ä©t  of Œª
        (u , t‚áí*u , u-fun , u‚âÖu , rest) ‚Üí
        u , t‚áí*u , u-fun , u‚âÖu
      , Œª œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
          emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) $ rest œÅ‚äá $
          level-‚ä©‚â°‚à∑
            (‚ä©Œ†Œ£‚áî .proj‚ÇÅ (B-intr _ ‚ä©Œ†) .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÅ)
            v‚ÇÅ‚â°v‚ÇÇ
    lemma‚ÇÅ (emb (‚â§·µò-step l<) ‚ä©Œ†) ‚ä©t =
      let u , t‚áí*u , u-fun , u‚âÖu , rest = lemma‚ÇÅ (emb l< ‚ä©Œ†) ‚ä©t in
        u , t‚áí*u , u-fun , u‚âÖu , Œª œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
          emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) $ rest œÅ‚äá $
            level-‚ä©‚â°‚à∑
              (‚ä©Œ†Œ£‚áî .proj‚ÇÅ (B-intr _ (emb l< ‚ä©Œ†))
                .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÅ)
              v‚ÇÅ‚â°v‚ÇÇ
    lemma‚ÇÅ
      {l} ‚ä©Œ†@(noemb (B·µ£ _ _ Œ†‚áí*Œ† _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u , t‚áí*u , u-fun , u‚âÖu , u‚àò‚â°u‚àò , u‚à∑) =
      case B-PE-injectivity _ _ $ whnfRed* (red Œ†‚áí*Œ†) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      (‚àÉ Œª u ‚Üí
       Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Function u √ó
       Œì ‚ä¢‚âÖ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
         wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ) ‚àã
        u , t‚áí*u , u-fun , u‚âÖu
      , Œª œÅ‚äá (‚ä©wk-œÅ-A , ‚ä©v , ‚ä©w , v‚â°w) ‚Üí
          case irrelevanceTerm ‚ä©wk-œÅ-A (‚ä©wk-A œÅ‚äá) ‚ä©v of Œª
            ‚ä©v‚Ä≤ ‚Üí
          case irrelevanceTerm ‚ä©wk-œÅ-A (‚ä©wk-A œÅ‚äá) ‚ä©w of Œª
            ‚ä©w‚Ä≤ ‚Üí
            ‚ä©wk-B œÅ‚äá ‚ä©v‚Ä≤
          , u‚à∑ œÅ‚äá ‚ä©v‚Ä≤
          , convTerm‚ÇÅ (‚ä©wk-B œÅ‚äá ‚ä©w‚Ä≤) (‚ä©wk-B œÅ‚äá ‚ä©v‚Ä≤)
              (‚ä©‚â°‚Üí‚ä©‚â°/ (‚ä©wk-B œÅ‚äá ‚ä©w‚Ä≤) $
               ‚ä©Œ†Œ£‚áî .proj‚ÇÅ (B-intr _ ‚ä©Œ†) .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÇ $
               sym-‚ä©‚â°‚à∑ (‚ä©wk-œÅ-A , ‚ä©v , ‚ä©w , v‚â°w))
              (u‚à∑ œÅ‚äá ‚ä©w‚Ä≤)
          , u‚àò‚â°u‚àò œÅ‚äá ‚ä©v‚Ä≤ ‚ä©w‚Ä≤
              (irrelevanceEqTerm ‚ä©wk-œÅ-A (‚ä©wk-A œÅ‚äá) v‚â°w) }

    lemma‚ÇÇ :
      l‚Ä≤ ‚â§·µò l ‚Üí
      (‚ä©Œ† : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ† p q ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      (‚àÉ Œª u ‚Üí
       Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Function u √ó
       Œì ‚ä¢‚âÖ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
         wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ† p q) ‚ä©Œ†
    lemma‚ÇÇ l‚Ä≤‚â§l (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†) rest =
      irrelevanceTerm (B-intr _ ‚ä©Œ†) (B-intr _ (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†)) $
      lemma‚ÇÇ (‚â§·µò-trans (<·µò‚Üí‚â§·µò l‚Ä≥<l‚Ä≤) l‚Ä≤‚â§l) ‚ä©Œ† rest
    lemma‚ÇÇ
      l‚Ä≤‚â§l ‚ä©Œ†@(noemb (B·µ£ _ _ Œ†‚áí*Œ† _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u , t‚áí*u , u-fun , u‚âÖu , rest) =
      case B-PE-injectivity _ _ $ whnfRed* (red Œ†‚áí*Œ†) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / B-intr _ ‚ä©Œ† ‚àã
        u , t‚áí*u , u-fun , u‚âÖu
      , (Œª œÅ‚äá ‚ä©v‚ÇÅ ‚ä©v‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ ‚Üí
           let ‚ä©wk-œÅ-A = ‚ä©wk-A œÅ‚äá in
           case emb-‚â§-‚ä© l‚Ä≤‚â§l ‚ä©wk-œÅ-A of Œª
             ‚ä©wk-œÅ-A‚Ä≤ ‚Üí
           ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ (‚ä©wk-B œÅ‚äá ‚ä©v‚ÇÅ) $
           rest œÅ‚äá
             ( ‚ä©wk-œÅ-A‚Ä≤
             , irrelevanceTerm ‚ä©wk-œÅ-A ‚ä©wk-œÅ-A‚Ä≤ ‚ä©v‚ÇÅ
             , irrelevanceTerm ‚ä©wk-œÅ-A ‚ä©wk-œÅ-A‚Ä≤ ‚ä©v‚ÇÇ
             , irrelevanceEqTerm ‚ä©wk-œÅ-A ‚ä©wk-œÅ-A‚Ä≤ v‚ÇÅ‚â°v‚ÇÇ
             ))
      , (Œª œÅ‚äá ‚ä©v ‚Üí
           let ‚ä©wk-œÅ-A = ‚ä©wk-A œÅ‚äá in
           case emb-‚â§-‚ä© l‚Ä≤‚â§l ‚ä©wk-œÅ-A of Œª
             ‚ä©wk-œÅ-A‚Ä≤ ‚Üí
           ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-B œÅ‚äá ‚ä©v) $
           proj‚ÇÅ $ wf-‚ä©‚â°‚à∑ $
           rest œÅ‚äá $
           refl-‚ä©‚â°‚à∑ (‚ä©wk-œÅ-A‚Ä≤ , irrelevanceTerm ‚ä©wk-œÅ-A ‚ä©wk-œÅ-A‚Ä≤ ‚ä©v)) }

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Œ†‚áî :
    {A : Term n} {B : Term (1+ n)} ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t‚ÇÅ :‚áí*: u‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ t‚ÇÇ :‚áí*: u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     Function u‚ÇÅ √ó
     Function u‚ÇÇ √ó
     Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
     œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
     Œî ‚ä©‚ü® l ‚ü© wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
       wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ)
  ‚ä©‚â°‚à∑Œ†‚áî {n} {Œì} {t‚ÇÅ} {t‚ÇÇ} {p} {q} {A} {B} =
      (Œª (‚ä©Œ† , _ , _ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
         case B-elim _ ‚ä©Œ† of Œª
           ‚ä©Œ†‚Ä≤ ‚Üí
         ‚ä©Œ† , lemma‚ÇÅ ‚ä©Œ†‚Ä≤ (irrelevanceEqTerm ‚ä©Œ† (B-intr _ ‚ä©Œ†‚Ä≤) t‚ÇÅ‚â°t‚ÇÇ))
    , (Œª (‚ä©Œ† , rest) ‚Üí
         case B-elim _ ‚ä©Œ† of Œª
           ‚ä©Œ†‚Ä≤ ‚Üí
         B-intr _ ‚ä©Œ†‚Ä≤ , lemma‚ÇÇ ‚â§·µò-refl ‚ä©Œ†‚Ä≤ rest)
    where
    lemma‚ÇÅ :
      (‚ä©Œ† : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ† p q) ‚ä©Œ† ‚Üí
      ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
      Œì ‚ä¢ t‚ÇÅ :‚áí*: u‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
      Œì ‚ä¢ t‚ÇÇ :‚áí*: u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
      Function u‚ÇÅ √ó
      Function u‚ÇÇ √ó
      Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
      ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
      œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
      Œî ‚ä©‚ü® l ‚ü© wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
        wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ
    lemma‚ÇÅ (emb ‚â§·µò-refl ‚ä©Œ†) t‚ÇÅ‚â°t‚ÇÇ =
      case lemma‚ÇÅ ‚ä©Œ† t‚ÇÅ‚â°t‚ÇÇ of Œª
        (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ , rest) ‚Üí
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ
      , Œª œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
          emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) $ rest œÅ‚äá $
          level-‚ä©‚â°‚à∑
            (‚ä©Œ†Œ£‚áî .proj‚ÇÅ (B-intr _ ‚ä©Œ†) .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÅ)
            v‚ÇÅ‚â°v‚ÇÇ
    lemma‚ÇÅ (emb (‚â§·µò-step l<) ‚ä©Œ†) t‚ÇÅ‚â°t‚ÇÇ =
      case lemma‚ÇÅ (emb l< ‚ä©Œ†) t‚ÇÅ‚â°t‚ÇÇ of Œª
        (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ , rest) ‚Üí
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ
      , Œª œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
          emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) $ rest œÅ‚äá $
          level-‚ä©‚â°‚à∑
            (‚ä©Œ†Œ£‚áî .proj‚ÇÅ (B-intr _ (emb l< ‚ä©Œ†)) .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÅ)
            v‚ÇÅ‚â°v‚ÇÇ
    lemma‚ÇÅ
      {l} ‚ä©Œ†@(noemb (B·µ£ _ _ Œ†‚áí*Œ† _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ ,
       rest) =
      let ‚ä©Œ†‚Ä≤ = B-intr _ ‚ä©Œ† in
      case B-PE-injectivity _ _ $ whnfRed* (red Œ†‚áí*Œ†) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      case ‚ä©‚à∑Œ†‚áî .proj‚ÇÅ (‚ä©‚à∑-intro ‚ä©Œ†‚Ä≤ ‚ä©t‚ÇÅ) of Œª
        (_ , _ , t‚ÇÅ‚áí*u‚ÇÅ‚Ä≤ , u‚ÇÅ‚Ä≤-fun , _ , rest‚ÇÅ) ‚Üí
      case ‚ä©‚à∑Œ†‚áî .proj‚ÇÅ (‚ä©‚à∑-intro ‚ä©Œ†‚Ä≤ ‚ä©t‚ÇÇ) of Œª
        (_ , _ , t‚ÇÇ‚áí*u‚ÇÇ‚Ä≤ , u‚ÇÇ‚Ä≤-fun , _ , rest‚ÇÇ) ‚Üí
      case whrDet*Term (red‚Çú t‚ÇÅ‚áí*u‚ÇÅ , functionWhnf u‚ÇÅ-fun)
             (red‚Çú t‚ÇÅ‚áí*u‚ÇÅ‚Ä≤ , functionWhnf u‚ÇÅ‚Ä≤-fun) of Œª {
        PE.refl ‚Üí
      case whrDet*Term (red‚Çú t‚ÇÇ‚áí*u‚ÇÇ , functionWhnf u‚ÇÇ-fun)
             (red‚Çú t‚ÇÇ‚áí*u‚ÇÇ‚Ä≤ , functionWhnf u‚ÇÇ‚Ä≤-fun) of Œª {
        PE.refl ‚Üí
      (‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
       Œì ‚ä¢ t‚ÇÅ :‚áí*: u‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä¢ t‚ÇÇ :‚áí*: u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Function u‚ÇÅ √ó
       Function u‚ÇÇ √ó
       Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
         wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ) ‚àã
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ
      , Œª {_} {œÅ = œÅ} {_} {v‚ÇÅ = v‚ÇÅ} {v‚ÇÇ = v‚ÇÇ} œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
          case rest‚ÇÇ œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ of Œª
            wk-œÅ-u‚ÇÇ‚àòv‚ÇÅ‚â°wk-œÅ-u‚ÇÇ‚àòv‚ÇÇ ‚Üí
          wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚â°‚ü® ‚ä©‚â°‚à∑-intro (‚ä©wk-B œÅ‚äá _)
                                  (wf-‚ä©‚â°‚à∑ (rest‚ÇÅ œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ) .proj‚ÇÅ)
                                  (wf-‚ä©‚â°‚à∑ wk-œÅ-u‚ÇÇ‚àòv‚ÇÅ‚â°wk-œÅ-u‚ÇÇ‚àòv‚ÇÇ .proj‚ÇÅ) $
                                rest œÅ‚äá $
                                ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-A œÅ‚äá) $ wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ .proj‚ÇÅ ‚ü©‚ä©‚à∑
          wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚â°‚ü® wk-œÅ-u‚ÇÇ‚àòv‚ÇÅ‚â°wk-œÅ-u‚ÇÇ‚àòv‚ÇÇ ‚ü©‚ä©‚à∑‚àé
          wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ  ‚àé }}}

    lemma‚ÇÇ :
      l‚Ä≤ ‚â§·µò l ‚Üí
      (‚ä©Œ† : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ† p q ‚ü© Œ† p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      (‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
       Œì ‚ä¢ t‚ÇÅ :‚áí*: u‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä¢ t‚ÇÇ :‚áí*: u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       Function u‚ÇÅ √ó
       Function u‚ÇÇ √ó
       Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B √ó
       ‚àÄ {m} {œÅ : Wk m n} {Œî : Con Term m} {v‚ÇÅ v‚ÇÇ} ‚Üí
       œÅ ‚à∑ ∑ Œî ‚äá Œì ‚Üí
       Œî ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ A ‚Üí
       Œî ‚ä©‚ü® l ‚ü© wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
         wk (lift œÅ) B [ v‚ÇÅ ]‚ÇÄ) ‚Üí
      let ‚ä©Œ†‚Ä≤ = B-intr (BŒ† p q) ‚ä©Œ† in
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ†‚Ä≤ √ó
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ†‚Ä≤ √ó
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ†‚Ä≤
    lemma‚ÇÇ l‚Ä≤‚â§l (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†) rest =
      let ‚ä©Œ†‚ÇÅ = B-intr _ ‚ä©Œ†
          ‚ä©Œ†‚ÇÇ = B-intr _ (emb l‚Ä≥<l‚Ä≤ ‚ä©Œ†)
      in
      case lemma‚ÇÇ (‚â§·µò-trans (<·µò‚Üí‚â§·µò l‚Ä≥<l‚Ä≤) l‚Ä≤‚â§l) ‚ä©Œ† rest of Œª
        (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
        irrelevanceTerm ‚ä©Œ†‚ÇÅ ‚ä©Œ†‚ÇÇ ‚ä©t‚ÇÅ
      , irrelevanceTerm ‚ä©Œ†‚ÇÅ ‚ä©Œ†‚ÇÇ ‚ä©t‚ÇÇ
      , irrelevanceEqTerm ‚ä©Œ†‚ÇÅ ‚ä©Œ†‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
    lemma‚ÇÇ
      l‚Ä≤‚â§l ‚ä©Œ†@(noemb (B·µ£ _ _ Œ†‚áí*Œ† _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ , rest) =
      case B-PE-injectivity _ _ $ whnfRed* (red Œ†‚áí*Œ†) Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      let ‚ä©Œ†‚Ä≤ = B-intr _ ‚ä©Œ† in
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©Œ†‚Ä≤ $
           ‚ä©‚à∑Œ†‚áî .proj‚ÇÇ
             ( ‚ä©Œ†‚Ä≤
             , u‚ÇÅ , t‚ÇÅ‚áí*u‚ÇÅ , u‚ÇÅ-fun , ‚âÖ‚Çú-trans u‚ÇÅ‚âÖu‚ÇÇ (‚âÖ‚Çú-sym u‚ÇÅ‚âÖu‚ÇÇ)
             , Œª {_} {œÅ = œÅ} {_} {v‚ÇÅ = v‚ÇÅ} {v‚ÇÇ = v‚ÇÇ} œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
                 case emb-‚ä©‚â°‚à∑ l‚Ä≤‚â§l v‚ÇÅ‚â°v‚ÇÇ of Œª
                   v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ ‚Üí
                 wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚â°‚ü® rest œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ ‚ü©‚ä©‚à∑
                 wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ  ‚â°Àò‚ü® conv-‚ä©‚â°‚à∑
                                          (sym-‚ä©‚â° $
                                           ‚ä©Œ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†‚Ä≤ .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ) $
                                        rest œÅ‚äá (refl-‚ä©‚â°‚à∑ (wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ .proj‚ÇÇ)) ‚ü©‚ä©‚à∑‚àé
                 wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÇ  ‚àé
             ) of Œª
        ‚ä©t‚ÇÅ ‚Üí
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©Œ†‚Ä≤ $
           ‚ä©‚à∑Œ†‚áî .proj‚ÇÇ
             ( ‚ä©Œ†‚Ä≤
             , u‚ÇÇ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÇ-fun , ‚âÖ‚Çú-trans (‚âÖ‚Çú-sym u‚ÇÅ‚âÖu‚ÇÇ) u‚ÇÅ‚âÖu‚ÇÇ
             , Œª {_} {œÅ = œÅ} {_} {v‚ÇÅ = v‚ÇÅ} {v‚ÇÇ = v‚ÇÇ} œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
                 case emb-‚ä©‚â°‚à∑ l‚Ä≤‚â§l v‚ÇÅ‚â°v‚ÇÇ of Œª
                   v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ ‚Üí
                 wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚â°Àò‚ü® rest œÅ‚äá (refl-‚ä©‚â°‚à∑ (wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ .proj‚ÇÅ)) ‚ü©‚ä©‚à∑
                 wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚â°‚ü® level-‚ä©‚â°‚à∑
                                         (wf-‚ä©‚â°
                                            (‚ä©Œ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†‚Ä≤ .proj‚ÇÇ .proj‚ÇÇ œÅ‚äá .proj‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ)
                                            .proj‚ÇÅ) $
                                       rest œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ‚Ä≤ ‚ü©‚ä©‚à∑‚àé
                 wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ  ‚àé
             ) of Œª
        ‚ä©t‚ÇÇ ‚Üí
      _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©Œ†‚Ä≤ √ó _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©Œ†‚Ä≤ √ó
        _ ‚ä©‚ü® _ ‚ü© _ ‚â° _ ‚à∑ _ / ‚ä©Œ†‚Ä≤ ‚àã
        ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ
      , ( u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun , u‚ÇÅ‚âÖu‚ÇÇ
        , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ
        , Œª œÅ‚äá ‚ä©v ‚Üí
            ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ (‚ä©wk-B œÅ‚äá ‚ä©v) $
            rest œÅ‚äá $
            refl-‚ä©‚â°‚à∑ $ emb-‚ä©‚à∑ l‚Ä≤‚â§l $
            ‚ä©‚à∑-intro (‚ä©wk-A œÅ‚äá) ‚ä©v
        ) }

------------------------------------------------------------------------
-- Lambdas

opaque

  -- Reducibility of equality between applications of lam.

  ‚ä©lam‚â°lam :
    {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m n} ‚Üí
    Œ†-allowed p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ B ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© lam p t‚ÇÅ [ œÉ‚ÇÅ ] ‚â° lam p t‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑
      (Œ† p , q ‚ñ∑ A ‚ñπ B) [ œÉ‚ÇÅ ]
  ‚ä©lam‚â°lam
    {m} {p} {l} {A} {t‚ÇÅ} {t‚ÇÇ} {B} {Œî} {œÉ‚ÇÅ} {œÉ‚ÇÇ} ok ‚ä©A t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ of Œª
      ‚ä©B ‚Üí
    case escape-‚ä© $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢B[œÉ‚ÇÅ‚áë] ‚Üí
    case ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A ‚ä©œÉ‚ÇÅ of Œª
      ‚ä©A[œÉ‚ÇÅ] ‚Üí
    case escape ‚ä©A[œÉ‚ÇÅ] of Œª
      ‚ä¢A[œÉ‚ÇÅ] ‚Üí
    case lam‚±º ‚ä¢B[œÉ‚ÇÅ‚áë] (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ ‚ä©t‚ÇÅ ‚ä©œÉ‚ÇÅ) ok of Œª
      ‚ä¢lam-t‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case lam‚±º ‚ä¢B[œÉ‚ÇÅ‚áë]
           (escape-‚ä©‚à∑ $
            wf-‚ä©‚â°‚à∑ (‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë]‚à∑ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ) .proj‚ÇÇ)
           ok of Œª
      ‚ä¢lam-t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case
      (‚àÄ k (œÅ : Wk k m) (Œï : Con Term k) v‚ÇÅ v‚ÇÇ ‚Üí
       œÅ ‚à∑ ∑ Œï ‚äá Œî ‚Üí
       Œï ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ (A [ œÉ‚ÇÅ ]) ‚Üí
       Œï ‚ä©‚ü® l ‚ü© wk œÅ (lam p t‚ÇÅ [ œÉ‚ÇÅ ]) ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â°
         wk œÅ (lam p t‚ÇÇ [ œÉ‚ÇÇ ]) ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
         wk (lift œÅ) (B [ œÉ‚ÇÅ ‚áë ]) [ v‚ÇÅ ]‚ÇÄ) ‚àã
      (Œª _ œÅ _ v‚ÇÅ v‚ÇÇ œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
         case W.wk œÅ‚äá ‚ä¢A[œÉ‚ÇÅ] of Œª
           ‚ä¢wk-œÅ-A[œÉ‚ÇÅ] ‚Üí
         case W.wk œÅ‚äá $ escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A ‚ä©œÉ‚ÇÇ of Œª
           ‚ä¢wk-œÅ-A[œÉ‚ÇÇ] ‚Üí
         case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ of Œª
           (‚ä©v‚ÇÅ , ‚ä©v‚ÇÇ) ‚Üí
         case conv-‚ä©‚à∑
                (wk-‚ä©‚â° œÅ‚äá $ ‚ä©·µõ‚â°‚áî .proj‚ÇÅ (refl-‚ä©·µõ‚â° ‚ä©A) .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                ‚ä©v‚ÇÇ of Œª
           ‚ä©v‚ÇÇ ‚Üí
         case ‚ä©À¢‚â°‚à∑‚àô‚áî {œÉ‚ÇÅ = consSubst _ _} {œÉ‚ÇÇ = consSubst _ _} .proj‚ÇÇ
                ( ( _ , ‚ä©A
                  , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-subst A) v‚ÇÅ‚â°v‚ÇÇ
                  )
                , ‚ä©À¢‚â°‚à∑-‚Ä¢‚Çõ œÅ‚äá œÉ‚ÇÅ‚â°œÉ‚ÇÇ
                ) of Œª
           œÅ‚Ä¢‚ÇõœÉ‚ÇÅ,v‚ÇÅ‚â°œÅ‚Ä¢‚ÇõœÉ‚ÇÇ,v‚ÇÇ ‚Üí
         lam p (wk (lift œÅ) (t‚ÇÅ [ œÉ‚ÇÅ ‚áë ])) ‚àò‚ü® p ‚ü© v‚ÇÅ  ‚áí‚ü® Œ≤-red (W.wk (W.lift ∑ ∑ œÅ‚äá (‚ä¢wk-œÅ-A[œÉ‚ÇÅ])) (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ‚ÇÅ))
                                                           (W.wkTerm (W.lift ∑ ∑ œÅ‚äá (‚ä¢wk-œÅ-A[œÉ‚ÇÅ])) (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ ‚ä©t‚ÇÅ ‚ä©œÉ‚ÇÅ))
                                                           (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ) PE.refl ok ‚ü©‚ä©‚à∑
         wk (lift œÅ) (t‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) [ v‚ÇÅ ]‚ÇÄ ‚à∑
           wk (lift œÅ) (B [ œÉ‚ÇÅ ‚áë ]) [ v‚ÇÅ ]‚ÇÄ           ‚â°‚ü® singleSubstWkComp _ _ t‚ÇÅ ‚ü©‚ä©‚à∑‚à∑‚â°
                                                       ‚ü® singleSubstWkComp _ _ B ‚ü©‚ä©‚à∑‚â°
         t‚ÇÅ [ consSubst (œÅ ‚Ä¢‚Çõ œÉ‚ÇÅ) v‚ÇÅ ] ‚à∑
           B [ consSubst (œÅ ‚Ä¢‚Çõ œÉ‚ÇÅ) v‚ÇÅ ]               ‚â°‚ü® ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ œÅ‚Ä¢‚ÇõœÉ‚ÇÅ,v‚ÇÅ‚â°œÅ‚Ä¢‚ÇõœÉ‚ÇÇ,v‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                       ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $
                                                         ‚ä©·µõ‚â°‚áî .proj‚ÇÅ (refl-‚ä©·µõ‚â° ‚ä©B) .proj‚ÇÇ œÅ‚Ä¢‚ÇõœÉ‚ÇÅ,v‚ÇÅ‚â°œÅ‚Ä¢‚ÇõœÉ‚ÇÇ,v‚ÇÇ ‚ü©‚áí
         t‚ÇÇ [ consSubst (œÅ ‚Ä¢‚Çõ œÉ‚ÇÇ) v‚ÇÇ ] ‚à∑
           B [ consSubst (œÅ ‚Ä¢‚Çõ œÉ‚ÇÇ) v‚ÇÇ ]               ‚â°Àò‚ü® singleSubstWkComp _ _ t‚ÇÇ ‚ü©‚áê‚à∑
                                                       Àò‚ü® singleSubstWkComp _ _ B ‚ü©‚áí‚â°
         wk (lift œÅ) (t‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) [ v‚ÇÇ ]‚ÇÄ ‚à∑
           wk (lift œÅ) (B [ œÉ‚ÇÇ ‚áë ]) [ v‚ÇÇ ]‚ÇÄ           ‚áê‚ü® Œ≤-red (W.wk (W.lift ∑ ∑ œÅ‚äá (‚ä¢wk-œÅ-A[œÉ‚ÇÇ])) (escape $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ‚ÇÇ))
                                                           (W.wkTerm (W.lift ∑ ∑ œÅ‚äá (‚ä¢wk-œÅ-A[œÉ‚ÇÇ])) (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ ‚ä©t‚ÇÇ ‚ä©œÉ‚ÇÇ))
                                                           (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ) PE.refl ok
                                                       , PE.subst‚ÇÇ (_‚ä¢_‚à∑_ _) (PE.sym $ singleSubstWkComp _ _ t‚ÇÇ)
                                                           (PE.sym $ singleSubstWkComp _ _ B) $
                                                         escape-‚ä©‚à∑ $
                                                         wf-‚ä©‚â°‚à∑ (‚ä©·µõ‚à∑‚áî .proj‚ÇÅ ‚ä©t‚ÇÇ .proj‚ÇÇ (sym-‚ä©À¢‚â°‚à∑ œÅ‚Ä¢‚ÇõœÉ‚ÇÅ,v‚ÇÅ‚â°œÅ‚Ä¢‚ÇõœÉ‚ÇÇ,v‚ÇÇ)) .proj‚ÇÅ
                                                       ‚ü©‚àé‚à∑
         lam p (wk (lift œÅ) (t‚ÇÇ [ œÉ‚ÇÇ ‚áë ])) ‚àò‚ü® p ‚ü© v‚ÇÇ  ‚àé)
    of Œª
      lemma ‚Üí
    ‚ä©‚â°‚à∑Œ†‚áî .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] (Œ†Œ£·µõ ok ‚ä©A ‚ä©B) ‚ä©œÉ‚ÇÅ
      , _ , _
      , idRedTerm:*: ‚ä¢lam-t‚ÇÅ[œÉ‚ÇÅ]
      , idRedTerm:*: ‚ä¢lam-t‚ÇÇ[œÉ‚ÇÇ]
      , lam‚Çô , lam‚Çô
      , ‚âÖ-Œ∑-eq ‚ä¢lam-t‚ÇÅ[œÉ‚ÇÅ] ‚ä¢lam-t‚ÇÇ[œÉ‚ÇÇ] lam‚Çô lam‚Çô
          (escape-‚ä©‚â°‚à∑ $
           PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (idWkLiftSubstLemma _ B) $
           lemma _ (step id) _ _ _ (W.step ∑ W.id ‚ä¢A[œÉ‚ÇÅ]) $
           refl-‚ä©‚â°‚à∑ $
           ‚ä©var here (wk-‚ä© (W.step ∑ W.id ‚ä¢A[œÉ‚ÇÅ]) ‚ä©A[œÉ‚ÇÅ]))
      , lemma _ _ _ _ _
      )

opaque

  -- Validity of equality preservation for lam.

  lam-cong·µõ :
    Œ†-allowed p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© lam p t‚ÇÅ ‚â° lam p t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  lam-cong·µõ ok ‚ä©A t‚ÇÅ‚â°t‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( Œ†Œ£·µõ ok ‚ä©A (wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)
      , ‚ä©lam‚â°lam ok ‚ä©A t‚ÇÅ‚â°t‚ÇÇ
      )

opaque

  -- Validity of lam.

  lam·µõ :
    Œ†-allowed p q ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© A ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© lam p t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  lam·µõ ok ‚ä©A ‚ä©t =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    lam-cong·µõ ok ‚ä©A (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t)

------------------------------------------------------------------------
-- Applications

opaque

  -- Reducibility of equality between applications.

  ‚ä©‚àò‚â°‚àò :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© (t‚ÇÅ ‚àò‚ü® p ‚ü© u‚ÇÅ) [ œÉ‚ÇÅ ] ‚â° (t‚ÇÇ ‚àò‚ü® p ‚ü© u‚ÇÇ) [ œÉ‚ÇÇ ] ‚à∑
      B [ u‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]
  ‚ä©‚àò‚â°‚àò {t‚ÇÅ} {t‚ÇÇ} {p} {B} {u‚ÇÅ} {u‚ÇÇ} {œÉ‚ÇÅ} {œÉ‚ÇÇ} t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case ‚ä©·µõ‚â°‚à∑‚áî‚Ä≥ .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , _ , t‚ÇÅ[]‚â°t‚ÇÇ[]) ‚Üí
    case wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ (wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ) of Œª
      (_ , ‚ä©A , ‚ä©B) ‚Üí
    case ‚ä©‚â°‚à∑Œ†‚áî .proj‚ÇÅ (t‚ÇÅ[]‚â°t‚ÇÇ[] œÉ‚ÇÅ‚â°œÉ‚ÇÇ) of Œª
      (_ , t‚ÇÅ‚Ä≤ , t‚ÇÇ‚Ä≤ , t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤ , t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤ , _ , _ , _ , rest) ‚Üí
                           ‚à∑ B [ u‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]             ‚ü® singleSubstLift B _ ‚ü©‚ä©‚à∑‚à∑‚â°
    (t‚ÇÅ ‚àò‚ü® p ‚ü© u‚ÇÅ) [ œÉ‚ÇÅ ]  ‚à∑ B [ œÉ‚ÇÅ ‚áë ] [ u‚ÇÅ [ œÉ‚ÇÅ ] ]‚ÇÄ  ‚áí*‚ü® app-subst* (red‚Çú t‚ÇÅ[œÉ‚ÇÅ]‚áí*t‚ÇÅ‚Ä≤) $
                                                            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÅ ‚ä©œÉ‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
    t‚ÇÅ‚Ä≤ ‚àò‚ü® p ‚ü© (u‚ÇÅ [ œÉ‚ÇÅ ])                              ‚â°‚ü® PE.subst‚ÇÉ (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _)
                                                             (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wk-id _) PE.refl PE.refl)
                                                             (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wk-id _) PE.refl PE.refl)
                                                             (PE.cong‚ÇÇ _[_]‚ÇÄ (wk-lift-id (B [ _ ])) PE.refl) $
                                                           rest (W.id ∑ (escape-‚ä©À¢‚à∑ ‚ä©œÉ‚ÇÅ .proj‚ÇÅ)) $
                                                           PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ wk-id _) $
                                                           level-‚ä©‚â°‚à∑ (‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A ‚ä©œÉ‚ÇÅ) u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚áê*
                                                          ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $
                                                            ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ
                                                              (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚áí
    t‚ÇÇ‚Ä≤ ‚àò‚ü® p ‚ü© (u‚ÇÇ [ œÉ‚ÇÇ ]) ‚à∑ B [ œÉ‚ÇÅ ‚áë ] [ u‚ÇÇ [ œÉ‚ÇÇ ] ]‚ÇÄ  ‚áê*‚ü® app-subst* (red‚Çú t‚ÇÇ[œÉ‚ÇÇ]‚áí*t‚ÇÇ‚Ä≤) $
                                                            escape-‚ä©‚à∑ $
                                                            conv-‚ä©‚à∑ (sym-‚ä©‚â° $ ‚ä©·µõ‚áî .proj‚ÇÅ ‚ä©A .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ) $
                                                            ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÇ ‚ä©œÉ‚ÇÇ ‚ü©‚àé‚à∑
    (t‚ÇÇ ‚àò‚ü® p ‚ü© u‚ÇÇ) [ œÉ‚ÇÇ ]                               ‚àé

opaque

  -- Validity of equality preservation for application.

  ‚àò-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚àò‚ü® p ‚ü© u‚ÇÅ ‚â° t‚ÇÇ ‚àò‚ü® p ‚ü© u‚ÇÇ ‚à∑ B [ u‚ÇÅ ]‚ÇÄ
  ‚àò-cong·µõ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ $ wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ of Œª
      (_ , _ , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©B (wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ .proj‚ÇÅ)
      , ‚ä©‚àò‚â°‚àò t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
      )

opaque

  -- Validity of application.

  ‚àò·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚àò‚ü® p ‚ü© u ‚à∑ B [ u ]‚ÇÄ
  ‚àò·µõ ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    ‚àò-cong·µõ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

------------------------------------------------------------------------
-- Validity of some equality rules

opaque

  -- Validity of Œ≤-reduction.

  Œ≤-red·µõ :
    Œ†-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© lam p t ‚àò‚ü® p ‚ü© u ‚â° t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  Œ≤-red·µõ {t} {B} ok ‚ä©t ‚ä©u =
    case wf-‚ä©·µõ‚à∑ ‚ä©t of Œª
      ‚ä©B ‚Üí
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst‚ÇÇ (_‚ä¢_‚áí_‚à∑_ _ _) (PE.sym $ singleSubstLift t _)
           (PE.sym $ singleSubstLift B _) $
         Œ≤-red (escape-‚ä© $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ)
           (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë]‚à∑ ‚ä©t ‚ä©œÉ)
           (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ) PE.refl ok)
      (‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚à∑ ‚ä©t ‚ä©u)

private opaque

  -- A lemma used below.

  wk-[]‚àò‚â° :
    (t : Term n) ‚Üí
    wk œÅ (t [ œÉ ]) ‚àò‚ü® p ‚ü© u PE.‚â°
    (wk1 t ‚àò‚ü® p ‚ü© var x0) [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) u ]
  wk-[]‚àò‚â° {œÅ} {œÉ} {u} t =
    PE.cong (_‚àò‚ü® _ ‚ü© _)
      (wk œÅ (t [ œÉ ])                  ‚â°‚ü® wk-subst t ‚ü©
       t [ œÅ ‚Ä¢‚Çõ œÉ ]                    ‚â°Àò‚ü® wk1-sgSubst _ _ ‚ü©
       wk1 (t [ œÅ ‚Ä¢‚Çõ œÉ ]) [ u ]‚ÇÄ       ‚â°Àò‚ü® PE.cong _[ _ ] $ wk1-liftSubst t ‚ü©
       wk1 t [ (œÅ ‚Ä¢‚Çõ œÉ) ‚áë ] [ u ]‚ÇÄ     ‚â°‚ü® singleSubstComp _ _ (wk1 t) ‚ü©
       wk1 t [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) u ]  ‚àé)

opaque

  -- Validity of Œ∑-equality.

  Œ∑-eq·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© wk1 t‚ÇÅ ‚àò‚ü® p ‚ü© var x0 ‚â° wk1 t‚ÇÇ ‚àò‚ü® p ‚ü© var x0 ‚à∑ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  Œ∑-eq·µõ {l} {t‚ÇÅ} {p} {A} {B} {t‚ÇÇ} ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ wk1-t‚ÇÅ‚àò0‚â°wk1-t‚ÇÇ‚àò0 =
    case wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ of Œª
      ‚ä©Œ†AB ‚Üí
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ†AB of Œª
      (_ , ‚ä©A , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( ‚ä©t‚ÇÅ
      , level-‚ä©·µõ‚à∑ ‚ä©Œ†AB ‚ä©t‚ÇÇ
      , Œª {m = m} {Œî = Œî} {œÉ = œÉ} ‚ä©œÉ ‚Üí
          case ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A ‚ä©œÉ of Œª
            ‚ä©A[œÉ] ‚Üí
          case escape-‚ä© ‚ä©A[œÉ] of Œª
            ‚ä¢A[œÉ] ‚Üí
          case ‚ä©‚à∑Œ†‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÅ ‚ä©œÉ) of Œª
            (‚ä©Œ†AB[œÉ] , u‚ÇÅ , t‚ÇÅ[œÉ]‚áí*u‚ÇÅ , u‚ÇÅ-fun , _ , _) ‚Üí
          case ‚ä©‚à∑Œ†‚áî .proj‚ÇÅ (‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÇ ‚ä©œÉ) of Œª
            (_ , u‚ÇÇ , t‚ÇÇ[œÉ]‚áí*u‚ÇÇ , u‚ÇÇ-fun , _ , _) ‚Üí
          case
            (‚àÄ k (œÅ : Wk k m) (Œï : Con Term k) v‚ÇÅ v‚ÇÇ ‚Üí
             œÅ ‚à∑ ∑ Œï ‚äá Œî ‚Üí
             Œï ‚ä©‚ü® l ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk œÅ (A [ œÉ ]) ‚Üí
             Œï ‚ä©‚ü® l ‚ü© wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚â° wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
               wk (lift œÅ) (B [ œÉ ‚áë ]) [ v‚ÇÅ ]‚ÇÄ) ‚àã
            (Œª _ œÅ _ v‚ÇÅ v‚ÇÇ œÅ‚äá v‚ÇÅ‚â°v‚ÇÇ ‚Üí
               case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ of Œª
                 (‚ä©v‚ÇÅ , ‚ä©v‚ÇÇ) ‚Üí
               case ‚ä©·µõ‚áî .proj‚ÇÅ ‚ä©B .proj‚ÇÇ $
                    ‚ä©À¢‚â°‚à∑‚àô‚áî .proj‚ÇÇ
                      ( ( _ , ‚ä©A
                        , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-subst A)
                            v‚ÇÅ‚â°v‚ÇÇ
                        )
                      , refl-‚ä©À¢‚â°‚à∑ (‚ä©À¢‚à∑-‚Ä¢‚Çõ œÅ‚äá ‚ä©œÉ)
                      ) of Œª
                 B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÅ]‚â°B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÇ] ‚Üí

               wk œÅ u‚ÇÅ ‚àò‚ü® p ‚ü© v‚ÇÅ ‚à∑ wk (lift œÅ) (B [ œÉ ‚áë ]) [ v‚ÇÅ ]‚ÇÄ  ‚áê*‚ü® app-subst:*: (W.wkRed:*:Term œÅ‚äá t‚ÇÅ[œÉ]‚áí*u‚ÇÅ) (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ) ‚ü©‚ä©‚à∑‚à∑

               wk œÅ (t‚ÇÅ [ œÉ ]) ‚àò‚ü® p ‚ü© v‚ÇÅ                            ‚â°‚ü® wk-[]‚àò‚â° t‚ÇÅ ‚ü©‚ä©‚à∑‚â°
                                                                     ‚ü® singleSubstWkComp _ _ B ‚ü©‚ä©‚à∑‚â°
               (wk1 t‚ÇÅ ‚àò‚ü® p ‚ü© var x0) [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) v‚ÇÅ ] ‚à∑
                 B [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) v‚ÇÅ ]                        ‚â°‚ü® level-‚ä©‚â°‚à∑ (wf-‚ä©‚â° B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÅ]‚â°B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÇ] .proj‚ÇÅ) $
                                                                       ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[,]‚â°[,]‚à∑ wk1-t‚ÇÅ‚àò0‚â°wk1-t‚ÇÇ‚àò0
                                                                         (‚ä©À¢‚â°‚à∑-‚Ä¢‚Çõ œÅ‚äá (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ))
                                                                         (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-subst A) v‚ÇÅ‚â°v‚ÇÇ) ‚ü©‚ä©‚à∑‚à∑:‚áí*:
                                                                     ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÅ]‚â°B[œÅ‚Ä¢‚ÇõœÉ,v‚ÇÇ] ‚ü©:‚áí:
               (wk1 t‚ÇÇ ‚àò‚ü® p ‚ü© var x0) [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) v‚ÇÇ ] ‚à∑
                 B [ consSubst (œÅ ‚Ä¢‚Çõ œÉ) v‚ÇÇ ]                        ‚â°Àò‚ü® wk-[]‚àò‚â° t‚ÇÇ ‚ü©:‚áí:‚à∑
                                                                     Àò‚ü® singleSubstWkComp _ _ B ‚ü©:‚áí:‚â°
               wk œÅ (t‚ÇÇ [ œÉ ]) ‚àò‚ü® p ‚ü© v‚ÇÇ ‚à∑
                 wk (lift œÅ) (B [ œÉ ‚áë ]) [ v‚ÇÇ ]‚ÇÄ                    :‚áí*:‚ü® app-subst:*: (W.wkRed:*:Term œÅ‚äá t‚ÇÇ[œÉ]‚áí*u‚ÇÇ) (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ) ‚ü©‚àé‚à∑

               wk œÅ u‚ÇÇ ‚àò‚ü® p ‚ü© v‚ÇÇ                                    ‚àé)
          of Œª
            lemma ‚Üí
          ‚ä©‚â°‚à∑Œ†‚áî .proj‚ÇÇ
            ( ‚ä©Œ†AB[œÉ]
            , u‚ÇÅ , u‚ÇÇ , t‚ÇÅ[œÉ]‚áí*u‚ÇÅ , t‚ÇÇ[œÉ]‚áí*u‚ÇÇ , u‚ÇÅ-fun , u‚ÇÇ-fun
            , ‚âÖ-Œ∑-eq (‚ä¢u-red‚Çú t‚ÇÅ[œÉ]‚áí*u‚ÇÅ) (‚ä¢u-red‚Çú t‚ÇÇ[œÉ]‚áí*u‚ÇÇ)
                u‚ÇÅ-fun u‚ÇÇ-fun
                (PE.subst (_‚ä¢_‚âÖ_‚à∑_ _ _ _) (idWkLiftSubstLemma _ B) $
                 escape-‚ä©‚â°‚à∑ $
                 lemma _ _ _ _ _ (W.step ∑ W.id ‚ä¢A[œÉ]) $
                 refl-‚ä©‚â°‚à∑ $
                 ‚ä©var here (wk-‚ä© (W.step ∑ W.id ‚ä¢A[œÉ]) ‚ä©A[œÉ]))
            , lemma _ _ _ _ _
            )
      )
