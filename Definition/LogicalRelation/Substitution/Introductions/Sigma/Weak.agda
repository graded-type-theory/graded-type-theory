------------------------------------------------------------------------
-- Validity for weak Œ£-types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module
  Definition.LogicalRelation.Substitution.Introductions.Sigma.Weak
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
import Definition.LogicalRelation.Hidden.Restricted R as R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import
  Definition.LogicalRelation.Substitution.Introductions.Pi-Sigma R
open import Definition.LogicalRelation.Substitution.Introductions.Var R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.Substitution R
import Definition.Typed.Weakening R as W
open import Definition.Typed.Weakening.Definition R
open import Definition.Typed.Well-formed R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Untyped.Whnf M type-variant

open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Level
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

private variable
  m n                                           : Nat
  ‚àá                                             : DCon (Term 0) _
  Œî Œó                                           : Con Term _
  Œì                                             : Cons _ _
  A B C C‚ÇÅ C‚ÇÇ t t‚ÇÅ t‚ÇÅ‚ÇÅ t‚ÇÅ‚ÇÇ t‚ÇÇ t‚ÇÇ‚ÇÅ t‚ÇÇ‚ÇÇ u u‚ÇÅ u‚ÇÇ v : Term _
  œÉ œÉ‚ÇÅ œÉ‚ÇÇ                                       : Subst _ _
  p q q‚Ä≤ r                                      : M
  l l‚Ä≤ l‚Ä≥ l‚Ä¥                                    : Universe-level

------------------------------------------------------------------------
-- Some characterisation lemmas

-- A type used to state ‚ä©‚â°‚à∑Œ£ ∑‚áî.

infix 4 _‚ä©‚ü®_‚ü©_‚â°_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_

data _‚ä©‚ü®_‚ü©_‚â°_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_
       (Œì : Cons m n) (l : Universe-level) :
       Term n ‚Üí Term n ‚Üí M ‚Üí M ‚Üí Term n ‚Üí Term (1+ n) ‚Üí Set a where
  prod‚Çô :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ‚ÇÅ ‚â° t‚ÇÇ‚ÇÅ ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ‚ÇÇ ‚â° t‚ÇÇ‚ÇÇ ‚à∑ B [ t‚ÇÅ‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© prod ∑ p t‚ÇÅ‚ÇÅ t‚ÇÅ‚ÇÇ ‚â° prod ∑ p t‚ÇÇ‚ÇÅ t‚ÇÇ‚ÇÇ ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  ne :
    Neutral‚Çó (Œì .defs) t‚ÇÅ ‚Üí
    Neutral‚Çó (Œì .defs) t‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ~ t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B

opaque

  -- If Œì¬†‚ä©‚ü®¬†l¬†‚ü©¬†t¬†‚â°¬†u¬†‚à∑Œ£ ∑¬†p¬†,¬†q¬†‚ñ∑¬†A¬†‚ñπ¬†B holds, then t and u are
  -- products.

  ‚ä©‚â°‚à∑Œ£ ∑‚ÜíProduct :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Product‚Çó (Œì .defs) t √ó Product‚Çó (Œì .defs) u
  ‚ä©‚â°‚à∑Œ£ ∑‚ÜíProduct = Œª where
    (prod‚Çô _ _)      ‚Üí prod‚Çô , prod‚Çô
    (ne t-ne u-ne _) ‚Üí ne t-ne , ne u-ne

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Œ£ ∑‚áî :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
  ‚ä©‚â°‚à∑Œ£ ∑‚áî {B} =
      (Œª (‚ä©Œ£ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
         case B-view ‚ä©Œ£ of Œª {
           (B·µ£ (B·µ£ _ _ Œ£‚áí*Œ£ _ ‚ä©wk-A ‚ä©wk-B _ _)) ‚Üí
         case t‚ÇÅ‚â°t‚ÇÇ of Œª
           (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , rest) ‚Üí
         case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
           (PE.refl , PE.refl , _) ‚Üí
         ‚ä©Œ£ ,
           u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ
         , (case PE.singleton u‚ÇÅ-prod of Œª where
              (ne u‚ÇÅ-ne , PE.refl) ‚Üí
                case PE.singleton u‚ÇÇ-prod of Œª {
                  (prod‚Çô    , PE.refl) ‚Üí ‚ä•-elim (Lift.lower rest);
                  (ne u‚ÇÇ-ne , PE.refl) ‚Üí
                ne u‚ÇÅ-ne u‚ÇÇ-ne rest }
              (prod‚Çô , PE.refl) ‚Üí
                case PE.singleton u‚ÇÇ-prod of Œª {
                  (ne _  , PE.refl) ‚Üí ‚ä•-elim (Lift.lower rest);
                  (prod‚Çô , PE.refl) ‚Üí
                case rest of Œª {
                  (PE.refl , PE.refl , PE.refl , PE.refl ,
                   _ , _ , u‚ÇÅ‚ÇÅ‚â°u‚ÇÇ‚ÇÅ , u‚ÇÅ‚ÇÇ‚â°u‚ÇÇ‚ÇÇ) ‚Üí
                prod‚Çô
                  (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-id _)
                     (‚ä©wk-A _ _ , u‚ÇÅ‚ÇÅ‚â°u‚ÇÇ‚ÇÅ))
                  (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _)
                     (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B)
                     (‚ä©wk-B _ _ _ , u‚ÇÅ‚ÇÇ‚â°u‚ÇÇ‚ÇÇ)) }}) }})
    , (Œª (‚ä©Œ£ , rest) ‚Üí
         case B-view ‚ä©Œ£ of Œª {
           (B·µ£ ‚ä©Œ£@(B·µ£ _ _ Œ£‚áí*Œ£ _ ‚ä©wk-A ‚ä©wk-B _ _)) ‚Üí
         case rest of Œª
           (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
         case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
           (PE.refl , PE.refl , _) ‚Üí
         let ‚ä©Œ£‚Ä≤        = B·µ£ _ ‚ä©Œ£
             ‚âÖu‚ÇÅ , ‚âÖu‚ÇÇ  = wf-‚ä¢‚âÖ‚à∑ u‚ÇÅ‚âÖu‚ÇÇ
             _ , ‚ä©A , _ = ‚ä©Œ†Œ£‚Üí ‚ä©Œ£‚Ä≤
         in
         ‚ä©Œ£‚Ä≤ ,
         (_ ‚ä©‚ü® _ ‚ü© _ ‚â° _ ‚à∑ _ / ‚ä©Œ£‚Ä≤ ‚àã
           u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ
         , (case u‚ÇÅ‚â°u‚ÇÇ of Œª where
              (prod‚Çô u‚ÇÅ‚ÇÅ‚â°u‚ÇÇ‚ÇÅ u‚ÇÅ‚ÇÇ‚â°u‚ÇÇ‚ÇÇ) ‚Üí
                case wf-‚ä©‚â°‚à∑ u‚ÇÅ‚ÇÅ‚â°u‚ÇÇ‚ÇÅ of Œª
                  (‚ä©u‚ÇÅ‚ÇÅ , ‚ä©u‚ÇÇ‚ÇÅ) ‚Üí
                  prod‚Çô , prod‚Çô , PE.refl , PE.refl , PE.refl , PE.refl
                , ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-A _ _)
                    (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) ‚ä©u‚ÇÅ‚ÇÅ)
                , ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-A _ _)
                    (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) ‚ä©u‚ÇÇ‚ÇÅ)
                , ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ (‚ä©wk-A _ _)
                    (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ wk-id _)
                       u‚ÇÅ‚ÇÅ‚â°u‚ÇÇ‚ÇÅ)
                , ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ (‚ä©wk-B _ _ _)
                    (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _)
                       (PE.sym $ PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B) u‚ÇÅ‚ÇÇ‚â°u‚ÇÇ‚ÇÇ)
              (ne u‚ÇÅ-ne u‚ÇÇ-ne u‚ÇÅ~u‚ÇÇ) ‚Üí
                ne u‚ÇÅ-ne , ne u‚ÇÇ-ne , u‚ÇÅ~u‚ÇÇ)) }})

-- A type used to state ‚ä©‚à∑Œ£ ∑‚áî.

infix 4 _‚ä©‚ü®_‚ü©_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_

data _‚ä©‚ü®_‚ü©_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_
       (Œì : Cons m n) (l : Universe-level) :
       Term n ‚Üí M ‚Üí M ‚Üí Term n ‚Üí Term (1+ n) ‚Üí Set a where
  prod‚Çô :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© prod ∑ p t‚ÇÅ t‚ÇÇ ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  ne :
    Neutral‚Çó (Œì .defs) t ‚Üí
    Œì ‚ä¢~ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B

opaque

  -- The relation _‚ä©‚ü®_‚ü©_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_ is pointwise logically equivalent
  -- to the diagonal of _‚ä©‚ü®_‚ü©_‚â°_‚à∑Œ£ ∑_,_‚ñ∑_‚ñπ_.

  ‚ä©‚à∑Œ£ ∑‚áî‚ä©‚â°‚à∑Œ£ ∑ :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚áî Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  ‚ä©‚à∑Œ£ ∑‚áî‚ä©‚â°‚à∑Œ£ ∑ =
      (Œª where
         (prod‚Çô ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ) ‚Üí prod‚Çô (refl-‚ä©‚â°‚à∑ ‚ä©t‚ÇÅ) (refl-‚ä©‚â°‚à∑ ‚ä©t‚ÇÇ)
         (ne t-ne ~t)    ‚Üí ne t-ne t-ne ~t)
    , flip lemma PE.refl
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí t PE.‚â° u ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
    lemma (prod‚Çô t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ) _ =
      prod‚Çô (wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°u‚ÇÅ .proj‚ÇÅ) (wf-‚ä©‚â°‚à∑ t‚ÇÇ‚â°u‚ÇÇ .proj‚ÇÅ)
    lemma (ne t-ne _ ~t) PE.refl = ne t-ne ~t

opaque

  -- If Œì¬†‚ä©‚ü®¬†l¬†‚ü©¬†t¬†‚à∑Œ£ ∑¬†p¬†,¬†q¬†‚ñ∑¬†A¬†‚ñπ¬†B holds, then t is a product.

  ‚ä©‚à∑Œ£ ∑‚ÜíProduct : Œì ‚ä©‚ü® l ‚ü© t ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí Product‚Çó (Œì .defs) t
  ‚ä©‚à∑Œ£ ∑‚ÜíProduct = proj‚ÇÅ ‚àò‚Üí ‚ä©‚â°‚à∑Œ£ ∑‚ÜíProduct ‚àò‚Üí ‚ä©‚à∑Œ£ ∑‚áî‚ä©‚â°‚à∑Œ£ ∑ .proj‚ÇÅ

opaque

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Œ£ ∑‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ Œª u ‚Üí
     Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢‚âÖ u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
  ‚ä©‚à∑Œ£ ∑‚áî {Œì} {l} {t} {p} {q} {A} {B} =
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B         ‚áî‚ü® ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ ‚ü©

    Œì ‚ä©‚ü® l ‚ü© t ‚â° t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B     ‚áî‚ü® ‚ä©‚â°‚à∑Œ£ ∑‚áî ‚ü©

    (Œì ‚ä©‚ü® l ‚ü© Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t ‚áí* u‚ÇÅ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ t ‚áí* u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)  ‚áî‚ü® (Œ£-cong-‚áî Œª _ ‚Üí Œ£-cong-‚áî Œª _ ‚Üí
                                                ( (Œª (_ , t‚áí*u‚ÇÅ , t‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
                                                     let u‚ÇÅ-prod , u‚ÇÇ-prod = ‚ä©‚â°‚à∑Œ£ ∑‚ÜíProduct u‚ÇÅ‚â°u‚ÇÇ in
                                                     case whrDet*Term (t‚áí*u‚ÇÅ , productWhnf u‚ÇÅ-prod)
                                                            (t‚áí*u‚ÇÇ , productWhnf u‚ÇÇ-prod) of Œª {
                                                       PE.refl ‚Üí
                                                     t‚áí*u‚ÇÅ , wf-‚ä¢‚âÖ‚à∑ u‚ÇÅ‚âÖu‚ÇÇ .proj‚ÇÅ , ‚ä©‚à∑Œ£ ∑‚áî‚ä©‚â°‚à∑Œ£ ∑ .proj‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ })
                                                , (Œª (t‚áí*u , ‚âÖu , ‚ä©u) ‚Üí
                                                     _ , t‚áí*u , t‚áí*u , ‚âÖu , ‚ä©‚à∑Œ£ ∑‚áî‚ä©‚â°‚à∑Œ£ ∑ .proj‚ÇÅ ‚ä©u)
                                                )) ‚ü©
    (Œì ‚ä©‚ü® l ‚ü© Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ Œª u ‚Üí
     Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢‚âÖ u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)        ‚ñ°‚áî

------------------------------------------------------------------------
-- Pairs

opaque

  -- Reducibility of equality between applications of prod ∑.

  ‚ä©prod ∑‚â°prod ∑ :
    Œì ¬ª‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© prod ∑ p t‚ÇÅ u‚ÇÅ ‚â° prod ∑ p t‚ÇÇ u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  ‚ä©prod ∑‚â°prod ∑ {B} {p} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} ‚ä¢B ‚ä©Œ£AB t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case ‚ä©Œ†Œ£‚Üí ‚ä©Œ£AB of Œª
      (ok , ‚ä©A , _) ‚Üí
    case wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case conv-‚ä©‚à∑ (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) t‚ÇÅ‚â°t‚ÇÇ) ‚ä©u‚ÇÇ of Œª
      ‚ä©u‚ÇÇ ‚Üí
    ‚ä©‚â°‚à∑Œ£ ∑‚áî .proj‚ÇÇ
      ( ‚ä©Œ£AB
      , _ , _
      , id (prod‚±º ‚ä¢B (escape-‚ä©‚à∑ ‚ä©t‚ÇÅ) (escape-‚ä©‚à∑ ‚ä©u‚ÇÅ) ok)
      , id (prod‚±º ‚ä¢B (escape-‚ä©‚à∑ ‚ä©t‚ÇÇ) (escape-‚ä©‚à∑ ‚ä©u‚ÇÇ) ok)
      , ‚âÖ-prod-cong ‚ä¢B (escape-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ) (escape-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ) ok
      , prod‚Çô (level-‚ä©‚â°‚à∑ ‚ä©A t‚ÇÅ‚â°t‚ÇÇ)
          (level-‚ä©‚â°‚à∑ (‚ä©Œ†Œ£‚Üí‚ä©‚à∑‚Üí‚ä©[]‚ÇÄ ‚ä©Œ£AB ‚ä©t‚ÇÅ) u‚ÇÅ‚â°u‚ÇÇ)
      )

private opaque

  -- Reducibility of equality between applications of prod ∑.

  ‚ä©prod ∑[]‚â°prod ∑[] :
    Œ£ ∑-allowed p q ‚Üí
    ‚àá ¬ª Œî ‚àô A ‚ä¢ B ‚Üí
    ‚àá ¬ª Œî ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    ‚àá ¬ª Œî ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    ‚àá ¬ª Œî ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    ‚¶É inc : Var-included or-empty Œó ‚¶Ñ ‚Üí
    ‚àá ¬ª Œó ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œî ‚Üí
    ‚àá ¬ª Œó ‚ä©‚ü® l ‚ü© prod ∑ p t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚â° prod ∑ p t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑
      (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) [ œÉ‚ÇÅ ]
  ‚ä©prod ∑[]‚â°prod ∑[] {B} ok ‚ä¢B ‚ä©B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ of Œª
      ‚ä©A ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , _) ‚Üí
    ‚ä©prod ∑‚â°prod ∑ (subst-‚ä¢-‚áë ‚ä¢B (escape-‚ä©À¢‚à∑ ‚ä©œÉ‚ÇÅ .proj‚ÇÇ))
      (‚ä©Œ†Œ£ (Œ†Œ£‚±º ‚ä¢B ok) ‚ä©A ‚ä©B ‚ä©œÉ‚ÇÅ)
      (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      (R.‚ä©‚â°‚à∑‚Üí $
       PE.subst (R._‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift B _) $
       ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)

opaque

  -- Validity of equality preservation for prod ∑.

  prod ∑-cong·µõ :
    Œ£ ∑-allowed p q ‚Üí
    Œì ¬ª‚àô A ‚ä¢ B ‚Üí
    Œì ¬ª‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prod ∑ p t‚ÇÅ u‚ÇÅ ‚â° prod ∑ p t‚ÇÇ u‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  prod ∑-cong·µõ ok ‚ä¢B ‚ä©B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( Œ†Œ£·µõ (Œ†Œ£‚±º ‚ä¢B ok) (wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ) ‚ä©B
      , Œª Œæ‚äá ‚Üí ‚ä©prod ∑[]‚â°prod ∑[] ok
                                (defn-wk Œæ‚äá ‚ä¢B)
                                (defn-wk-‚ä©·µõ Œæ‚äá ‚ä©B)
                                (defn-wk-‚ä©·µõ‚â°‚à∑ Œæ‚äá t‚ÇÅ‚â°t‚ÇÇ)
                                (defn-wk-‚ä©·µõ‚â°‚à∑ Œæ‚äá u‚ÇÅ‚â°u‚ÇÇ)
      )

opaque

  -- Validity of prod ∑.

  prod ∑·µõ :
    Œ£ ∑-allowed p q ‚Üí
    Œì ¬ª‚àô A ‚ä¢ B ‚Üí
    Œì ¬ª‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prod ∑ p t u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B
  prod ∑·µõ ok ‚ä¢B ‚ä©B ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    prod ∑-cong·µõ ok ‚ä¢B ‚ä©B (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

------------------------------------------------------------------------
-- The eliminator prodrec

private opaque

  -- A lemma used below.

  [1,0]‚Üë¬≤[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë][,]‚ÇÄ :
    ‚àÄ A ‚Üí
    A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ [ œÉ ‚áë ‚áë ] [ t , u ]‚ÇÅ‚ÇÄ PE.‚â°
    A [ œÉ ‚áë ] [ prod ∑ p t u ]‚ÇÄ
  [1,0]‚Üë¬≤[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë][,]‚ÇÄ {p} {œÉ} {t} {u} A =
    A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ [ œÉ ‚áë ‚áë ] [ t , u ]‚ÇÅ‚ÇÄ  ‚â°‚ü® PE.cong _[ _ , _ ]‚ÇÅ‚ÇÄ $ subst-Œ≤-prodrec A _ ‚ü©
    A [ œÉ ‚áë ] [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ [ t , u ]‚ÇÅ‚ÇÄ    ‚â°‚ü® [1,0]‚Üë¬≤[,] (A [ _ ]) ‚ü©
    A [ œÉ ‚áë ] [ prod ∑ p t u ]‚ÇÄ                               ‚àé

opaque

  -- Reducibility of equality between applications of prodrec.

  ‚ä©prodrec‚â°prodrec :
    ‚àá ¬ª Œî ‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä¢ C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    ‚àá ¬ª Œî ‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    ‚àá ¬ª Œî ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    ‚àá ¬ª Œî ‚àô A ‚àô B ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    ‚àá ¬ª Œî ‚àô A ‚àô B ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    ‚¶É inc : Var-included or-empty Œó ‚¶Ñ ‚Üí
    ‚àá ¬ª Œó ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œî ‚Üí
    ‚àá ¬ª Œó ‚ä©‚ü® l ‚ü© prodrec r p q C‚ÇÅ t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚â°
      prodrec r p q C‚ÇÇ t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ C‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]
  ‚ä©prodrec‚â°prodrec
    {‚àá} {p} {q‚Ä≤} {A} {B} {C‚ÇÅ} {C‚ÇÇ} {l} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {Œó} {œÉ‚ÇÅ} {œÉ‚ÇÇ}
    {r} {q} ‚ä¢C‚ÇÅ‚â°C‚ÇÇ C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢u‚ÇÅ‚â°u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä¢‚â° ‚ä¢C‚ÇÅ‚â°C‚ÇÇ of Œª
      (‚ä¢C‚ÇÅ , ‚ä¢C‚ÇÇ) ‚Üí
    case wf-‚ä©·µõ‚â° C‚ÇÅ‚â°C‚ÇÇ of Œª
      (‚ä©C‚ÇÅ , _) ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , _) ‚Üí
    case escape-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ of Œª
      ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
    case wf-‚ä¢À¢ ∑‚â°‚à∑ ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (_ , ‚ä¢œÉ‚ÇÅ , ‚ä¢œÉ‚ÇÇ) ‚Üí
    case subst-‚ä¢-‚áë ‚ä¢C‚ÇÅ ‚ä¢œÉ‚ÇÅ of Œª
      ‚ä¢C‚ÇÅ[œÉ‚ÇÅ‚áë] ‚Üí
    case subst-‚ä¢-‚áë ‚ä¢C‚ÇÇ ‚ä¢œÉ‚ÇÇ of Œª
      ‚ä¢C‚ÇÇ[œÉ‚ÇÇ‚áë] ‚Üí
    case R.‚ä©‚â°‚Üí $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] (refl-‚ä©·µõ‚â° $ wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)
           œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] ‚Üí
    case ‚ä©Œ†Œ£‚Üí (wf-‚ä©‚â° Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] .proj‚ÇÅ) of Œª
      (ok , _ , _) ‚Üí
    case ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case wf-‚ä©‚â°‚à∑ $ R.‚ä©‚â°‚à∑‚Üí t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] of Œª
      (‚ä©t‚ÇÅ[œÉ‚ÇÅ] , ‚ä©t‚ÇÇ[œÉ‚ÇÇ]) ‚Üí
    case conv-‚ä©‚à∑ Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] ‚ä©t‚ÇÇ[œÉ‚ÇÇ] of Œª
      ‚ä©t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case wf-‚ä¢‚â°‚à∑ ‚ä¢u‚ÇÅ‚â°u‚ÇÇ of Œª
      (_ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ) ‚Üí
    case PE.subst (_‚ä¢_‚à∑_ _ _) (subst-Œ≤-prodrec C‚ÇÅ _) $
         subst-‚ä¢‚à∑-‚áë ‚ä¢u‚ÇÅ ‚ä¢œÉ‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë] ‚Üí
    case PE.subst (_‚ä¢_‚à∑_ _ _) (subst-Œ≤-prodrec C‚ÇÇ _) $
         subst-‚ä¢‚à∑-‚áë (conv ‚ä¢u‚ÇÇ (subst‚Üë¬≤TypeEq-prod ‚ä¢C‚ÇÅ‚â°C‚ÇÇ)) ‚ä¢œÉ‚ÇÇ of Œª
      ‚ä¢u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë] ‚Üí
    case ‚ä©‚â°‚à∑Œ£ ∑‚áî .proj‚ÇÅ $ R.‚ä©‚â°‚à∑‚Üí t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] of Œª
      (_ , v‚ÇÅ , v‚ÇÇ , t‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ , t‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ , _ , v‚ÇÅ‚â°v‚ÇÇ‚à∑Œ£ ∑) ‚Üí
    case conv* t‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ $
         ‚âÖ-eq $ escape-‚ä©‚â° Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] of Œª
      t‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ ‚Üí
    case ‚ä©‚à∑-‚áí* t‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ ‚ä©t‚ÇÅ[œÉ‚ÇÅ] of Œª
      t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ ‚Üí
    case ‚ä©‚à∑-‚áí* t‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ ‚ä©t‚ÇÇ[œÉ‚ÇÇ] of Œª
      t‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ ‚Üí
    case
      v‚ÇÅ                                      ‚â°Àò‚ü® t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ ‚ü©‚ä©‚à∑
      t‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) [ œÉ‚ÇÅ ]  ‚â°‚ü® R.‚ä©‚â°‚à∑‚Üí t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑
                                               ‚ü® Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑
      t‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑ (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) [ œÉ‚ÇÇ ]  ‚â°‚ü® t‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ ‚ü©‚ä©‚à∑‚àé‚à∑
      v‚ÇÇ                                      ‚àé
    of Œª
      v‚ÇÅ‚â°v‚ÇÇ ‚Üí
    case R.‚ä©‚â°‚Üí $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ) of Œª
      C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]‚â°C‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ] ‚Üí
    case wf-‚ä©‚â° C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]‚â°C‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ] of Œª
      (‚ä©C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ] , _) ‚Üí
    case ‚âÖ-eq $ escape-‚ä©‚â° C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]‚â°C‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ] of Œª
      C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]‚â°C‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ] ‚Üí
    case
      ‚àá ¬ª Œó ‚ä©‚ü® l ‚ü© prodrec r p q (C‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) v‚ÇÅ (u‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ]) ‚â°
        prodrec r p q (C‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) v‚ÇÇ (u‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ]) ‚à∑
        C‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ v‚ÇÅ ]‚ÇÄ ‚àã
      (case v‚ÇÅ‚â°v‚ÇÇ‚à∑Œ£ ∑ of Œª where
         (prod‚Çô {t‚ÇÅ‚ÇÅ = v‚ÇÅ‚ÇÅ} {t‚ÇÇ‚ÇÅ = v‚ÇÇ‚ÇÅ} {t‚ÇÅ‚ÇÇ = v‚ÇÅ‚ÇÇ} {t‚ÇÇ‚ÇÇ = v‚ÇÇ‚ÇÇ}
            v‚ÇÅ‚ÇÅ‚â°v‚ÇÇ‚ÇÅ v‚ÇÅ‚ÇÇ‚â°v‚ÇÇ‚ÇÇ) ‚Üí
           case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚ÇÅ‚â°v‚ÇÇ‚ÇÅ of Œª
             (‚ä©v‚ÇÅ‚ÇÅ , ‚ä©v‚ÇÇ‚ÇÅ) ‚Üí
           case conv-‚ä©‚à∑
                  (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ]
                     .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ)
                  ‚ä©v‚ÇÇ‚ÇÅ of Œª
             ‚ä©v‚ÇÇ‚ÇÅ ‚Üí
           case wf-‚ä©‚â°‚à∑ v‚ÇÅ‚ÇÇ‚â°v‚ÇÇ‚ÇÇ of Œª
             (‚ä©v‚ÇÅ‚ÇÇ , ‚ä©v‚ÇÇ‚ÇÇ) ‚Üí
           case conv-‚ä©‚à∑ (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ] v‚ÇÅ‚ÇÅ‚â°v‚ÇÇ‚ÇÅ)
                  ‚ä©v‚ÇÇ‚ÇÇ of Œª
             ‚ä©v‚ÇÇ‚ÇÇ ‚Üí

           prodrec r p q (C‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) (prod ∑ p v‚ÇÅ‚ÇÅ v‚ÇÅ‚ÇÇ) (u‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ])  ‚áí‚ü® prodrec-Œ≤ ‚ä¢C‚ÇÅ[œÉ‚ÇÅ‚áë] (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ‚ÇÅ) (escape-‚ä©‚à∑ ‚ä©v‚ÇÅ‚ÇÇ)
                                                                               ‚ä¢u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë] PE.refl ok ‚ü©‚ä©‚à∑
           u‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ] [ v‚ÇÅ‚ÇÅ , v‚ÇÅ‚ÇÇ ]‚ÇÅ‚ÇÄ ‚à∑ C‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ v‚ÇÅ ]‚ÇÄ            ‚â°‚ü® level-‚ä©‚â°‚à∑ ‚ä©C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ] $
                                                                             PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) ([1,0]‚Üë¬≤[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë][,]‚ÇÄ C‚ÇÅ) $
                                                                             R.‚ä©‚â°‚à∑‚Üí $
                                                                             ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ‚à∑
                                                                               u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÅ‚ÇÅ‚â°v‚ÇÇ‚ÇÅ) (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÅ‚ÇÇ‚â°v‚ÇÇ‚ÇÇ) ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                           ‚ü® C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]‚â°C‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ] ‚ü©‚áí
           u‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ] [ v‚ÇÇ‚ÇÅ , v‚ÇÇ‚ÇÇ ]‚ÇÅ‚ÇÄ ‚à∑ C‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ v‚ÇÇ ]‚ÇÄ            ‚áê‚ü® prodrec-Œ≤ ‚ä¢C‚ÇÇ[œÉ‚ÇÇ‚áë] (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ‚ÇÅ) (escape-‚ä©‚à∑ ‚ä©v‚ÇÇ‚ÇÇ)
                                                                               ‚ä¢u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë] PE.refl ok
                                                                           ‚ü©‚àé‚à∑
           prodrec r p q (C‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) (prod ∑ p v‚ÇÇ‚ÇÅ v‚ÇÇ‚ÇÇ) (u‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ])  ‚àé

         (ne v‚ÇÅ-ne v‚ÇÇ-ne v‚ÇÅ~v‚ÇÇ) ‚Üí
           neutral-‚ä©‚â°‚à∑ ‚ä©C‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ]
             (prodrec‚Çô v‚ÇÅ-ne) (prodrec‚Çô v‚ÇÇ-ne) $
           ~-prodrec
             (with-inc-‚ä¢‚âÖ (subst-‚ä¢‚â° ‚ä¢C‚ÇÅ‚â°C‚ÇÇ (‚ä¢À¢ ∑‚â°‚à∑-‚áë (‚âÖ-eq (escape-‚ä©‚â° Œ£AB[œÉ‚ÇÅ]‚â°Œ£AB[œÉ‚ÇÇ])) ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ)) $
              R.escape-‚ä©‚â° ‚¶É inc = included ‚¶Ñ $
              ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
             v‚ÇÅ~v‚ÇÇ
             (PE.subst (_‚ä¢_‚âÖ_‚à∑_ _ _ _) (subst-Œ≤-prodrec C‚ÇÅ _) $
              with-inc-‚ä¢‚âÖ‚à∑ (subst-‚ä¢‚â°‚à∑-‚áë ‚ä¢u‚ÇÅ‚â°u‚ÇÇ ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ) $
              R.escape-‚ä©‚â°‚à∑ ‚¶É inc = included ‚¶Ñ $
              ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ) ok)
    of Œª
      lemma ‚Üí
                                  ‚à∑ C‚ÇÅ [ t‚ÇÅ ]‚ÇÄ [ œÉ‚ÇÅ ]             ‚ü® singleSubstLift C‚ÇÅ _ ‚ü©‚ä©‚à∑‚à∑‚â°

    prodrec r p q C‚ÇÅ t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚à∑ C‚ÇÅ [ œÉ‚ÇÅ ‚áë ] [ t‚ÇÅ [ œÉ‚ÇÅ ] ]‚ÇÄ  ‚áí*‚ü® prodrec-subst* ‚ä¢C‚ÇÅ[œÉ‚ÇÅ‚áë] t‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ ‚ä¢u‚ÇÅ[œÉ‚ÇÅ‚áë‚áë] ‚ü©‚ä©‚à∑‚à∑

    prodrec r p q (C‚ÇÅ [ œÉ‚ÇÅ ‚áë ]) v‚ÇÅ (u‚ÇÅ [ œÉ‚ÇÅ ‚áë ‚áë ])              ‚â°‚ü® conv-‚ä©‚â°‚à∑
                                                                     (R.‚ä©‚â°‚Üí $
                                                                      ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©C‚ÇÅ)
                                                                        (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) (R.‚Üí‚ä©‚â°‚à∑ $ sym-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ))
                                                                     lemma ‚ü©‚ä©‚à∑‚áê*
                                                                 ‚ü® ‚âÖ-eq $ R.escape-‚ä©‚â° $
                                                                   ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ C‚ÇÅ‚â°C‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚áí
    prodrec r p q (C‚ÇÇ [ œÉ‚ÇÇ ‚áë ]) v‚ÇÇ (u‚ÇÇ [ œÉ‚ÇÇ ‚áë ‚áë ]) ‚à∑
      C‚ÇÇ [ œÉ‚ÇÇ ‚áë ] [ t‚ÇÇ [ œÉ‚ÇÇ ] ]‚ÇÄ                                ‚áê*‚ü® prodrec-subst* ‚ä¢C‚ÇÇ[œÉ‚ÇÇ‚áë] t‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ ‚ä¢u‚ÇÇ[œÉ‚ÇÇ‚áë‚áë] ‚ü©‚àé‚à∑
    prodrec r p q C‚ÇÇ t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ]                               ‚àé

opaque

  -- Validity of equality preservation for prodrec.

  prodrec-cong·µõ :
    Œì ¬ª‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä¢ C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œì ¬ª‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä©·µõ‚ü® l ‚ü© C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prodrec r p q C‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° prodrec r p q C‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑
      C‚ÇÅ [ t‚ÇÅ ]‚ÇÄ
  prodrec-cong·µõ ‚ä¢C‚ÇÅ‚â°C‚ÇÇ C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢u‚ÇÅ‚â°u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ (wf-‚ä©·µõ‚â° C‚ÇÅ‚â°C‚ÇÇ .proj‚ÇÅ) (wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ)
      , Œª Œæ‚äá ‚Üí ‚ä©prodrec‚â°prodrec (defn-wkEq Œæ‚äá ‚ä¢C‚ÇÅ‚â°C‚ÇÇ)
                                (defn-wk-‚ä©·µõ‚â° Œæ‚äá C‚ÇÅ‚â°C‚ÇÇ)
                                (defn-wk-‚ä©·µõ‚â°‚à∑ Œæ‚äá t‚ÇÅ‚â°t‚ÇÇ)
                                (defn-wkEqTerm Œæ‚äá ‚ä¢u‚ÇÅ‚â°u‚ÇÇ)
                                (defn-wk-‚ä©·µõ‚â°‚à∑ Œæ‚äá u‚ÇÅ‚â°u‚ÇÇ)
      )

opaque

  -- Validity of prodrec.

  prodrec·µõ :
    Œì ¬ª‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä¢ C ‚Üí
    Œì ¬ª‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä©·µõ‚ü® l ‚ü© C ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä¢ u ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prodrec r p q C t u ‚à∑ C [ t ]‚ÇÄ
  prodrec·µõ ‚ä¢C ‚ä©C ‚ä©t ‚ä¢u ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    prodrec-cong·µõ (refl ‚ä¢C) (refl-‚ä©·µõ‚â° ‚ä©C) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl ‚ä¢u)
      (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

opaque

  -- Validity of prodrec-Œ≤.

  prodrec-Œ≤·µõ :
    Œì ¬ª‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä¢ C ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä¢ v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä©·µõ‚ü® l ‚ü© v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prodrec r p q C (prod ∑ p t u) v ‚â° v [ t , u ]‚ÇÅ‚ÇÄ ‚à∑
      C [ prod ∑ p t u ]‚ÇÄ
  prodrec-Œ≤·µõ {B} {C} {v} ‚ä¢C ‚ä©t ‚ä©u ‚ä¢v ‚ä©v =
    ‚ä©·µõ‚à∑-‚áê
      (Œª Œæ‚äá ‚ä©œÉ ‚Üí
         let _ , ‚ä¢œÉ = escape-‚ä©À¢‚à∑ ‚ä©œÉ
             ‚ä¢C = defn-wk Œæ‚äá ‚ä¢C
             ‚ä©t = defn-wk-‚ä©·µõ‚à∑ Œæ‚äá ‚ä©t
             ‚ä©u = defn-wk-‚ä©·µõ‚à∑ Œæ‚äá ‚ä©u
             ‚ä¢v = defn-wkTerm Œæ‚äá ‚ä¢v
             ‚ä©v = defn-wk-‚ä©·µõ‚à∑ Œæ‚äá ‚ä©v
         in
         PE.subst‚ÇÇ (_‚ä¢_‚áí_‚à∑_ _ _) (PE.sym $ [,]-[]-commute v)
           (PE.sym $ singleSubstLift C _) $
         prodrec-Œ≤-‚áí (subst-‚ä¢-‚áë ‚ä¢C ‚ä¢œÉ)
           (R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B _) $
            R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (subst-Œ≤-prodrec C _) $
            subst-‚ä¢‚à∑-‚áë ‚ä¢v ‚ä¢œÉ))
      (PE.subst (_‚ä©·µõ‚ü®_‚ü©_‚à∑_ _ _ _) ([1,0]‚Üë¬≤[,] C) $
       ‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ‚à∑ ‚ä©v ‚ä©t ‚ä©u)
