------------------------------------------------------------------------
-- Validity for strong Œ£-types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module
  Definition.LogicalRelation.Substitution.Introductions.Sigma.Strong
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Hidden R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
open import
  Definition.LogicalRelation.Substitution.Introductions.Pi-Sigma R

open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction R
import Definition.Typed.Weakening R as W
open import Definition.Typed.Well-formed R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Function
open import Tools.Product
import Tools.PropositionalEquality as PE

private variable
  Œì Œî                 : Con Term _
  A B t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ : Term _
  œÉ‚ÇÅ œÉ‚ÇÇ               : Subst _ _
  p q                 : M
  l l‚Ä≤ l‚Ä≥ l‚Ä¥          : Universe-level

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Œ£À¢‚áî :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ Œª u ‚Üí
     Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     Product u √ó
     Œì ‚ä¢‚âÖ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© fst p u ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© snd p u ‚à∑ B [ fst p u ]‚ÇÄ)
  ‚ä©‚à∑Œ£À¢‚áî {Œì} {t} {p} {q} {A} {B} =
      (Œª (‚ä©Œ£ , ‚ä©t) ‚Üí
         case B-elim _ ‚ä©Œ£ of Œª
           ‚ä©Œ£‚Ä≤ ‚Üí
         ‚ä©Œ£ , lemma‚ÇÅ ‚ä©Œ£‚Ä≤ (irrelevanceTerm ‚ä©Œ£ (B-intr _ ‚ä©Œ£‚Ä≤) ‚ä©t))
    , (Œª (‚ä©Œ£ , rest) ‚Üí
         case B-elim _ ‚ä©Œ£ of Œª
           ‚ä©Œ£‚Ä≤ ‚Üí
         B-intr _ ‚ä©Œ£‚Ä≤ , lemma‚ÇÇ ‚ä©Œ£‚Ä≤ rest)
    where
    lemma‚ÇÅ :
      (‚ä©Œ£ : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ£ ùï§ p q) ‚ä©Œ£ ‚Üí
      ‚àÉ Œª u ‚Üí
      Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
      Product u √ó
      Œì ‚ä¢‚âÖ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
      Œì ‚ä©‚ü® l ‚ü© fst p u ‚à∑ A √ó
      Œì ‚ä©‚ü® l ‚ü© snd p u ‚à∑ B [ fst p u ]‚ÇÄ
    lemma‚ÇÅ (emb ‚â§·µò-refl ‚ä©Œ£) ‚ä©t =
      case lemma‚ÇÅ ‚ä©Œ£ ‚ä©t of Œª
        (u , t‚áí*u , u-prod , u‚âÖu , ‚ä©fst-u , ‚ä©snd-u) ‚Üí
        u , t‚áí*u , u-prod , u‚âÖu
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©fst-u
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©snd-u
    lemma‚ÇÅ (emb (‚â§·µò-step l<) ‚ä©Œ£) ‚ä©t =
      case lemma‚ÇÅ (emb l< ‚ä©Œ£) ‚ä©t of Œª
        (u , t‚áí*u , u-prod , u‚âÖu , ‚ä©fst-u , ‚ä©snd-u) ‚Üí
        u , t‚áí*u , u-prod , u‚âÖu
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©fst-u
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©snd-u
    lemma‚ÇÅ
      {l} ‚ä©Œ£@(noemb (B·µ£ _ _ Œ£‚áí*Œ£ _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u , t‚áí*u , u‚âÖu , u-prod , ‚ä©fst-u , ‚ä©snd-u) =
      case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      (‚àÉ Œª u ‚Üí
       Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Product u √ó
       Œì ‚ä¢‚âÖ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä©‚ü® l ‚ü© fst p u ‚à∑ A √ó
       Œì ‚ä©‚ü® l ‚ü© snd p u ‚à∑ B [ fst p u ]‚ÇÄ) ‚àã
        u , t‚áí*u , u-prod , u‚âÖu
      , PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (wk-id _)
          (‚ä©wk-A _ , ‚ä©fst-u)
      , PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B)
          (‚ä©wk-B _ ‚ä©fst-u , ‚ä©snd-u) }

    lemma‚ÇÇ :
      (‚ä©Œ£ : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      (‚àÉ Œª u ‚Üí
       Œì ‚ä¢ t ‚áí* u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Product u √ó
       Œì ‚ä¢‚âÖ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä©‚ü® l ‚ü© fst p u ‚à∑ A √ó
       Œì ‚ä©‚ü® l ‚ü© snd p u ‚à∑ B [ fst p u ]‚ÇÄ) ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ£ ùï§ p q) ‚ä©Œ£
    lemma‚ÇÇ (emb 0<1 ‚ä©Œ£) rest =
      irrelevanceTerm (B-intr _ ‚ä©Œ£) (B-intr _ (emb 0<1 ‚ä©Œ£)) $
      lemma‚ÇÇ ‚ä©Œ£ rest
    lemma‚ÇÇ
      ‚ä©Œ£@(noemb (B·µ£ _ _ Œ£‚áí*Œ£ _ ‚ä©wk-A ‚ä©wk-B _ _))
      (u , t‚áí*u , u‚âÖu , u-prod , ‚ä©fst-u , ‚ä©snd-u) =
      case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / B-intr _ ‚ä©Œ£ ‚àã
        u , t‚áí*u , u-prod , u‚âÖu
      , ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-A _)
          (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) ‚ä©fst-u)
      , ‚ä©‚à∑‚Üí‚ä©‚à∑/ (‚ä©wk-B _ _)
          (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _)
             (PE.sym $ PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B) ‚ä©snd-u) }

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Œ£À¢‚áî :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
     Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     Product u‚ÇÅ √ó
     Product u‚ÇÇ √ó
     Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
     Œì ‚ä©‚ü® l ‚ü© fst p u‚ÇÅ ‚â° fst p u‚ÇÇ ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© snd p u‚ÇÅ ‚â° snd p u‚ÇÇ ‚à∑ B [ fst p u‚ÇÅ ]‚ÇÄ)
  ‚ä©‚â°‚à∑Œ£À¢‚áî {Œì} {t‚ÇÅ} {t‚ÇÇ} {p} {q} {A} {B} =
      (Œª (‚ä©Œ£ , _ , _ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
         case B-elim _ ‚ä©Œ£ of Œª
           ‚ä©Œ£‚Ä≤ ‚Üí
         ‚ä©Œ£ , lemma‚ÇÅ ‚ä©Œ£‚Ä≤ (irrelevanceEqTerm ‚ä©Œ£ (B-intr _ ‚ä©Œ£‚Ä≤) t‚ÇÅ‚â°t‚ÇÇ))
    , (Œª (‚ä©Œ£ , rest) ‚Üí
         case B-elim _ ‚ä©Œ£ of Œª
           ‚ä©Œ£‚Ä≤ ‚Üí
         B-intr _ ‚ä©Œ£‚Ä≤ , lemma‚ÇÇ ‚ä©Œ£‚Ä≤ rest)
    where
    lemma‚ÇÅ :
      (‚ä©Œ£ : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / B-intr (BŒ£ ùï§ p q) ‚ä©Œ£ ‚Üí
      ‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
      Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
      Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
      Product u‚ÇÅ √ó
      Product u‚ÇÇ √ó
      Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
      Œì ‚ä©‚ü® l ‚ü© fst p u‚ÇÅ ‚â° fst p u‚ÇÇ ‚à∑ A √ó
      Œì ‚ä©‚ü® l ‚ü© snd p u‚ÇÅ ‚â° snd p u‚ÇÇ ‚à∑ B [ fst p u‚ÇÅ ]‚ÇÄ
    lemma‚ÇÅ (emb ‚â§·µò-refl ‚ä©Œ£) t‚ÇÅ‚â°t‚ÇÇ =
      case lemma‚ÇÅ ‚ä©Œ£ t‚ÇÅ‚â°t‚ÇÇ of Œª
        (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ ,
         fst‚â°fst , snd‚â°snd) ‚Üí
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ
      , emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) fst‚â°fst
      , emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) snd‚â°snd
    lemma‚ÇÅ (emb (‚â§·µò-step l<) ‚ä©Œ£) t‚ÇÅ‚â°t‚ÇÇ =
      case lemma‚ÇÅ (emb l< ‚ä©Œ£) t‚ÇÅ‚â°t‚ÇÇ of Œª
        (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ ,
         fst‚â°fst , snd‚â°snd) ‚Üí
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ
      , emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) fst‚â°fst
      , emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) snd‚â°snd
    lemma‚ÇÅ
      {l} ‚ä©Œ£@(noemb (B·µ£ _ _ Œ£‚áí*Œ£ _ ‚ä©wk-A ‚ä©wk-B wk-B‚â°wk-B _))
      (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ ,
       u‚ÇÅ-prod , u‚ÇÇ-prod , ‚ä©fst-u‚ÇÅ , ‚ä©fst-u‚ÇÇ , fst‚â°fst , snd‚â°snd) =
      let ‚ä©Œ£‚Ä≤ = B-intr _ ‚ä©Œ£ in
      case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      case ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÅ (‚ä©‚à∑-intro ‚ä©Œ£‚Ä≤ ‚ä©t‚ÇÅ) of Œª
        (_ , _ , t‚ÇÅ‚áí*u‚ÇÅ‚Ä≤ , u‚ÇÅ‚Ä≤-prod , _ , _ , ‚ä©snd-u‚ÇÅ) ‚Üí
      case ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÅ (‚ä©‚à∑-intro ‚ä©Œ£‚Ä≤ ‚ä©t‚ÇÇ) of Œª
        (_ , _ , t‚ÇÇ‚áí*u‚ÇÇ‚Ä≤ , u‚ÇÇ‚Ä≤-prod , _ , _ , ‚ä©snd-u‚ÇÇ) ‚Üí
      case whrDet*Term (t‚ÇÅ‚áí*u‚ÇÅ , productWhnf u‚ÇÅ-prod)
             (t‚ÇÅ‚áí*u‚ÇÅ‚Ä≤ , productWhnf u‚ÇÅ‚Ä≤-prod) of Œª {
        PE.refl ‚Üí
      case whrDet*Term (t‚ÇÇ‚áí*u‚ÇÇ , productWhnf u‚ÇÇ-prod)
             (t‚ÇÇ‚áí*u‚ÇÇ‚Ä≤ , productWhnf u‚ÇÇ‚Ä≤-prod) of Œª {
        PE.refl ‚Üí
      let ‚ä©B[fst-u‚ÇÅ] = ‚ä©wk-B _ ‚ä©fst-u‚ÇÅ in
      (‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
       Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Product u‚ÇÅ √ó
       Product u‚ÇÇ √ó
       Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä©‚ü® l ‚ü© fst p u‚ÇÅ ‚â° fst p u‚ÇÇ ‚à∑ A √ó
       Œì ‚ä©‚ü® l ‚ü© snd p u‚ÇÅ ‚â° snd p u‚ÇÇ ‚à∑ B [ fst p u‚ÇÅ ]‚ÇÄ) ‚àã
        u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ
      , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (wk-id _)
          (‚ä©wk-A _ , ‚ä©fst-u‚ÇÅ , ‚ä©fst-u‚ÇÇ , fst‚â°fst)
      , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B)
          ( ‚ä©B[fst-u‚ÇÅ]
          , ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©B[fst-u‚ÇÅ]
              (PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _)
                 (PE.sym $ PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B) ‚ä©snd-u‚ÇÅ)
          , ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©B[fst-u‚ÇÅ]
              (conv-‚ä©‚à∑
                 (sym-‚ä©‚â°
                    ( ‚ä©B[fst-u‚ÇÅ] , ‚ä©wk-B _ ‚ä©fst-u‚ÇÇ
                    , wk-B‚â°wk-B _ ‚ä©fst-u‚ÇÅ ‚ä©fst-u‚ÇÇ fst‚â°fst
                    )) $
               PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _)
                 (PE.sym $ PE.cong _[ _ ]‚ÇÄ $ wk-lift-id B) ‚ä©snd-u‚ÇÇ)
          , snd‚â°snd
          ) }}}

    lemma‚ÇÇ :
      (‚ä©Œ£ : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©B‚ü® BŒ£ ùï§ p q ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚Üí
      (‚àÉ‚ÇÇ Œª u‚ÇÅ u‚ÇÇ ‚Üí
       Œì ‚ä¢ t‚ÇÅ ‚áí* u‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä¢ t‚ÇÇ ‚áí* u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Product u‚ÇÅ √ó
       Product u‚ÇÇ √ó
       Œì ‚ä¢ u‚ÇÅ ‚âÖ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B √ó
       Œì ‚ä©‚ü® l ‚ü© fst p u‚ÇÅ ‚â° fst p u‚ÇÇ ‚à∑ A √ó
       Œì ‚ä©‚ü® l ‚ü© snd p u‚ÇÅ ‚â° snd p u‚ÇÇ ‚à∑ B [ fst p u‚ÇÅ ]‚ÇÄ) ‚Üí
      let ‚ä©Œ£‚Ä≤ = B-intr (BŒ£ ùï§ p q) ‚ä©Œ£ in
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ£‚Ä≤ √ó
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ£‚Ä≤ √ó
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B / ‚ä©Œ£‚Ä≤
    lemma‚ÇÇ (emb l< ‚ä©Œ£) rest =
      let ‚ä©Œ£‚ÇÅ = B-intr _ ‚ä©Œ£
          ‚ä©Œ£‚ÇÇ = B-intr _ (emb l< ‚ä©Œ£)
      in
      case lemma‚ÇÇ ‚ä©Œ£ rest of Œª
        (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
        irrelevanceTerm ‚ä©Œ£‚ÇÅ ‚ä©Œ£‚ÇÇ ‚ä©t‚ÇÅ
      , irrelevanceTerm ‚ä©Œ£‚ÇÅ ‚ä©Œ£‚ÇÇ ‚ä©t‚ÇÇ
      , irrelevanceEqTerm ‚ä©Œ£‚ÇÅ ‚ä©Œ£‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
    lemma‚ÇÇ
      ‚ä©Œ£@(noemb (B·µ£ _ _ Œ£‚áí*Œ£ A‚â°A ‚ä©wk-A ‚ä©wk-B _ _))
      (u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod , u‚ÇÅ‚âÖu‚ÇÇ ,
       fst‚â°fst , snd‚â°snd) =
      let ‚ä©Œ£‚Ä≤       = B-intr _ ‚ä©Œ£
          ‚ä©wk-id-A  = ‚ä©wk-A (W.id ∑ (wfEq (‚âÖ-eq A‚â°A)))
          ‚âÖu‚ÇÅ , ‚âÖu‚ÇÇ = wf-‚ä¢‚âÖ‚à∑ u‚ÇÅ‚âÖu‚ÇÇ
      in
      case B-PE-injectivity _ _ $ whnfRed* Œ£‚áí*Œ£ Œ†Œ£‚Çô of Œª {
        (PE.refl , PE.refl , _) ‚Üí
      case wf-‚ä©‚â°‚à∑ $
           level-‚ä©‚â°‚à∑ (PE.subst (_‚ä©‚ü®_‚ü©_ _ _) (wk-id _) ‚ä©wk-id-A)
             fst‚â°fst of Œª
        (‚ä©fst-u‚ÇÅ , ‚ä©fst-u‚ÇÇ) ‚Üí
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©wk-id-A $
           PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) ‚ä©fst-u‚ÇÅ of Œª
        ‚ä©fst-u‚ÇÅ‚Ä≤ ‚Üí
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©wk-id-A $
           PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (PE.sym $ wk-id _) ‚ä©fst-u‚ÇÇ of Œª
        ‚ä©fst-u‚ÇÇ‚Ä≤ ‚Üí
      case ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ ‚ä©wk-id-A $
           PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ wk-id _) fst‚â°fst of Œª
        fst‚â°fst‚Ä≤ ‚Üí
      case wf-‚ä©‚â°‚à∑ snd‚â°snd of Œª
        (‚ä©snd-u‚ÇÅ , ‚ä©snd-u‚ÇÇ) ‚Üí
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©Œ£‚Ä≤ $
           ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÇ
             ( ‚ä©Œ£‚Ä≤
             , u‚ÇÅ , t‚ÇÅ‚áí*u‚ÇÅ , u‚ÇÅ-prod , ‚âÖu‚ÇÅ
             , ‚ä©fst-u‚ÇÅ
             , level-‚ä©‚à∑ (‚ä©Œ†Œ£‚Üí‚ä©‚à∑‚Üí‚ä©[]‚ÇÄ ‚ä©Œ£‚Ä≤ ‚ä©fst-u‚ÇÅ) ‚ä©snd-u‚ÇÅ
             ) of Œª
        ‚ä©t‚ÇÅ ‚Üí
      case ‚ä©‚à∑‚Üí‚ä©‚à∑/ ‚ä©Œ£‚Ä≤ $
           ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÇ
             ( ‚ä©Œ£‚Ä≤
             , u‚ÇÇ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÇ-prod , ‚âÖu‚ÇÇ
             , ‚ä©fst-u‚ÇÇ
             , conv-‚ä©‚à∑ (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£‚Ä≤) fst‚â°fst)
                 ‚ä©snd-u‚ÇÇ
             ) of Œª
        ‚ä©t‚ÇÇ ‚Üí
      _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©Œ£‚Ä≤ √ó _ ‚ä©‚ü® _ ‚ü© _ ‚à∑ _ / ‚ä©Œ£‚Ä≤ √ó
        _ ‚ä©‚ü® _ ‚ü© _ ‚â° _ ‚à∑ _ / ‚ä©Œ£‚Ä≤ ‚àã
        ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ
      , ( u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , u‚ÇÅ‚âÖu‚ÇÇ , ‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ
        , u‚ÇÅ-prod , u‚ÇÇ-prod , ‚ä©fst-u‚ÇÅ‚Ä≤ , ‚ä©fst-u‚ÇÇ‚Ä≤ , fst‚â°fst‚Ä≤
        , ‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑/ (‚ä©wk-B _ ‚ä©fst-u‚ÇÅ‚Ä≤)
            (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _)
               (PE.sym $ PE.cong _[ _ ] $ wk-lift-id B) snd‚â°snd)
        ) }

------------------------------------------------------------------------
-- The projection fst

opaque

  -- Reducibility of equality between applications of fst.

  ‚ä©fst‚â°fst :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© fst p t‚ÇÅ ‚â° fst p t‚ÇÇ ‚à∑ A
  ‚ä©fst‚â°fst {t‚ÇÅ} {t‚ÇÇ} {p} t‚ÇÅ‚â°t‚ÇÇ =
    case ‚ä©Œ†Œ£‚Üí $ wf-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ of Œª
      (_ , _ , ‚ä©B) ‚Üí
    case escape-‚ä© ‚ä©B of Œª
      ‚ä¢B ‚Üí
    case ‚ä©‚â°‚à∑Œ£À¢‚áî .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (_ , u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , _ , _ , _ , fst-u‚ÇÅ‚â°fst-u‚ÇÇ , _) ‚Üí
    fst p t‚ÇÅ  ‚áí*‚ü® fst-subst* t‚ÇÅ‚áí*u‚ÇÅ ‚ü©‚ä©‚à∑
    fst p u‚ÇÅ  ‚â°‚ü® fst-u‚ÇÅ‚â°fst-u‚ÇÇ ‚ü©‚ä©‚à∑‚áê*
    fst p u‚ÇÇ  ‚áê*‚ü® fst-subst* t‚ÇÇ‚áí*u‚ÇÇ ‚ü©‚àé
    fst p t‚ÇÇ  ‚àé

opaque

  -- Validity of equality preservation for fst.

  fst-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© fst p t‚ÇÅ ‚â° fst p t‚ÇÇ ‚à∑ A
  fst-cong·µõ t‚ÇÅ‚â°t‚ÇÇ =
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ $ wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ of Œª
      (_ , ‚ä©A , _) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©A
      , ‚ä©fst‚â°fst ‚àò‚Üí ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ
      )

opaque

  -- Validity of fst.

  fst·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© fst p t ‚à∑ A
  fst·µõ ‚ä©t = ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $ fst-cong·µõ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t)

------------------------------------------------------------------------
-- The projection snd

opaque

  -- Reducibility of equality between applications of snd.

  ‚ä©snd‚â°snd :
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© snd p t‚ÇÅ ‚â° snd p t‚ÇÇ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ
  ‚ä©snd‚â°snd {t‚ÇÅ} {t‚ÇÇ} {p} {B} t‚ÇÅ‚â°t‚ÇÇ =
    case wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©‚à∑ ‚ä©t‚ÇÅ of Œª
      ‚ä©Œ£AB ‚Üí
    case ‚ä©‚â°‚à∑Œ£À¢‚áî .proj‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (_ , u‚ÇÅ , u‚ÇÇ , t‚ÇÅ‚áí*u‚ÇÅ , t‚ÇÇ‚áí*u‚ÇÇ , _ , _ , _ , _ , snd-u‚ÇÅ‚â°snd-u‚ÇÇ) ‚Üí
    case ‚ä©‚à∑-‚áí* t‚ÇÅ‚áí*u‚ÇÅ ‚ä©t‚ÇÅ of Œª
      t‚ÇÅ‚â°u‚ÇÅ ‚Üí
    snd p t‚ÇÅ                    ‚áí*‚ü® snd-subst* t‚ÇÅ‚áí*u‚ÇÅ ‚ü©‚ä©‚à∑
    snd p u‚ÇÅ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ  ‚â°‚ü® conv-‚ä©‚â°‚à∑
                                     (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) $
                                      sym-‚ä©‚â°‚à∑ $ ‚ä©fst‚â°fst t‚ÇÅ‚â°u‚ÇÅ)
                                     snd-u‚ÇÅ‚â°snd-u‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                 ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $
                                   ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) $
                                   ‚ä©fst‚â°fst t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚áí
    snd p u‚ÇÇ ‚à∑ B [ fst p t‚ÇÇ ]‚ÇÄ  ‚áê*‚ü® snd-subst* t‚ÇÇ‚áí*u‚ÇÇ ‚ü©‚àé‚à∑
    snd p t‚ÇÇ                    ‚àé

opaque

  -- Validity of equality preservation for snd.

  snd-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© snd p t‚ÇÅ ‚â° snd p t‚ÇÇ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ
  snd-cong·µõ {B} t‚ÇÅ‚â°t‚ÇÇ =
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , _) ‚Üí
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ $ wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ of Œª
      (_ , _ , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©B (fst·µõ ‚ä©t‚ÇÅ)
      , PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (PE.sym $ singleSubstLift B _) ‚àò‚Üí
        ‚ä©snd‚â°snd ‚àò‚Üí ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ
      )

opaque

  -- Validity of snd.

  snd·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© snd p t ‚à∑ B [ fst p t ]‚ÇÄ
  snd·µõ ‚ä©t =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    snd-cong·µõ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t)

------------------------------------------------------------------------
-- Equality rules

opaque

  -- Reducibility for Œ£-Œ≤‚ÇÅ.

  ‚ä©Œ£-Œ≤‚ÇÅ :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© fst p (prodÀ¢ p t u) ‚â° t ‚à∑ A
  ‚ä©Œ£-Œ≤‚ÇÅ {p} {B} {t} {u} ok ‚ä¢B ‚ä©t ‚ä¢u =
    case escape-‚ä©‚à∑ ‚ä©t of Œª
      ‚ä¢t ‚Üí
    ‚ä©‚à∑-‚áê*
      (fst p (prodÀ¢ p t u)  ‚áí‚ü® Œ£-Œ≤‚ÇÅ ‚ä¢B ‚ä¢t ‚ä¢u PE.refl ok ‚ü©
       t                    ‚àé‚ü® ‚ä¢t ‚ü©‚áí)
      ‚ä©t

opaque

  -- Validity of Œ£-Œ≤‚ÇÅ.

  Œ£-Œ≤‚ÇÅ·µõ :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© fst p (prodÀ¢ p t u) ‚â° t ‚à∑ A
  Œ£-Œ≤‚ÇÅ·µõ {B} ok ‚ä©B ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         Œ£-Œ≤‚ÇÅ (escape-‚ä© $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ)
           (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B _) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ)
           PE.refl ok)
      ‚ä©t

opaque

  -- Validity of Œ£-Œ≤‚ÇÇ.

  Œ£-Œ≤‚ÇÇ·µõ :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© snd p (prodÀ¢ p t u) ‚â° u ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ
  Œ£-Œ≤‚ÇÇ·µõ {B} ok ‚ä©B ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift B _) $
         Œ£-Œ≤‚ÇÇ (escape-‚ä© $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ)
           (escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B _) $
            escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ)
           PE.refl ok)
      (conv-‚ä©·µõ‚à∑
         (sym-‚ä©·µõ‚â° $
          ‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B) $
          Œ£-Œ≤‚ÇÅ·µõ ok ‚ä©B ‚ä©t ‚ä©u)
         ‚ä©u)

opaque

  -- Validity of Œ£-Œ∑.

  Œ£-Œ∑·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© fst p t‚ÇÅ ‚â° fst p t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© snd p t‚ÇÅ ‚â° snd p t‚ÇÇ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  Œ£-Œ∑·µõ {t‚ÇÅ} {p} {B} {t‚ÇÇ} ‚ä©t‚ÇÅ ‚ä©t‚ÇÇ fst-t‚ÇÅ‚â°fst-t‚ÇÇ snd-t‚ÇÅ‚â°snd-t‚ÇÇ =
    case wf-‚ä©·µõ‚à∑ ‚ä©t‚ÇÅ of Œª
      ‚ä©Œ£AB ‚Üí
    case ‚ä©·µõŒ†Œ£‚áî .proj‚ÇÅ ‚ä©Œ£AB of Œª
      (_ , ‚ä©A , ‚ä©B) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÇ
      ( ‚ä©t‚ÇÅ
      , level-‚ä©·µõ‚à∑ ‚ä©Œ£AB ‚ä©t‚ÇÇ
      , Œª {_ _} {œÉ = œÉ} ‚ä©œÉ ‚Üí
          case ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[] ‚ä©A ‚ä©œÉ of Œª
            ‚ä©A[œÉ] ‚Üí
          case ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÅ ‚ä©œÉ of Œª
            ‚ä©t‚ÇÅ[œÉ] ‚Üí
          case ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t‚ÇÇ ‚ä©œÉ of Œª
            ‚ä©t‚ÇÇ[œÉ] ‚Üí
          case ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÅ ‚ä©t‚ÇÅ[œÉ] of Œª
            (‚ä©Œ£AB[œÉ] , u‚ÇÅ , t‚ÇÅ[œÉ]‚áí*u‚ÇÅ , u‚ÇÅ-prod , _) ‚Üí
          case ‚ä©‚à∑Œ£À¢‚áî .proj‚ÇÅ ‚ä©t‚ÇÇ[œÉ] of Œª
            (_ , u‚ÇÇ , t‚ÇÇ[œÉ]‚áí*u‚ÇÇ , u‚ÇÇ-prod , _) ‚Üí
          case ‚ä©‚à∑-‚áí* t‚ÇÅ[œÉ]‚áí*u‚ÇÅ ‚ä©t‚ÇÅ[œÉ] of Œª
            t‚ÇÅ[œÉ]‚â°u‚ÇÅ ‚Üí
          case ‚ä©‚à∑-‚áí* t‚ÇÇ[œÉ]‚áí*u‚ÇÇ ‚ä©t‚ÇÇ[œÉ] of Œª
            t‚ÇÇ[œÉ]‚â°u‚ÇÇ ‚Üí
          case sym-‚ä©‚â°‚à∑ $ ‚ä©fst‚â°fst t‚ÇÅ[œÉ]‚â°u‚ÇÅ of Œª
            fst-u‚ÇÅ‚â°fst-t‚ÇÅ[œÉ] ‚Üí
          case
            fst p u‚ÇÅ        ‚â°‚ü® fst-u‚ÇÅ‚â°fst-t‚ÇÅ[œÉ] ‚ü©‚ä©‚à∑
            fst p t‚ÇÅ [ œÉ ]  ‚â°‚ü® ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ fst-t‚ÇÅ‚â°fst-t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ ‚ä©œÉ ‚ü©‚ä©‚à∑
            fst p t‚ÇÇ [ œÉ ]  ‚â°‚ü® level-‚ä©‚â°‚à∑ ‚ä©A[œÉ] $ ‚ä©fst‚â°fst t‚ÇÇ[œÉ]‚â°u‚ÇÇ ‚ü©‚ä©‚à∑‚àé
            fst p u‚ÇÇ        ‚àé
          of Œª
            fst-u‚ÇÅ‚â°fst-u‚ÇÇ ‚Üí
          case
            snd p u‚ÇÅ       ‚à∑ B [ œÉ ‚áë ] [ fst p u‚ÇÅ ]‚ÇÄ        ‚â°‚ü® ‚ä©snd‚â°snd $ sym-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ]‚â°u‚ÇÅ ‚ü©‚ä©‚à∑‚à∑
                                                             ‚ü® ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ)
                                                                 fst-u‚ÇÅ‚â°fst-t‚ÇÅ[œÉ] ‚ü©‚ä©‚à∑
            snd p t‚ÇÅ [ œÉ ] ‚à∑ B [ œÉ ‚áë ] [ fst p t‚ÇÅ [ œÉ ] ]‚ÇÄ  ‚â°‚ü® PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift B _) $
                                                               ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ snd-t‚ÇÅ‚â°snd-t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ ‚ä©œÉ ‚ü©‚ä©‚à∑‚à∑
                                                             ‚ü® ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ) $
                                                               ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ .proj‚ÇÅ fst-t‚ÇÅ‚â°fst-t‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ ‚ä©œÉ ‚ü©‚ä©‚à∑
            snd p t‚ÇÇ [ œÉ ] ‚à∑ B [ œÉ ‚áë ] [ fst p t‚ÇÇ [ œÉ ] ]‚ÇÄ  ‚â°‚ü® ‚ä©snd‚â°snd t‚ÇÇ[œÉ]‚â°u‚ÇÇ ‚ü©‚ä©‚à∑‚àé‚à∑
            snd p u‚ÇÇ                                        ‚àé
          of Œª
            snd-u‚ÇÅ‚â°snd-u‚ÇÇ ‚Üí
          ‚ä©‚â°‚à∑Œ£À¢‚áî .proj‚ÇÇ
            ( ‚ä©Œ£AB[œÉ]
            , u‚ÇÅ , u‚ÇÇ , t‚ÇÅ[œÉ]‚áí*u‚ÇÅ , t‚ÇÇ[œÉ]‚áí*u‚ÇÇ , u‚ÇÅ-prod , u‚ÇÇ-prod
            , ‚âÖ-Œ£-Œ∑ (escape-‚ä© $ ‚ä©·µõ‚Üí‚ä©À¢‚à∑‚Üí‚ä©[‚áë] ‚ä©B ‚ä©œÉ)
                (wf-‚ä¢‚â°‚à∑ (subset*Term t‚ÇÅ[œÉ]‚áí*u‚ÇÅ) .proj‚ÇÇ .proj‚ÇÇ)
                (wf-‚ä¢‚â°‚à∑ (subset*Term t‚ÇÇ[œÉ]‚áí*u‚ÇÇ) .proj‚ÇÇ .proj‚ÇÇ)
                u‚ÇÅ-prod u‚ÇÇ-prod
                (escape-‚ä©‚â°‚à∑ fst-u‚ÇÅ‚â°fst-u‚ÇÇ) (escape-‚ä©‚â°‚à∑ snd-u‚ÇÅ‚â°snd-u‚ÇÇ)
            , fst-u‚ÇÅ‚â°fst-u‚ÇÇ , snd-u‚ÇÅ‚â°snd-u‚ÇÇ
            )
      )

------------------------------------------------------------------------
-- Pairs

opaque

  -- Reducibility of equality between applications of prodÀ¢.

  ‚ä©prodÀ¢‚â°prodÀ¢ :
    Œì ‚ä©‚ü® l ‚ü© Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© prodÀ¢ p t‚ÇÅ u‚ÇÅ ‚â° prodÀ¢ p t‚ÇÇ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  ‚ä©prodÀ¢‚â°prodÀ¢ {p} {B} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} ‚ä©Œ£AB t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case ‚ä©Œ†Œ£‚Üí ‚ä©Œ£AB of Œª
      (ok , ‚ä©A , ‚ä©B) ‚Üí
    case wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , ‚ä©t‚ÇÇ) ‚Üí
    case wf-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case conv-‚ä©‚à∑ (‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) t‚ÇÅ‚â°t‚ÇÇ) ‚ä©u‚ÇÇ of Œª
      ‚ä©u‚ÇÇ ‚Üí
    case escape-‚ä© ‚ä©B of Œª
      ‚ä¢B ‚Üí
    case escape-‚ä©‚à∑ ‚ä©t‚ÇÅ of Œª
      ‚ä¢t‚ÇÅ ‚Üí
    case escape-‚ä©‚à∑ ‚ä©t‚ÇÇ of Œª
      ‚ä¢t‚ÇÇ ‚Üí
    case escape-‚ä©‚à∑ ‚ä©u‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ ‚Üí
    case escape-‚ä©‚à∑ ‚ä©u‚ÇÇ of Œª
      ‚ä¢u‚ÇÇ ‚Üí
    case prod‚±º ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ok of Œª
      ‚ä¢t‚ÇÅ,u‚ÇÅ ‚Üí
    case prod‚±º ‚ä¢B ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ ok of Œª
      ‚ä¢t‚ÇÇ,u‚ÇÇ ‚Üí
    case
      fst p (prodÀ¢ p t‚ÇÅ u‚ÇÅ)  ‚áí‚ü® Œ£-Œ≤‚ÇÅ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ PE.refl ok ‚ü©‚ä©‚à∑
      t‚ÇÅ                     ‚â°‚ü® level-‚ä©‚â°‚à∑ ‚ä©A t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚ä©‚à∑‚áê*
      t‚ÇÇ                     ‚áê‚ü® Œ£-Œ≤‚ÇÅ ‚ä¢B ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ PE.refl ok ‚ü©‚àé
      fst p (prodÀ¢ p t‚ÇÇ u‚ÇÇ)  ‚àé
    of Œª
      fst‚â°fst ‚Üí
    case
      snd p (prodÀ¢ p t‚ÇÅ u‚ÇÅ) ‚à∑ B [ fst p (prodÀ¢ p t‚ÇÅ u‚ÇÅ) ]‚ÇÄ  ‚áí‚ü® Œ£-Œ≤‚ÇÇ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ PE.refl ok ‚ü©‚ä©‚à∑‚à∑
                                                             ‚ü® ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) $
                                                               ‚ä©Œ£-Œ≤‚ÇÅ ok ‚ä¢B ‚ä©t‚ÇÅ ‚ä¢u‚ÇÅ ‚ü©‚ä©‚à∑
      u‚ÇÅ                    ‚à∑ B [ t‚ÇÅ ]‚ÇÄ                     ‚â°‚ü® u‚ÇÅ‚â°u‚ÇÇ ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                             ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $
                                                               ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚áí
      u‚ÇÇ                    ‚à∑ B [ t‚ÇÇ ]‚ÇÄ                     ‚áê‚ü® conv (Œ£-Œ≤‚ÇÇ ‚ä¢B ‚ä¢t‚ÇÇ ‚ä¢u‚ÇÇ PE.refl ok) $
                                                               ‚âÖ-eq $ escape-‚ä©‚â° $
                                                               ‚ä©Œ†Œ£‚â°Œ†Œ£‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[]‚ÇÄ‚â°[]‚ÇÄ (refl-‚ä©‚â° ‚ä©Œ£AB) $
                                                               ‚ä©Œ£-Œ≤‚ÇÅ ok ‚ä¢B ‚ä©t‚ÇÇ ‚ä¢u‚ÇÇ
                                                             ‚ü©‚àé‚à∑
      snd p (prodÀ¢ p t‚ÇÇ u‚ÇÇ)                                 ‚àé
    of Œª
      snd‚â°snd ‚Üí
    ‚ä©‚â°‚à∑Œ£À¢‚áî .proj‚ÇÇ
      ( ‚ä©Œ£AB
      , _ , _
      , id ‚ä¢t‚ÇÅ,u‚ÇÅ , id ‚ä¢t‚ÇÇ,u‚ÇÇ
      , prod‚Çô , prod‚Çô
      , ‚âÖ-Œ£-Œ∑ ‚ä¢B ‚ä¢t‚ÇÅ,u‚ÇÅ ‚ä¢t‚ÇÇ,u‚ÇÇ prod‚Çô prod‚Çô
          (escape-‚ä©‚â°‚à∑ fst‚â°fst) (escape-‚ä©‚â°‚à∑ snd‚â°snd)
      , fst‚â°fst , snd‚â°snd
      )

private opaque

  -- Reducibility of equality between applications of prodÀ¢.

  ‚ä©prodÀ¢[]‚â°prodÀ¢[] :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© prodÀ¢ p t‚ÇÅ u‚ÇÅ [ œÉ‚ÇÅ ] ‚â° prodÀ¢ p t‚ÇÇ u‚ÇÇ [ œÉ‚ÇÇ ] ‚à∑
      (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) [ œÉ‚ÇÅ ]
  ‚ä©prodÀ¢[]‚â°prodÀ¢[] {B} ok ‚ä©B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =
    case wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ of Œª
      ‚ä©A ‚Üí
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , _) ‚Üí
    ‚ä©prodÀ¢‚â°prodÀ¢ (‚ä©Œ†Œ£ ok ‚ä©A ‚ä©B ‚ä©œÉ‚ÇÅ)
      (‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      (PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift B _) $
       ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)

opaque

  -- Validity of equality preservation for prodÀ¢.

  prodÀ¢-cong·µõ :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prodÀ¢ p t‚ÇÅ u‚ÇÅ ‚â° prodÀ¢ p t‚ÇÇ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  prodÀ¢-cong·µõ ok ‚ä©B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî .proj‚ÇÇ
      ( Œ†Œ£·µõ ok (wf-‚ä©·µõ‚à∑ $ wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ) ‚ä©B
      , ‚ä©prodÀ¢[]‚â°prodÀ¢[] ok ‚ä©B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ
      )

opaque

  -- Validity of prodÀ¢.

  prodÀ¢·µõ :
    Œ£À¢-allowed p q ‚Üí
    Œì ‚àô A ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© prodÀ¢ p t u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  prodÀ¢·µõ ok ‚ä©B ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    prodÀ¢-cong·µõ ok ‚ä©B (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)
