------------------------------------------------------------------------
-- Validity for identity types
------------------------------------------------------------------------

open import Definition.Typed.EqualityRelation
open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.LogicalRelation.Substitution.Introductions.Identity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  ‚¶É eqrel : EqRelSet R ‚¶Ñ
  where

open EqRelSet eqrel
open Type-restrictions R

open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Hidden R
import Definition.LogicalRelation.Hidden.Restricted R as R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Substitution R
import Definition.LogicalRelation.Substitution.Introductions.Erased R
  as Erased
open import
  Definition.LogicalRelation.Substitution.Introductions.Universe R
open import Definition.LogicalRelation.Substitution.Introductions.Var R
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution R
open import Definition.Typed.Weakening R
open import Definition.Typed.Well-formed R
open import Definition.Untyped M as U hiding (_[_])
import Definition.Untyped.Erased
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M

open import Tools.Empty
open import Tools.Fin using (x0)
open import Tools.Function
open import Tools.Nat using (Nat)
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
import Tools.Reasoning.PropositionalEquality
open import Tools.Relation

private variable
  Œì Œî                                             : Con Term _
  A A‚ÇÅ A‚ÇÇ B B‚ÇÅ B‚ÇÇ t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ w w‚ÇÅ w‚ÇÇ : Term _
  œÉ œÉ‚ÇÅ œÉ‚ÇÇ                                         : Subst _ _
  l l‚Ä≤ l‚Ä≤‚ÇÅ l‚Ä≤‚ÇÇ l‚Ä≤‚ÇÉ l‚Ä≤‚ÇÑ l‚Ä≤‚ÇÖ l‚Ä≥ l‚Ä¥ l‚Åó               : Universe-level
  n                                               : Nat
  p q                                             : M
  s                                               : Strength

private

  -- Some definitions used in proofs below.

  module E {s} (ok : []-cong-allowed s) where

    open Definition.Untyped.Erased ùïÑ s public
    open Erased ([]-cong‚ÜíErased ok) public
      renaming ([]-cong·µõ to []-cong·µõ‚Ä≤)

------------------------------------------------------------------------
-- Some characterisation lemmas

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_.

  ‚ä©Id‚áî :
    Œì ‚ä©‚ü® l ‚ü© Id A t u ‚áî
    (Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A)
  ‚ä©Id‚áî {A} {t} {u} =
      (Œª ‚ä©Id ‚Üí lemma (Id-elim ‚ä©Id))
    , (Œª ((‚ä©A , ‚ä©t) , (‚ä©A‚Ä≤ , ‚ä©u)) ‚Üí
         Id·µ£
           (Id·µ£ A t u
              (_‚ä¢_‚áí*_.id $
               Id‚±º (escape ‚ä©A) (escapeTerm ‚ä©A ‚ä©t) (escapeTerm ‚ä©A‚Ä≤ ‚ä©u))
              ‚ä©A
              ‚ä©t (irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©u)))
    where
    lemma :
      Œì ‚ä©‚ü® l ‚ü©Id Id A t u ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A
    lemma (emb 0<1 ‚ä©Id) =
      case lemma ‚ä©Id of Œª
        (‚ä©t , ‚ä©u) ‚Üí
      emb-‚ä©‚à∑ (<·µò‚Üí‚â§·µò 0<1) ‚ä©t , emb-‚ä©‚à∑ (<·µò‚Üí‚â§·µò 0<1) ‚ä©u
    lemma (noemb ‚ä©Id@record{}) =
      case whnfRed* ‚áí*Id Id‚Çô of Œª {
        PE.refl ‚Üí
      (‚ä©Ty , ‚ä©lhs) , (‚ä©Ty , ‚ä©rhs) }
      where
      open _‚ä©‚ÇóId_ ‚ä©Id

opaque

  -- A corollary.

  ‚Üí‚ä©Id‚à∑U :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚à∑ U l ‚Üí
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä¥ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A t u ‚à∑ U l
  ‚Üí‚ä©Id‚à∑U {Œì} {l‚Ä≤} {A} {l} {l‚Ä≥} {t} {l‚Ä¥} {u} ‚ä©A ‚ä©t ‚ä©u =
                                                   $‚ü® ‚ä©A , ‚ä©t , ‚ä©u ‚ü©
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A ‚à∑ U l √ó
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© t ‚à∑ A √ó
    Œì ‚ä©‚ü® l‚Ä¥ ‚ü© u ‚à∑ A                                ‚Üí‚ü® (Œª (‚ä©A‚à∑U , ‚ä©t , ‚ä©u) ‚Üí
                                                         case ‚ä©‚à∑U‚áî .proj‚ÇÅ ‚ä©A‚à∑U of Œª
                                                           (l‚Ä≤<l , ‚ä©A , _) ‚Üí
                                                           l‚Ä≤<l
                                                         , (level-‚ä©‚à∑ ‚ä©A ‚ä©t , level-‚ä©‚à∑ ‚ä©A ‚ä©u)
                                                         , ‚âÖ‚Çú-Id-cong (escape-‚ä©‚â°‚à∑ (refl-‚ä©‚â°‚à∑ ‚ä©A‚à∑U))
                                                             (escape-‚ä©‚â°‚à∑ (refl-‚ä©‚â°‚à∑ ‚ä©t)) (escape-‚ä©‚â°‚à∑ (refl-‚ä©‚â°‚à∑ ‚ä©u)))
                                                   ‚ü©
    l <·µò l‚Ä≤ √ó (Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A) √ó
    Œì ‚ä¢‚âÖ Id A t u ‚à∑ U l                            ‚áîÀò‚ü® id‚áî √ó-cong-‚áî ‚ä©Id‚áî √ó-cong-‚áî id‚áî ‚ü©‚Üí

    l <·µò l‚Ä≤ √ó (Œì ‚ä©‚ü® l ‚ü© Id A t u) √ó
    Œì ‚ä¢‚âÖ Id A t u ‚à∑ U l                            ‚áîÀò‚ü® Type‚Üí‚ä©‚à∑U‚áî Id‚Çô ‚ü©‚Üí

    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A t u ‚à∑ U l                       ‚ñ°

-- A variant of ‚ä©Id‚à∑-view.

data ‚ä©Id‚à∑-view‚Ä≤
       (Œì : Con Term n) (l : Universe-level) (A t u : Term n) :
       Term n ‚Üí Set a where
  rfl·µ£ : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
         ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u rfl
  ne   : Neutrals-included ‚Üí
         Neutral v ‚Üí
         Œì ‚ä¢~ v ‚à∑ Id A t u ‚Üí
         ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u v

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚à∑_.

  ‚ä©‚à∑Id‚áî :
    Œì ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u ‚áî
    (‚àÉ Œª w ‚Üí
     Œì ‚ä¢ v ‚áí* w ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u w)
  ‚ä©‚à∑Id‚áî =
      (Œª (‚ä©Id , ‚ä©v) ‚Üí
         lemma (Id-elim ‚ä©Id)
           (irrelevanceTerm ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©v))
    , (Œª (w , v‚áí*w , (‚ä©A , ‚ä©t) , (‚ä©A‚Ä≤ , ‚ä©u) , rest) ‚Üí
         case _‚ä¢_‚áí*_.id $
              Id‚±º (escape ‚ä©A) (escapeTerm ‚ä©A ‚ä©t)
                (escapeTerm ‚ä©A‚Ä≤ ‚ä©u) of Œª
           Id‚áí*Id ‚Üí
           Id·µ£ (Id·µ£ _ _ _ Id‚áí*Id ‚ä©A ‚ä©t (irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©u))
         , ( w , v‚áí*w
           , (case rest of Œª where
                (ne inc w-ne w~w)          ‚Üí ne w-ne , inc , w~w
                (rfl·µ£ (‚ä©A‚Ä≥ , _ , _ , t‚â°u)) ‚Üí
                  rfl‚Çô , irrelevanceEqTerm ‚ä©A‚Ä≥ ‚ä©A t‚â°u)
           ))
    where
    lemma :
      (‚ä©Id : Œì ‚ä©‚ü® l ‚ü©Id Id A t u) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u / Id-intr ‚ä©Id ‚Üí
      ‚àÉ Œª w ‚Üí
      Œì ‚ä¢ v ‚áí* w ‚à∑ Id A t u √ó
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
      Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
      ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u w
    lemma (emb ‚â§·µò-refl ‚ä©Id) ‚ä©v =
      case lemma ‚ä©Id ‚ä©v of Œª
        (w , v‚áí*w , ‚ä©t , ‚ä©u , rest) ‚Üí
        w , v‚áí*w , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©t
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©u
      , (case rest of Œª where
           (rfl·µ£ t‚â°u)        ‚Üí rfl·µ£ (emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) t‚â°u)
           (ne inc v-ne v~v) ‚Üí ne inc v-ne v~v)
    lemma (emb (‚â§·µò-step s) ‚ä©Id) ‚ä©v =
      case lemma (emb s ‚ä©Id) ‚ä©v of Œª
        (w , v‚áí*w , ‚ä©t , ‚ä©u , rest) ‚Üí
        w , v‚áí*w , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©t
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©u
      , (case rest of Œª where
           (rfl·µ£ t‚â°u)        ‚Üí rfl·µ£ (emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) t‚â°u)
           (ne inc v-ne v~v) ‚Üí ne inc v-ne v~v)
    lemma (noemb ‚ä©Id@record{}) ‚ä©v@(w , v‚áí*w , _) =
      case whnfRed* ‚áí*Id Id‚Çô of Œª {
        PE.refl ‚Üí
        w , v‚áí*w
      , (‚ä©Ty , ‚ä©lhs)
      , (‚ä©Ty , ‚ä©rhs)
      , (case ‚ä©Id‚à∑-view-inhabited ‚ä©v of Œª where
           (rfl·µ£ lhs‚â°rhs)    ‚Üí rfl·µ£ (‚ä©Ty , ‚ä©lhs , ‚ä©rhs , lhs‚â°rhs)
           (ne inc w-ne w~w) ‚Üí ne inc w-ne w~w) }
      where
      open _‚ä©‚ÇóId_ ‚ä©Id

opaque

  -- A variant of ‚ä©‚à∑Id‚áî.

  Identity‚Üí‚ä©‚à∑Id‚áî :
    Identity v ‚Üí
    Œì ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u ‚áî
    (Œì ‚ä¢ v ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u v)
  Identity‚Üí‚ä©‚à∑Id‚áî {v} {Œì} {l} {A} {t} {u} v-id =
    Œì ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u     ‚áî‚ü® ‚ä©‚à∑Id‚áî ‚ü©

    (‚àÉ Œª w ‚Üí
     Œì ‚ä¢ v ‚áí* w ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u w)  ‚áî‚ü® (Œª (_ , v‚áí*w , ‚ä©t , ‚ä©u , rest) ‚Üí
                                    case whnfRed*Term v‚áí*w (identityWhnf v-id) of Œª {
                                      PE.refl ‚Üí
                                    redFirst*Term v‚áí*w , ‚ä©t , ‚ä©u , rest })
                               , (Œª (‚ä¢v , ‚ä©t , ‚ä©u , rest) ‚Üí
                                    _ , id ‚ä¢v , ‚ä©t , ‚ä©u , rest)
                               ‚ü©
    Œì ‚ä¢ v ‚à∑ Id A t u √ó
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
    ‚ä©Id‚à∑-view‚Ä≤ Œì l A t u v    ‚ñ°‚áî

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚â°_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Id‚â°‚áî :
    Œì ‚ä©‚ü® l ‚ü© Id A t u ‚â° B ‚áî
    (Œì ‚ä©‚ü® l ‚ü© Id A t u √ó
     ‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí
     (Œì ‚ä¢ B ‚áí* Id A‚Ä≤ t‚Ä≤ u‚Ä≤) √ó
     (Œì ‚ä©‚ü® l ‚ü© A ‚â° A‚Ä≤) √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ A)
  ‚ä©Id‚â°‚áî =
      (Œª (‚ä©Id , ‚ä©B , Id‚â°B) ‚Üí
           ‚ä©Id
         , lemma‚ÇÅ ‚â§·µò-refl (Id-elim ‚ä©Id) ‚ä©B
             (irrelevanceEq ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) Id‚â°B))
    , (Œª (‚ä©Id , rest) ‚Üí
         Id-intr (Id-elim ‚ä©Id) , lemma‚ÇÇ (Id-elim ‚ä©Id) rest)
    where
    lemma‚ÇÅ :
      l‚Ä≤ ‚â§·µò l ‚Üí
      (‚ä©Id : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Id Id A t u) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© B ‚Üí
      Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A t u ‚â° B / Id-intr ‚ä©Id ‚Üí
      ‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí
      (Œì ‚ä¢ B ‚áí* Id A‚Ä≤ t‚Ä≤ u‚Ä≤) √ó
      (Œì ‚ä©‚ü® l ‚ü© A ‚â° A‚Ä≤) √ó
      Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ A √ó
      Œì ‚ä©‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ A
    lemma‚ÇÅ l‚Ä≤<l (emb ‚â§·µò-refl ‚ä©Id) ‚ä©B Id‚â°A =
      lemma‚ÇÅ (<·µò‚Üí‚â§·µò l‚Ä≤<l) ‚ä©Id ‚ä©B Id‚â°A
    lemma‚ÇÅ l‚Ä≤<l (emb (‚â§·µò-step l‚Ä≥<l‚Ä≤) ‚ä©Id) ‚ä©B Id‚â°A =
      lemma‚ÇÅ (<·µò‚Üí‚â§·µò l‚Ä≤<l) (emb l‚Ä≥<l‚Ä≤ ‚ä©Id) ‚ä©B Id‚â°A
    lemma‚ÇÅ
      l‚Ä≤‚â§l (noemb ‚ä©Id@record{}) ‚ä©B
      (Id‚Çå A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚áí*Id‚Ä≤ A‚â°A‚Ä≤ t‚â°t‚Ä≤ u‚â°u‚Ä≤ _ _) =
      case whnfRed* ‚áí*Id Id‚Çô of Œª {
        PE.refl ‚Üí
      case extractMaybeEmb‚Ä≤
             (Id-elim (redSubst*‚Ä≤ ‚áí*Id‚Ä≤ ‚ä©B .proj‚ÇÅ)) of Œª {
        (_ , l‚Ä≥‚â§l , Id·µ£ _ _ _ ‚áí*Id‚Ä≥ ‚ä©Ty‚Ä≥ ‚ä©lhs‚Ä≥ ‚ä©rhs‚Ä≥) ‚Üí
      case whnfRed* ‚áí*Id‚Ä≥ Id‚Çô of Œª {
        PE.refl ‚Üí
      case emb-‚â§-‚ä©‚â° A‚â°A‚Ä≤ of Œª
        A‚â°A‚Ä≤ ‚Üí
      let ‚ä©Ty‚Ä≤ = emb-‚â§-‚ä© l‚Ä≤‚â§l ‚ä©Ty in
        A‚Ä≤ , t‚Ä≤ , u‚Ä≤ , ‚áí*Id‚Ä≤
      , (‚ä©Ty‚Ä≤ , emb-‚â§-‚ä© l‚Ä≥‚â§l ‚ä©Ty‚Ä≥ , A‚â°A‚Ä≤)
      , ( ‚ä©Ty‚Ä≤
        , emb-‚â§-‚ä©‚à∑ ‚ä©lhs
        , convTerm‚ÇÇ ‚ä©Ty‚Ä≤ ‚ä©Ty‚Ä≥ A‚â°A‚Ä≤ ‚ä©lhs‚Ä≥
        , emb-‚â§-‚ä©‚â°‚à∑ t‚â°t‚Ä≤
        )
      , ( ‚ä©Ty‚Ä≤
        , emb-‚â§-‚ä©‚à∑ ‚ä©rhs
        , convTerm‚ÇÇ ‚ä©Ty‚Ä≤ ‚ä©Ty‚Ä≥ A‚â°A‚Ä≤ ‚ä©rhs‚Ä≥
        , emb-‚â§-‚ä©‚â°‚à∑ u‚â°u‚Ä≤
        ) }}}
      where
      open _‚ä©‚ÇóId_ ‚ä©Id

    lemma‚ÇÇ :
      (‚ä©Id : Œì ‚ä©‚ü® l‚Ä≤ ‚ü©Id Id A t u) ‚Üí
      (‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí
       (Œì ‚ä¢ B ‚áí* Id A‚Ä≤ t‚Ä≤ u‚Ä≤) √ó
       (Œì ‚ä©‚ü® l ‚ü© A ‚â° A‚Ä≤) √ó
       Œì ‚ä©‚ü® l ‚ü© t ‚â° t‚Ä≤ ‚à∑ A √ó
       Œì ‚ä©‚ü® l ‚ü© u ‚â° u‚Ä≤ ‚à∑ A) ‚Üí
      (Œì ‚ä©‚ü® l ‚ü© B) √ó Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A t u ‚â° B / Id-intr ‚ä©Id
    lemma‚ÇÇ (emb ‚â§·µò-refl ‚ä©Id) rest =
      lemma‚ÇÇ ‚ä©Id rest
    lemma‚ÇÇ (emb (‚â§·µò-step s) ‚ä©Id) rest =
      lemma‚ÇÇ (emb s ‚ä©Id) rest
    lemma‚ÇÇ
      (noemb ‚ä©Id@record{})
      ( A‚Ä≤ , t‚Ä≤ , u‚Ä≤ , B‚áí*Id , (‚ä©A , ‚ä©A‚Ä≤ , A‚â°A‚Ä≤)
      , (‚ä©A‚Ä≥ , _ , ‚ä©t‚Ä≤ , t‚â°t‚Ä≤) , (‚ä©A‚Ä¥ , _ , ‚ä©u‚Ä≤ , u‚â°u‚Ä≤)
      ) =
      case whnfRed* ‚áí*Id Id‚Çô of Œª {
        PE.refl ‚Üí
      case ‚âÖ-eq (escapeEq ‚ä©A A‚â°A‚Ä≤) of Œª
        ‚ä¢A‚â°A‚Ä≤ ‚Üí
        redSubst* B‚áí*Id
          (Id·µ£
             (Id·µ£ A‚Ä≤ t‚Ä≤ u‚Ä≤
                (_‚ä¢_‚áí*_.id $
                 Id‚±º (escape ‚ä©A‚Ä≤) (conv (escapeTerm ‚ä©A‚Ä≥ ‚ä©t‚Ä≤) ‚ä¢A‚â°A‚Ä≤)
                   (conv (escapeTerm ‚ä©A‚Ä¥ ‚ä©u‚Ä≤) ‚ä¢A‚â°A‚Ä≤))
                ‚ä©A‚Ä≤
                (convTerm‚ÇÅ ‚ä©A‚Ä≥ ‚ä©A‚Ä≤ (irrelevanceEq ‚ä©A ‚ä©A‚Ä≥ A‚â°A‚Ä≤) ‚ä©t‚Ä≤)
                (convTerm‚ÇÅ ‚ä©A‚Ä¥ ‚ä©A‚Ä≤ (irrelevanceEq ‚ä©A ‚ä©A‚Ä¥ A‚â°A‚Ä≤) ‚ä©u‚Ä≤)))
          .proj‚ÇÅ
      , Id‚Çå‚Ä≤ B‚áí*Id (irrelevanceEq ‚ä©A ‚ä©Ty A‚â°A‚Ä≤)
          (irrelevanceEqTerm ‚ä©A‚Ä≥ ‚ä©Ty t‚â°t‚Ä≤)
          (irrelevanceEqTerm ‚ä©A‚Ä¥ ‚ä©Ty u‚â°u‚Ä≤) }
      where
      open _‚ä©‚ÇóId_ ‚ä©Id

opaque

  -- Another characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_.

  ‚ä©Id‚â°Id‚áî :
    Œì ‚ä©‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚áî
    ((Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ) √ó
     Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ)
  ‚ä©Id‚â°Id‚áî {Œì} {l} {A‚ÇÅ} {t‚ÇÅ} {u‚ÇÅ} {A‚ÇÇ} {t‚ÇÇ} {u‚ÇÇ} =
    (Œì ‚ä©‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ)   ‚áî‚ü® ‚ä©Id‚â°‚áî ‚ü©

    (Œì ‚ä©‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ √ó
     ‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí
     (Œì ‚ä¢ Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚áí* Id A‚Ä≤ t‚Ä≤ u‚Ä≤) √ó
     (Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚Ä≤) √ó
     Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚Ä≤ ‚à∑ A‚ÇÅ √ó
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚Ä≤ ‚à∑ A‚ÇÅ)              ‚áî‚ü® (Œª (_ , _ , _ , _ , Id‚áí*Id , A‚ÇÅ‚â° , t‚ÇÅ‚â° , u‚ÇÅ‚â°) ‚Üí
                                               case whnfRed* Id‚áí*Id Id‚Çô of Œª {
                                                 PE.refl ‚Üí
                                               A‚ÇÅ‚â° , t‚ÇÅ‚â° , u‚ÇÅ‚â° })
                                          , (Œª (A‚ÇÅ‚â°A‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
                                                 ‚ä©Id‚áî .proj‚ÇÇ (wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ , wf-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ .proj‚ÇÅ)
                                               , _ , _ , _
                                               , id
                                                   (Id‚±º (escape-‚ä© (wf-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÇ))
                                                      (escape-‚ä©‚à∑ (conv-‚ä©‚à∑ A‚ÇÅ‚â°A‚ÇÇ (wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ)))
                                                      (escape-‚ä©‚à∑ (conv-‚ä©‚à∑ A‚ÇÅ‚â°A‚ÇÇ (wf-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ .proj‚ÇÇ))))
                                               , A‚ÇÅ‚â°A‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ)
                                          ‚ü©
    (Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ) √ó
    Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó
    Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ                ‚ñ°‚áî

opaque

  -- A corollary.

  ‚Üí‚ä©Id‚â°Id‚à∑U :
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l ‚Üí
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ U l
  ‚Üí‚ä©Id‚â°Id‚à∑U {Œì} {l‚Ä≤} {A‚ÇÅ} {A‚ÇÇ} {l} {l‚Ä≥} {t‚ÇÅ} {t‚ÇÇ} {l‚Ä¥} {u‚ÇÅ} {u‚ÇÇ} A‚ÇÅ‚â°A‚ÇÇ‚à∑U t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
                                                                     $‚ü® A‚ÇÅ‚â°A‚ÇÇ‚à∑U , t‚ÇÅ‚â°t‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ ‚ü©
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l √ó
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó
    Œì ‚ä©‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ                                           ‚Üí‚ü® (Œª (A‚ÇÅ‚â°A‚ÇÇ‚à∑U , t‚ÇÅ‚â°t‚ÇÇ , u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
                                                                           case ‚ä©‚â°‚à∑U‚áî .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ‚à∑U of Œª
                                                                             (l‚Ä≤<l , A‚ÇÅ‚â°A‚ÇÇ , _) ‚Üí
                                                                           case escape-‚ä©‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ‚à∑U of Œª
                                                                             A‚ÇÅ‚âÖA‚ÇÇ‚à∑U ‚Üí
                                                                           case escape-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
                                                                             t‚ÇÅ‚âÖt‚ÇÇ ‚Üí
                                                                           case escape-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
                                                                             u‚ÇÅ‚âÖu‚ÇÇ ‚Üí
                                                                           case Œ£.map escape-‚ä©‚à∑ escape-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ‚à∑U of Œª
                                                                             (‚ä¢A‚ÇÅ‚à∑U , ‚ä¢A‚ÇÇ‚à∑U) ‚Üí
                                                                           case wf-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ of Œª
                                                                             ‚ä©A‚ÇÅ ‚Üí
                                                                             l‚Ä≤<l
                                                                           , (A‚ÇÅ‚â°A‚ÇÇ , level-‚ä©‚â°‚à∑ ‚ä©A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ , level-‚ä©‚â°‚à∑ ‚ä©A‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ)
                                                                           , ‚âÖ‚Çú-Id-cong A‚ÇÅ‚âÖA‚ÇÇ‚à∑U t‚ÇÅ‚âÖt‚ÇÇ u‚ÇÅ‚âÖu‚ÇÇ) ‚ü©
    l <·µò l‚Ä≤ √ó
    ((Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ) √ó
     Œì ‚ä©‚ü® l ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó
     Œì ‚ä©‚ü® l ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ) √ó
    Œì ‚ä¢ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚âÖ Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ U l                              ‚áîÀò‚ü® (Œ£-cong-‚áî Œª _ ‚Üí
                                                                          ‚ä©Id‚â°Id‚áî √ó-cong-‚áî id‚áî) ‚ü©‚Üí
    l <·µò l‚Ä≤ √ó
    (Œì ‚ä©‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ) √ó
    Œì ‚ä¢ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚âÖ Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ U l                              ‚áîÀò‚ü® Type‚Üí‚ä©‚â°‚à∑U‚áî Id‚Çô Id‚Çô ‚ü©‚Üí


    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ U l                        ‚ñ°

-- A variant of ‚ä©Id‚â°‚à∑-view.

data ‚ä©Id‚â°‚à∑-view‚Ä≤
       (Œì : Con Term n) (l : Universe-level) (A t u : Term n) :
       Term n ‚Üí Term n ‚Üí Set a where
  rfl‚Çå : Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
         ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u rfl rfl
  ne   : Neutrals-included ‚Üí
         Neutral v ‚Üí Neutral w ‚Üí
         Œì ‚ä¢ v ~ w ‚à∑ Id A t u ‚Üí
         ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v w

opaque
  unfolding _‚ä©‚ü®_‚ü©_‚à∑_ _‚ä©‚ü®_‚ü©_‚â°_‚à∑_

  -- A characterisation lemma for _‚ä©‚ü®_‚ü©_‚â°_‚à∑_.

  ‚ä©‚â°‚à∑Id‚áî :
    Œì ‚ä©‚ü® l ‚ü© v ‚â° w ‚à∑ Id A t u ‚áî
    (‚àÉ‚ÇÇ Œª v‚Ä≤ w‚Ä≤ ‚Üí
     Œì ‚ä¢ v ‚áí* v‚Ä≤ ‚à∑ Id A t u √ó
     Œì ‚ä¢ w ‚áí* w‚Ä≤ ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v‚Ä≤ w‚Ä≤)
  ‚ä©‚â°‚à∑Id‚áî =
      (Œª (‚ä©Id , _ , _ , ‚ä©v) ‚Üí
         lemma (Id-elim ‚ä©Id)
           (irrelevanceEqTerm ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©v))
    , (Œª (v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , (‚ä©A , ‚ä©t) , (‚ä©A‚Ä≤ , ‚ä©u) , rest) ‚Üí
         case _‚ä¢_‚áí*_.id $
              Id‚±º (escape ‚ä©A) (escapeTerm ‚ä©A ‚ä©t)
                (escapeTerm ‚ä©A‚Ä≤ ‚ä©u) of Œª
           Id‚áí*Id ‚Üí
           Id·µ£ (Id·µ£ _ _ _ Id‚áí*Id ‚ä©A ‚ä©t (irrelevanceTerm ‚ä©A‚Ä≤ ‚ä©A ‚ä©u))
         , (case rest of Œª where
              (ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤) ‚Üí
                let ~v‚Ä≤ , ~w‚Ä≤ = wf-‚ä¢~‚à∑ v‚Ä≤~w‚Ä≤ in
                  (v‚Ä≤ , v‚áí*v‚Ä≤ , ne v‚Ä≤-ne , inc , ~v‚Ä≤)
                , (w‚Ä≤ , w‚áí*w‚Ä≤ , ne w‚Ä≤-ne , inc , ~w‚Ä≤)
                , ( v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤
                  , ne v‚Ä≤-ne , ne w‚Ä≤-ne , inc , v‚Ä≤~w‚Ä≤
                  )
              (rfl‚Çå (‚ä©A‚Ä≥ , _ , _ , t‚â°u)) ‚Üí
                case irrelevanceEqTerm ‚ä©A‚Ä≥ ‚ä©A t‚â°u of Œª
                  t‚â°u ‚Üí
                  (v‚Ä≤ , v‚áí*v‚Ä≤ , rfl‚Çô , t‚â°u)
                , (w‚Ä≤ , w‚áí*w‚Ä≤ , rfl‚Çô , t‚â°u)
                , (v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , rfl‚Çô , rfl‚Çô , t‚â°u)))
    where
    lemma :
      (‚ä©Id : Œì ‚ä©‚ü® l ‚ü©Id Id A t u) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© v ‚â° w ‚à∑ Id A t u / Id-intr ‚ä©Id ‚Üí
      ‚àÉ‚ÇÇ Œª v‚Ä≤ w‚Ä≤ ‚Üí
      Œì ‚ä¢ v ‚áí* v‚Ä≤ ‚à∑ Id A t u √ó
      Œì ‚ä¢ w ‚áí* w‚Ä≤ ‚à∑ Id A t u √ó
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
      Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
      ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v‚Ä≤ w‚Ä≤
    lemma (emb ‚â§·µò-refl ‚ä©Id) v‚â°w =
      case lemma ‚ä©Id v‚â°w of Œª
        (v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , ‚ä©t , ‚ä©u , rest) ‚Üí
        v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©t , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©u
      , (case rest of Œª where
           (rfl‚Çå t‚â°u) ‚Üí
             rfl‚Çå (emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) t‚â°u)
           (ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤) ‚Üí
             ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤)
    lemma (emb (‚â§·µò-step s) ‚ä©Id) v‚â°w =
      case lemma (emb s ‚ä©Id) v‚â°w of Œª
        (v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , ‚ä©t , ‚ä©u , rest) ‚Üí
        v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤
      , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©t , emb-‚ä©‚à∑ (‚â§·µò-step ‚â§·µò-refl) ‚ä©u
      , (case rest of Œª where
           (rfl‚Çå t‚â°u) ‚Üí
             rfl‚Çå (emb-‚ä©‚â°‚à∑ (‚â§·µò-step ‚â§·µò-refl) t‚â°u)
           (ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤) ‚Üí ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤)
    lemma (noemb ‚ä©Id@record{}) v‚â°w@(v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , _) =
      case whnfRed* ‚áí*Id Id‚Çô of Œª {
        PE.refl ‚Üí
        v‚Ä≤ , w‚Ä≤ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤
      , (‚ä©Ty , ‚ä©lhs)
      , (‚ä©Ty , ‚ä©rhs)
      , (case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©Id v‚â°w of Œª where
           (rfl‚Çå t‚â°u)                 ‚Üí rfl‚Çå (‚ä©Ty , ‚ä©lhs , ‚ä©rhs , t‚â°u)
           (ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤) ‚Üí ne inc v‚Ä≤-ne w‚Ä≤-ne v‚Ä≤~w‚Ä≤) }
      where
      open _‚ä©‚ÇóId_ ‚ä©Id

opaque

  -- A variant of ‚ä©‚â°‚à∑Id‚áî.

  Identity‚Üí‚ä©‚â°‚à∑Id‚áî :
    Identity v ‚Üí Identity w ‚Üí
    Œì ‚ä©‚ü® l ‚ü© v ‚â° w ‚à∑ Id A t u ‚áî
    (Œì ‚ä¢ v ‚à∑ Id A t u √ó
     Œì ‚ä¢ w ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v w)
  Identity‚Üí‚ä©‚â°‚à∑Id‚áî {v} {w} {Œì} {l} {A} {t} {u} v-id w-id =
    Œì ‚ä©‚ü® l ‚ü© v ‚â° w ‚à∑ Id A t u      ‚áî‚ü® ‚ä©‚â°‚à∑Id‚áî ‚ü©

    (‚àÉ‚ÇÇ Œª v‚Ä≤ w‚Ä≤ ‚Üí
     Œì ‚ä¢ v ‚áí* v‚Ä≤ ‚à∑ Id A t u √ó
     Œì ‚ä¢ w ‚áí* w‚Ä≤ ‚à∑ Id A t u √ó
     Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
     Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
     ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v‚Ä≤ w‚Ä≤)  ‚áî‚ü® (Œª (_ , _ , v‚áí*v‚Ä≤ , w‚áí*w‚Ä≤ , ‚ä©t , ‚ä©u , rest) ‚Üí
                                         case whnfRed*Term v‚áí*v‚Ä≤ (identityWhnf v-id) of Œª {
                                           PE.refl ‚Üí
                                         case whnfRed*Term w‚áí*w‚Ä≤ (identityWhnf w-id) of Œª {
                                           PE.refl ‚Üí
                                         redFirst*Term v‚áí*v‚Ä≤ , redFirst*Term w‚áí*w‚Ä≤ ,
                                         ‚ä©t , ‚ä©u , rest }})
                                    , (Œª (‚ä¢v , ‚ä¢w , ‚ä©t , ‚ä©u , rest) ‚Üí
                                         _ , _ , id ‚ä¢v , id ‚ä¢w , ‚ä©t , ‚ä©u , rest)
                                    ‚ü©
    Œì ‚ä¢ v ‚à∑ Id A t u √ó
    Œì ‚ä¢ w ‚à∑ Id A t u √ó
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A √ó
    Œì ‚ä©‚ü® l ‚ü© u ‚à∑ A √ó
    ‚ä©Id‚â°‚à∑-view‚Ä≤ Œì l A t u v w      ‚ñ°‚áî

opaque

  -- A characterisation lemma for _‚ä©·µõ‚ü®_‚ü©_.

  ‚ä©·µõId‚áî :
    Œì ‚ä©·µõ‚ü® l ‚ü© Id A t u ‚áî
    (Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A)
  ‚ä©·µõId‚áî {Œì} {l} {A} {t} {u} =
    (Œì ‚ä©·µõ‚ü® l ‚ü© Id A t u)                                 ‚áî‚ü® ‚ä©·µõ‚áî ∞ ‚ü©

    ‚ä©·µõ Œì √ó
    (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m _}
       ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
     Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
     Œî ‚ä©‚ü® l ‚ü© Id A t u U.[ œÉ‚ÇÅ ] ‚â° Id A t u U.[ œÉ‚ÇÇ ])     ‚áî‚ü® id‚áî
                                                              √ó-cong-‚áî
                                                            (implicit-Œ†-cong-‚áî Œª _ ‚Üí implicit-Œ†-cong-‚áî Œª _ ‚Üí
                                                             implicit-Œ†-cong-‚áî Œª _ ‚Üí implicit-Œ†-cong-‚áî Œª _ ‚Üí
                                                             instance-Œ†-cong-‚áî $ Œ†-cong-‚áî Œª _ ‚Üí
                                                             ‚ä©Id‚â°Id‚áî) ‚ü©
    ‚ä©·µõ Œì √ó
    (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m _} ‚Üí
       ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
     Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
     (Œî ‚ä©‚ü® l ‚ü© A U.[ œÉ‚ÇÅ ] ‚â° A U.[ œÉ‚ÇÇ ]) √ó
     Œî ‚ä©‚ü® l ‚ü© t U.[ œÉ‚ÇÅ ] ‚â° t U.[ œÉ‚ÇÇ ] ‚à∑ A U.[ œÉ‚ÇÅ ] √ó
     Œî ‚ä©‚ü® l ‚ü© u U.[ œÉ‚ÇÅ ] ‚â° u U.[ œÉ‚ÇÇ ] ‚à∑ A U.[ œÉ‚ÇÅ ])      ‚áî‚ü® (Œª (‚ä©Œì , A‚â°A√ót‚â°t√óu‚â°u) ‚Üí
                                                               case ‚ä©·µõ‚áî ∞ .proj‚ÇÇ (‚ä©Œì , proj‚ÇÅ ‚àò‚Üí A‚â°A√ót‚â°t√óu‚â°u) of Œª
                                                                 ‚ä©A ‚Üí
                                                                 ( ‚ä©A
                                                                 , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí A‚â°A√ót‚â°t√óu‚â°u œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ
                                                                 )
                                                               , ( ‚ä©A
                                                                 , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí A‚â°A√ót‚â°t√óu‚â°u œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ
                                                                 ))
                                                          , (Œª ((‚ä©A , t‚â°t) , (_ , u‚â°u)) ‚Üí
                                                                 wf-‚ä©·µõ ‚ä©A
                                                               , (Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
                                                                      ‚ä©·µõ‚áî ∞ .proj‚ÇÅ ‚ä©A .proj‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ
                                                                    , t‚â°t œÉ‚ÇÅ‚â°œÉ‚ÇÇ , u‚â°u œÉ‚ÇÅ‚â°œÉ‚ÇÇ))
                                                          ‚ü©
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m _}
        ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© t U.[ œÉ‚ÇÅ ] ‚â° t U.[ œÉ‚ÇÇ ] ‚à∑ A U.[ œÉ‚ÇÅ ])) √ó
    (Œì ‚ä©·µõ‚ü® l ‚ü© A √ó
     (‚àÄ {m Œî} {œÉ‚ÇÅ œÉ‚ÇÇ : Subst m _}
        ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
      Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
      Œî ‚ä©‚ü® l ‚ü© u U.[ œÉ‚ÇÅ ] ‚â° u U.[ œÉ‚ÇÇ ] ‚à∑ A U.[ œÉ‚ÇÅ ]))    ‚áîÀò‚ü® ‚ä©·µõ‚à∑‚áî ∞ √ó-cong-‚áî ‚ä©·µõ‚à∑‚áî ∞ ‚ü©

    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A √ó Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ A                    ‚ñ°‚áî

------------------------------------------------------------------------
-- Id

opaque

  -- Validity of equality preservation for Id, seen as a type former.

  Id-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ
  Id-cong·µõ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case ‚ä©·µõ‚â°‚áî‚Ä≥ .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , _ , A‚ÇÅ‚â°A‚ÇÇ) ‚Üí
    ‚ä©·µõ‚â°‚áî ∞ .proj‚ÇÇ
      ( wf-‚ä©·µõ ‚ä©A‚ÇÅ
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          ‚ä©Id‚â°Id‚áî .proj‚ÇÇ
            ( R.‚ä©‚â°‚Üí (A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            , R.‚ä©‚â°‚à∑‚Üí
                (‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ (level-‚ä©·µõ‚â°‚à∑ ‚ä©A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            , R.‚ä©‚â°‚à∑‚Üí
                (‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ (level-‚ä©·µõ‚â°‚à∑ ‚ä©A‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            )
      )

opaque

  -- Validity of Id, seen as a type former.

  Id·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© Id A t u
  Id·µõ ‚ä©t ‚ä©u =
    ‚ä©·µõ‚áî‚ä©·µõ‚â° .proj‚ÇÇ $
    Id-cong·µõ (refl-‚ä©·µõ‚â° $ wf-‚ä©·µõ‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

opaque

  -- Validity of equality preservation for Id, seen as a term former.

  Id-cong·µó·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ U l
  Id-cong·µó·µõ A‚ÇÅ‚â°A‚ÇÇ‚à∑U t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ‚à∑U of Œª
      (‚ä©U , A‚ÇÅ‚â°A‚ÇÇ‚à∑U) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©U
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          ‚Üí‚ä©Id‚â°Id‚à∑U (A‚ÇÅ‚â°A‚ÇÇ‚à∑U œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      )

opaque

  -- Validity of Id, seen as a term former.

  Id·µó·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A ‚à∑ U l ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© Id A t u ‚à∑ U l
  Id·µó·µõ ‚ä©A‚à∑U ‚ä©t ‚ä©u =
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    Id-cong·µó·µõ (refl-‚ä©·µõ‚â°‚à∑ ‚ä©A‚à∑U) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)

------------------------------------------------------------------------
-- The term rfl

opaque

  -- Reducibility of reflexivity.

  ‚ä©rfl‚Ä≤ :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© rfl ‚à∑ Id A t u
  ‚ä©rfl‚Ä≤ t‚â°u =
    case wf-‚ä©‚â°‚à∑ t‚â°u of Œª
      (‚ä©t , ‚ä©u) ‚Üí
    case escape-‚ä©‚à∑ ‚ä©t of Œª
      ‚ä¢t ‚Üí
    Identity‚Üí‚ä©‚à∑Id‚áî rfl‚Çô .proj‚ÇÇ
      ( conv (rfl‚±º ‚ä¢t)
          (Id-cong (refl (escape (wf-‚ä©‚à∑ ‚ä©t))) (refl ‚ä¢t)
             (‚âÖ‚Çú-eq (escape-‚ä©‚â°‚à∑ t‚â°u)))
      , ‚ä©t , ‚ä©u , rfl·µ£ t‚â°u
      )

opaque

  -- Reducibility of reflexivity.

  ‚ä©rfl :
    Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© rfl ‚à∑ Id A t t
  ‚ä©rfl ‚ä©t = ‚ä©rfl‚Ä≤ (refl-‚ä©‚â°‚à∑ ‚ä©t)

opaque

  -- Reducibility of equality between rfl and rfl.

  ‚ä©rfl‚â°rfl :
    Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä©‚ü® l ‚ü© rfl ‚â° rfl ‚à∑ Id A t u
  ‚ä©rfl‚â°rfl t‚â°u =
    case wf-‚ä©‚â°‚à∑ t‚â°u of Œª
      (‚ä©t , ‚ä©u) ‚Üí
    case escape-‚ä©‚à∑ (‚ä©rfl‚Ä≤ t‚â°u) of Œª
      ‚ä¢rfl ‚Üí
    Identity‚Üí‚ä©‚â°‚à∑Id‚áî rfl‚Çô rfl‚Çô .proj‚ÇÇ
      (‚ä¢rfl , ‚ä¢rfl , ‚ä©t , ‚ä©u , rfl‚Çå t‚â°u)

opaque

  -- Validity of equality for rfl.

  rfl-cong·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© rfl ‚â° rfl ‚à∑ Id A t t
  rfl-cong·µõ ‚ä©t =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( Id·µõ ‚ä©t ‚ä©t
      , ‚ä©rfl‚â°rfl ‚àò‚Üí ‚ä©·µõ‚à∑‚áî ∞ .proj‚ÇÅ ‚ä©t .proj‚ÇÇ ‚àò‚Üí
        refl-‚ä©À¢‚â°‚à∑ ‚àò‚Üí proj‚ÇÅ ‚àò‚Üí wf-‚ä©À¢‚â°‚à∑
      )

opaque

  -- Validity of reflexivity.

  rfl·µõ :
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© rfl ‚à∑ Id A t t
  rfl·µõ = ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ ‚àò‚Üí rfl-cong·µõ

------------------------------------------------------------------------
-- Equality reflection

opaque

  -- Validity of equality reflection.

  equality-reflection·µõ :
    Equality-reflection ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© v ‚à∑ Id A t u ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚â° u ‚à∑ A
  equality-reflection·µõ ok ‚ä©v =
    case ‚ä©·µõ‚à∑‚áî ∞ .proj‚ÇÅ ‚ä©v of Œª
      (‚ä©Id , v‚â°v) ‚Üí
    case ‚ä©·µõId‚áî .proj‚ÇÅ ‚ä©Id of Œª
      (‚ä©t , ‚ä©u) ‚Üí
    ‚ä©·µõ‚â°‚à∑‚áî‚Ä≤ ∞ .proj‚ÇÇ
      ( ‚ä©t
      , ‚ä©u
      , Œª ‚ä©œÉ ‚Üí
          case ‚ä©‚â°‚à∑Id‚áî .proj‚ÇÅ $ v‚â°v $ refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ of Œª
            (_ , _ , _ , _ , _ , _ , rest) ‚Üí
          case rest of Œª where
            (rfl‚Çå t[œÉ]‚â°u[œÉ]) ‚Üí t[œÉ]‚â°u[œÉ]
            (ne inc _ _ _)   ‚Üí
              ‚ä•-elim $
              Equality-reflection-allowed‚Üí¬¨Neutrals-included ok inc
      )

------------------------------------------------------------------------
-- []-cong

opaque

  -- Reducibility of equality between applications of []-cong.

  ‚ä©[]-cong‚â°[]-cong :
    (ok : []-cong-allowed s) ‚Üí
    let open E ok in
    Œì ‚ä©‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l‚Ä¥ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚Üí
    Œì ‚ä©‚ü® l ‚ü© []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â° []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑
      Id (Erased A‚ÇÅ) [ t‚ÇÅ ] [ u‚ÇÅ ]
  ‚ä©[]-cong‚â°[]-cong
    {s} {A‚ÇÅ} {A‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {v‚ÇÅ} {v‚ÇÇ}
    ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    case escape-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      A‚ÇÅ‚âÖA‚ÇÇ ‚Üí
    case wf-‚ä©‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , _) ‚Üí
    case level-‚ä©‚â°‚à∑ ‚ä©A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ of Œª
      t‚ÇÅ‚â°t‚ÇÇ ‚Üí
    case escape-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      t‚ÇÅ‚âÖt‚ÇÇ ‚Üí
    case wf-‚ä©‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , _) ‚Üí
    case level-‚ä©‚â°‚à∑ ‚ä©A‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ of Œª
      u‚ÇÅ‚â°u‚ÇÇ ‚Üí
    case escape-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      u‚ÇÅ‚âÖu‚ÇÇ ‚Üí
    case wf-‚ä©‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , _) ‚Üí
    case level-‚ä©‚â°‚à∑ (‚ä©Id‚áî .proj‚ÇÇ (‚ä©t‚ÇÅ , ‚ä©u‚ÇÅ)) v‚ÇÅ‚â°v‚ÇÇ of Œª
      v‚ÇÅ‚â°v‚ÇÇ ‚Üí
    case ‚âÖ-eq A‚ÇÅ‚âÖA‚ÇÇ of Œª
      ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case ‚âÖ‚Çú-eq t‚ÇÅ‚âÖt‚ÇÇ of Œª
      ‚ä¢t‚ÇÅ‚â°t‚ÇÇ ‚Üí
    case ‚âÖ‚Çú-eq u‚ÇÅ‚âÖu‚ÇÇ of Œª
      ‚ä¢u‚ÇÅ‚â°u‚ÇÇ ‚Üí
    case (let ok = []-cong‚ÜíErased ok in
          Id-cong (Erased-cong ok ‚ä¢A‚ÇÅ‚â°A‚ÇÇ) ([]-cong‚Ä≤ ok ‚ä¢t‚ÇÅ‚â°t‚ÇÇ)
            ([]-cong‚Ä≤ ok ‚ä¢u‚ÇÅ‚â°u‚ÇÇ)) of Œª
      ‚ä¢Id‚â°Id ‚Üí
    case ‚ä©‚â°‚à∑Id‚áî .proj‚ÇÅ v‚ÇÅ‚â°v‚ÇÇ of Œª
      (v‚ÇÅ‚Ä≤ , v‚ÇÇ‚Ä≤ , v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤ , v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤ , ‚ä©t , ‚ä©u , rest) ‚Üí
    case []-cong-subst* v‚ÇÅ‚áí*v‚ÇÅ‚Ä≤ ok of Œª
      []-cong‚áí*[]-cong‚ÇÅ ‚Üí
    case []-cong-subst* (conv* v‚ÇÇ‚áí*v‚ÇÇ‚Ä≤ (Id-cong ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚ä¢t‚ÇÅ‚â°t‚ÇÇ ‚ä¢u‚ÇÅ‚â°u‚ÇÇ))
           ok of Œª
      []-cong‚áí*[]-cong‚ÇÇ ‚Üí
    case rest of Œª where
      (rfl‚Çå t‚ÇÅ‚â°u‚ÇÅ) ‚Üí
        case      Àò‚ü® A‚ÇÅ‚â°A‚ÇÇ ‚ü©‚ä©‚à∑
             t‚ÇÇ  ‚â°Àò‚ü® t‚ÇÅ‚â°t‚ÇÇ ‚ü©‚ä©‚à∑
             t‚ÇÅ  ‚â°‚ü® t‚ÇÅ‚â°u‚ÇÅ ‚ü©‚ä©‚à∑
             u‚ÇÅ  ‚â°‚ü® u‚ÇÅ‚â°u‚ÇÇ ‚ü©‚ä©‚à∑‚àé
             u‚ÇÇ  ‚àé of Œª
          t‚ÇÇ‚â°u‚ÇÇ ‚Üí
        []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ               ‚áí*‚ü® []-cong‚áí*[]-cong‚ÇÅ ‚ü©‚ä©‚à∑
        []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ rfl              ‚áí‚ü® []-cong-Œ≤-‚áí (‚âÖ‚Çú-eq (escape-‚ä©‚â°‚à∑ t‚ÇÅ‚â°u‚ÇÅ)) ok ‚ü©‚ä©‚à∑
        rfl ‚à∑ Id (Erased A‚ÇÅ) [ t‚ÇÅ ] [ u‚ÇÅ ]  ‚â°‚ü® refl-‚ä©‚â°‚à∑ (‚ä©rfl‚Ä≤ (‚ä©[]‚â°[] t‚ÇÅ‚â°u‚ÇÅ)) ‚ü©‚ä©‚à∑‚à∑‚áê* (
                                             ‚ü® ‚ä¢Id‚â°Id ‚ü©‚áí
        rfl ‚à∑ Id (Erased A‚ÇÇ) [ t‚ÇÇ ] [ u‚ÇÇ ]  ‚áê‚ü® []-cong-Œ≤-‚áí (‚âÖ‚Çú-eq (escape-‚ä©‚â°‚à∑ t‚ÇÇ‚â°u‚ÇÇ)) ok ‚ü©‚à∑
        []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ rfl              ‚áê*‚ü® []-cong‚áí*[]-cong‚ÇÇ ‚ü©‚àé
        []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ               ‚àé)

      (ne inc v‚ÇÅ‚Ä≤-ne v‚ÇÇ‚Ä≤-ne v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤) ‚Üí
        []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ                                  ‚áí*‚ü® []-cong‚áí*[]-cong‚ÇÅ ‚ü©‚ä©‚à∑
        []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ‚Ä≤ ‚à∑ Id (Erased A‚ÇÅ) [ t‚ÇÅ ] [ u‚ÇÅ ]  ‚â°‚ü® neutral-‚ä©‚â°‚à∑ inc (‚ä©Id‚áî .proj‚ÇÇ (‚ä©[] ‚ä©t‚ÇÅ , ‚ä©[] ‚ä©u‚ÇÅ))
                                                                    ([]-cong‚Çô v‚ÇÅ‚Ä≤-ne) ([]-cong‚Çô v‚ÇÇ‚Ä≤-ne)
                                                                    (~-[]-cong A‚ÇÅ‚âÖA‚ÇÇ t‚ÇÅ‚âÖt‚ÇÇ u‚ÇÅ‚âÖu‚ÇÇ v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤ ok) ‚ü©‚ä©‚à∑‚à∑‚áê* (
                                                                 ‚ü® ‚ä¢Id‚â°Id ‚ü©‚áí
        []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ‚Ä≤ ‚à∑ Id (Erased A‚ÇÇ) [ t‚ÇÇ ] [ u‚ÇÇ ]  ‚áê*‚ü® []-cong‚áí*[]-cong‚ÇÇ ‚ü©‚àé‚à∑
        []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ                                  ‚àé)
    where
    open E ok

opaque

  -- Reducibility for []-cong.

  ‚ä©[]-cong :
    (ok : []-cong-allowed s) ‚Üí
    let open E ok in
    Œì ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u ‚Üí
    Œì ‚ä©‚ü® l ‚ü© []-cong s A t u v ‚à∑ Id (Erased A) [ t ] [ u ]
  ‚ä©[]-cong ok ‚ä©v =
    case ‚ä©‚à∑Id‚áî .proj‚ÇÅ ‚ä©v of Œª
      (_ , _ , ‚ä©t , ‚ä©u , _) ‚Üí
    ‚ä©‚à∑‚áî‚ä©‚â°‚à∑ .proj‚ÇÇ $
    ‚ä©[]-cong‚â°[]-cong ok (refl-‚ä©‚â° (wf-‚ä©‚à∑ ‚ä©t)) (refl-‚ä©‚â°‚à∑ ‚ä©t)
      (refl-‚ä©‚â°‚à∑ ‚ä©u) (refl-‚ä©‚â°‚à∑ ‚ä©v)

opaque

  -- Validity of equality preservation for []-cong.

  []-cong-cong·µõ :
    (ok : []-cong-allowed s) ‚Üí
    let open E ok in
    Œì ‚ä©·µõ‚ü® l ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© []-cong s A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â° []-cong s A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑
      Id (Erased A‚ÇÅ) [ t‚ÇÅ ] [ u‚ÇÅ ]
  []-cong-cong·µõ ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( wf-‚ä©·µõ‚â°
          (Id-cong·µõ (Erased-cong·µõ A‚ÇÅ‚â°A‚ÇÇ) ([]-cong·µõ‚Ä≤ t‚ÇÅ‚â°t‚ÇÇ)
             ([]-cong·µõ‚Ä≤ u‚ÇÅ‚â°u‚ÇÇ))
          .proj‚ÇÅ
      , Œª œÉ‚ÇÅ‚â°œÉ‚ÇÇ ‚Üí
          ‚ä©[]-cong‚â°[]-cong ok (R.‚ä©‚â°‚Üí $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
            (R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ v‚ÇÅ‚â°v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
      )
    where
    open E ok

opaque

  -- Validity of []-cong.

  []-cong·µõ :
    (ok : []-cong-allowed s) ‚Üí
    let open E ok in
    Œì ‚ä©·µõ‚ü® l ‚ü© v ‚à∑ Id A t u ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© []-cong s A t u v ‚à∑ Id (Erased A) [ t ] [ u ]
  []-cong·µõ ok ‚ä©v =
    case ‚ä©·µõId‚áî .proj‚ÇÅ $ wf-‚ä©·µõ‚à∑ ‚ä©v of Œª
      (‚ä©t , ‚ä©u) ‚Üí
    case wf-‚ä©·µõ‚à∑ ‚ä©t of Œª
      ‚ä©A ‚Üí
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    []-cong-cong·µõ ok (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u)
      (refl-‚ä©·µõ‚â°‚à∑ ‚ä©v)

opaque

  -- Validity of the []-cong Œ≤ rule.

  []-cong-Œ≤·µõ :
    (ok : []-cong-allowed s) ‚Üí
    let open E ok in
    Œì ‚ä©·µõ‚ü® l ‚ü© t ‚à∑ A ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© []-cong s A t t rfl ‚â° rfl ‚à∑ Id (Erased A) [ t ] [ t ]
  []-cong-Œ≤·µõ {s} {t} {A} ok ‚ä©t =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         case R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©t ‚ä©œÉ of Œª
           ‚ä¢t[œÉ] ‚Üí
         []-cong-Œ≤-‚áí (refl ‚ä¢t[œÉ]) ok)
      (rfl·µõ ([]·µõ ‚ä©t))
    where
    open E ok

------------------------------------------------------------------------
-- The K rule

opaque

  -- Reducibility of equality between applications of¬†K.

  ‚ä©K‚â°K :
    K-allowed ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B‚ÇÅ [ rfl ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Åó ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚Üí
    ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© K p A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ U.[ œÉ‚ÇÅ ] ‚â° K p A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑
      B‚ÇÅ [ v‚ÇÅ ]‚ÇÄ U.[ œÉ‚ÇÅ ]
  ‚ä©K‚â°K
    {A‚ÇÅ} {A‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {B‚ÇÅ} {B‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {v‚ÇÅ} {v‚ÇÇ} {œÉ‚ÇÅ} {œÉ‚ÇÇ} {p}
    ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =

    -- Some definitions related to œÉ‚ÇÅ and¬†œÉ‚ÇÇ.
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí

    -- Some definitions related to Id.
    case Id-cong·µõ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ of Œª
      Id‚â°Id ‚Üí
    case R.‚ä©‚â°‚Üí $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] Id‚â°Id œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      Id[œÉ‚ÇÅ]‚â°Id[œÉ‚ÇÇ] ‚Üí
    case ‚âÖ-eq $ escape-‚ä©‚â° Id[œÉ‚ÇÅ]‚â°Id[œÉ‚ÇÇ] of Œª
      ‚ä¢Id[œÉ‚ÇÅ]‚â°Id[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to t‚ÇÅ and¬†t‚ÇÇ.
    case wf-‚ä©·µõ‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä©t‚ÇÅ , _) ‚Üí
    case ‚âÖ‚Çú-eq $ R.escape-‚ä©‚â°‚à∑ $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to B‚ÇÅ and¬†B‚ÇÇ.
    case wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ of Œª
      (‚ä©B‚ÇÅ , ‚ä©B‚ÇÇ) ‚Üí
    case conv-‚àô-‚ä©·µõ Id‚â°Id ‚ä©B‚ÇÇ of Œª
      ‚ä©B‚ÇÇ ‚Üí
    case wf-‚ä¢‚â° $ subst-‚ä¢‚â°-‚áë ‚ä¢B‚ÇÅ‚â°B‚ÇÇ $ escape-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ .proj‚ÇÇ of Œª
      (‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë] , ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë]) ‚Üí
    case stability
           (refl-‚àô $
            Id-cong
              (‚âÖ-eq $ R.escape-‚ä©‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
              t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ])
           ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë] of Œª
      ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë] ‚Üí

    -- Some definitions related to u‚ÇÅ and¬†u‚ÇÇ.
    case wf-‚ä©·µõ‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ of Œª
      (‚ä©u‚ÇÅ , ‚ä©u‚ÇÇ) ‚Üí
    case conv-‚ä©·µõ‚à∑ (‚ä©·µõ‚â°‚Üí‚ä©·µõ‚â°‚à∑‚Üí‚ä©·µõ[]‚ÇÄ‚â°[]‚ÇÄ B‚ÇÅ‚â°B‚ÇÇ (refl-‚ä©·µõ‚â°‚à∑ (rfl·µõ ‚ä©t‚ÇÅ)))
           ‚ä©u‚ÇÇ of Œª
      ‚ä©u‚ÇÇ ‚Üí
    case PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B‚ÇÅ _) $
         R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B‚ÇÇ _) $
         R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u‚ÇÇ ‚ä©œÉ‚ÇÇ of Œª
      ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (singleSubstLift B‚ÇÅ _) $
         R.‚ä©‚â°‚à∑‚Üí $
         ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑
           (level-‚ä©·µõ‚â°‚à∑ (‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ ‚ä©B‚ÇÅ (rfl·µõ ‚ä©t‚ÇÅ)) u‚ÇÅ‚â°u‚ÇÇ) œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to v‚ÇÅ and¬†v‚ÇÇ.
    case wf-‚ä©·µõ‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ of Œª
      (‚ä©v‚ÇÅ , ‚ä©v‚ÇÇ) ‚Üí
    case conv-‚ä©·µõ‚à∑ Id‚â°Id ‚ä©v‚ÇÇ of Œª
      ‚ä©v‚ÇÇ ‚Üí
    case R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ v‚ÇÅ‚â°v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©‚â°‚à∑Id‚áî .proj‚ÇÅ v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] of Œª
      (v‚ÇÅ‚Ä≤ , v‚ÇÇ‚Ä≤ , v‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ‚Ä≤ , v‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ‚Ä≤ , _ , _ , rest) ‚Üí
    case conv* v‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ‚Ä≤ ‚ä¢Id[œÉ‚ÇÅ]‚â°Id[œÉ‚ÇÇ] of Œª
      v‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ‚Ä≤ ‚Üí

    -- Some definitions related to v‚ÇÅ‚Ä≤ and¬†v‚ÇÇ‚Ä≤.
    case ‚ä©‚à∑-‚áí* v‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ‚Ä≤ $ R.‚ä©‚à∑‚Üí $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©v‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ‚Ä≤ ‚Üí
    case ‚ä©‚à∑-‚áí* v‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ‚Ä≤ $ R.‚ä©‚à∑‚Üí $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©v‚ÇÇ ‚ä©œÉ‚ÇÇ of Œª
      v‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ‚Ä≤ ‚Üí
    case R.‚ä©‚â°‚Üí $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ $
         R.‚Üí‚ä©‚â°‚à∑
           (v‚ÇÅ‚Ä≤                                 ‚â°Àò‚ü® v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑
            v‚ÇÅ U.[ œÉ‚ÇÅ ] ‚à∑ Id A‚ÇÅ t‚ÇÅ t‚ÇÅ U.[ œÉ‚ÇÅ ]  ‚â°‚ü® v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑
                                                 ‚ü® Id[œÉ‚ÇÅ]‚â°Id[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑
            v‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ Id A‚ÇÇ t‚ÇÇ t‚ÇÇ U.[ œÉ‚ÇÇ ]  ‚â°‚ü® v‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ‚Ä≤ ‚ü©‚ä©‚à∑‚àé‚à∑
            v‚ÇÇ‚Ä≤                                 ‚àé) of Œª
      B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ ‚Üí
    case ‚âÖ-eq $ escape-‚ä©‚â° B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ of Œª
      ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ ‚Üí

    -- The two applications of K are equal if applications of K to v‚ÇÅ‚Ä≤
    -- and v‚ÇÇ‚Ä≤ are equal.
    case
      (Œª hyp ‚Üí
         K p (A‚ÇÅ U.[ œÉ‚ÇÅ ]) (t‚ÇÅ U.[ œÉ‚ÇÅ ]) (B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ]) (u‚ÇÅ U.[ œÉ‚ÇÅ ])
           (v‚ÇÅ U.[ œÉ‚ÇÅ ]) ‚à∑ B‚ÇÅ [ v‚ÇÅ ]‚ÇÄ U.[ œÉ‚ÇÅ ]                          ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑
                                                                         ‚ü® singleSubstLift B‚ÇÅ _ ‚ü©‚ä©‚à∑‚â°
         _               ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ] [ v‚ÇÅ U.[ œÉ‚ÇÅ ] ]‚ÇÄ               ‚áí*‚ü® K-subst* ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] v‚ÇÅ[œÉ‚ÇÅ]‚áí*v‚ÇÅ‚Ä≤ ok ‚ü©‚ä©‚à∑‚à∑
                                                                          ‚ü® R.‚ä©‚â°‚Üí $
                                                                            ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ
                                                                              (refl-‚ä©·µõ‚â° ‚ä©B‚ÇÅ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ‚Ä≤) ‚ü©‚ä©‚à∑
         K p (A‚ÇÅ U.[ œÉ‚ÇÅ ]) (t‚ÇÅ U.[ œÉ‚ÇÅ ]) (B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ]) (u‚ÇÅ U.[ œÉ‚ÇÅ ])
           v‚ÇÅ‚Ä≤ ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ] [ v‚ÇÅ‚Ä≤ ]‚ÇÄ                                 ‚â°‚ü® hyp ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                         ‚ü® ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí
               ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ] [ v‚ÇÇ‚Ä≤ ]‚ÇÄ                                 Àò‚ü® ‚âÖ-eq $ escape-‚ä©‚â° $ R.‚ä©‚â°‚Üí $
                                                                           ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë][]‚ÇÄ‚â°[‚áë][]‚ÇÄ
                                                                             (refl-‚ä©·µõ‚â° ‚ä©B‚ÇÇ) (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ) (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ‚Ä≤) ‚ü©‚áí
         K p (A‚ÇÇ U.[ œÉ‚ÇÇ ]) (t‚ÇÇ U.[ œÉ‚ÇÇ ]) (B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ]) (u‚ÇÇ U.[ œÉ‚ÇÇ ])
           v‚ÇÇ‚Ä≤ ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ] [ v‚ÇÇ U.[ œÉ‚ÇÇ ] ]‚ÇÄ                         ‚áê*‚ü® K-subst* ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] v‚ÇÇ[œÉ‚ÇÇ]‚áí*v‚ÇÇ‚Ä≤ ok ‚ü©‚àé‚à∑
         K p (A‚ÇÇ U.[ œÉ‚ÇÇ ]) (t‚ÇÇ U.[ œÉ‚ÇÇ ]) (B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ]) (u‚ÇÇ U.[ œÉ‚ÇÇ ])
           (v‚ÇÇ U.[ œÉ‚ÇÇ ])                                                ‚àé)
    of Œª
      lemma ‚Üí

    case rest of Œª where
      (rfl‚Çå _) ‚Üí
        -- If v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are both rfl, then one can conclude by using
        -- the Œ≤-rule for K and the fact that u‚ÇÅ¬†[œÉ‚ÇÅ] is equal to
        -- u‚ÇÇ¬†[œÉ‚ÇÇ].
        lemma
          (K p A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ rfl U.[ œÉ‚ÇÅ ]          ‚áí‚ü® K-Œ≤ ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ok ‚ü©‚ä©‚à∑
           u‚ÇÅ U.[ œÉ‚ÇÅ ] ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ] [ rfl ]‚ÇÄ  ‚â°‚ü® u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                  ‚ü® ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ ‚ü©‚áí
           u‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ] [ rfl ]‚ÇÄ  ‚áê‚ü® K-Œ≤ ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ok ‚ü©‚àé‚à∑
           K p A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ rfl U.[ œÉ‚ÇÇ ]          ‚àé)

      (ne inc v‚ÇÅ‚Ä≤-ne v‚ÇÇ‚Ä≤-ne v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤) ‚Üí
        -- If v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are equal neutral terms, then one can
        -- conclude by using the fact that the applications of K to
        -- v‚ÇÅ‚Ä≤ and v‚ÇÇ‚Ä≤ are equal neutral terms.
        lemma $
        neutral-‚ä©‚â°‚à∑ inc
          (wf-‚ä©‚â° B‚ÇÅ[œÉ‚ÇÅ‚áë][v‚ÇÅ‚Ä≤]‚ÇÄ‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë][v‚ÇÇ‚Ä≤]‚ÇÄ .proj‚ÇÅ)
          (K‚Çô v‚ÇÅ‚Ä≤-ne) (K‚Çô v‚ÇÇ‚Ä≤-ne) $
        ~-K (R.escape-‚ä©‚â° $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
          (R.escape-‚ä©‚â°‚à∑ $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
          (R.escape-‚ä©‚â° ‚¶É inc = included ‚¶É inc = inc ‚¶Ñ ‚¶Ñ $
           ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë]‚â°[‚áë] B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
          (escape-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ]) v‚ÇÅ‚Ä≤~v‚ÇÇ‚Ä≤ ok

opaque

  -- Validity of equality preservation for¬†K.

  K-cong·µõ :
    K-allowed ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä¥ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B‚ÇÅ [ rfl ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Åó ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© K p A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â° K p A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑ B‚ÇÅ [ v‚ÇÅ ]‚ÇÄ
  K-cong·µõ ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÄ (wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÅ) (wf-‚ä©·µõ‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ .proj‚ÇÅ)
      , ‚ä©K‚â°K ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ
      )

opaque

  -- Validity of¬†K.

  K·µõ :
    K-allowed ‚Üí
    Œì ‚àô Id A t t ‚ä¢ B ‚Üí
    Œì ‚àô Id A t t ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ B [ rfl ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© v ‚à∑ Id A t t ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© K p A t B u v ‚à∑ B [ v ]‚ÇÄ
  K·µõ ok ‚ä¢B ‚ä©B ‚ä©u ‚ä©v =
    case ‚ä©·µõId‚áî .proj‚ÇÅ $ wf-‚ä©·µõ‚à∑ ‚ä©v of Œª
      (‚ä©t , _) ‚Üí
    case wf-‚ä©·µõ‚à∑ ‚ä©t of Œª
      ‚ä©A ‚Üí
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    K-cong·µõ ok (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl ‚ä¢B) (refl-‚ä©·µõ‚â° ‚ä©B)
      (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©v)

opaque

  -- Validity of the K Œ≤ rule.

  K-Œ≤·µõ :
    K-allowed ‚Üí
    Œì ‚àô Id A t t ‚ä¢ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ B [ rfl ]‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© K p A t B u rfl ‚â° u ‚à∑ B [ rfl ]‚ÇÄ
  K-Œ≤·µõ {B} ok ‚ä¢B ‚ä©u =
    ‚ä©·µõ‚à∑-‚áê
      (Œª ‚ä©œÉ ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ singleSubstLift B _) $
         K-Œ≤
           (subst-‚ä¢-‚áë ‚ä¢B (escape-‚ä©À¢‚à∑ ‚ä©œÉ .proj‚ÇÇ))
           (PE.subst (_‚ä¢_‚à∑_ _ _) (singleSubstLift B _) $
            R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ)
           ok)
      ‚ä©u

------------------------------------------------------------------------
-- The J rule

private opaque

  -- A lemma used below.

  Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ :
    ‚àÄ A t ‚Üí
    Id (A U.[ œÉ ]) (t U.[ œÉ ]) u PE.‚â°
    Id (wk1 A) (wk1 t) (var x0) U.[ œÉ ‚áë ] [ u ]‚ÇÄ
  Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ {œÉ} {u} A t =
    Id (A U.[ œÉ ]) (t U.[ œÉ ]) u                            ‚â°‚ü® ‚â°Id-wk1-wk1-0[]‚ÇÄ ‚ü©
    Id (wk1 (A U.[ œÉ ]) [ u ]‚ÇÄ) (wk1 (t U.[ œÉ ]) [ u ]‚ÇÄ) u  ‚â°‚ü®‚ü©
    Id (wk1 (A U.[ œÉ ])) (wk1 (t U.[ œÉ ])) (var x0) [ u ]‚ÇÄ  ‚â°Àò‚ü® PE.cong _[ u ]‚ÇÄ $ Id-wk1-wk1-0[‚áë]‚â° A t ‚ü©
    Id (wk1 A) (wk1 t) (var x0) U.[ œÉ ‚áë ] [ u ]‚ÇÄ            ‚àé
    where
    open Tools.Reasoning.PropositionalEquality

opaque

  -- Reducibility of equality between applications of¬†J.

  ‚ä©J‚â°J :
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÅ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÇ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÉ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B‚ÇÅ [ t‚ÇÅ , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÑ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÖ ‚ü© w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ ‚Üí
    ‚¶É inc : Neutrals-included or-empty Œî ‚¶Ñ ‚Üí
    Œî ‚ä©À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí
    Œî ‚ä©‚ü® l ‚ü© J p q A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ w‚ÇÅ U.[ œÉ‚ÇÅ ] ‚â°
      J p q A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ w‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ B‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ U.[ œÉ‚ÇÅ ]
  ‚ä©J‚â°J
    {A‚ÇÅ} {A‚ÇÇ} {t‚ÇÅ} {t‚ÇÇ} {B‚ÇÅ} {B‚ÇÇ} {u‚ÇÅ} {u‚ÇÇ} {v‚ÇÅ} {v‚ÇÇ} {w‚ÇÅ} {w‚ÇÇ} {œÉ‚ÇÅ}
    {œÉ‚ÇÇ} {p} {q} A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ =

    -- Some definitions related to œÉ‚ÇÅ and¬†œÉ‚ÇÇ.
    case wf-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä©œÉ‚ÇÅ , ‚ä©œÉ‚ÇÇ) ‚Üí
    case escape-‚ä©À¢‚â°‚à∑ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (_ , ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ) ‚Üí
    case wf-‚ä¢À¢ ∑‚â°‚à∑ ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (_ , _ , ‚ä¢œÉ‚ÇÇ) ‚Üí

    -- Some definitions related to A‚ÇÅ and¬†A‚ÇÇ.
    case wf-‚ä©·µõ‚â° A‚ÇÅ‚â°A‚ÇÇ of Œª
      (‚ä©A‚ÇÅ , _) ‚Üí
    case R.‚ä©‚â°‚Üí $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] A‚ÇÅ‚â°A‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case escape-‚ä©‚â° A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] of Œª
      A‚ÇÅ[œÉ‚ÇÅ]‚âÖA‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚âÖ-eq A‚ÇÅ[œÉ‚ÇÅ]‚âÖA‚ÇÇ[œÉ‚ÇÇ] of Œª
      ‚ä¢A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case wf-‚ä¢‚â° ‚ä¢A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] of Œª
      (‚ä¢A‚ÇÅ[œÉ‚ÇÅ] , _) ‚Üí

    -- Some definitions related to t‚ÇÅ and¬†t‚ÇÇ.
    case R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ t‚ÇÅ‚â°t‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case wf-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] of Œª
      (‚ä©t‚ÇÅ[œÉ‚ÇÅ] , ‚ä©t‚ÇÇ[œÉ‚ÇÇ]) ‚Üí
    case conv-‚ä©‚à∑ A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚ä©t‚ÇÇ[œÉ‚ÇÇ] of Œª
      ‚ä©t‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case R.refl-‚ä©‚â°‚à∑ $ R.‚Üí‚ä©‚à∑ $
         PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ A‚ÇÅ t‚ÇÅ) $
         ‚ä©rfl ‚ä©t‚ÇÅ[œÉ‚ÇÅ] of Œª
      rfl‚â°rfl ‚Üí

    -- Some definitions related to Id.
    case Id-cong·µõ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ of Œª
      Id-v‚ÇÅ‚â°Id-v‚ÇÇ ‚Üí
    case R.‚ä©‚â°‚Üí $ ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[] Id-v‚ÇÅ‚â°Id-v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      Id-v‚ÇÅ[œÉ‚ÇÅ]‚â°Id-v‚ÇÇ[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to B‚ÇÅ and¬†B‚ÇÇ.
    case wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ of Œª
      (‚ä©B‚ÇÅ , ‚ä©B‚ÇÇ) ‚Üí
    case conv-‚àô‚àô-‚ä©·µõ A‚ÇÅ‚â°A‚ÇÇ
           (Id-cong·µõ (wk1-‚ä©·µõ‚â° ‚ä©A‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ) (wk1-‚ä©·µõ‚â°‚à∑ ‚ä©A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ)
              (refl-‚ä©·µõ‚â°‚à∑ (var·µõ‚Ä≤ here (wk1-‚ä©·µõ ‚ä©A‚ÇÅ ‚ä©A‚ÇÅ))))
           ‚ä©B‚ÇÇ of Œª
      ‚ä©B‚ÇÇ ‚Üí
    case ‚âÖ-eq $ R.escape-‚ä©‚â° $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ
           (R.‚Üí‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ]) rfl‚â°rfl of Œª
      ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][t‚ÇÅ[œÉ‚ÇÅ],rfl]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][t‚ÇÇ[œÉ‚ÇÇ],rfl] ‚Üí
    case wf-‚ä¢‚â° $
         PE.subst‚ÇÉ _‚ä¢_‚â°_
           (PE.cong (_‚àô_ _) $ Id-wk1-wk1-0[‚áë]‚â° A‚ÇÅ t‚ÇÅ) PE.refl PE.refl $
         subst-‚ä¢‚â°-‚áë ‚ä¢B‚ÇÅ‚â°B‚ÇÇ ‚ä¢œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      (‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë¬≤] , ‚ä¢B‚ÇÅ[œÉ‚ÇÇ‚áë¬≤]) ‚Üí
    case stability
           (refl-‚àô ‚ä¢A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚àô
            Id-cong (wkEq‚ÇÅ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] ‚ä¢A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ])
              (wkEqTerm‚ÇÅ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ] (‚âÖ‚Çú-eq $ escape-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ]))
              (refl (var‚ÇÄ ‚ä¢A‚ÇÅ[œÉ‚ÇÅ])))
           ‚ä¢B‚ÇÅ[œÉ‚ÇÇ‚áë¬≤] of Œª
      ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë¬≤] ‚Üí

    -- Some definitions related to u‚ÇÅ and¬†u‚ÇÇ.
    case PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) ([,]-[]-commute B‚ÇÅ) $
         R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ u‚ÇÅ‚â°u‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case escape-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] .proj‚ÇÅ of Œª
      ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ‚Üí
    case _‚ä¢_‚à∑_.conv (escape-‚ä©‚à∑ $ wf-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] .proj‚ÇÇ)
           ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][t‚ÇÅ[œÉ‚ÇÅ],rfl]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][t‚ÇÇ[œÉ‚ÇÇ],rfl] of Œª
      ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to v‚ÇÅ and¬†v‚ÇÇ.
    case R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ v‚ÇÅ‚â°v‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case wf-‚ä©‚â°‚à∑ v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] of Œª
      (‚ä©v‚ÇÅ[œÉ‚ÇÅ] , ‚ä©v‚ÇÇ[œÉ‚ÇÇ]) ‚Üí
    case conv-‚ä©‚à∑ A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚ä©v‚ÇÇ[œÉ‚ÇÇ] of Œª
      ‚ä©v‚ÇÇ[œÉ‚ÇÇ] ‚Üí

    -- Some definitions related to w‚ÇÅ and¬†w‚ÇÇ.
    case wf-‚ä©·µõ‚â°‚à∑ w‚ÇÅ‚â°w‚ÇÇ of Œª
      (‚ä©w‚ÇÅ , ‚ä©w‚ÇÇ) ‚Üí
    case conv-‚ä©·µõ‚à∑ Id-v‚ÇÅ‚â°Id-v‚ÇÇ ‚ä©w‚ÇÇ of Œª
      ‚ä©w‚ÇÇ ‚Üí
    case R.‚ä©‚â°‚à∑‚Üí $ ‚ä©·µõ‚â°‚à∑‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[]‚â°[]‚à∑ w‚ÇÅ‚â°w‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ of Œª
      w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÇ[œÉ‚ÇÇ] ‚Üí
    case ‚ä©‚â°‚à∑Id‚áî .proj‚ÇÅ w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÇ[œÉ‚ÇÇ] of Œª
      (w‚ÇÅ‚Ä≤ , w‚ÇÇ‚Ä≤ , w‚ÇÅ‚áí*w‚ÇÅ‚Ä≤ , w‚ÇÇ‚áí*w‚ÇÇ‚Ä≤ , _ , _ , rest) ‚Üí
    case conv* w‚ÇÇ‚áí*w‚ÇÇ‚Ä≤ (‚âÖ-eq $ escape-‚ä©‚â° Id-v‚ÇÅ[œÉ‚ÇÅ]‚â°Id-v‚ÇÇ[œÉ‚ÇÇ]) of Œª
      w‚ÇÇ‚áí*w‚ÇÇ‚Ä≤ ‚Üí

    -- Some definitions related to w‚ÇÅ‚Ä≤ and¬†w‚ÇÇ‚Ä≤.
    case ‚ä©‚à∑-‚áí* w‚ÇÅ‚áí*w‚ÇÅ‚Ä≤ $ R.‚ä©‚à∑‚Üí $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©w‚ÇÅ ‚ä©œÉ‚ÇÅ of Œª
      w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÅ‚Ä≤ ‚Üí
    case ‚ä©‚à∑-‚áí* w‚ÇÇ‚áí*w‚ÇÇ‚Ä≤ $ R.‚ä©‚à∑‚Üí $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©w‚ÇÇ ‚ä©œÉ‚ÇÇ of Œª
      w‚ÇÇ[œÉ‚ÇÇ]‚â°w‚ÇÇ‚Ä≤ ‚Üí
    case
      w‚ÇÅ‚Ä≤ ‚à∑ Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) U.[ œÉ‚ÇÅ ‚áë ] [ v‚ÇÅ U.[ œÉ‚ÇÅ ] ]‚ÇÄ  ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑
                                                                       Àò‚ü® Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ A‚ÇÅ t‚ÇÅ ‚ü©‚ä©‚à∑‚â°
      _   ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ U.[ œÉ‚ÇÅ ]                                       ‚â°Àò‚ü® w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑‚à∑
      w‚ÇÅ U.[ œÉ‚ÇÅ ] ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ U.[ œÉ‚ÇÅ ]                               ‚â°‚ü® w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑
                                                                        ‚ü® Id-v‚ÇÅ[œÉ‚ÇÅ]‚â°Id-v‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑
      w‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ Id A‚ÇÇ t‚ÇÇ v‚ÇÇ U.[ œÉ‚ÇÇ ]                               ‚â°‚ü® w‚ÇÇ[œÉ‚ÇÇ]‚â°w‚ÇÇ‚Ä≤ ‚ü©‚ä©‚à∑‚àé‚à∑
      w‚ÇÇ‚Ä≤                                                              ‚àé
    of Œª
      w‚ÇÅ‚Ä≤‚â°w‚ÇÇ‚Ä≤ ‚Üí
    case R.‚ä©‚â°‚Üí $
         ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ
           (R.‚Üí‚ä©‚â°‚à∑ v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ]) (R.‚Üí‚ä©‚â°‚à∑ w‚ÇÅ‚Ä≤‚â°w‚ÇÇ‚Ä≤) of Œª
      B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][v‚ÇÅ[œÉ‚ÇÅ],w‚ÇÅ‚Ä≤]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][v‚ÇÇ[œÉ‚ÇÇ],w‚ÇÇ‚Ä≤] ‚Üí

    -- The two applications of J are equal if applications of J to w‚ÇÅ‚Ä≤
    -- and w‚ÇÇ‚Ä≤ are equal.
    case
      (Œª hyp ‚Üí
         J p q (A‚ÇÅ U.[ œÉ‚ÇÅ ]) (t‚ÇÅ U.[ œÉ‚ÇÅ ]) (B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ])
           (u‚ÇÅ U.[ œÉ‚ÇÅ ]) (v‚ÇÅ U.[ œÉ‚ÇÅ ]) (w‚ÇÅ U.[ œÉ‚ÇÅ ])
           ‚à∑ B‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ U.[ œÉ‚ÇÅ ]                        ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑
                                                               ‚ü® [,]-[]-commute B‚ÇÅ ‚ü©‚ä©‚à∑‚â°
         _ ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ] [ v‚ÇÅ U.[ œÉ‚ÇÅ ] , w‚ÇÅ U.[ œÉ‚ÇÅ ] ]‚ÇÅ‚ÇÄ  ‚áí*‚ü® J-subst* ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë¬≤] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] w‚ÇÅ‚áí*w‚ÇÅ‚Ä≤ ‚ü©‚ä©‚à∑‚à∑
                                                                ‚ü® R.‚ä©‚â°‚Üí $
                                                                  ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B‚ÇÅ)
                                                                    (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) (R.‚Üí‚ä©‚â°‚à∑ $ refl-‚ä©‚â°‚à∑ ‚ä©v‚ÇÅ[œÉ‚ÇÅ])
                                                                    (R.‚Üí‚ä©‚â°‚à∑ $
                                                                     PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ A‚ÇÅ t‚ÇÅ)
                                                                       w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÅ‚Ä≤) ‚ü©‚ä©‚à∑
         J p q (A‚ÇÅ U.[ œÉ‚ÇÅ ]) (t‚ÇÅ U.[ œÉ‚ÇÅ ]) (B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ])
           (u‚ÇÅ U.[ œÉ‚ÇÅ ]) (v‚ÇÅ U.[ œÉ‚ÇÅ ]) w‚ÇÅ‚Ä≤
            ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ] [ v‚ÇÅ U.[ œÉ‚ÇÅ ] , w‚ÇÅ‚Ä≤ ]‚ÇÅ‚ÇÄ         ‚â°‚ü® hyp ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                               ‚ü® ‚âÖ-eq $ escape-‚ä©‚â° B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][v‚ÇÅ[œÉ‚ÇÅ],w‚ÇÅ‚Ä≤]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][v‚ÇÇ[œÉ‚ÇÇ],w‚ÇÇ‚Ä≤] ‚ü©‚áí
            ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ‚áë ] [ v‚ÇÇ U.[ œÉ‚ÇÇ ] , w‚ÇÇ‚Ä≤ ]‚ÇÅ‚ÇÄ         Àò‚ü® ‚âÖ-eq $ R.escape-‚ä©‚â° $
                                                                 ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B‚ÇÇ)
                                                                   (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÇ) (R.‚Üí‚ä©‚â°‚à∑ $ refl-‚ä©‚â°‚à∑ ‚ä©v‚ÇÇ[œÉ‚ÇÇ])
                                                                   (R.‚Üí‚ä©‚â°‚à∑ $
                                                                    PE.subst (_‚ä©‚ü®_‚ü©_‚â°_‚à∑_ _ _ _ _) (Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ A‚ÇÇ t‚ÇÇ)
                                                                      w‚ÇÇ[œÉ‚ÇÇ]‚â°w‚ÇÇ‚Ä≤) ‚ü©‚áí
         J p q (A‚ÇÇ U.[ œÉ‚ÇÇ ]) (t‚ÇÇ U.[ œÉ‚ÇÇ ]) (B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ‚áë ])
           (u‚ÇÇ U.[ œÉ‚ÇÇ ]) (v‚ÇÇ U.[ œÉ‚ÇÇ ]) w‚ÇÇ‚Ä≤
           ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ‚áë ] [ v‚ÇÇ U.[ œÉ‚ÇÇ ] , w‚ÇÇ U.[ œÉ‚ÇÇ ] ]‚ÇÅ‚ÇÄ  ‚áê*‚ü® J-subst* ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë¬≤] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] w‚ÇÇ‚áí*w‚ÇÇ‚Ä≤ ‚ü©‚àé‚à∑
         J p q (A‚ÇÇ U.[ œÉ‚ÇÇ ]) (t‚ÇÇ U.[ œÉ‚ÇÇ ]) (B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ‚áë ])
           (u‚ÇÇ U.[ œÉ‚ÇÇ ]) (v‚ÇÇ U.[ œÉ‚ÇÇ ]) (w‚ÇÇ U.[ œÉ‚ÇÇ ])          ‚àé)
    of Œª
      lemma ‚Üí

    case rest of Œª where
      (rfl‚Çå t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ[œÉ‚ÇÅ]) ‚Üí
        -- If w‚ÇÅ‚Ä≤ and w‚ÇÇ‚Ä≤ are both rfl, then one can conclude by using
        -- the Œ≤-rule for J and the fact that u‚ÇÅ¬†[œÉ‚ÇÅ] is equal to
        -- u‚ÇÇ¬†[œÉ‚ÇÇ].
        case
          t‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ A‚ÇÇ U.[ œÉ‚ÇÇ ]  ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑
                                      Àò‚ü® A‚ÇÅ[œÉ‚ÇÅ]‚â°A‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑
          _           ‚à∑ A‚ÇÅ U.[ œÉ‚ÇÅ ]  ‚â°Àò‚ü® t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑
          t‚ÇÅ U.[ œÉ‚ÇÅ ]                ‚â°‚ü® t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ[œÉ‚ÇÅ] ‚ü©‚ä©‚à∑
          v‚ÇÅ U.[ œÉ‚ÇÅ ]                ‚â°‚ü® v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚àé
          v‚ÇÇ U.[ œÉ‚ÇÇ ]                ‚àé
        of Œª
          t‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ[œÉ‚ÇÇ] ‚Üí
        lemma
          (J p q A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ rfl U.[ œÉ‚ÇÅ ]
             ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ] [ v‚ÇÅ U.[ œÉ‚ÇÅ ] , rfl ]‚ÇÅ‚ÇÄ            ‚â°‚ü®‚ü©‚ä©‚à∑‚à∑
                                                                   ‚ü® R.‚ä©‚â°‚Üí $
                                                                     ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©‚â°‚à∑‚Üí‚ä©[‚áë‚áë][]‚ÇÅ‚ÇÄ‚â°[‚áë‚áë][]‚ÇÅ‚ÇÄ (refl-‚ä©·µõ‚â° ‚ä©B‚ÇÅ)
                                                                       (refl-‚ä©À¢‚â°‚à∑ ‚ä©œÉ‚ÇÅ) (R.‚Üí‚ä©‚â°‚à∑ $ sym-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ[œÉ‚ÇÅ])
                                                                       (R.‚Üí‚ä©‚â°‚à∑ $ refl-‚ä©‚â°‚à∑ $
                                                                        PE.subst (_‚ä©‚ü®_‚ü©_‚à∑_ _ _ _) (Id[]‚â°Id-wk1-0-[‚áë][]‚ÇÄ A‚ÇÅ t‚ÇÅ) $
                                                                        wf-‚ä©‚â°‚à∑ w‚ÇÅ[œÉ‚ÇÅ]‚â°w‚ÇÅ‚Ä≤ .proj‚ÇÇ) ‚ü©‚ä©‚à∑
           _ ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ] [ t‚ÇÅ U.[ œÉ‚ÇÅ ] , rfl ]‚ÇÅ‚ÇÄ            ‚áí‚ü® J-Œ≤-‚áí (‚âÖ‚Çú-eq (escape-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÅ[œÉ‚ÇÅ])) ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë¬≤] ‚ä¢u‚ÇÅ[œÉ‚ÇÅ] ‚ü©‚ä©‚à∑‚à∑

           u‚ÇÅ U.[ œÉ‚ÇÅ ] ‚à∑ B‚ÇÅ U.[ œÉ‚ÇÅ ‚áë ‚áë ] [ t‚ÇÅ U.[ œÉ‚ÇÅ ] , rfl ]‚ÇÅ‚ÇÄ  ‚â°‚ü® u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚ä©‚à∑‚à∑‚áê*
                                                                   ‚ü® ‚ä¢B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][t‚ÇÅ[œÉ‚ÇÅ],rfl]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][t‚ÇÇ[œÉ‚ÇÇ],rfl] ‚ü©‚áí
           u‚ÇÇ U.[ œÉ‚ÇÇ ] ‚à∑ B‚ÇÇ U.[ œÉ‚ÇÇ ‚áë ‚áë ] [ t‚ÇÇ U.[ œÉ‚ÇÇ ] , rfl ]‚ÇÅ‚ÇÄ  ‚áê‚ü® J-Œ≤-‚áí (‚âÖ‚Çú-eq (escape-‚ä©‚â°‚à∑ t‚ÇÇ[œÉ‚ÇÇ]‚â°v‚ÇÇ[œÉ‚ÇÇ])) ‚ä¢B‚ÇÇ[œÉ‚ÇÇ‚áë¬≤] ‚ä¢u‚ÇÇ[œÉ‚ÇÇ] ‚ü©‚àé‚à∑

           J p q A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ rfl U.[ œÉ‚ÇÇ ]                      ‚àé)

      (ne inc w‚ÇÅ‚Ä≤-ne w‚ÇÇ‚Ä≤-ne w‚ÇÅ‚Ä≤~w‚ÇÇ‚Ä≤) ‚Üí
        -- If w‚ÇÅ‚Ä≤ and w‚ÇÇ‚Ä≤ are equal neutral terms, then one can
        -- conclude by using the fact that the applications of J to
        -- w‚ÇÅ‚Ä≤ and w‚ÇÇ‚Ä≤ are equal neutral terms.
        lemma $
        neutral-‚ä©‚â°‚à∑ inc
          (wf-‚ä©‚â° B‚ÇÅ[œÉ‚ÇÅ‚áë‚áë][v‚ÇÅ[œÉ‚ÇÅ],w‚ÇÅ‚Ä≤]‚â°B‚ÇÇ[œÉ‚ÇÇ‚áë‚áë][v‚ÇÇ[œÉ‚ÇÇ],w‚ÇÇ‚Ä≤] .proj‚ÇÅ)
          (J‚Çô w‚ÇÅ‚Ä≤-ne) (J‚Çô w‚ÇÇ‚Ä≤-ne)
          (~-J A‚ÇÅ[œÉ‚ÇÅ]‚âÖA‚ÇÇ[œÉ‚ÇÇ] (escape-‚ä©‚à∑ ‚ä©t‚ÇÅ[œÉ‚ÇÅ])
             (escape-‚ä©‚â°‚à∑ t‚ÇÅ[œÉ‚ÇÅ]‚â°t‚ÇÇ[œÉ‚ÇÇ])
             (PE.subst‚ÇÉ _‚ä¢_‚âÖ_ (PE.cong (_‚àô_ _) $ Id-wk1-wk1-0[‚áë]‚â° A‚ÇÅ t‚ÇÅ)
                PE.refl PE.refl $
              R.escape-‚ä©‚â° ‚¶É inc = included ‚¶É inc = inc ‚¶Ñ ‚¶Ñ $
              ‚ä©·µõ‚â°‚Üí‚ä©À¢‚â°‚à∑‚Üí‚ä©[‚áë‚áë]‚â°[‚áë‚áë] B‚ÇÅ‚â°B‚ÇÇ œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
             (escape-‚ä©‚â°‚à∑ u‚ÇÅ[œÉ‚ÇÅ]‚â°u‚ÇÇ[œÉ‚ÇÇ])
             (escape-‚ä©‚â°‚à∑ v‚ÇÅ[œÉ‚ÇÅ]‚â°v‚ÇÇ[œÉ‚ÇÇ]) w‚ÇÅ‚Ä≤~w‚ÇÇ‚Ä≤)

opaque

  -- Validity of equality preservation for¬†J.

  J-cong·µõ :
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÅ ‚ü© A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÇ ‚ü© t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä©·µõ‚ü® l ‚ü© B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÉ ‚ü© u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B‚ÇÅ [ t‚ÇÅ , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÑ ‚ü© v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤‚ÇÖ ‚ü© w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© J p q A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚â° J p q A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚à∑
      B‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ
  J-cong·µõ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ =
    ‚ä©·µõ‚â°‚à∑‚áî ∞ .proj‚ÇÇ
      ( ‚ä©·µõ‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ‚à∑‚Üí‚ä©·µõ[]‚ÇÅ‚ÇÄ (wf-‚ä©·µõ‚â° B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÅ) (wf-‚ä©·µõ‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ .proj‚ÇÅ)
          (PE.subst (_‚ä©·µõ‚ü®_‚ü©_‚à∑_ _ _ _) ‚â°Id-wk1-wk1-0[]‚ÇÄ $
           wf-‚ä©·µõ‚â°‚à∑ w‚ÇÅ‚â°w‚ÇÇ .proj‚ÇÅ)
      , ‚ä©J‚â°J A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ ‚ä¢B‚ÇÅ‚â°B‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ
      )

opaque

  -- Validity of¬†J.

  J·µõ :
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä©·µõ‚ü® l ‚ü© B ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l‚Ä≥ ‚ü© w ‚à∑ Id A t v ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© J p q A t B u v w ‚à∑ B [ v , w ]‚ÇÅ‚ÇÄ
  J·µõ ‚ä¢B ‚ä©B ‚ä©u ‚ä©w =
    case ‚ä©·µõId‚áî .proj‚ÇÅ (wf-‚ä©·µõ‚à∑ ‚ä©w) of Œª
      (‚ä©t , ‚ä©v) ‚Üí
    case wf-‚ä©·µõ‚à∑ ‚ä©t of Œª
      ‚ä©A ‚Üí
    ‚ä©·µõ‚à∑‚áî‚ä©·µõ‚â°‚à∑ .proj‚ÇÇ $
    J-cong·µõ (refl-‚ä©·µõ‚â° ‚ä©A) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©t) (refl ‚ä¢B) (refl-‚ä©·µõ‚â° ‚ä©B)
      (refl-‚ä©·µõ‚â°‚à∑ ‚ä©u) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©v) (refl-‚ä©·µõ‚â°‚à∑ ‚ä©w)

opaque

  -- Validity of the J Œ≤ rule.

  J-Œ≤·µõ :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä©·µõ‚ü® l ‚ü© J p q A t B u t rfl ‚â° u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ
  J-Œ≤·µõ {t} {A} {B} ‚ä¢t ‚ä¢B ‚ä©u =
    ‚ä©·µõ‚à∑-‚áê
      (Œª {_ _} {œÉ = œÉ} ‚ä©œÉ ‚Üí
         case escape-‚ä©À¢‚à∑ ‚ä©œÉ of Œª
           (_ , ‚ä¢œÉ) ‚Üí
         PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.sym $ [,]-[]-commute B) $
         J-Œ≤-‚áí (refl $ subst-‚ä¢‚à∑ ‚ä¢t ‚ä¢œÉ)
           (PE.subst‚ÇÇ _‚ä¢_
              (PE.cong (_‚àô_ _) $ Id-wk1-wk1-0[‚áë]‚â° A t) PE.refl $
            subst-‚ä¢-‚áë ‚ä¢B ‚ä¢œÉ)
           (PE.subst (_‚ä¢_‚à∑_ _ _) ([,]-[]-commute B) $
            R.escape-‚ä©‚à∑ $ ‚ä©·µõ‚à∑‚Üí‚ä©À¢‚à∑‚Üí‚ä©[]‚à∑ ‚ä©u ‚ä©œÉ))
      ‚ä©u
