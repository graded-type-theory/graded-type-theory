open import Tools.Relation
open import Definition.Modality

module Definition.Modality.FullReduction {a ‚Ñì}
       {M‚Ä≤ : Setoid a ‚Ñì} (ùïÑ : Modality M‚Ä≤)
       (p‚â§ùüò : (p : Setoid.Carrier M‚Ä≤) ‚Üí Modality._‚â§_ ùïÑ p (Modality.ùüò ùïÑ))
       where

open Modality ùïÑ
open Setoid M‚Ä≤ using (_‚âà_) renaming (Carrier to M)

open import Tools.Fin
open import Tools.Nat using (Nat)
open import Tools.Product
import Tools.PropositionalEquality as PE
import Tools.Reasoning.PartialOrder

open import Definition.Untyped M hiding (_‚à∑_; wk)
import Definition.Untyped M as U
open import Definition.Untyped.Properties M
open import Definition.Typed M‚Ä≤
open import Definition.Typed.Properties M‚Ä≤
open import Definition.Typed.Usage ùïÑ
open import Definition.Typed.Weakening M‚Ä≤
open import Definition.Typed.Consequences.InverseUniv M‚Ä≤
open import Definition.Typed.Consequences.NeTypeEq M‚Ä≤
open import Definition.Typed.Consequences.Substitution M‚Ä≤
open import Definition.Typed.Consequences.Syntactic M‚Ä≤

open import Definition.Conversion M‚Ä≤
open import Definition.Conversion.Consequences.Completeness M‚Ä≤
open import Definition.Conversion.FullReduction M‚Ä≤
  hiding (fullRedNe; fullRedNe~‚Üì; fullRed; fullRedConv‚Üì; fullRedTerm; fullRedTermConv‚Üì)
import Definition.Conversion.FullReduction M‚Ä≤ as FR
open import Definition.Conversion.Whnf M‚Ä≤

open import Definition.Modality.Context ùïÑ
open import Definition.Modality.Context.Properties ùïÑ
open import Definition.Modality.Usage ùïÑ
open import Definition.Modality.Usage.Inversion ùïÑ
open import Definition.Modality.Usage.Properties ùïÑ
open import Definition.Modality.Usage.Weakening ùïÑ
open import Definition.Mode ùïÑ

private
  variable
    n : Nat
    Œì : Con Term n
    t t‚Ä≤ A A‚Ä≤ : Term n
    Œ≥ : Con‚Çò n
    m : Mode

mutual
  fullRedNe :
    Œì ‚ä¢ t ~ t‚Ä≤ ‚Üë A ‚Üí Œ≥ ‚ñ∏[ m ] t ‚Üí
    ‚àÉ Œª u ‚Üí NfNeutral u √ó Œì ‚ä¢ t ‚â° u ‚à∑ A √ó Œ≥ ‚ñ∏[ m ] u
  fullRedNe (var-refl x _) Œ≥‚ñ∏t = var _ , var _ , refl x , Œ≥‚ñ∏t
  fullRedNe {m = m} (app-cong t u p‚âàp‚ÇÅ p‚âàp‚ÇÇ) Œ≥‚ñ∏t =
    let invUsageApp Œ¥‚ñ∏t Œ∑‚ñ∏u Œ≥‚â§Œ≥‚Ä≤ = inv-usage-app Œ≥‚ñ∏t
        t‚Ä≤ , nfT‚Ä≤ , t‚â°t‚Ä≤ , Œ¥‚ñ∏t‚Ä≤ = fullRedNe~‚Üì t Œ¥‚ñ∏t
        u‚Ä≤ , nfU‚Ä≤ , u‚â°u‚Ä≤ , Œ∑‚ñ∏u‚Ä≤ = fullRedTermConv‚Üë u Œ∑‚ñ∏u
        p‚ÇÅ‚âàp‚ÇÇ = ‚âà-trans (‚âà-sym p‚âàp‚ÇÅ) p‚âàp‚ÇÇ
    in  t‚Ä≤ ‚àò u‚Ä≤ , ‚àò‚Çô nfT‚Ä≤ nfU‚Ä≤ , app-cong t‚â°t‚Ä≤ u‚â°u‚Ä≤ p‚âàp‚ÇÅ p‚âàp‚ÇÇ
      , sub (Œ¥‚ñ∏t‚Ä≤ ‚àò‚Çò ‚ñ∏-cong (·µê¬∑-cong m p‚ÇÅ‚âàp‚ÇÇ) Œ∑‚ñ∏u‚Ä≤)
          (‚â§·∂ú-trans Œ≥‚â§Œ≥‚Ä≤ (‚â§·∂ú-reflexive (+·∂ú-congÀ° (¬∑·∂ú-cong ≥ p‚ÇÅ‚âàp‚ÇÇ))))
  fullRedNe (fst-cong p~p) Œ≥‚ñ∏t =
    let invUsageProj Œ¥‚ñ∏p Œ≥‚â§Œ¥ = inv-usage-fst Œ≥‚ñ∏t
        p‚Ä≤ , neP‚Ä≤ , p‚â°p‚Ä≤ , Œ¥‚ñ∏p‚Ä≤ = fullRedNe~‚Üì p~p Œ¥‚ñ∏p
        ‚ä¢Œ£FG , _ , _ = syntacticEqTerm p‚â°p‚Ä≤
        ‚ä¢F , ‚ä¢G = syntacticŒ£ ‚ä¢Œ£FG
    in  fst p‚Ä≤ , fst‚Çô neP‚Ä≤ , fst-cong ‚ä¢F ‚ä¢G p‚â°p‚Ä≤
      , sub (fst‚Çò Œ¥‚ñ∏p‚Ä≤) Œ≥‚â§Œ¥
  fullRedNe (snd-cong p~p) Œ≥‚ñ∏t =
    let invUsageProj Œ¥‚ñ∏p Œ≥‚â§Œ¥ = inv-usage-snd Œ≥‚ñ∏t
        p‚Ä≤ , neP‚Ä≤ , p‚â°p‚Ä≤ , Œ¥‚ñ∏p‚Ä≤ = fullRedNe~‚Üì p~p Œ¥‚ñ∏p
        ‚ä¢Œ£FG , _ , _ = syntacticEqTerm p‚â°p‚Ä≤
        ‚ä¢F , ‚ä¢G = syntacticŒ£ ‚ä¢Œ£FG
    in  snd p‚Ä≤ , snd‚Çô neP‚Ä≤ , snd-cong ‚ä¢F ‚ä¢G p‚â°p‚Ä≤
      , sub (snd‚Çò Œ¥‚ñ∏p‚Ä≤) Œ≥‚â§Œ¥
  fullRedNe (natrec-cong {p = p} {r = r} C z s n p‚âàp‚Ä≤ r‚âàr‚Ä≤) Œ≥‚ñ∏t =
    let invUsageNatrec Œ¥‚ñ∏z Œ∑‚ñ∏s Œ∏‚ñ∏n Œ≥‚â§Œ≥‚Ä≤ = inv-usage-natrec Œ≥‚ñ∏t
        C‚Ä≤ , nfC‚Ä≤ , C‚â°C‚Ä≤ = FR.fullRed C
        z‚Ä≤ , nfZ‚Ä≤ , z‚â°z‚Ä≤ , Œ¥‚ñ∏z‚Ä≤ = fullRedTermConv‚Üë z Œ¥‚ñ∏z
        s‚Ä≤ , nfS‚Ä≤ , s‚â°s‚Ä≤ , Œ∑‚ñ∏s‚Ä≤ = fullRedTermConv‚Üë s Œ∑‚ñ∏s
        n‚Ä≤ , nfN‚Ä≤ , n‚â°n‚Ä≤ , Œ∏‚ñ∏n‚Ä≤ = fullRedNe~‚Üì n Œ∏‚ñ∏n
    in  natrec p r C‚Ä≤ z‚Ä≤ s‚Ä≤ n‚Ä≤ , natrec‚Çô nfC‚Ä≤ nfZ‚Ä≤ nfS‚Ä≤ nfN‚Ä≤
      , natrec-cong (proj‚ÇÅ (syntacticEq C‚â°C‚Ä≤)) C‚â°C‚Ä≤ z‚â°z‚Ä≤ s‚â°s‚Ä≤ n‚â°n‚Ä≤ ‚âà-refl ‚âà-refl
      , sub (natrec‚Çò Œ¥‚ñ∏z‚Ä≤ Œ∑‚ñ∏s‚Ä≤ Œ∏‚ñ∏n‚Ä≤) Œ≥‚â§Œ≥‚Ä≤
  fullRedNe (prodrec-cong {p = p} C g u p‚âàp‚Ä≤) Œ≥‚ñ∏t =
    let invUsageProdrec Œ¥‚ñ∏g Œ∑‚ñ∏u P Œ≥‚â§Œ≥‚Ä≤ = inv-usage-prodrec Œ≥‚ñ∏t
        C‚Ä≤ , nfC‚Ä≤ , C‚â°C‚Ä≤ = FR.fullRed C
        g‚Ä≤ , nfg‚Ä≤ , g‚â°g‚Ä≤ , Œ¥‚ñ∏g‚Ä≤ = fullRedNe~‚Üì g Œ¥‚ñ∏g
        u‚Ä≤ , nfu‚Ä≤ , u‚â°u‚Ä≤ , Œ∑‚ñ∏u‚Ä≤ = fullRedTermConv‚Üë u Œ∑‚ñ∏u
        ‚ä¢Œ£ , _ = syntacticEqTerm g‚â°g‚Ä≤
        ‚ä¢F , ‚ä¢G = syntacticŒ£ ‚ä¢Œ£
    in  prodrec p C‚Ä≤ g‚Ä≤ u‚Ä≤ , prodrec‚Çô nfC‚Ä≤ nfg‚Ä≤ nfu‚Ä≤
      , prodrec-cong ‚ä¢F ‚ä¢G C‚â°C‚Ä≤ g‚â°g‚Ä≤ u‚â°u‚Ä≤ ‚âà-refl
      , sub (prodrec‚Çò Œ¥‚ñ∏g‚Ä≤ Œ∑‚ñ∏u‚Ä≤ P) Œ≥‚â§Œ≥‚Ä≤
  fullRedNe {m = m} (Emptyrec-cong C n p‚âàp‚Ä≤) Œ≥‚ñ∏t =
    let invUsageEmptyrec Œ¥‚ñ∏n Œ≥‚â§Œ¥ = inv-usage-Emptyrec Œ≥‚ñ∏t
        C‚Ä≤ , nfC‚Ä≤ , C‚â°C‚Ä≤ = FR.fullRed C
        n‚Ä≤ , nfN‚Ä≤ , n‚â°n‚Ä≤ , Œ¥‚ñ∏n‚Ä≤ = fullRedNe~‚Üì n Œ¥‚ñ∏n
    in  Emptyrec _ C‚Ä≤ n‚Ä≤ , Emptyrec‚Çô nfC‚Ä≤ nfN‚Ä≤
      , Emptyrec-cong C‚â°C‚Ä≤ n‚â°n‚Ä≤ p‚âàp‚Ä≤
      , sub (Emptyrec‚Çò (‚ñ∏-cong (·µê¬∑-cong m p‚âàp‚Ä≤) Œ¥‚ñ∏n‚Ä≤))
          (‚â§·∂ú-trans Œ≥‚â§Œ¥ (‚â§·∂ú-reflexive (¬∑·∂ú-cong ≥ p‚âàp‚Ä≤)))

  fullRedNe~‚Üì :
    Œì ‚ä¢ t ~ t‚Ä≤ ‚Üì A ‚Üí Œ≥ ‚ñ∏[ m ] t ‚Üí
    ‚àÉ Œª u ‚Üí NfNeutral u √ó Œì ‚ä¢ t ‚â° u ‚à∑ A √ó Œ≥ ‚ñ∏[ m ] u
  fullRedNe~‚Üì ([~] A D whnfB k~l) Œ≥‚ñ∏t =
    let u , nf , t‚â°u , Œ≥‚ñ∏u = fullRedNe k~l Œ≥‚ñ∏t
    in  u , nf , conv t‚â°u (subset* D) , Œ≥‚ñ∏u

  fullRedConv‚Üë :
    Œì ‚ä¢ A [conv‚Üë] A‚Ä≤ ‚Üí Œ≥ ‚ñ∏[ m ] A ‚Üí
    ‚àÉ Œª B ‚Üí Nf B √ó Œì ‚ä¢ A ‚â° B √ó Œ≥ ‚ñ∏[ m ] B
  fullRedConv‚Üë ([‚Üë] A‚Ä≤ B‚Ä≤ D D‚Ä≤ whnfA‚Ä≤ whnfB‚Ä≤ A‚Ä≤<>B‚Ä≤) Œ≥‚ñ∏A =
    let Œ≥‚ñ∏A‚Ä≤ = usagePres* Œ≥‚ñ∏A D
        B‚Ä≥ , nf , B‚Ä≤‚â°B‚Ä≥ , Œ≥‚ñ∏B‚Ä≥ = fullRedConv‚Üì A‚Ä≤<>B‚Ä≤ Œ≥‚ñ∏A‚Ä≤
    in  B‚Ä≥ , nf , trans (subset* D) B‚Ä≤‚â°B‚Ä≥ , Œ≥‚ñ∏B‚Ä≥

  fullRedConv‚Üì :
    Œì ‚ä¢ A [conv‚Üì] A‚Ä≤ ‚Üí Œ≥ ‚ñ∏[ m ] A ‚Üí
    ‚àÉ Œª B ‚Üí Nf B √ó Œì ‚ä¢ A ‚â° B √ó Œ≥ ‚ñ∏[ m ] B
  fullRedConv‚Üì (U-refl ‚ä¢Œì) Œ≥‚ñ∏A = U , U‚Çô , refl (U‚±º ‚ä¢Œì) , Œ≥‚ñ∏A
  fullRedConv‚Üì (‚Ñï-refl ‚ä¢Œì) Œ≥‚ñ∏A = ‚Ñï , ‚Ñï‚Çô , refl (‚Ñï‚±º ‚ä¢Œì) , Œ≥‚ñ∏A
  fullRedConv‚Üì (Empty-refl ‚ä¢Œì) Œ≥‚ñ∏A = Empty , Empty‚Çô , refl (Empty‚±º ‚ä¢Œì) , Œ≥‚ñ∏A
  fullRedConv‚Üì (Unit-refl ‚ä¢Œì) Œ≥‚ñ∏A = Unit , Unit‚Çô , refl (Unit‚±º ‚ä¢Œì) , Œ≥‚ñ∏A
  fullRedConv‚Üì (ne A) Œ≥‚ñ∏A =
    let B , nf , A‚â°B , Œ≥‚ñ∏B = fullRedNe~‚Üì A Œ≥‚ñ∏A
    in  B , ne nf , univ A‚â°B , Œ≥‚ñ∏B
  fullRedConv‚Üì {m = m} (Œ†-cong ‚ä¢F F G p‚âàp‚Ä≤ q‚âàq‚Ä≤) Œ≥‚ñ∏A =
    let invUsageŒ† Œ¥‚ñ∏F Œ∑‚ñ∏G Œ≥‚â§Œ≥‚Ä≤ = inv-usage-Œ† Œ≥‚ñ∏A
        F‚Ä≤ , nfF‚Ä≤ , F‚â°F‚Ä≤ , Œ¥‚ñ∏F‚Ä≤ = fullRedConv‚Üë F Œ¥‚ñ∏F
        G‚Ä≤ , nfG‚Ä≤ , G‚â°G‚Ä≤ , Œ∑‚ñ∏G‚Ä≤ = fullRedConv‚Üë G Œ∑‚ñ∏G
        Œ∑‚Ä≤‚ñ∏G‚Ä≤ = sub Œ∑‚ñ∏G‚Ä≤ (‚â§·∂ú-reflexive (‚âà·∂ú-refl ‚àô ‚âà-sym (¬∑-congÀ° q‚âàq‚Ä≤)))
    in  Œ† _ , _ ‚ñ∑ F‚Ä≤ ‚ñπ G‚Ä≤ , Œ†‚Çô nfF‚Ä≤ nfG‚Ä≤ , Œ†-cong ‚ä¢F F‚â°F‚Ä≤ G‚â°G‚Ä≤ p‚âàp‚Ä≤ q‚âàq‚Ä≤
      , sub (Œ†‚Çò (‚ñ∏-cong (·µê¬∑-cong m p‚âàp‚Ä≤) Œ¥‚ñ∏F‚Ä≤) Œ∑‚Ä≤‚ñ∏G‚Ä≤) Œ≥‚â§Œ≥‚Ä≤
  fullRedConv‚Üì (Œ£-cong ‚ä¢F F G q‚âàq‚Ä≤) Œ≥‚ñ∏A =
    let invUsageŒ£ Œ¥‚ñ∏F Œ∑‚ñ∏G Œ≥‚â§Œ≥‚Ä≤ = inv-usage-Œ£ Œ≥‚ñ∏A
        F‚Ä≤ , nfF‚Ä≤ , F‚â°F‚Ä≤ , Œ¥‚ñ∏F‚Ä≤ = fullRedConv‚Üë F Œ¥‚ñ∏F
        G‚Ä≤ , nfG‚Ä≤ , G‚â°G‚Ä≤ , Œ∑‚ñ∏G‚Ä≤ = fullRedConv‚Üë G Œ∑‚ñ∏G
        Œ∑‚Ä≤‚ñ∏G‚Ä≤ = sub Œ∑‚ñ∏G‚Ä≤ (‚â§·∂ú-reflexive (‚âà·∂ú-refl ‚àô ‚âà-sym (¬∑-congÀ° q‚âàq‚Ä≤)))
    in  Œ£ _ ‚ñ∑ F‚Ä≤ ‚ñπ G‚Ä≤ , Œ£‚Çô nfF‚Ä≤ nfG‚Ä≤ , Œ£-cong ‚ä¢F F‚â°F‚Ä≤ G‚â°G‚Ä≤ q‚âàq‚Ä≤
      , sub (Œ£‚Çò Œ¥‚ñ∏F‚Ä≤ Œ∑‚Ä≤‚ñ∏G‚Ä≤) Œ≥‚â§Œ≥‚Ä≤

  fullRedTermConv‚Üë :
    Œì ‚ä¢ t [conv‚Üë] t‚Ä≤ ‚à∑ A ‚Üí Œ≥ ‚ñ∏[ m ] t ‚Üí
    ‚àÉ Œª u ‚Üí Nf u √ó Œì ‚ä¢ t ‚â° u ‚à∑ A √ó Œ≥ ‚ñ∏[ m ] u
  fullRedTermConv‚Üë ([‚Üë]‚Çú B t‚Ä≤ u‚Ä≤ D d d‚Ä≤ whnfB whnft‚Ä≤ whnfu‚Ä≤ t<>u) Œ≥‚ñ∏t =
    let Œ≥‚ñ∏t‚Ä≤ = usagePres*Term Œ≥‚ñ∏t d
        u‚Ä≥ , nf , u‚Ä≤‚â°u‚Ä≥ , Œ≥‚ñ∏u‚Ä≥ = fullRedTermConv‚Üì t<>u Œ≥‚ñ∏t‚Ä≤
    in  u‚Ä≥ , nf , conv (trans (subset*Term d) u‚Ä≤‚â°u‚Ä≥) (sym (subset* D)) , Œ≥‚ñ∏u‚Ä≥

  fullRedTermConv‚Üì :
    Œì ‚ä¢ t [conv‚Üì] t‚Ä≤ ‚à∑ A ‚Üí Œ≥ ‚ñ∏[ m ] t ‚Üí
    ‚àÉ Œª u ‚Üí Nf u √ó Œì ‚ä¢ t ‚â° u ‚à∑ A √ó Œ≥ ‚ñ∏[ m ] u
  fullRedTermConv‚Üì (‚Ñï-ins t) Œ≥‚ñ∏t =
    let u , nf , t‚â°u , Œ≥‚ñ∏u = fullRedNe~‚Üì t Œ≥‚ñ∏t
    in  u , ne nf , t‚â°u , Œ≥‚ñ∏u
  fullRedTermConv‚Üì (Empty-ins t) Œ≥‚ñ∏t =
    let u , nf , t‚â°u , Œ≥‚ñ∏u = fullRedNe~‚Üì t Œ≥‚ñ∏t
    in  u , ne nf , t‚â°u , Œ≥‚ñ∏u
  fullRedTermConv‚Üì (Unit-ins t) Œ≥‚ñ∏t =
    let u , nf , t‚â°u , Œ≥‚ñ∏u = fullRedNe~‚Üì t Œ≥‚ñ∏t
    in  u , ne nf , t‚â°u , Œ≥‚ñ∏u
  fullRedTermConv‚Üì (Œ£·µ£-ins t u t~u) Œ≥‚ñ∏t =
    let v , nf , t‚â°v , Œ≥‚ñ∏v = fullRedNe~‚Üì t~u Œ≥‚ñ∏t
        _ , t‚Ä≤ , _ = syntacticEqTerm t‚â°v
        _ , neT , _ = ne~‚Üì t~u
    in  v , ne nf , conv t‚â°v (neTypeEq neT t‚Ä≤ t) , Œ≥‚ñ∏v
  fullRedTermConv‚Üì (ne-ins ‚ä¢t _ _ t) Œ≥‚ñ∏t =
    let u , nfU , t‚â°u , Œ≥‚ñ∏u = fullRedNe~‚Üì t Œ≥‚ñ∏t
        _ , ‚ä¢t‚à∑M , _ = syntacticEqTerm t‚â°u
        _ , neT , _ = ne~‚Üì t
    in  u , ne nfU , conv t‚â°u (neTypeEq neT ‚ä¢t‚à∑M ‚ä¢t) , Œ≥‚ñ∏u
  fullRedTermConv‚Üì (univ ‚ä¢t _ t) Œ≥‚ñ∏t =
    let u , nf , t‚â°u , Œ≥‚ñ∏u = fullRedConv‚Üì t Œ≥‚ñ∏t
    in  u , nf , inverseUnivEq ‚ä¢t t‚â°u , Œ≥‚ñ∏u
  fullRedTermConv‚Üì (zero-refl ‚ä¢Œì) Œ≥‚ñ∏t = zero , zero‚Çô , refl (zero‚±º ‚ä¢Œì) , Œ≥‚ñ∏t
  fullRedTermConv‚Üì (suc-cong t) Œ≥‚ñ∏t =
    let invUsageSuc Œ¥‚ñ∏t Œ≥‚â§Œ¥ = inv-usage-suc Œ≥‚ñ∏t
        u , nf , t‚â°u , Œ¥‚ñ∏u = fullRedTermConv‚Üë t Œ¥‚ñ∏t
    in  suc u , suc‚Çô nf , suc-cong t‚â°u , sub (suc‚Çò Œ¥‚ñ∏u) Œ≥‚â§Œ¥
  fullRedTermConv‚Üì (prod-cong ‚ä¢F ‚ä¢G t‚Üët u‚Üëu) Œ≥‚ñ∏t =
    let invUsageProd·µ£ Œ¥‚ñ∏t Œ∑‚ñ∏u Œ≥‚Ä≥=Œ¥+Œ∑ Œ≥‚â§Œ≥‚Ä≥ = inv-usage-prod·µ£ Œ≥‚ñ∏t
        t‚Ä≤ , nfT , t‚â°t‚Ä≤ , Œ¥‚ñ∏t‚Ä≤ = fullRedTermConv‚Üë t‚Üët Œ¥‚ñ∏t
        u‚Ä≤ , nfU , u‚â°u‚Ä≤ , Œ∑‚ñ∏u‚Ä≤ = fullRedTermConv‚Üë u‚Üëu Œ∑‚ñ∏u
    in  prod! t‚Ä≤ u‚Ä≤ , prod‚Çô nfT nfU , prod-cong ‚ä¢F ‚ä¢G t‚â°t‚Ä≤ u‚â°u‚Ä≤
      , sub (prod·µ£‚Çò Œ¥‚ñ∏t‚Ä≤ Œ∑‚ñ∏u‚Ä≤ Œ≥‚Ä≥=Œ¥+Œ∑) Œ≥‚â§Œ≥‚Ä≥
  fullRedTermConv‚Üì {Œ≥ = Œ≥} {m = m} (Œ∑-eq {p = p} ‚ä¢t _ _ _ t‚àò0) Œ≥‚ñ∏t =
    let Œ¥‚ñ∏t‚àò0 = wkUsage (step id) Œ≥‚ñ∏t ‚àò‚Çò var
        u , nf , t‚àò0‚â°u , Œ¥‚ñ∏u = fullRedTermConv‚Üë (t‚àò0 ‚âà-refl ‚âà-refl) Œ¥‚ñ∏t‚àò0
        ‚ä¢G , _ , ‚ä¢u = syntacticEqTerm t‚àò0‚â°u
        ‚ä¢F , _ = syntacticŒ† (syntacticTerm ‚ä¢t)
        ŒìF‚ä¢ = wf ‚ä¢F ‚àô ‚ä¢F
        wk‚ä¢F = wk (step id) ŒìF‚ä¢ ‚ä¢F
        wk‚ä¢G = wk (lift (step id)) (ŒìF‚ä¢ ‚àô wk‚ä¢F) ‚ä¢G
        ŒìFF'‚ä¢ = ŒìF‚ä¢ ‚àô wk‚ä¢F
        wk‚ä¢u = wkTerm (lift (step id)) ŒìFF'‚ä¢ ‚ä¢u
        wk‚ä¢t = wkTerm (step id) ŒìF‚ä¢ ‚ä¢t
        Œªu‚àò0 = lam p (U.wk (lift (step id)) u) ‚àò‚ü® p ‚ü© var x0
    in  lam _ u , lam‚Çô nf
      , Œ∑-eq ‚ä¢F ‚ä¢t (lam‚±º ‚ä¢F ‚ä¢u) (Œª {p‚ÇÅ} {p‚ÇÇ} p‚âàp‚ÇÅ p‚âàp‚ÇÇ ‚Üí
             let Œªu‚àò0 = lam p (U.wk (lift (step id)) u) ‚àò‚ü® p‚ÇÇ ‚ü© var x0
             in  trans (PE.subst (Œª x ‚Üí _ ‚ä¢ _ ‚â° _ ‚à∑ x) (wkSingleSubstId _)
                                 (app-cong (refl wk‚ä¢t) (refl (var ŒìF‚ä¢ here)) p‚âàp‚ÇÅ ‚âà-refl))
                       (trans t‚àò0‚â°u (PE.subst‚ÇÇ (Œª x y ‚Üí _ ‚ä¢ x ‚â° Œªu‚àò0 ‚à∑ y)
                                    (wkSingleSubstId u) (wkSingleSubstId _)
                                    (sym (Œ≤-red wk‚ä¢F wk‚ä¢G wk‚ä¢u (var ŒìF‚ä¢ here) p‚âàp‚ÇÇ)))))
      , lam‚Çò (sub Œ¥‚ñ∏u (begin
          Œ≥ ‚àô ‚åú m ‚åù ¬∑ p                      ‚âà‚ü® ‚âà·∂ú-refl ‚àô ‚åú‚åù-¬∑-comm m ‚ü©
          Œ≥ ‚àô p ¬∑ ‚åú m ‚åù                      ‚âàÀò‚ü® +·∂ú-identity ≥ _ ‚àô ¬∑‚åú·µê¬∑‚åù m ‚ü©
          Œ≥ +·∂ú ùüò·∂ú ‚àô p ¬∑ ‚åú m ·µê¬∑ p ‚åù           ‚âàÀò‚ü® +·∂ú-congÀ° (¬∑·∂ú-zero ≥ _) ‚àô +-identityÀ° _ ‚ü©
          Œ≥ +·∂ú p ¬∑·∂ú ùüò·∂ú ‚àô ùüò + p ¬∑ ‚åú m ·µê¬∑ p ‚åù  ‚àé))
    where
    open Tools.Reasoning.PartialOrder ‚â§·∂ú-poset
  fullRedTermConv‚Üì (Œ£-Œ∑ ‚ä¢t _ tProd _ fstConv sndConv) Œ≥‚ñ∏t =
    let Œ≥‚ñ∏t‚ÇÅ = fst‚Çò Œ≥‚ñ∏t
        Œ≥‚ñ∏t‚ÇÇ = snd‚Çò Œ≥‚ñ∏t
        fst‚Ä≤ , nfFst‚Ä≤ , fst‚â°fst‚Ä≤ , Œ≥‚ñ∏u‚ÇÅ = fullRedTermConv‚Üë fstConv Œ≥‚ñ∏t‚ÇÅ
        snd‚Ä≤ , nfSnd‚Ä≤ , snd‚â°snd‚Ä≤ , Œ≥‚ñ∏u‚ÇÇ = fullRedTermConv‚Üë sndConv Œ≥‚ñ∏t‚ÇÇ
        _ , _ , ‚ä¢fst‚Ä≤ = syntacticEqTerm fst‚â°fst‚Ä≤
        _ , _ , ‚ä¢snd‚Ä≤‚ÇÅ = syntacticEqTerm snd‚â°snd‚Ä≤
        ‚ä¢Œ£FG = syntacticTerm ‚ä¢t
        ‚ä¢F , ‚ä¢G = syntacticŒ£ ‚ä¢Œ£FG

        Gfst‚â°Gfst‚Ä≤ = substTypeEq (refl ‚ä¢G) fst‚â°fst‚Ä≤
        ‚ä¢snd‚Ä≤ = conv ‚ä¢snd‚Ä≤‚ÇÅ Gfst‚â°Gfst‚Ä≤
        ‚ä¢prod = prod‚±º ‚ä¢F ‚ä¢G ‚ä¢fst‚Ä≤ ‚ä¢snd‚Ä≤

        fstprod‚â°fst‚Ä≤ = Œ£-Œ≤‚ÇÅ ‚ä¢F ‚ä¢G ‚ä¢fst‚Ä≤ ‚ä¢snd‚Ä≤ ‚ä¢prod
        fst‚â°fstprod = trans fst‚â°fst‚Ä≤ (sym fstprod‚â°fst‚Ä≤)
        Gfst‚â°Gfstprod = substTypeEq (refl ‚ä¢G) fst‚â°fstprod
        sndprod‚â°snd‚Ä≤ = conv (Œ£-Œ≤‚ÇÇ ‚ä¢F ‚ä¢G ‚ä¢fst‚Ä≤ ‚ä¢snd‚Ä≤ ‚ä¢prod) (sym Gfst‚â°Gfstprod)
        snd‚â°sndprod = trans snd‚â°snd‚Ä≤ (sym sndprod‚â°snd‚Ä≤)
    in  prod! fst‚Ä≤ snd‚Ä≤ , prod‚Çô nfFst‚Ä≤ nfSnd‚Ä≤
      , Œ£-Œ∑ ‚ä¢F ‚ä¢G ‚ä¢t ‚ä¢prod fst‚â°fstprod snd‚â°sndprod
      , prod‚Çö‚Çò Œ≥‚ñ∏u‚ÇÅ Œ≥‚ñ∏u‚ÇÇ
  fullRedTermConv‚Üì (Œ∑-unit ‚ä¢t _ tUnit _) Œ≥‚ñ∏t =
    star , star‚Çô , Œ∑-unit ‚ä¢t (star‚±º (wfTerm ‚ä¢t)) , sub star‚Çò Œ≥‚â§ùüò·∂ú
    where
    Œ≥‚â§ùüò·∂ú : Œ≥ ‚â§·∂ú ùüò·∂ú
    Œ≥‚â§ùüò·∂ú {Œ≥ = Œµ} = Œµ
    Œ≥‚â§ùüò·∂ú {Œ≥ = Œ≥ ‚àô p} = Œ≥‚â§ùüò·∂ú ‚àô p‚â§ùüò p

fullRed :
  Œì ‚ä¢ A ‚Üí Œ≥ ‚ñ∏[ m ] A ‚Üí
  ‚àÉ Œª B ‚Üí Nf B √ó Œì ‚ä¢ A ‚â° B √ó Œ≥ ‚ñ∏[ m ] B
fullRed ‚ä¢A = fullRedConv‚Üë (completeEq (refl ‚ä¢A))

fullRedTerm :
  Œì ‚ä¢ t ‚à∑ A ‚Üí Œ≥ ‚ñ∏[ m ] t ‚Üí
  ‚àÉ Œª u ‚Üí Nf u √ó Œì ‚ä¢ t ‚â° u ‚à∑ A √ó Œ≥ ‚ñ∏[ m ] u
fullRedTerm ‚ä¢t = fullRedTermConv‚Üë (completeEqTerm (refl ‚ä¢t))
