{-# OPTIONS --without-K --safe #-}

module Definition.Modality.Unit where

open import Tools.Nat hiding (_+_)
open import Tools.Product
open import Tools.PropositionalEquality
open import Tools.Unit

open import Tools.Algebra {A = ‚ä§} _‚â°_

open import Definition.Modality
  (record { Carrier = ‚ä§ ; _‚âà_ = _‚â°_ ; isEquivalence = isEquivalence })
  public

-----------------------------------------------
-- A trivial modality formed by the unit set --
-----------------------------------------------

-- Trivial addition (and multiplication and meet) operation

_+_ : Op‚ÇÇ ‚ä§
_ + _ = tt

-- Trivial recurrence function

nr‚Åø : (n : Nat) ‚Üí Op‚ÇÉ ‚ä§
nr‚Åø _ _ _ _ = tt

infixr 20 _+_

-- Properties of +

-- Addition is commutative
-- p + q ‚â° q + p

+-Commutative : Commutative _+_
+-Commutative x y = refl

-- Addition is associative
-- p + (q + r) ‚â° (p + q) + r

+-Associative : Associative _+_
+-Associative x y z = refl

-- Addition is left distributive of itself
-- p + (q + r) ‚â° (p + q) + (p + r)

+-DistributiveÀ° : _+_ DistributesOverÀ° _+_
+-DistributiveÀ° x y z = refl

-- Addition is right distributive over itself
-- (q + r) + p ‚â° (q + p) + (r + p)

+-Distributive ≥ : _+_ DistributesOver ≥ _+_
+-Distributive ≥ x y z = refl

-- tt is the left identity of addition
-- tt + p ‚â° p

+-LeftIdentity : LeftIdentity tt _+_
+-LeftIdentity tt = refl

-- tt is the right identity of addition
-- p + tt ‚â° p

+-RightIdentity : RightIdentity tt _+_
+-RightIdentity tt = refl

-- tt is the identity of addition
-- tt + p ‚â° p ‚â° p + tt

+-Identity : Identity tt _+_
+-Identity = +-LeftIdentity , +-RightIdentity

-- Addition is idempotent
-- p + p ‚â° p

+-Idempotent : Idempotent _+_
+-Idempotent tt = refl

------------------------------------
-- + forms the following algebras --
------------------------------------

-- Addition forms a magma

+-Magma : IsMagma _+_
+-Magma = record
  { isEquivalence = isEquivalence
  ; ‚àô-cong        = cong‚ÇÇ _+_
  }

-- Addition forms a semigroup

+-Semigroup : IsSemigroup _+_
+-Semigroup = record
  { isMagma = +-Magma
  ; assoc   = +-Associative
  }

-- Addition forms a monoid with tt as identity

+-Monoid : IsMonoid _+_ tt
+-Monoid = record
  { isSemigroup = +-Semigroup
  ; identity    = +-Identity
  }

-- Addition forms a commutative monoid with tt as identity

+-CommutativeMonoid : IsCommutativeMonoid _+_ tt
+-CommutativeMonoid = record
  { isMonoid = +-Monoid
  ; comm     = +-Commutative
  }

-- Addition forms a band

+-Band : IsBand _+_
+-Band = record
  { isSemigroup = +-Semigroup
  ; idem        = +-Idempotent
  }

-- Addition forms a semilattice

+-Semilattice : IsSemilattice _+_
+-Semilattice = record
  { isBand = +-Band
  ; comm   = +-Commutative
  }

-- ‚ä§ form a modality with + as addition, multiplication and meet

UnitModality : Modality
UnitModality = record
  { _+_                  = _+_
  ; _¬∑_                  = _+_
  ; _‚àß_                  = _+_
  ; nr‚Åø                  = nr‚Åø
  ; ùüò                    = tt
  ; ùüô                    = tt
  ; +-CommutativeMonoid  = +-CommutativeMonoid
  ; ¬∑-Monoid             = +-Monoid
  ; ‚àß-Semilattice        = +-Semilattice
  ; ¬∑-zero               = (Œª _ ‚Üí refl)    , (Œª _ ‚Üí refl)
  ; +-positive           = Œª _ _ _ ‚Üí refl , refl
  ; nr‚Åø-rec              = Œª _ _ _ _ ‚Üí refl
  ; nr‚Åø-0                = Œª _ _ _ ‚Üí refl
  ; nr‚Åø-fix              = 0 , (Œª _ _ _ ‚Üí refl)
  ; ¬∑-distrib-+          = +-DistributiveÀ° , +-Distributive ≥
  ; ¬∑-distrib-‚àß          = +-DistributiveÀ° , +-Distributive ≥
  ; +-distrib-‚àß          = +-DistributiveÀ° , +-Distributive ≥
  ; ‚âà-equivalence        = isEquivalence
  }
