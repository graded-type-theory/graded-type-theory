{-# OPTIONS --without-K --safe #-}

open import Tools.Relation
open import Definition.Modality

module Definition.Modality.Properties.Meet {a ‚Ñì}
  {M‚Ä≤ : Setoid a ‚Ñì}
  (ùïÑ : ModalityWithout‚äõ M‚Ä≤)
  where

open ModalityWithout‚äõ ùïÑ
open Setoid M‚Ä≤ renaming (Carrier to M)

open import Definition.Modality.Properties.PartialOrder ùïÑ

open import Tools.Algebra M‚Ä≤
open import Tools.Nat hiding (_+_)
open import Tools.Product


private
  variable
    p p‚Ä≤ q q‚Ä≤ r r‚Ä≤ : M

-- Meet on the left is a monotone function
-- If p ‚â§ q then p ‚àß r ‚â§ q ‚àß r

‚àß-monotoneÀ° : p ‚â§ q ‚Üí p ‚àß r ‚â§ q ‚àß r
‚àß-monotoneÀ° {p} {q} {r} p‚â§q = begin
  p ‚àß r             ‚âà‚ü® ‚àß-cong p‚â§q (‚âà-sym (‚àß-idem r)) ‚ü©
  (p ‚àß q) ‚àß r ‚àß r   ‚âà‚ü® ‚àß-assoc p q (r ‚àß r) ‚ü©
  p ‚àß q ‚àß r ‚àß r     ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-comm q (r ‚àß r)) ‚ü©
  p ‚àß (r ‚àß r) ‚àß q   ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-assoc r r q) ‚ü©
  p ‚àß r ‚àß r ‚àß q     ‚âà‚ü® ‚âà-sym (‚àß-assoc p r (r ‚àß q)) ‚ü©
  (p ‚àß r) ‚àß r ‚àß q   ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-comm r q) ‚ü©
  (p ‚àß r) ‚àß (q ‚àß r) ‚àé
  where open import Tools.Reasoning.Equivalence M‚Ä≤

-- Meet on the right is a monotone function
-- If p ‚â§ q then r ‚àß p ‚â§ r ‚àß q

‚àß-monotone ≥ : p ‚â§ q ‚Üí r ‚àß p ‚â§ r ‚àß q
‚àß-monotone ≥ {p} {q} {r} p‚â§q = begin
  r ‚àß p             ‚âà‚ü® ‚àß-cong (‚âà-sym (‚àß-idem r)) p‚â§q ‚ü©
  (r ‚àß r) ‚àß (p ‚àß q) ‚âà‚ü® ‚àß-assoc r r (p ‚àß q) ‚ü©
  r ‚àß r ‚àß p ‚àß q     ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-comm r (p ‚àß q)) ‚ü©
  r ‚àß (p ‚àß q) ‚àß r   ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-assoc p q r) ‚ü©
  r ‚àß p ‚àß (q ‚àß r)   ‚âà‚ü® ‚âà-sym (‚àß-assoc r p (q ‚àß r)) ‚ü©
  (r ‚àß p) ‚àß (q ‚àß r) ‚âà‚ü® ‚àß-cong ‚âà-refl (‚àß-comm q r) ‚ü©
  (r ‚àß p) ‚àß (r ‚àß q) ‚àé
  where open import Tools.Reasoning.Equivalence M‚Ä≤

-- Meet is a monotone function
-- If p ‚â§ p‚Ä≤ and q ‚â§ q‚Ä≤ then p ‚àß q ‚â§ p‚Ä≤ ‚àß q‚Ä≤

‚àß-monotone : p ‚â§ p‚Ä≤ ‚Üí q ‚â§ q‚Ä≤ ‚Üí p ‚àß q ‚â§ p‚Ä≤ ‚àß q‚Ä≤
‚àß-monotone p‚â§p‚Ä≤ q‚â§q‚Ä≤ = ‚â§-trans (‚àß-monotoneÀ°  p‚â§p‚Ä≤) (‚àß-monotone ≥ q‚â§q‚Ä≤)

-- Meet on the left is a decreasing function
-- p ‚àß q ‚â§ p

‚àß-decreasingÀ° : (p q : M) ‚Üí p ‚àß q ‚â§ p
‚àß-decreasingÀ° p q = begin
  p ‚àß q       ‚âà‚ü® ‚àß-cong (‚âà-sym (‚àß-idem p)) ‚âà-refl ‚ü©
  (p ‚àß p) ‚àß q ‚âà‚ü® ‚àß-assoc p p q ‚ü©
  p ‚àß (p ‚àß q) ‚âà‚ü® ‚àß-comm p (p ‚àß q) ‚ü©
  (p ‚àß q) ‚àß p ‚àé
  where open import Tools.Reasoning.Equivalence M‚Ä≤

-- Meet on the right is a decreasing function
-- p ‚àß q ‚â§ q

‚àß-decreasing ≥ : (p q : M) ‚Üí p ‚àß q ‚â§ q
‚àß-decreasing ≥ p q = begin
  p ‚àß q       ‚âà‚ü® ‚àß-cong ‚âà-refl (‚âà-sym (‚àß-idem q)) ‚ü©
  p ‚àß (q ‚àß q) ‚âà‚ü® ‚âà-sym (‚àß-assoc p q q) ‚ü©
  (p ‚àß q) ‚àß q ‚àé
  where open import Tools.Reasoning.Equivalence M‚Ä≤
