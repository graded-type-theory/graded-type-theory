------------------------------------------------------------------------
-- Modes
------------------------------------------------------------------------

open import Definition.Modality

module Definition.Mode
  {a} {M : Set a} (­ЮЋё : Modality M) where

open Modality ­ЮЋё

open import Definition.Modality.Context ­ЮЋё
open import Definition.Modality.Properties ­ЮЋё
open import Tools.Algebra
open import Tools.Bool as B using (Bool; true; false; T)
open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Nullary
open import Tools.Product
open import Tools.PropositionalEquality as PE
import Tools.Reasoning.Equivalence
import Tools.Reasoning.PartialOrder
import Tools.Reasoning.PropositionalEquality

private variable
  n          : Nat
  p q r      : M
  ╬│ ╬┤        : ConРѓў n
  b          : Bool
  ok okРѓЂ okРѓѓ : T b

------------------------------------------------------------------------
-- Definitions

-- Modes.

data Mode : Set where
  ­ЮЪўрхљ : РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ Mode
  ­ЮЪЎрхљ : Mode

pattern ­ЮЪўрхљ[_] ok = ­ЮЪўрхљ РдЃ ok = ok Рдё

private variable
  m mРѓЂ mРѓЂРђ▓ mРѓѓ mРѓѓРђ▓ mРѓЃ : Mode

private

  -- A function used in the implementation of ­ЮЪўрхљ?.

  ­ЮЪўрхљРђ▓ : Рѕђ b Рєњ b РЅА ­ЮЪўрхљ-allowed Рєњ Mode
  ­ЮЪўрхљРђ▓ true  eq = ­ЮЪўрхљ[ subst T eq _ ]
  ­ЮЪўрхљРђ▓ false _  = ­ЮЪЎрхљ

-- A mode that is ­ЮЪўрхљ[┬аsomething┬а] if ­ЮЪўрхљ-allowed is true, and otherwise
-- ­ЮЪЎрхљ.

­ЮЪўрхљ? : Mode
­ЮЪўрхљ? = ­ЮЪўрхљРђ▓ ­ЮЪўрхљ-allowed PE.refl

-- The join of two modes.

infixr 40 _Рѕерхљ_

_Рѕерхљ_ : Mode Рєњ Mode Рєњ Mode
­ЮЪўрхљ Рѕерхљ m = m
­ЮЪЎрхљ Рѕерхљ m = ­ЮЪЎрхљ

-- Multiplication of modes.

infixr 45 _┬ирхљ_

_┬ирхљ_ : Mode Рєњ Mode Рєњ Mode
­ЮЪўрхљ ┬ирхљ _ = ­ЮЪўрхљ
­ЮЪЎрхљ ┬ирхљ m = m

-- Modes can be translated to quantities.

Рїю_РїЮ : Mode Рєњ M
Рїю ­ЮЪўрхљ РїЮ = ­ЮЪў
Рїю ­ЮЪЎрхљ РїЮ = ­ЮЪЎ

-- Quantities can be translated to modes (in a potentially lossy way).

Рїъ_РїЪ : M Рєњ Mode
Рїъ p РїЪ = case is-­ЮЪў? p of ╬╗ where
  (yes _) Рєњ ­ЮЪўрхљ?
  (no _)  Рєњ ­ЮЪЎрхљ

-- Modes can be scaled by quantities.
--
-- This definition is based on the typing rule for application in Bob
-- Atkey's "Syntax and Semantics of Quantitative Type Theory".

infixr 45 _рхљ┬и_

_рхљ┬и_ : Mode Рєњ M Рєњ Mode
­ЮЪўрхљ рхљ┬и _ = ­ЮЪўрхљ
­ЮЪЎрхљ рхљ┬и p = Рїъ p РїЪ

------------------------------------------------------------------------
-- Mode vectors

-- Mode vectors of the given length.

Mode-vector : Nat Рєњ Set
Mode-vector n = Fin n Рєњ Mode

private variable
  ms : Mode-vector n

-- An empty mode vector.

nilрхљ : Mode-vector 0
nilрхљ ()

-- Adds an element to the mode vector.

consрхљ : Mode Рєњ Mode-vector n Рєњ Mode-vector (1+ n)
consрхљ m ¤Ђ x0     = m
consрхљ m ¤Ђ (x +1) = ¤Ђ x

-- The head of the mode vector.

headрхљ : Mode-vector (1+ n) Рєњ Mode
headрхљ ¤Ђ = ¤Ђ x0

-- The tail of the mode vector.

tailрхљ : Mode-vector (1+ n) Рєњ Mode-vector n
tailрхљ ¤Ђ x = ¤Ђ (x +1)

-- A constant vector.

replicateрхљ : Mode Рєњ Mode-vector n
replicateрхљ m _ = m

-- Converts usage contexts to mode vectors.

Рїъ_РїЪрХю : ConРѓў n Рєњ Mode-vector n
Рїъ ╬│ РїЪрХю x = Рїъ ╬│ РЪе x РЪЕ РїЪ

-- Converts mode vectors to usage contexts.

Рїю_РїЮрХю : Mode-vector n Рєњ ConРѓў n
Рїю_РїЮрХю {n = 0}    _ = ╬х
Рїю_РїЮрХю {n = 1+ _} ¤Ђ = Рїю tailрхљ ¤Ђ РїЮрХю РѕЎ Рїю headрхљ ¤Ђ РїЮ

------------------------------------------------------------------------
-- Properties related to ­ЮЪўрхљ-allowed

-- If ­ЮЪўрхљ is not allowed, then every mode is equal to ­ЮЪЎрхљ.

only-­ЮЪЎрхљ-without-­ЮЪўрхљ : ┬г T ­ЮЪўрхљ-allowed Рєњ m РЅА ­ЮЪЎрхљ
only-­ЮЪЎрхљ-without-­ЮЪўрхљ {m = ­ЮЪўрхљ[ ok ]} not-ok = РіЦ-elim (not-ok ok)
only-­ЮЪЎрхљ-without-­ЮЪўрхљ {m = ­ЮЪЎрхљ}       _      = PE.refl

-- If ­ЮЪўрхљ is not allowed, then all modes are equal.

Mode-propositional-without-­ЮЪўрхљ : ┬г T ­ЮЪўрхљ-allowed Рєњ mРѓЂ РЅА mРѓѓ
Mode-propositional-without-­ЮЪўрхљ {mРѓЂ = mРѓЂ} {mРѓѓ = mРѓѓ} not-ok =
  mРѓЂ  РЅАРЪе only-­ЮЪЎрхљ-without-­ЮЪўрхљ not-ok РЪЕ
  ­ЮЪЎрхљ  РЅА╦ўРЪе only-­ЮЪЎрхљ-without-­ЮЪўрхљ not-ok РЪЕ
  mРѓѓ  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

------------------------------------------------------------------------
-- Some eliminators or similar principles

-- One can prove that a predicate holds for ­ЮЪўрхљ-allowed by proving that
-- it holds given that T┬а­ЮЪўрхљ-allowed is inhabited, and that it holds
-- given that T┬а­ЮЪўрхљ-allowed is not inhabited.

­ЮЪўрхљ-allowed-elim :
  Рѕђ {p} {P : Set p} Рєњ
  (T ­ЮЪўрхљ-allowed Рєњ P) Рєњ
  ((not-ok : ┬г T ­ЮЪўрхљ-allowed) Рєњ P) Рєњ
  P
­ЮЪўрхљ-allowed-elim t f with ­ЮЪўрхљ-allowed
Рђд | true  = t _
Рђд | false = f (╬╗ ())

-- An eliminator for modes.

Mode-elim :
  Рѕђ {p} (P : Mode Рєњ Set p) Рєњ
  (РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ P ­ЮЪўрхљ[ ok ]) Рєњ
  P ­ЮЪЎрхљ Рєњ
  Рѕђ m Рєњ P m
Mode-elim _ z o = ╬╗ where
  ­ЮЪўрхљ[ ok ] Рєњ z РдЃ ok = ok Рдё
  ­ЮЪЎрхљ       Рєњ o

-- One can prove that a predicate holds for ­ЮЪўрхљ? by proving that it
-- holds for ­ЮЪўрхљ[┬аok┬а] (for any ok) and that it holds for ­ЮЪЎрхљ (under the
-- assumption that T┬а­ЮЪўрхљ-allowed is not inhabited).

­ЮЪўрхљ?-elim :
  Рѕђ {p} (P : Mode Рєњ Set p) Рєњ
  (РдЃ ok : T ­ЮЪўрхљ-allowed Рдё Рєњ P ­ЮЪўрхљ) Рєњ
  (┬г T ­ЮЪўрхљ-allowed Рєњ P ­ЮЪЎрхљ) Рєњ
  P ­ЮЪўрхљ?
­ЮЪўрхљ?-elim P z o = lemma _ _
  where
  lemma : Рѕђ b (eq : b РЅА ­ЮЪўрхљ-allowed) Рєњ P (­ЮЪўрхљРђ▓ b eq)
  lemma false eq = o (PE.subst T (PE.sym eq))
  lemma true  eq = z РдЃ ok = PE.subst T eq _ Рдё

------------------------------------------------------------------------
-- Properties related to ­ЮЪўрхљ?

-- Any two applications of ­ЮЪўрхљ[_] are equal.

­ЮЪўрхљ-cong : ­ЮЪўрхљ[ okРѓЂ ] РЅА ­ЮЪўрхљ[ okРѓѓ ]
­ЮЪўрхљ-cong = PE.cong ­ЮЪўрхљ[_] B.T-propositional

-- ­ЮЪўрхљ? is equal to ­ЮЪўрхљ[┬аok┬а].

­ЮЪўрхљ?РЅА­ЮЪўрхљ : ­ЮЪўрхљ? РЅА ­ЮЪўрхљ[ ok ]
­ЮЪўрхљ?РЅА­ЮЪўрхљ {ok = ok} = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ m РЅА ­ЮЪўрхљ[ ok ])
  ­ЮЪўрхљ-cong
  (╬╗ not-ok Рєњ РіЦ-elim (not-ok ok))

-- If ­ЮЪўрхљ is not allowed, then ­ЮЪўрхљ? is equal to ­ЮЪЎрхљ.

­ЮЪўрхљ?РЅА­ЮЪЎрхљ : ┬г T ­ЮЪўрхљ-allowed Рєњ ­ЮЪўрхљ? РЅА ­ЮЪЎрхљ
­ЮЪўрхљ?РЅА­ЮЪЎрхљ not-ok = ­ЮЪўрхљ?-elim
  (_РЅА ­ЮЪЎрхљ)
  (╬╗ РдЃ ok = ok Рдё Рєњ РіЦ-elim (not-ok ok))
  (╬╗ _ Рєњ PE.refl)

------------------------------------------------------------------------
-- Properties related to _Рѕерхљ_ and _┬ирхљ_

-- The multiplication operation is idempotent.

┬ирхљ-idem : m ┬ирхљ m РЅА m
┬ирхљ-idem {m = ­ЮЪўрхљ} = PE.refl
┬ирхљ-idem {m = ­ЮЪЎрхљ} = PE.refl

-- The operations _Рѕерхљ_ and _┬ирхљ_, along with the values ­ЮЪўрхљ and ­ЮЪЎрхљ, form
-- a commutative semiring.

Рѕерхљ-┬ирхљ-is-commutative-semiring :
  IsCommutativeSemiring Mode _Рѕерхљ_ _┬ирхљ_ ­ЮЪўрхљ? ­ЮЪЎрхљ
Рѕерхљ-┬ирхљ-is-commutative-semiring = record
  { isSemiring = record
    { isSemiringWithoutAnnihilatingZero = record
      { +-isCommutativeMonoid = record
        { isMonoid = record
          { isSemigroup = record
            { isMagma = record
              { isEquivalence = PE.isEquivalence
              ; РѕЎ-cong        = congРѓѓ _Рѕерхљ_
              }
            ; assoc = ╬╗ where
                ­ЮЪўрхљ _ _ Рєњ PE.refl
                ­ЮЪЎрхљ _ _ Рєњ PE.refl
            }
          ; identity =
                (╬╗ where
                   ­ЮЪўрхљ[ ok ] Рєњ
                     ­ЮЪўрхљ? Рѕерхљ ­ЮЪўрхљ  РЅАРЪе PE.cong (_Рѕерхљ _) (­ЮЪўрхљ?РЅА­ЮЪўрхљ {ok = ok}) РЪЕ
                     ­ЮЪўрхљ Рѕерхљ ­ЮЪўрхљ   РЅАРЪеРЪЕ
                     ­ЮЪўрхљ         Рѕј
                   ­ЮЪЎрхљ Рєњ ­ЮЪўрхљ?-elim
                     (╬╗ m Рєњ m Рѕерхљ ­ЮЪЎрхљ РЅА ­ЮЪЎрхљ)
                     PE.refl
                     (╬╗ _ Рєњ PE.refl))
              , (╬╗ where
                   ­ЮЪўрхљ Рєњ ­ЮЪўрхљ?РЅА­ЮЪўрхљ
                   ­ЮЪЎрхљ Рєњ PE.refl)
          }
        ; comm = ╬╗ where
            ­ЮЪўрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
            ­ЮЪўрхљ ­ЮЪЎрхљ Рєњ PE.refl
            ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ PE.refl
            ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
        }
      ; *-isMonoid = record
        { isSemigroup = record
          { isMagma = record
            { isEquivalence = PE.isEquivalence
            ; РѕЎ-cong        = congРѓѓ _┬ирхљ_
            }
          ; assoc = ╬╗ where
              ­ЮЪўрхљ _ _ Рєњ PE.refl
              ­ЮЪЎрхљ _ _ Рєњ PE.refl
          }
        ; identity =
              (╬╗ _ Рєњ PE.refl)
            , (╬╗ where
                 ­ЮЪўрхљ Рєњ PE.refl
                 ­ЮЪЎрхљ Рєњ PE.refl)
        }
      ; distrib =
            (╬╗ where
               ­ЮЪўрхљ _ _ Рєњ PE.refl
               ­ЮЪЎрхљ _ _ Рєњ PE.refl)
          , (╬╗ where
               ­ЮЪўрхљ ­ЮЪўрхљ _  Рєњ PE.refl
               ­ЮЪўрхљ ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
               ­ЮЪўрхљ ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
               ­ЮЪЎрхљ ­ЮЪўрхљ _  Рєњ PE.refl
               ­ЮЪЎрхљ ­ЮЪЎрхљ _  Рєњ PE.refl)
      }
    ; zero =
          (╬╗ where
             ­ЮЪўрхљ Рєњ
               ­ЮЪўрхљ? ┬ирхљ ­ЮЪўрхљ  РЅАРЪе PE.cong (_┬ирхљ _) ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
               ­ЮЪўрхљ ┬ирхљ ­ЮЪўрхљ   РЅАРЪеРЪЕ
               ­ЮЪўрхљ         РЅА╦ўРЪе ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
               ­ЮЪўрхљ?        Рѕј
             ­ЮЪЎрхљ Рєњ ­ЮЪўрхљ?-elim
               (╬╗ m Рєњ m ┬ирхљ ­ЮЪЎрхљ РЅА m)
               PE.refl
               (╬╗ _ Рєњ PE.refl))
        , (╬╗ where
             ­ЮЪўрхљ Рєњ PE.sym ­ЮЪўрхљ?РЅА­ЮЪўрхљ
             ­ЮЪЎрхљ Рєњ PE.refl)
    }
  ; *-comm = ╬╗ where
      ­ЮЪўрхљ ­ЮЪўрхљ Рєњ ­ЮЪўрхљ-cong
      ­ЮЪўрхљ ­ЮЪЎрхљ Рєњ PE.refl
      ­ЮЪЎрхљ ­ЮЪўрхљ Рєњ PE.refl
      ­ЮЪЎрхљ ­ЮЪЎрхљ Рєњ PE.refl
  }
  where
  open Tools.Reasoning.PropositionalEquality

open IsCommutativeSemiring Mode Рѕерхљ-┬ирхљ-is-commutative-semiring
  public
  using
    ()
  renaming
    ( *-assoc       to ┬ирхљ-assoc
    ; *-identity    to ┬ирхљ-identity
    ; *-identity╩│   to ┬ирхљ-identity╩│
    ; *-identity╦А   to ┬ирхљ-identity╦А
    ; *-comm        to ┬ирхљ-comm
    ; +-assoc       to Рѕерхљ-assoc
    ; +-comm        to Рѕерхљ-comm
    ; +-identity    to Рѕерхљ-identity
    ; +-identity╩│   to Рѕерхљ-identity╩│
    ; +-identity╦А   to Рѕерхљ-identity╦А
    ; distrib       to ┬ирхљ-distrib-Рѕерхљ
    ; distrib╩│      to ┬ирхљ-distrib╩│-Рѕерхљ
    ; distrib╦А      to ┬ирхљ-distrib╦А-Рѕерхљ
    ; zero          to ┬ирхљ-zero
    ; zero╩│         to ┬ирхљ-zero╩│
    ; zero╦А         to ┬ирхљ-zero╦А
    )

------------------------------------------------------------------------
-- Properties related to Рїю_РїЮ and Рїю_РїЮрХю

-- Рїю_РїЮ commutes with _┬и_/_┬ирхљ_.

Рїю┬ирхљРїЮ : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ РЅѕ Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ
Рїю┬ирхљРїЮ {mРѓѓ = mРѓѓ} ­ЮЪўрхљ = begin
  ­ЮЪў           РЅѕ╦ўРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў ┬и Рїю mРѓѓ РїЮ  Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)
Рїю┬ирхљРїЮ {mРѓѓ = mРѓѓ} ­ЮЪЎрхљ = begin
  Рїю mРѓѓ РїЮ      РЅѕ╦ўРЪе ┬и-identity╦А _ РЪЕ
  ­ЮЪЎ ┬и Рїю mРѓѓ РїЮ  Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- A form of commutativity.

РїюРїЮ-┬и-comm : Рѕђ m Рєњ Рїю m РїЮ ┬и p РЅѕ p ┬и Рїю m РїЮ
РїюРїЮ-┬и-comm {p = p} ­ЮЪўрхљ = begin
  ­ЮЪў ┬и p  РЅѕРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў      РЅѕ╦ўРЪе ┬и-zero╩│ _ РЪЕ
  p ┬и ­ЮЪў  Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)
РїюРїЮ-┬и-comm {p = p} ­ЮЪЎрхљ = begin
  ­ЮЪЎ ┬и p  РЅѕРЪе ┬и-identity╦А _ РЪЕ
  p      РЅѕ╦ўРЪе ┬и-identity╩│ _ РЪЕ
  p ┬и ­ЮЪЎ  Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- A form of associativity.

┬ирхљ-┬и-assoc : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬и p РЅѕ Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ ┬и p
┬ирхљ-┬и-assoc {mРѓѓ = mРѓѓ} {p = p} mРѓЂ = begin
  Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬и p       РЅѕРЪе ┬и-cong╩│ (Рїю┬ирхљРїЮ mРѓЂ) РЪЕ
  (Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ) ┬и p  РЅѕРЪе ┬и-assoc _ _ _ РЪЕ
  Рїю mРѓЂ РїЮ ┬и Рїю mРѓѓ РїЮ ┬и p    Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- A form of associativity.

┬ирхљ-┬ирХю-assoc : Рѕђ mРѓЂ Рєњ Рїю mРѓЂ ┬ирхљ mРѓѓ РїЮ ┬ирХю ╬│ РЅѕрХю Рїю mРѓЂ РїЮ ┬ирХю Рїю mРѓѓ РїЮ ┬ирХю ╬│
┬ирхљ-┬ирХю-assoc {╬│ = ╬х}     mРѓЂ = ╬х
┬ирхљ-┬ирХю-assoc {╬│ = _ РѕЎ _} mРѓЂ = ┬ирхљ-┬ирХю-assoc mРѓЂ РѕЎ ┬ирхљ-┬и-assoc mРѓЂ

-- Рїю┬аm┬аРїЮ┬а┬и_ distributes over _РіЏ_Рќи┬аr from the left.

РїюРїЮ-┬и-distrib╦А-РіЏ :
  Рѕђ m Рєњ Рїю m РїЮ ┬и p РіЏ q Рќи r РЅѕ (Рїю m РїЮ ┬и p) РіЏ Рїю m РїЮ ┬и q Рќи r
РїюРїЮ-┬и-distrib╦А-РіЏ {p = p} {q = q} {r = r} ­ЮЪЎрхљ = begin
  ­ЮЪЎ ┬и p РіЏ q Рќи r        РЅѕРЪе ┬и-identity╦А _ РЪЕ
  p РіЏ q Рќи r            РЅѕ╦ўРЪе РіЏрхБ-cong (┬и-identity╦А _) (┬и-identity╦А _) РЪЕ
  (­ЮЪЎ ┬и p) РіЏ ­ЮЪЎ ┬и q Рќи r  Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)
РїюРїЮ-┬и-distrib╦А-РіЏ {p = p} {q = q} {r = r} ­ЮЪўрхљ =
  let open Tools.Reasoning.Equivalence (setoid M) in begin
  ­ЮЪў ┬и p РіЏ q Рќи r        РЅѕРЪе ┬и-zero╦А _ РЪЕ
  ­ЮЪў                    РЅѕ╦ўРЪе РіЏ-idem-­ЮЪў _ РЪЕ
  ­ЮЪў РіЏ ­ЮЪў Рќи r            РЅѕ╦ўРЪе РіЏрхБ-cong (┬и-zero╦А _) (┬и-zero╦А _) РЪЕ
  (­ЮЪў ┬и p) РіЏ ­ЮЪў ┬и q Рќи r  Рѕј

-- Рїю┬аm┬аРїЮ┬а┬ирХю_ distributes over _РіЏрХю_Рќи┬аr from the left.

РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю :
  Рѕђ m Рєњ Рїю m РїЮ ┬ирХю ╬│ РіЏрХю ╬┤ Рќи r РЅѕрХю (Рїю m РїЮ ┬ирХю ╬│) РіЏрХю Рїю m РїЮ ┬ирХю ╬┤ Рќи r
РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю {╬│ = ╬х}     {╬┤ = ╬х}     _ = ╬х
РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю {╬│ = _ РѕЎ _} {╬┤ = _ РѕЎ _} m =
  РїюРїЮ-┬ирХю-distrib╦А-РіЏрХю m РѕЎ РїюРїЮ-┬и-distrib╦А-РіЏ m

-- The result of looking up the x-th entry in Рїю┬аms┬аРїЮрХю is Рїю┬аms┬аx┬аРїЮ.

РїюРїЮрХюРЪеРЪЕ : (x : Fin n) Рєњ Рїю ms РїЮрХю РЪе x РЪЕ РЅА Рїю ms x РїЮ
РїюРїЮрХюРЪеРЪЕ x0     = PE.refl
РїюРїЮрХюРЪеРЪЕ (x +1) = РїюРїЮрХюРЪеРЪЕ x

------------------------------------------------------------------------
-- Properties related to Рїъ_РїЪ and Рїъ_РїЪрХю

-- The function Рїъ_РїЪ preserves "equality".

РїъРїЪ-cong : p РЅѕ q Рєњ Рїъ p РїЪ РЅА Рїъ q РїЪ
РїъРїЪ-cong {p = p} {q = q} pРЅѕq with is-­ЮЪў? p | is-­ЮЪў? q
Рђд | yes _   | yes _  = PE.refl
Рђд | no _    | no _   = PE.refl
Рђд | yes pРЅѕ­ЮЪў | no qРЅЅ­ЮЪў = РіЦ-elim (qРЅЅ­ЮЪў (begin
  q  РЅѕ╦ўРЪе pРЅѕq РЪЕ
  p  РЅѕРЪе pРЅѕ­ЮЪў РЪЕ
  ­ЮЪў  Рѕј))
  where
  open Tools.Reasoning.Equivalence (setoid M)
Рђд | no pРЅЅ­ЮЪў | yes qРЅѕ­ЮЪў = РіЦ-elim (pРЅЅ­ЮЪў (begin
  p  РЅѕРЪе pРЅѕq РЪЕ
  q  РЅѕРЪе qРЅѕ­ЮЪў РЪЕ
  ­ЮЪў  Рѕј))
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- The function Рїъ_РїЪрХю preserves "equality".

РїъРїЪрХю-cong : ╬│ РЅѕрХю ╬┤ Рєњ Рѕђ x Рєњ Рїъ ╬│ РїЪрХю x РЅА Рїъ ╬┤ РїЪрХю x
РїъРїЪрХю-cong (╬│РЅѕ╬┤ РѕЎ pРЅѕq) = ╬╗ where
  x0     Рєњ РїъРїЪ-cong pРЅѕq
  (x +1) Рєњ РїъРїЪрХю-cong ╬│РЅѕ╬┤ x

-- If p is equivalent to ­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ?.

РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? : p РЅѕ ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪўрхљ?
РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? {p = p} pРЅѕ­ЮЪў with is-­ЮЪў? p
Рђд | yes _  = PE.refl
Рђд | no pРЅЅ­ЮЪў = РіЦ-elim (pРЅЅ­ЮЪў pРЅѕ­ЮЪў)

-- If p is equivalent to ­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а].

РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ : p РЅѕ ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪўрхљ[ ok ]
РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ {p = p} {ok = ok} pРЅѕ­ЮЪў =
  Рїъ p РїЪ     РЅАРЪе РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? pРЅѕ­ЮЪў РЪЕ
  ­ЮЪўрхљ?       РЅАРЪе ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
  ­ЮЪўрхљ[ ok ]  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If p is not equivalent to ­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪЎрхљ.

РЅЅ­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљ : p РЅЅ ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪЎрхљ
РЅЅ­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљ {p = p} pРЅЅ­ЮЪў with is-­ЮЪў? p
Рђд | no _    = PE.refl
Рђд | yes pРЅѕ­ЮЪў = РіЦ-elim (pРЅЅ­ЮЪў pРЅѕ­ЮЪў)

-- If Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а], then p is equivalent to ­ЮЪў.

РїъРїЪРЅА­ЮЪўрхљРєњРЅѕ­ЮЪў : Рїъ p РїЪ РЅА ­ЮЪўрхљ[ ok ] Рєњ p РЅѕ ­ЮЪў
РїъРїЪРЅА­ЮЪўрхљРєњРЅѕ­ЮЪў {p = p} _  with is-­ЮЪў? p
РїъРїЪРЅА­ЮЪўрхљРєњРЅѕ­ЮЪў         _  | yes pРЅѕ­ЮЪў = pРЅѕ­ЮЪў
РїъРїЪРЅА­ЮЪўрхљРєњРЅѕ­ЮЪў         () | no _

-- If ­ЮЪўрхљ is allowed and Рїъ┬аp┬аРїЪ is equal to ­ЮЪЎрхљ, then p is not equivalent
-- to ­ЮЪў.

РїъРїЪРЅА­ЮЪЎрхљРєњРЅЅ­ЮЪў : T ­ЮЪўрхљ-allowed Рєњ Рїъ p РїЪ РЅА ­ЮЪЎрхљ Рєњ p РЅЅ ­ЮЪў
РїъРїЪРЅА­ЮЪЎрхљРєњРЅЅ­ЮЪў {p = p} ok _      with is-­ЮЪў? p
РїъРїЪРЅА­ЮЪЎрхљРєњРЅЅ­ЮЪў         ok _      | no pРЅЅ­ЮЪў = pРЅЅ­ЮЪў
РїъРїЪРЅА­ЮЪЎрхљРєњРЅЅ­ЮЪў         ok ­ЮЪўрхљ?РЅА­ЮЪЎрхљ | yes _  =
  case ­ЮЪўрхљ[ ok ]  РЅА╦ўРЪе ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
       ­ЮЪўрхљ?       РЅАРЪе ­ЮЪўрхљ?РЅА­ЮЪЎрхљ РЪЕ
       ­ЮЪЎрхљ        Рѕј
  of ╬╗ ()
  where
  open Tools.Reasoning.PropositionalEquality

-- The value of Рїъ┬а­ЮЪў┬аРїЪ is ­ЮЪўрхљ?.

Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ? : Рїъ ­ЮЪў РїЪ РЅА ­ЮЪўрхљ?
Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ? = РЅѕ­ЮЪўРєњРїъРїЪРЅА­ЮЪўрхљ? РЅѕ-refl

-- Рїъ┬а­ЮЪў┬аРїЪ is equal to ­ЮЪўрхљ[┬аok┬а].

Рїъ­ЮЪўРїЪ : Рїъ ­ЮЪў РїЪ РЅА ­ЮЪўрхљ[ ok ]
Рїъ­ЮЪўРїЪ {ok = ok} = begin
  Рїъ ­ЮЪў РїЪ     РЅАРЪе Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ? РЪЕ
  ­ЮЪўрхљ?       РЅАРЪе ­ЮЪўрхљ?РЅА­ЮЪўрхљ РЪЕ
  ­ЮЪўрхљ[ ok ]  Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If ­ЮЪЎ┬аРЅЅ┬а­ЮЪў, then the value of Рїъ┬а­ЮЪЎ┬аРїЪ is ­ЮЪЎрхљ.

Рїъ­ЮЪЎРїЪ : ­ЮЪЎ РЅЅ ­ЮЪў Рєњ Рїъ ­ЮЪЎ РїЪ РЅА ­ЮЪЎрхљ
Рїъ­ЮЪЎРїЪ = РЅЅ­ЮЪўРєњРїъРїЪРЅА­ЮЪЎрхљ

-- The function taking p to Рїю┬аРїъ┬аp┬аРїЪ┬аРїЮ preserves equivalence.

РїюРїъРїЪРїЮ-cong : p РЅѕ q Рєњ Рїю Рїъ p РїЪ РїЮ РЅѕ Рїю Рїъ q РїЪ РїЮ
РїюРїъРїЪРїЮ-cong pРЅѕq = РЅѕ-reflexive (cong Рїю_РїЮ (РїъРїЪ-cong pРЅѕq))

-- If ­ЮЪЎ┬аРЅц┬а­ЮЪў, then the function taking p to Рїю┬аРїъ┬аp┬аРїЪ┬аРїЮ is monotone.

РїюРїъРїЪРїЮ-monotone : ­ЮЪЎ РЅц ­ЮЪў Рєњ p РЅц q Рєњ Рїю Рїъ p РїЪ РїЮ РЅц Рїю Рїъ q РїЪ РїЮ
РїюРїъРїЪРїЮ-monotone {p = p} {q = q} ­ЮЪЎРЅц­ЮЪў pРЅцq with is-­ЮЪў? p | is-­ЮЪў? q
Рђд | yes _ | yes _ = РЅц-refl
Рђд | no _  | no _  = РЅц-refl
Рђд | no _  | yes _ = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ ­ЮЪЎ РЅѕ ­ЮЪЎ РѕД Рїю m РїЮ)
  ­ЮЪЎРЅц­ЮЪў
  (╬╗ _ Рєњ РЅц-refl)
Рђд | yes pРЅѕ­ЮЪў | no qРЅЅ­ЮЪў = РіЦ-elim (qРЅЅ­ЮЪў (­ЮЪўРЅ« (begin
  ­ЮЪў  РЅѕ╦ўРЪе pРЅѕ­ЮЪў РЪЕ
  p  РЅцРЪе pРЅцq РЪЕ
  q  Рѕј)))
  where
  open Tools.Reasoning.PartialOrder РЅц-poset

-- The value p┬а┬и┬аРїю┬аРїъ┬аp┬аРїЪ┬аРїЮ is equivalent to p.

┬иРїюРїъРїЪРїЮ : p ┬и Рїю Рїъ p РїЪ РїЮ РЅѕ p
┬иРїюРїъРїЪРїЮ {p = p} with is-­ЮЪў? p
Рђд | no _ = begin
  p ┬и ­ЮЪЎ  РЅѕРЪе ┬и-identity╩│ _ РЪЕ
  p      Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)
Рђд | yes pРЅѕ­ЮЪў = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ p ┬и Рїю m РїЮ РЅѕ p)
  (begin
     p ┬и ­ЮЪў  РЅѕРЪе ┬и-zero╩│ _ РЪЕ
     ­ЮЪў      РЅѕ╦ўРЪе pРЅѕ­ЮЪў РЪЕ
     p      Рѕј)
  (╬╗ _ Рєњ ┬и-identity╩│ _)
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- The function Рїъ_РїЪ is a left inverse of Рїю_РїЮ if ­ЮЪЎ┬аРЅЅ┬а­ЮЪў.

РїъРїюРїЮРїЪ : ­ЮЪЎ РЅЅ ­ЮЪў Рєњ Рѕђ m Рєњ Рїъ Рїю m РїЮ РїЪ РЅА m
РїъРїюРїЮРїЪ _   ­ЮЪўрхљ = Рїъ­ЮЪўРїЪ
РїъРїюРїЮРїЪ ­ЮЪЎРЅЅ­ЮЪў ­ЮЪЎрхљ = Рїъ­ЮЪЎРїЪ ­ЮЪЎРЅЅ­ЮЪў

-- The function Рїю_РїЮ is a left inverse of Рїъ_РїЪ (up to _РЅѕ_) for arguments
-- in the image of Рїю_РїЮ.

РїюРїъРїюРїЮРїЪРїЮ : Рѕђ m Рєњ Рїю Рїъ Рїю m РїЮ РїЪ РїЮ РЅѕ Рїю m РїЮ
РїюРїъРїюРїЮРїЪРїЮ ­ЮЪўрхљ[ ok ] = begin
  Рїю Рїъ ­ЮЪў РїЪ РїЮ  РЅАРЪе cong Рїю_РїЮ (Рїъ­ЮЪўРїЪ {ok = ok}) РЪЕ
  Рїю ­ЮЪўрхљ РїЮ     РЅАРЪеРЪЕ
  ­ЮЪў          Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)
РїюРїъРїюРїЮРїЪРїЮ ­ЮЪЎрхљ with is-­ЮЪў? ­ЮЪЎ
Рђд | no _    = РЅѕ-refl
Рђд | yes ­ЮЪЎРЅѕ­ЮЪў = ­ЮЪўрхљ?-elim
  (╬╗ m Рєњ Рїю m РїЮ РЅѕ ­ЮЪЎ)
  (РЅѕ-sym ­ЮЪЎРЅѕ­ЮЪў)
  (╬╗ _ Рєњ РЅѕ-refl)

-- A lemma relating Рїъ_РїЪ, _┬и_, Рїю_РїЮ and _рхљ┬и_.

РїъРїюРїЮ┬иРїЪ : Рѕђ m Рєњ Рїъ Рїю m РїЮ ┬и p РїЪ РЅА m рхљ┬и p
РїъРїюРїЮ┬иРїЪ {p = p} ­ЮЪўрхљ =
  Рїъ ­ЮЪў ┬и p РїЪ  РЅАРЪе РїъРїЪ-cong (┬и-zero╦А _) РЪЕ
  Рїъ ­ЮЪў РїЪ      РЅАРЪе Рїъ­ЮЪўРїЪ РЪЕ
  ­ЮЪўрхљ         Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
РїъРїюРїЮ┬иРїЪ {p = p} ­ЮЪЎрхљ =
  Рїъ ­ЮЪЎ ┬и p РїЪ  РЅАРЪе РїъРїЪ-cong (┬и-identity╦А _) РЪЕ
  Рїъ p РїЪ      РЅАРЪеРЪЕ
  ­ЮЪЎрхљ рхљ┬и p    Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If 1┬аРЅѕ┬а­ЮЪў, then Рїъ┬аp┬аРїЪ is equal to ­ЮЪўрхљ?.

РїъРїЪРЅА­ЮЪўрхљ : ­ЮЪЎ РЅѕ ­ЮЪў Рєњ Рїъ p РїЪ РЅА ­ЮЪўрхљ?
РїъРїЪРЅА­ЮЪўрхљ {p = p} ­ЮЪЎРЅѕ­ЮЪў with is-­ЮЪў? p
Рђд | yes _  = PE.refl
Рђд | no pРЅЅ­ЮЪў = РіЦ-elim (pРЅЅ­ЮЪў (begin
  p      РЅѕ╦ўРЪе ┬и-identity╩│ _ РЪЕ
  p ┬и ­ЮЪЎ  РЅѕРЪе ┬и-cong╦А ­ЮЪЎРЅѕ­ЮЪў РЪЕ
  p ┬и ­ЮЪў  РЅѕРЪе ┬и-zero╩│ _ РЪЕ
  ­ЮЪў      Рѕј))
  where
  open Tools.Reasoning.Equivalence (setoid M)

------------------------------------------------------------------------
-- Properties related to _рхљ┬и_

-- The function m┬архљ┬и_ preserves "equality".

рхљ┬и-cong : Рѕђ m Рєњ p РЅѕ q Рєњ m рхљ┬и p РЅА m рхљ┬и q
рхљ┬и-cong ­ЮЪўрхљ = ╬╗ _ Рєњ PE.refl
рхљ┬и-cong ­ЮЪЎрхљ = РїъРїЪ-cong

-- ­ЮЪў is a kind of right zero for _рхљ┬и_.

рхљ┬и-zero╩│ : Рѕђ m Рєњ m рхљ┬и ­ЮЪў РЅА ­ЮЪўрхљ?
рхљ┬и-zero╩│ ­ЮЪўрхљ = PE.sym ­ЮЪўрхљ?РЅА­ЮЪўрхљ
рхљ┬и-zero╩│ ­ЮЪЎрхљ = Рїъ­ЮЪўРїЪРЅА­ЮЪўрхљ?

-- A form of associativity.

┬ирхљ-рхљ┬и-assoc : Рѕђ mРѓЂ Рєњ (mРѓЂ ┬ирхљ mРѓѓ) рхљ┬и p РЅА mРѓЂ ┬ирхљ (mРѓѓ рхљ┬и p)
┬ирхљ-рхљ┬и-assoc ­ЮЪўрхљ = PE.refl
┬ирхљ-рхљ┬и-assoc ­ЮЪЎрхљ = PE.refl

-- A lemma relating _рхљ┬и_ and _┬ирхљ_.

рхљ┬и-┬ирхљ : Рѕђ m Рєњ (m рхљ┬и p) ┬ирхљ m РЅА m рхљ┬и p
рхљ┬и-┬ирхљ         ­ЮЪўрхљ = PE.refl
рхљ┬и-┬ирхљ {p = p} ­ЮЪЎрхљ =
  Рїъ p РїЪ ┬ирхљ ­ЮЪЎрхљ  РЅАРЪе ┬ирхљ-identity╩│ _ РЪЕ
  Рїъ p РїЪ        Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- A lemma relating _рхљ┬и_, _┬ирхљ_ and Рїъ_РїЪ.

рхљ┬и-┬ирхљ-РїъРїЪ : Рѕђ m Рєњ (m рхљ┬и p) ┬ирхљ Рїъ p РїЪ РЅА m рхљ┬и p
рхљ┬и-┬ирхљ-РїъРїЪ         ­ЮЪўрхљ = PE.refl
рхљ┬и-┬ирхљ-РїъРїЪ {p = p} ­ЮЪЎрхљ =
  Рїъ p РїЪ ┬ирхљ Рїъ p РїЪ  РЅАРЪе ┬ирхљ-idem РЪЕ
  Рїъ p РїЪ           Рѕј
  where
  open Tools.Reasoning.PropositionalEquality

-- If ­ЮЪЎ┬аРЅц┬а­ЮЪў, then the function taking p to Рїю┬аm┬архљ┬и┬аp┬аРїЮ is monotone for
-- every m.

Рїюрхљ┬иРїЮ-monotone╩│ : ­ЮЪЎ РЅц ­ЮЪў Рєњ Рѕђ m Рєњ p РЅц q Рєњ Рїю m рхљ┬и p РїЮ РЅц Рїю m рхљ┬и q РїЮ
Рїюрхљ┬иРїЮ-monotone╩│ _   ­ЮЪўрхљ = ╬╗ _ Рєњ РЅц-refl
Рїюрхљ┬иРїЮ-monotone╩│ ­ЮЪЎРЅц­ЮЪў ­ЮЪЎрхљ = РїюРїъРїЪРїЮ-monotone ­ЮЪЎРЅц­ЮЪў

-- The value p┬а┬и┬аРїю┬аm┬архљ┬и┬аp┬аРїЮ is equivalent to Рїю┬аm┬аРїЮ┬а┬и┬аp.

┬иРїюрхљ┬иРїЮ : Рѕђ m Рєњ p ┬и Рїю m рхљ┬и p РїЮ РЅѕ p ┬и Рїю m РїЮ
┬иРїюрхљ┬иРїЮ         ­ЮЪўрхљ = РЅѕ-refl
┬иРїюрхљ┬иРїЮ {p = p} ­ЮЪЎрхљ = begin
  p ┬и Рїю Рїъ p РїЪ РїЮ  РЅѕРЪе ┬иРїюРїъРїЪРїЮ РЪЕ
  p              РЅѕ╦ўРЪе ┬и-identity╩│ _ РЪЕ
  p ┬и ­ЮЪЎ          Рѕј
  where
  open Tools.Reasoning.Equivalence (setoid M)

-- If 1┬аРЅѕ┬а­ЮЪў, then m┬архљ┬и┬аp is equal to m.

рхљ┬и-identity╩│ : ­ЮЪЎ РЅѕ ­ЮЪў Рєњ m рхљ┬и p РЅА m
рхљ┬и-identity╩│ {m = ­ЮЪўрхљ}         _   = PE.refl
рхљ┬и-identity╩│ {m = ­ЮЪЎрхљ} {p = p} ­ЮЪЎРЅѕ­ЮЪў =
  Рїъ p РїЪ  РЅАРЪе РїъРїЪРЅА­ЮЪўрхљ ­ЮЪЎРЅѕ­ЮЪў РЪЕ
  ­ЮЪўрхљ?    РЅАРЪе ­ЮЪўрхљ?РЅА­ЮЪЎрхљ (╬╗ ok Рєњ ­ЮЪўрхљРєњ­ЮЪЎРЅЅ­ЮЪў ok ­ЮЪЎРЅѕ­ЮЪў) РЪЕ
  ­ЮЪЎрхљ     Рѕј
  where
  open Tools.Reasoning.PropositionalEquality
