------------------------------------------------------------------------
-- Term constructors are injective.
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Injectivity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M hiding (wk)
import Definition.Untyped M as U
open import Definition.Untyped.Properties M

open import Definition.Typed R
open import Definition.Typed.Weakening R
open import Definition.Typed.Properties R
open import Definition.Typed.EqRelInstance R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Fundamental.Reducibility R

open import Tools.Fin
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A‚ÇÅ A‚ÇÇ F F‚Ä≤ G G‚Ä≤ t‚ÇÅ t‚ÇÇ u‚ÇÅ u‚ÇÇ : Term _
    p p‚Ä≤ q q‚Ä≤ : M
    b b‚Ä≤ : BinderMode
    l : TypeLevel
    s s‚Ä≤ : Strength

-- Helper function of injectivity for specific reducible Œ†-types
injectivity‚Ä≤ : ‚àÄ {F G H E l} W W‚Ä≤
               ([WFG] : Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© ‚ü¶ W ‚üß F ‚ñπ G)
             ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚ü¶ W ‚üß F ‚ñπ G ‚â° ‚ü¶ W‚Ä≤ ‚üß H ‚ñπ E / B-intr W [WFG]
             ‚Üí Œì ‚ä¢ F ‚â° H
             √ó Œì ‚àô F ‚ä¢ G ‚â° E
             √ó W PE.‚â° W‚Ä≤
injectivity‚Ä≤
  W W‚Ä≤ (noemb (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext _))
  (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) =
  case B-PE-injectivity W W (whnfRed* (red D) ‚ü¶ W ‚üß‚Çô) of Œª {
    (PE.refl , PE.refl , _) ‚Üí
  case B-PE-injectivity W‚Ä≤ W (whnfRed* D‚Ä≤ ‚ü¶ W‚Ä≤ ‚üß‚Çô) of Œª {
    (PE.refl , PE.refl , PE.refl) ‚Üí
  let ‚ä¢Œì = wf ‚ä¢F
      [F]‚ÇÅ = [F] id ‚ä¢Œì
      [F]‚Ä≤ = irrelevance‚Ä≤ (wk-id _) [F]‚ÇÅ
      [x‚à∑F] = neuTerm ([F] (step id) (‚ä¢Œì ‚àô ‚ä¢F)) (var x0) (var‚ÇÄ ‚ä¢F)
                (refl (var‚ÇÄ ‚ä¢F))
      [G]‚ÇÅ = [G] (step id) (‚ä¢Œì ‚àô ‚ä¢F) [x‚à∑F]
      [G]‚Ä≤ = PE.subst (_ ‚àô _ ‚ä©‚ü® _ ‚ü©_) (wkSingleSubstId _) [G]‚ÇÅ
      [F‚â°H]‚ÇÅ = [F‚â°F‚Ä≤] id ‚ä¢Œì
      [F‚â°H]‚Ä≤ = irrelevanceEq‚Ä≥ (wk-id _) (wk-id _) [F]‚ÇÅ [F]‚Ä≤ [F‚â°H]‚ÇÅ
      [G‚â°E]‚ÇÅ = [G‚â°G‚Ä≤] (step id) (‚ä¢Œì ‚àô ‚ä¢F) [x‚à∑F]
      [G‚â°E]‚Ä≤ = irrelevanceEq‚Ä≥
                 (wkSingleSubstId _) (wkSingleSubstId _)
                 [G]‚ÇÅ [G]‚Ä≤ [G‚â°E]‚ÇÅ
  in escapeEq [F]‚Ä≤ [F‚â°H]‚Ä≤ , escapeEq [G]‚Ä≤ [G‚â°E]‚Ä≤ , PE.refl }}
injectivity‚Ä≤ W W‚Ä≤ (emb 0<1 x) [WFG‚â°WHE] = injectivity‚Ä≤ W W‚Ä≤ x [WFG‚â°WHE]

-- Injectivity of W
B-injectivity :
  ‚àÄ {F G H E} W W‚Ä≤ ‚Üí
  Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚â° ‚ü¶ W‚Ä≤ ‚üß H ‚ñπ E ‚Üí Œì ‚ä¢ F ‚â° H √ó Œì ‚àô F ‚ä¢ G ‚â° E √ó W PE.‚â° W‚Ä≤
B-injectivity W W‚Ä≤ ‚ä¢WFG‚â°WHE =
  let [WFG] , _ , [WFG‚â°WHE] = reducibleEq ‚ä¢WFG‚â°WHE
  in  injectivity‚Ä≤ W W‚Ä≤ (B-elim W [WFG])
                   (irrelevanceEq [WFG] (B-intr W (B-elim W [WFG])) [WFG‚â°WHE])

injectivity : ‚àÄ {F G H E} ‚Üí Œì ‚ä¢ Œ† p , q ‚ñ∑ F ‚ñπ G ‚â° Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ H ‚ñπ E
            ‚Üí Œì ‚ä¢ F ‚â° H √ó Œì ‚àô F ‚ä¢ G ‚â° E √ó p PE.‚â° p‚Ä≤ √ó q PE.‚â° q‚Ä≤
injectivity x with B-injectivity BŒ†! BŒ†! x
... | F‚â°H , G‚â°E , PE.refl = F‚â°H , G‚â°E , PE.refl , PE.refl

Œ£-injectivity :
  ‚àÄ {m m‚Ä≤ F G H E} ‚Üí
  Œì ‚ä¢ Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G ‚â° Œ£‚ü® m‚Ä≤ ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ H ‚ñπ E ‚Üí
  Œì ‚ä¢ F ‚â° H √ó Œì ‚àô F ‚ä¢ G ‚â° E √ó p PE.‚â° p‚Ä≤ √ó q PE.‚â° q‚Ä≤ √ó m PE.‚â° m‚Ä≤
Œ£-injectivity x with B-injectivity BŒ£! BŒ£! x
... | F‚â°H , G‚â°E , PE.refl =
  F‚â°H , G‚â°E , PE.refl , PE.refl , PE.refl

Œ†Œ£-injectivity :
  Œì ‚ä¢ Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ F ‚ñπ G ‚â° Œ†Œ£‚ü® b‚Ä≤ ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ F‚Ä≤ ‚ñπ G‚Ä≤ ‚Üí
  Œì ‚ä¢ F ‚â° F‚Ä≤ √ó Œì ‚àô F ‚ä¢ G ‚â° G‚Ä≤ √ó p PE.‚â° p‚Ä≤ √ó q PE.‚â° q‚Ä≤ √ó b PE.‚â° b‚Ä≤
Œ†Œ£-injectivity {b = BMŒ†} {b‚Ä≤ = BMŒ†} Œ†‚â°Œ† =
  case injectivity Œ†‚â°Œ† of Œª {
    (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤) ‚Üí
  F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤ , PE.refl }
Œ†Œ£-injectivity {b = BMŒ£ _} {b‚Ä≤ = BMŒ£ _} Œ£‚â°Œ£ =
  case Œ£-injectivity Œ£‚â°Œ£ of Œª {
    (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤ , PE.refl) ‚Üí
  F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤ , PE.refl }
Œ†Œ£-injectivity {b = BMŒ†} {b‚Ä≤ = BMŒ£ _} Œ†‚â°Œ£ =
  case B-injectivity (BŒ† _ _) (BŒ£ _ _ _) Œ†‚â°Œ£ of Œª {
    (_ , _ , ()) }
Œ†Œ£-injectivity {b = BMŒ£ _} {b‚Ä≤ = BMŒ†} Œ£‚â°Œ† =
  case B-injectivity (BŒ£ _ _ _) (BŒ† _ _) Œ£‚â°Œ† of Œª {
    (_ , _ , ()) }

opaque

  -- Injectivity of Id.

  Id-injectivity :
    Œì ‚ä¢ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ ‚Üí
    (Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ) √ó Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ
  Id-injectivity Id‚â°Id =
    case reducibleEq Id‚â°Id of Œª {
      (‚ä©Id , _ , ‚ä©Id‚â°Id) ‚Üí
    helper (Id-elim ‚ä©Id)
      (irrelevanceEq ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©Id‚â°Id) }
    where
    helper :
      ‚àÄ ‚ä©Id ‚Üí
      Œì ‚ä©‚ü® l ‚ü© Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Id A‚ÇÇ t‚ÇÇ u‚ÇÇ / Id-intr ‚ä©Id ‚Üí
      (Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ) √ó Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ √ó Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ
    helper (emb 0<1 ‚ä©Id) ‚ä©Id‚â°Id = helper ‚ä©Id ‚ä©Id‚â°Id
    helper (noemb ‚ä©Id)   ‚ä©Id‚â°Id =
      case whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©Id)) Id‚Çô of Œª {
        PE.refl ‚Üí
      case whnfRed* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ ‚ä©Id‚â°Id)) Id‚Çô of Œª {
        PE.refl ‚Üí
        escapeEq (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©Id) (_‚ä©‚ÇóId_‚â°_/_.Ty‚â°Ty‚Ä≤ ‚ä©Id‚â°Id)
      , escapeTermEq (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©Id) (_‚ä©‚ÇóId_‚â°_/_.lhs‚â°lhs‚Ä≤ ‚ä©Id‚â°Id)
      , escapeTermEq (_‚ä©‚ÇóId_.‚ä©Ty ‚ä©Id) (_‚ä©‚ÇóId_‚â°_/_.rhs‚â°rhs‚Ä≤ ‚ä©Id‚â°Id) }}

-- Injectivity of suc

suc-injectivity‚Ä≤ : ‚àÄ {l t u A}
                 ‚Üí ([‚Ñï] : Œì ‚ä©‚ü® l ‚ü©‚Ñï A)
                 ‚Üí Œì ‚ä©‚ü® l ‚ü© suc t ‚â° suc u ‚à∑ A / ‚Ñï-intr [‚Ñï]
                 ‚Üí Œì ‚ä©‚ü® l ‚ü© t ‚â° u ‚à∑ A / ‚Ñï-intr [‚Ñï]
suc-injectivity‚Ä≤ (noemb [ ‚ä¢A , ‚ä¢B , D ]) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ prop)
  with whnfRed*Term (red‚Çú d) suc‚Çô | whnfRed*Term (red‚Çú d‚Ä≤) suc‚Çô
suc-injectivity‚Ä≤ (noemb [ ‚ä¢A , ‚ä¢B , D ]) (‚Ñï‚Çú‚Çå _ _ d d‚Ä≤ k‚â°k‚Ä≤ (suc·µ£ x)) | PE.refl | PE.refl = x
suc-injectivity‚Ä≤ (emb 0<1 [‚Ñï]) x = suc-injectivity‚Ä≤ [‚Ñï] x

suc-injectivity : ‚àÄ {t u}
                ‚Üí Œì ‚ä¢ suc t ‚â° suc u ‚à∑ ‚Ñï
                ‚Üí Œì ‚ä¢ t ‚â° u ‚à∑ ‚Ñï
suc-injectivity ‚ä¢suct‚â°sucu =
  let [‚Ñï] , [suct‚â°sucu] = reducibleEqTerm ‚ä¢suct‚â°sucu
      [‚Ñï]‚Ä≤ = ‚Ñï-intr (‚Ñï-elim [‚Ñï])
      [suct‚â°sucu]‚Ä≤ = irrelevanceEqTerm [‚Ñï] [‚Ñï]‚Ä≤ [suct‚â°sucu]
      [t‚â°u] = suc-injectivity‚Ä≤ (‚Ñï-elim [‚Ñï]) [suct‚â°sucu]‚Ä≤
  in  escapeTermEq [‚Ñï]‚Ä≤ [t‚â°u]

-- Injectivity of Unit

Unit-injectivity‚Ä≤ : ‚àÄ {l}
                  ‚Üí ([Unit] : Œì ‚ä©‚ü® l ‚ü©Unit‚ü® s ‚ü© Unit s)
                  ‚Üí Œì ‚ä©‚ü® l ‚ü© Unit s ‚â° Unit s‚Ä≤ / Unit-intr [Unit]
                  ‚Üí s PE.‚â° s‚Ä≤
Unit-injectivity‚Ä≤ (noemb (Unit‚Çú ‚áí*-Unit ok)) D
  with whnfRed* D Unit‚Çô
... | PE.refl = PE.refl
Unit-injectivity‚Ä≤ (emb 0<1 [Unit]) [Unit‚â°Unit] =
  Unit-injectivity‚Ä≤ [Unit] [Unit‚â°Unit]

Unit-injectivity : Œì ‚ä¢ Unit s ‚â° Unit s‚Ä≤
                 ‚Üí s PE.‚â° s‚Ä≤
Unit-injectivity x =
  let [Unit] , _ , [Unit‚â°Unit] = reducibleEq x
      [Unit]‚Ä≤ = Unit-intr (Unit-elim [Unit])
      [Unit‚â°Unit]‚Ä≤ = irrelevanceEq [Unit] [Unit]‚Ä≤ [Unit‚â°Unit]
  in  Unit-injectivity‚Ä≤ (Unit-elim [Unit]) [Unit‚â°Unit]‚Ä≤
