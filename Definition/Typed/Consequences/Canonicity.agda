------------------------------------------------------------------------
-- Canonicity theorems for natural numbers and the empty type
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Canonicity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.Untyped.Properties M

open import Definition.Typed R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.Properties R
open import Definition.Typed.RedSteps R
open import Definition.Typed.EqRelInstance R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Fundamental.Reducibility R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat
open import Tools.Product as Œ£

private
  variable
    n       : Nat
    A t u v : Term _
    l       : TypeLevel

-- Turns a natural number into its term representation
suc·µè : Nat ‚Üí Term n
suc·µè 0 = zero
suc·µè (1+ n) = suc (suc·µè n)

-- Helper function for canonicity for reducible natural properties
canonicity‚Ä≥ : ‚àÄ {t}
              ‚Üí Natural-prop Œµ t
              ‚Üí ‚àÉ Œª k ‚Üí Œµ ‚ä¢ t ‚â° suc·µè k ‚à∑ ‚Ñï
canonicity‚Ä≥ (suc·µ£ (‚Ñï‚Çú n‚ÇÅ d n‚â°n prop)) =
  let a , b = canonicity‚Ä≥ prop
  in  1+ a , suc-cong (trans (subset*Term (red‚Çú d)) b)
canonicity‚Ä≥ zero·µ£ = 0 , refl (zero‚±º Œµ)
canonicity‚Ä≥ (ne (neNf‚Çú neK _ _)) = ‚ä•-elim (noClosedNe neK)

-- Helper function for canonicity for specific reducible natural numbers
canonicity‚Ä≤ : ‚àÄ {t l}
             ‚Üí ([‚Ñï] : Œµ ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï)
             ‚Üí Œµ ‚ä©‚ü® l ‚ü© t ‚à∑ ‚Ñï / ‚Ñï-intr [‚Ñï]
             ‚Üí ‚àÉ Œª k ‚Üí Œµ ‚ä¢ t ‚â° suc·µè k ‚à∑ ‚Ñï
canonicity‚Ä≤ (noemb [‚Ñï]) (‚Ñï‚Çú n d n‚â°n prop) =
  let a , b = canonicity‚Ä≥ prop
  in  a , trans (subset*Term (red‚Çú d)) b
canonicity‚Ä≤ (emb 0<1 [‚Ñï]) [t] = canonicity‚Ä≤ [‚Ñï] [t]

-- Canonicity of natural numbers
canonicity : ‚àÄ {t} ‚Üí Œµ ‚ä¢ t ‚à∑ ‚Ñï ‚Üí ‚àÉ Œª k ‚Üí Œµ ‚ä¢ t ‚â° suc·µè k ‚à∑ ‚Ñï
canonicity ‚ä¢t with reducibleTerm ‚ä¢t
canonicity ‚ä¢t | [‚Ñï] , [t] =
  canonicity‚Ä≤ (‚Ñï-elim [‚Ñï]) (irrelevanceTerm [‚Ñï] (‚Ñï-intr (‚Ñï-elim [‚Ñï])) [t])

-- Canonicity for Empty

¬¨Empty‚Ä≤ : ‚àÄ {n} ‚Üí Œµ ‚ä©Empty n ‚à∑Empty ‚Üí ‚ä•
¬¨Empty‚Ä≤ (Empty‚Çú _ _ _ (ne (neNf‚Çú neN _ _))) =
  noClosedNe neN

¬¨Empty : ‚àÄ {n} ‚Üí Œµ ‚ä¢ n ‚à∑ Empty ‚Üí ‚ä•
¬¨Empty {n} ‚ä¢n =
  let [Empty] , [n] = reducibleTerm ‚ä¢n
      [Empty]‚Ä≤ = Empty·µ£ {l = ¬π} ([ Empty‚±º Œµ , Empty‚±º Œµ , id (Empty‚±º Œµ) ])
      [n]‚Ä≤ = irrelevanceTerm [Empty] [Empty]‚Ä≤ [n]

  in ¬¨Empty‚Ä≤ [n]‚Ä≤

opaque

  -- Every closed equality proof reduces to rfl.

  Œµ‚ä¢‚áí*rfl‚à∑Id : Œµ ‚ä¢ v ‚à∑ Id A t u ‚Üí Œµ ‚ä¢ v ‚áí* rfl ‚à∑ Id A t u
  Œµ‚ä¢‚áí*rfl‚à∑Id ‚ä¢v =
    case reducibleTerm ‚ä¢v of Œª {
      (‚ä©Id , ‚ä©v) ‚Üí
    helper (Id-elim ‚ä©Id)
      (irrelevanceTerm ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©v) }
    where
    helper :
      (‚ä©Id : Œµ ‚ä©‚ü® l ‚ü©Id Id A t u) ‚Üí
      Œµ ‚ä©‚ü® l ‚ü© v ‚à∑ Id A t u / Id-intr ‚ä©Id ‚Üí
      Œµ ‚ä¢ v ‚áí* rfl ‚à∑ Id A t u
    helper (emb 0<1 ‚ä©Id) ‚ä©v                 = helper ‚ä©Id ‚ä©v
    helper (noemb ‚ä©Id)   ‚ä©v@(_ , v‚áí*v‚Ä≤ , _) =
      case ‚ä©Id‚à∑-view-inhabited ‚ä©v of Œª where
        (ne v‚Ä≤-n _) ‚Üí ‚ä•-elim (noClosedNe v‚Ä≤-n)
        (rfl·µ£ ‚ä©t‚â°u) ‚Üí
          conv* (red‚Çú v‚áí*v‚Ä≤)
            (sym (subset* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©Id))))

opaque

  -- If Id¬†A¬†t¬†u is inhabited in the empty context, then t is
  -- definitionally equal to u at type¬†A.

  Œµ‚ä¢‚à∑Id‚ÜíŒµ‚ä¢‚â°‚à∑ : Œµ ‚ä¢ v ‚à∑ Id A t u ‚Üí Œµ ‚ä¢ t ‚â° u ‚à∑ A
  Œµ‚ä¢‚à∑Id‚ÜíŒµ‚ä¢‚â°‚à∑ {v} {A} {t} {u} =
    Œµ ‚ä¢ v ‚à∑ Id A t u         ‚Üí‚ü® Œµ‚ä¢‚áí*rfl‚à∑Id ‚ü©
    Œµ ‚ä¢ v ‚áí* rfl ‚à∑ Id A t u  ‚Üí‚ü® proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí syntacticEqTerm ‚àò‚Üí subset*Term ‚ü©
    Œµ ‚ä¢ rfl ‚à∑ Id A t u       ‚Üí‚ü® inversion-rfl-Id ‚ü©
    Œµ ‚ä¢ t ‚â° u ‚à∑ A            ‚ñ°
