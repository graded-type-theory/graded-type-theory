------------------------------------------------------------------------
-- An inversion lemma for Lift
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Admissible.Lift
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Typed R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R

open import Definition.Untyped M
open import Definition.Untyped.Lift ùïÑ
open import Definition.Untyped.Properties M

open import Tools.Function
open import Tools.Product
import Tools.PropositionalEquality as PE

private variable
  Œì     : Con Term _
  A     : Term _
  s     : Strength
  l‚ÇÅ l‚ÇÇ : Universe-level

opaque
  unfolding Lift

  -- An inversion lemma for Lift.

  inversion-Lift-U :
    Œì ‚ä¢ Lift s l‚ÇÅ A ‚à∑ U l‚ÇÇ ‚Üí
    Lift-allowed s √ó l‚ÇÅ ‚â§·µò l‚ÇÇ √ó ‚àÉ Œª l ‚Üí Œì ‚ä¢ A ‚à∑ U l √ó l ‚â§·µò l‚ÇÇ
  inversion-Lift-U {l‚ÇÅ} ‚ä¢Lift =
    let l , l‚Ä≤ , ‚ä¢A , ‚ä¢Unit , U‚â°U‚ÇÅ , ok‚ÇÅ = inversion-Œ†Œ£-U ‚ä¢Lift
        U‚â°U‚ÇÇ , ok‚ÇÇ                       = inversion-Unit-U ‚ä¢Unit
        l‚äîl‚Ä≤‚â°l‚ÇÇ                          = PE.sym $ U-injectivity U‚â°U‚ÇÅ
        l‚Ä≤‚â°l‚ÇÅ                            = U-injectivity U‚â°U‚ÇÇ
    in
      (ok‚ÇÅ , ok‚ÇÇ)
    , PE.subst‚ÇÇ _‚â§·µò_ l‚Ä≤‚â°l‚ÇÅ l‚äîl‚Ä≤‚â°l‚ÇÇ ‚â§·µò‚äî·µòÀ°
    , l
    , ‚ä¢A
    , PE.subst (l ‚â§·µò_) l‚äîl‚Ä≤‚â°l‚ÇÇ ‚â§·µò‚äî·µò ≥
