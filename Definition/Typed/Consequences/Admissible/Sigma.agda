------------------------------------------------------------------------
-- Admissible rules related to Œ£-types
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Admissible.Sigma
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Consequences.Inequality R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.EqRelInstance R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Substitution R
open import Definition.Typed.Syntactic R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Sigma ùïÑ

open import Tools.Fin
open import Tools.Function
open import Tools.Product
open import Tools.Relation

private variable
  Œì             : Cons _ _
  A B C t u v w : Term _
  p q q‚Ä≤ r      : M
  s             : Strength

------------------------------------------------------------------------
-- Some admissible rules

opaque

  -- A variant of the reduction rule prodrec-Œ≤.

  prodrec-Œ≤-‚áí‚ÇÅ :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ¬ª‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚ä¢ prod ∑ p t u ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä¢ v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C (prod ∑ p t u) v ‚áí v [ t , u ]‚ÇÅ‚ÇÄ ‚à∑
      C [ prod ∑ p t u ]‚ÇÄ
  prodrec-Œ≤-‚áí‚ÇÅ ‚ä¢C ‚ä¢p ‚ä¢v =
    case inversion-prod ‚ä¢p of Œª
      (F , G , q , _ , _ , ‚ä¢t , ‚ä¢u , Œ£‚â°Œ£‚Ä≤ , _) ‚Üí
    case Œ†Œ£-injectivity Œ£‚â°Œ£‚Ä≤ of Œª
      (A‚â°F , B‚â°G , _) ‚Üí
    case conv ‚ä¢t (sym A‚â°F) of Œª
      ‚ä¢t‚Ä≤ ‚Üí
    prodrec-Œ≤-‚áí ‚ä¢C ‚ä¢t‚Ä≤ (conv ‚ä¢u (sym (B‚â°G (refl ‚ä¢t‚Ä≤)))) ‚ä¢v

opaque

  -- A variant of the equality rule prodrec-Œ≤.

  prodrec-Œ≤-‚â°‚ÇÅ :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ¬ª‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚ä¢ prod ∑ p t u ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ¬ª‚àô A ¬ª‚àô B ‚ä¢ v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C (prod ∑ p t u) v ‚â° v [ t , u ]‚ÇÅ‚ÇÄ ‚à∑
      C [ prod ∑ p t u ]‚ÇÄ
  prodrec-Œ≤-‚â°‚ÇÅ ‚ä¢C ‚ä¢p ‚ä¢v =
    subsetTerm (prodrec-Œ≤-‚áí‚ÇÅ ‚ä¢C ‚ä¢p ‚ä¢v)

-- An "inverse" of prod-cong for Œ£À¢.

prod-cong‚Åª¬π-Œ£À¢ :
  ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
  Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ¬ª‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£À¢-allowed p q
prod-cong‚Åª¬π-Œ£À¢ {Œì} {p} {t} {u} {v} {w} {q} {A} {B} prod‚â°prod =
  ‚ä¢B , t‚â°v , u‚â°w , ok
  where
  ‚ä¢Œ£AB = syntacticEqTerm prod‚â°prod .proj‚ÇÅ
  ‚ä¢B   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÅ
  ok   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢t,u = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢t   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÅ
  ‚ä¢u   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢v,w = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢v   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÅ
  ‚ä¢w   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÇ .proj‚ÇÅ

  fst-t,u‚â°t = Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok

  t‚â°v =                                                $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B   ‚Üí‚ü® fst-cong‚Ä≤ ‚ü©
    Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚â° fst p (prodÀ¢ p v w) ‚à∑ A  ‚Üí‚ü® (Œª hyp ‚Üí trans (sym‚Ä≤ fst-t,u‚â°t) (trans hyp (Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok))) ‚ü©
    Œì ‚ä¢ t ‚â° v ‚à∑ A                                      ‚ñ°

  u‚â°w =                                               $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B  ‚Üí‚ü® snd-cong‚Ä≤ ‚ü©

    Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚â° snd p (prodÀ¢ p v w) ‚à∑
      B [ fst p (prodÀ¢ p t u) ]‚ÇÄ                      ‚Üí‚ü® (Œª hyp ‚Üí trans
                                                            (sym‚Ä≤ (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok))
                                                            (trans hyp
                                                               (conv (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok)
                                                                  (substTypeEq (refl ‚ä¢B)
                                                                     (fst-cong‚Ä≤ (sym‚Ä≤ prod‚â°prod)))))) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ            ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.conv (substTypeEq (refl ‚ä¢B) fst-t,u‚â°t) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ                              ‚ñ°

-- An "inverse" of prod-cong for Œ£ ∑.

prod-cong‚Åª¬π-Œ£ ∑ :
  ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
  Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ¬ª‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£ ∑-allowed p q
prod-cong‚Åª¬π-Œ£ ∑ {Œì} {p} {t} {u} {v} {w} {q} {A} {B} prod‚â°prod =
  ‚ä¢B , t‚â°v , u‚â°w , ok
  where
  ‚ä¢Œ£AB = syntacticEqTerm prod‚â°prod .proj‚ÇÅ
  ‚ä¢A   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÅ
  ‚ä¢B   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÅ
  ok   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢t,u = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢t   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÅ
  ‚ä¢u   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢v,w = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢v   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÅ
  ‚ä¢w   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÇ .proj‚ÇÅ

  fst-t,u‚â°t = fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok

  t‚â°v =                                                      $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B         ‚Üí‚ü® fst ∑-cong (refl ‚ä¢A) ‚ü©
    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚â° fst ∑ p A (prod ∑ p v w) ‚à∑ A  ‚Üí‚ü® (Œª hyp ‚Üí trans (sym‚Ä≤ fst-t,u‚â°t)
                                                                   (trans hyp (fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok))) ‚ü©
    Œì ‚ä¢ t ‚â° v ‚à∑ A                                            ‚ñ°

  u‚â°w =                                                            $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B               ‚Üí‚ü® snd ∑-cong (refl ‚ä¢A) (refl ‚ä¢B) ‚ü©

    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚â° snd ∑ p q A B (prod ∑ p v w) ‚à∑
      B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ                                ‚Üí‚ü® (Œª hyp ‚Üí trans
                                                                         (sym‚Ä≤ (snd ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok))
                                                                         (trans hyp
                                                                            (conv (snd ∑-Œ≤-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok)
                                                                               (substTypeEq (refl ‚ä¢B)
                                                                                  (fst ∑-cong (refl ‚ä¢A) (sym‚Ä≤ prod‚â°prod)))))) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ                      ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.conv (substTypeEq (refl ‚ä¢B) fst-t,u‚â°t) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ                                           ‚ñ°

-- An "inverse" of prod-cong.

prod-cong‚Åª¬π :
  ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
  Œì ‚ä¢ prod s p t u ‚â° prod s p v w ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ¬ª‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£-allowed s p q
prod-cong‚Åª¬π {s = ùï§} = prod-cong‚Åª¬π-Œ£À¢
prod-cong‚Åª¬π {s = ùï®} = prod-cong‚Åª¬π-Œ£ ∑

------------------------------------------------------------------------
-- Negative results related to Œ∑-rules for Œ£ ∑

-- If Œ£ ∑-allowed¬†p¬†q holds for some p and¬†q, and equality reflection
-- is not allowed, then a certain definitional Œ∑-rule for Œ£ ∑, fst ∑ and
-- snd ∑ does not hold in general.
--
-- See also
-- Definition.Typed.Properties.Admissible.Sigma.‚ä¢Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑.

¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ :
  ‚¶É not-ok : No-equality-reflection ‚¶Ñ ‚Üí
  Œ£ ∑-allowed p q ‚Üí
  ¬¨ (‚àÄ {m n} {Œì : Cons m n} {t A B} ‚Üí
     Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
     Œì ‚ä¢ prod ∑ p (fst ∑ p A t) (snd ∑ p q A B t) ‚â° t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ {p = p} {q = q} Œ£-ok hyp = ¬¨fst,snd‚â° fst,snd‚â°
  where
  A‚Ä≤ = ‚Ñï
  B‚Ä≤ = ‚Ñï

  Œì‚Ä≤ = Œµ ‚àô Œ£ ∑ p , q ‚ñ∑ ‚Ñï ‚ñπ ‚Ñï

  t‚Ä≤ : Term 1
  t‚Ä≤ = var x0

  ‚ä¢Œì : Œµ ¬ª‚ä¢ Œì‚Ä≤
  ‚ä¢Œì = ‚àô Œ†Œ£‚±º (‚Ñï‚±º (‚àô ‚Ñï‚±º ŒµŒµ)) Œ£-ok

  ‚ä¢B : Œµ ¬ª Œì‚Ä≤ ‚àô A‚Ä≤ ‚ä¢ B‚Ä≤
  ‚ä¢B = ‚Ñï‚±º (‚àô ‚Ñï‚±º ‚ä¢Œì)

  ‚ä¢t : Œµ ¬ª Œì‚Ä≤ ‚ä¢ t‚Ä≤ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
  ‚ä¢t = var ‚ä¢Œì here

  fst,snd‚â° :
    Œµ ¬ª Œì‚Ä≤ ‚ä¢ prod ∑ p (fst ∑ p A‚Ä≤ t‚Ä≤) (snd ∑ p q A‚Ä≤ B‚Ä≤ t‚Ä≤) ‚â° t‚Ä≤ ‚à∑
      Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
  fst,snd‚â° = hyp ‚ä¢t

  ¬¨fst,snd‚â° :
    ¬¨ Œµ ¬ª Œì‚Ä≤ ‚ä¢ prod ∑ p (fst ∑ p A‚Ä≤ t‚Ä≤) (snd ∑ p q A‚Ä≤ B‚Ä≤ t‚Ä≤) ‚â° t‚Ä≤ ‚à∑
        Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
  ¬¨fst,snd‚â° = prod ∑‚â¢ne ‚¶É ok = included ‚¶Ñ _ (var‚Å∫ _)

-- If Œ£ ∑-allowed¬†p¬†q holds for some p and¬†q, and equality reflection
-- is not allowed, then a certain definitional Œ∑-rule for Œ£ ∑, fst ∑ and
-- snd ∑ does not hold in general.

¬¨-Œ£ ∑-Œ∑ :
  ‚¶É not-ok : No-equality-reflection ‚¶Ñ ‚Üí
  Œ£ ∑-allowed p q ‚Üí
  ¬¨ (‚àÄ {m n} {Œì : Cons m n} {t A B u} ‚Üí
     Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
     Œì ‚ä¢ u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
     Œì ‚ä¢ fst ∑ p A t ‚â° fst ∑ p A u ‚à∑ A ‚Üí
     Œì ‚ä¢ snd ∑ p q A B t ‚â° snd ∑ p q A B u ‚à∑ B [ fst ∑ p A t ]‚ÇÄ ‚Üí
     Œì ‚ä¢ t ‚â° u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
¬¨-Œ£ ∑-Œ∑ Œ£-ok hyp =
  ¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ Œ£-ok Œª ‚ä¢t ‚Üí
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (_ , ‚ä¢B , ok) ‚Üí
    hyp (prod‚±º ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok) ‚ä¢t
      (fst ∑-Œ≤-‚â° ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok)
      (snd ∑-Œ≤-‚â° ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok) }
