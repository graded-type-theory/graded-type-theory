------------------------------------------------------------------------
-- Inversion lemmata for the typing relation.
------------------------------------------------------------------------

-- See also Definition.Typed.Inversion.

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Inversion
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Whnf M type-variant
open import Definition.Typed R
open import Definition.Typed.EqRelInstance R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution R

open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inequality R as I

open import Tools.Empty using (‚ä•; ‚ä•-elim)
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    m n : Nat
    Œì : Cons m n
    p p‚Ä≤ q : M
    s s‚Ä≤ s‚ÇÅ s‚ÇÇ : Strength
    l‚ÇÅ l‚ÇÇ : Universe-level
    A B t u : Term _

opaque

  -- A variant of inversion-lam.

  inversion-lam-Œ†‚Ä≤ :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ lam p‚Ä≤ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    p PE.‚â° p‚Ä≤ √ó Œ†-allowed p q √ó
    (‚¶É not-ok : No-equality-reflection ‚¶Ñ ‚Üí Œì ¬ª‚àô A ‚ä¢ t ‚à∑ B) √ó
    ‚àÉ Œª B‚Ä≤ ‚Üí
      Œì ¬ª‚àô A ‚ä¢ t ‚à∑ B‚Ä≤ √ó
      (‚àÄ {u v} ‚Üí Œì ‚ä¢ u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ B‚Ä≤ [ u ]‚ÇÄ ‚â° B [ v ]‚ÇÄ)
  inversion-lam-Œ†‚Ä≤ ‚ä¢lam =
    case inversion-lam ‚ä¢lam of Œª
      (_ , _ , _ , _ , ‚ä¢t , Œ†‚â°Œ† , ok) ‚Üí
    case Œ†Œ£-injectivity‚Ä≤ Œ†‚â°Œ† of Œª {
      (A‚â°A‚Ä≤ , B‚â°B‚Ä≤ , B[]‚â°B‚Ä≤[] , PE.refl , PE.refl , _) ‚Üí
    let ‚ä¢t = stabilityTerm (refl-‚àô (sym A‚â°A‚Ä≤)) ‚ä¢t in
    PE.refl , ok ,
    (Œª ‚¶É _ ‚¶Ñ ‚Üí conv ‚ä¢t (sym B‚â°B‚Ä≤)) ,
    _ , ‚ä¢t , (Œª {_ _} u‚â°v ‚Üí sym (B[]‚â°B‚Ä≤[] (sym‚Ä≤ u‚â°v))) }

opaque

  -- A variant of inversion-lam.

  inversion-lam-Œ† :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ lam p‚Ä≤ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    ‚àÉ Œª B‚Ä≤ ‚Üí
      Œì ¬ª‚àô A ‚ä¢ t ‚à∑ B‚Ä≤ √ó
      (‚àÄ {u v} ‚Üí Œì ‚ä¢ u ‚â° v ‚à∑ A ‚Üí Œì ‚ä¢ B‚Ä≤ [ u ]‚ÇÄ ‚â° B [ v ]‚ÇÄ) √ó
      p PE.‚â° p‚Ä≤ √ó Œ†-allowed p q
  inversion-lam-Œ† ‚ä¢lam =
    let p‚â°p‚Ä≤ , ok , _ , _ , ‚ä¢t , B[]‚â°B‚Ä≤[] = inversion-lam-Œ†‚Ä≤ ‚ä¢lam in
    _ , ‚ä¢t , B[]‚â°B‚Ä≤[] , p‚â°p‚Ä≤ , ok

opaque

  -- A variant of inversion-lam.

  inversion-lam-Œ†-no-equality-reflection :
    ‚¶É ok : No-equality-reflection ‚¶Ñ ‚Üí
    Œì ‚ä¢ lam p‚Ä≤ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ¬ª‚àô A ‚ä¢ t ‚à∑ B √ó p PE.‚â° p‚Ä≤ √ó Œ†-allowed p q
  inversion-lam-Œ†-no-equality-reflection ‚ä¢lam =
    let p‚â°p‚Ä≤ , ok , ‚ä¢t , _ = inversion-lam-Œ†‚Ä≤ ‚¶É ok = included ‚¶Ñ ‚ä¢lam in
    ‚ä¢t , p‚â°p‚Ä≤ , ok

opaque

  -- A variant of inversion-prod.

  inversion-prod-Œ£ :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ prod s‚Ä≤ p‚Ä≤ t u ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A √ó Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ √ó
    s PE.‚â° s‚Ä≤ √ó p PE.‚â° p‚Ä≤ √ó Œ£-allowed s p q
  inversion-prod-Œ£ ‚ä¢prod =
    case inversion-prod ‚ä¢prod of Œª {
      (_ , _ , _ , _ , _ , ‚ä¢t , ‚ä¢u , Œ£‚â°Œ£ , ok) ‚Üí
    case Œ†Œ£-injectivity Œ£‚â°Œ£ of Œª {
      (A‚â°A‚Ä≤ , B[]‚â°B‚Ä≤[] , PE.refl , PE.refl , PE.refl) ‚Üí
    case conv ‚ä¢t (sym A‚â°A‚Ä≤) of Œª {
      ‚ä¢t ‚Üí
      ‚ä¢t
    , conv ‚ä¢u (sym (B[]‚â°B‚Ä≤[] (refl ‚ä¢t)))
    , PE.refl
    , PE.refl
    , ok }}}

opaque

  -- A variant of inversion-star.

  inversion-star-Unit :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ star s‚ÇÅ l‚ÇÅ ‚à∑ Unit s‚ÇÇ l‚ÇÇ ‚Üí
    s‚ÇÅ PE.‚â° s‚ÇÇ √ó l‚ÇÅ PE.‚â° l‚ÇÇ √ó Unit-allowed s‚ÇÅ
  inversion-star-Unit ‚ä¢star =
    let Unit‚â°Unit , Unit-ok = inversion-star ‚ä¢star
        eq‚ÇÅ , eq‚ÇÇ           = Unit-injectivity (sym Unit‚â°Unit)
    in
    eq‚ÇÅ , eq‚ÇÇ , Unit-ok

opaque

  -- A variant of inversion-rfl.

  inversion-rfl-Id :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ t ‚â° u ‚à∑ A
  inversion-rfl-Id ‚ä¢rfl =
    case inversion-rfl ‚ä¢rfl of Œª {
      (_ , _ , _ , _ , Id‚â°Id) ‚Üí
    case Id-injectivity Id‚â°Id of Œª {
      (_ , t‚â°v , u‚â°v) ‚Üí
    trans t‚â°v (sym‚Ä≤ u‚â°v) }}

opaque

  -- Inversion of products in WHNF.

  whnfProduct :
    ‚¶É ok : No-equality-reflection or-empty (Œì .vars) ‚¶Ñ ‚Üí
    Œì ‚ä¢ t ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí Whnf (Œì .defs) t ‚Üí
    Product‚Å∫ (Œì .defs) t
  whnfProduct ‚ä¢t = Œª where
    prod‚Çô ‚Üí
      prod‚Çô
    (ne t-ne) ‚Üí
      ne t-ne
    U‚Çô ‚Üí
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-U ‚ä¢t)))
    Œ†Œ£‚Çô ‚Üí
      let _ , _ , _ , _ , Œ£‚â°U , _ = inversion-Œ†Œ£-U ‚ä¢t in
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym Œ£‚â°U))
    ‚Ñï‚Çô ‚Üí
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-‚Ñï ‚ä¢t)))
    Unit‚Çô ‚Üí
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
    Empty‚Çô ‚Üí
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-Empty ‚ä¢t)))
    lam‚Çô ‚Üí
      let _ , _ , _ , _ , _ , Œ£‚â°Œ† , _ = inversion-lam ‚ä¢t in
      ‚ä•-elim (Œ†‚â¢Œ£‚±º (sym Œ£‚â°Œ†))
    zero‚Çô ‚Üí
      ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º (sym (inversion-zero ‚ä¢t)))
    suc‚Çô ‚Üí
      let _ , A‚â°‚Ñï = inversion-suc ‚ä¢t in
      ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º (sym A‚â°‚Ñï))
    star‚Çô ‚Üí
      ‚ä•-elim (Unit‚â¢Œ†Œ£‚±º (sym (inversion-star ‚ä¢t .proj‚ÇÅ)))
    Id‚Çô ‚Üí
      let _ , _ , _ , _ , eq = inversion-Id-U ‚ä¢t in
      ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym eq))
    rfl‚Çô ‚Üí
      let _ , _ , _ , _ , eq = inversion-rfl ‚ä¢t in
      ‚ä•-elim (I.Id‚â¢Œ†Œ£ (sym eq))
