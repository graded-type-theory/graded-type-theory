------------------------------------------------------------------------
-- Inversion lemmata for the typing relation.
------------------------------------------------------------------------

-- See also Definition.Typed.Inversion.

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Inversion
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution R

open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inequality R as I

open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Empty using (‚ä•; ‚ä•-elim)

private
  variable
    n : Nat
    Œì : Con Term n
    p p‚Ä≤ q : M
    s s‚Ä≤ s‚ÇÅ s‚ÇÇ : Strength
    l‚ÇÅ l‚ÇÇ : Universe-level
    A B t u : Term _

opaque

  -- A variant of inversion-lam.

  inversion-lam-Œ† :
    Œì ‚ä¢ lam p‚Ä≤ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ t ‚à∑ B √ó p PE.‚â° p‚Ä≤ √ó Œ†-allowed p q
  inversion-lam-Œ† ‚ä¢lam =
    case inversion-lam ‚ä¢lam of Œª {
      (_ , _ , _ , _ , ‚ä¢t , Œ†‚â°Œ† , ok) ‚Üí
    case Œ†Œ£-injectivity Œ†‚â°Œ† of Œª {
      (A‚â°A‚Ä≤ , B‚â°B‚Ä≤ , PE.refl , PE.refl , _) ‚Üí
      conv (stabilityTerm (refl-‚àô (sym A‚â°A‚Ä≤)) ‚ä¢t) (sym B‚â°B‚Ä≤)
    , PE.refl
    , ok }}

opaque

  -- A variant of inversion-prod.

  inversion-prod-Œ£ :
    Œì ‚ä¢ prod s‚Ä≤ p‚Ä≤ t u ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A √ó Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ √ó
    s PE.‚â° s‚Ä≤ √ó p PE.‚â° p‚Ä≤ √ó Œ£-allowed s p q
  inversion-prod-Œ£ ‚ä¢prod =
    case inversion-prod ‚ä¢prod of Œª {
      (_ , _ , _ , _ , _ , ‚ä¢t , ‚ä¢u , Œ£‚â°Œ£ , ok) ‚Üí
    case Œ†Œ£-injectivity Œ£‚â°Œ£ of Œª {
      (A‚â°A‚Ä≤ , B‚â°B‚Ä≤ , PE.refl , PE.refl , PE.refl) ‚Üí
    case conv ‚ä¢t (sym A‚â°A‚Ä≤) of Œª {
      ‚ä¢t ‚Üí
      ‚ä¢t
    , conv ‚ä¢u (sym (substTypeEq B‚â°B‚Ä≤ (refl ‚ä¢t)))
    , PE.refl
    , PE.refl
    , ok }}}

opaque

  -- A variant of inversion-star.

  inversion-star-Unit :
    Œì ‚ä¢ star s‚ÇÅ l‚ÇÅ ‚à∑ Unit s‚ÇÇ l‚ÇÇ ‚Üí
    s‚ÇÅ PE.‚â° s‚ÇÇ √ó l‚ÇÅ PE.‚â° l‚ÇÇ √ó Unit-allowed s‚ÇÅ
  inversion-star-Unit ‚ä¢star =
    let Unit‚â°Unit , ok = inversion-star ‚ä¢star
        eq‚ÇÅ , eq‚ÇÇ      = Unit-injectivity (sym Unit‚â°Unit)
    in
    eq‚ÇÅ , eq‚ÇÇ , ok

opaque

  -- A variant of inversion-rfl.

  inversion-rfl-Id : Œì ‚ä¢ rfl ‚à∑ Id A t u ‚Üí Œì ‚ä¢ t ‚â° u ‚à∑ A
  inversion-rfl-Id ‚ä¢rfl =
    case inversion-rfl ‚ä¢rfl of Œª {
      (_ , _ , _ , _ , Id‚â°Id) ‚Üí
    case Id-injectivity Id‚â°Id of Œª {
      (_ , t‚â°v , u‚â°v) ‚Üí
    trans t‚â°v (sym‚Ä≤ u‚â°v) }}

-- Inversion of products in WHNF.
whnfProduct :
  ‚àÄ {p F G m} ‚Üí
  Œì ‚ä¢ p ‚à∑ Œ£‚ü® m ‚ü© p‚Ä≤ , q ‚ñ∑ F ‚ñπ G ‚Üí Whnf p ‚Üí Product p
whnfProduct x prod‚Çô = prod‚Çô
whnfProduct x (ne pNe) = ne pNe
whnfProduct ‚ä¢‚à∑Œ£ U‚Çô = ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-U ‚ä¢‚à∑Œ£)))
whnfProduct x Œ†Œ£‚Çô =
  let _ , _ , _ , _ , Œ£‚â°U , _ = inversion-Œ†Œ£-U x
  in  ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym Œ£‚â°U))
whnfProduct x ‚Ñï‚Çô = ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-‚Ñï x)))
whnfProduct x Unit‚Çô = ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-Unit-U x .proj‚ÇÅ)))
whnfProduct x Empty‚Çô = ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-Empty x)))
whnfProduct x lam‚Çô =
  let _ , _ , _ , _ , _ , Œ£‚â°Œ† , _ = inversion-lam x
  in  ‚ä•-elim (Œ†‚â¢Œ£‚±º (sym Œ£‚â°Œ†))
whnfProduct x zero‚Çô = ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º (sym (inversion-zero x)))
whnfProduct x suc‚Çô =
  let _ , A‚â°‚Ñï = inversion-suc x
  in  ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º (sym A‚â°‚Ñï))
whnfProduct x star‚Çô = ‚ä•-elim (Unit‚â¢Œ†Œ£‚±º (sym (inversion-star x .proj‚ÇÅ)))
whnfProduct ‚ä¢‚à∑Œ£ Id‚Çô =
  ‚ä•-elim (U‚â¢Œ†Œ£‚±º (sym (inversion-Id-U ‚ä¢‚à∑Œ£ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ)))
whnfProduct ‚ä¢‚à∑Œ£ rfl‚Çô =
  ‚ä•-elim (I.Id‚â¢Œ†Œ£ (sym (inversion-rfl ‚ä¢‚à∑Œ£ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ)))
