------------------------------------------------------------------------
-- Typing rules for Lift
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.DerivedRules.Lift
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Modality ùïÑ
open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Consequences.DerivedRules.Sigma R
open import Definition.Typed.Consequences.DerivedRules.Unit R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.InverseUniv R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Term R
open import Definition.Typed.Substitution R
open import Definition.Typed.Syntactic R
import Definition.Typed.Weakening R as W

open import Definition.Untyped M hiding (lift)
open import Definition.Untyped.Lift ùïÑ
open import Definition.Untyped.Properties M
open import Definition.Untyped.Sigma ùïÑ
open import Definition.Untyped.Unit ùïÑ

open import Tools.Fin
open import Tools.Function
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

private variable
  Œì                         : Con Term _
  A B B‚ÇÅ B‚ÇÇ t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ : Term _
  s                         : Strength
  l l‚ÇÅ l‚ÇÇ                   : Universe-level
  p q r                     : M

------------------------------------------------------------------------
-- Definitions related to Lift

-- Lift¬†s¬†l¬†A is allowed if Lift-allowed¬†s holds.

Lift-allowed : Strength ‚Üí Set a
Lift-allowed s = Œ£-allowed s ùüô ùüò √ó Unit-allowed s

opaque
  unfolding Lift

  -- A typing rule for Lift.

  ‚ä¢Lift :
    Lift-allowed s ‚Üí
    Œì ‚ä¢ A ‚à∑ U l‚ÇÅ ‚Üí
    Œì ‚ä¢ Lift s l‚ÇÇ A ‚à∑ U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
  ‚ä¢Lift (ok‚ÇÅ , ok‚ÇÇ) ‚ä¢A =
    Œ†Œ£‚±º ‚ä¢A (Unit‚±º (‚àô univ ‚ä¢A) ok‚ÇÇ) ok‚ÇÅ

opaque
  unfolding Lift

  -- An inversion lemma for Lift.

  inversion-Lift-U :
    Œì ‚ä¢ Lift s l‚ÇÅ A ‚à∑ U l‚ÇÇ ‚Üí
    Lift-allowed s √ó l‚ÇÅ ‚â§·µò l‚ÇÇ √ó ‚àÉ Œª l ‚Üí Œì ‚ä¢ A ‚à∑ U l √ó l ‚â§·µò l‚ÇÇ
  inversion-Lift-U {l‚ÇÅ} ‚ä¢Lift =
    let l , l‚Ä≤ , ‚ä¢A , ‚ä¢Unit , U‚â°U‚ÇÅ , ok‚ÇÅ = inversion-Œ†Œ£-U ‚ä¢Lift
        U‚â°U‚ÇÇ , ok‚ÇÇ                       = inversion-Unit-U ‚ä¢Unit
        l‚äîl‚Ä≤‚â°l‚ÇÇ                          = PE.sym $ U-injectivity U‚â°U‚ÇÅ
        l‚Ä≤‚â°l‚ÇÅ                            = U-injectivity U‚â°U‚ÇÇ
    in
      (ok‚ÇÅ , ok‚ÇÇ)
    , PE.subst‚ÇÇ _‚â§·µò_ l‚Ä≤‚â°l‚ÇÅ l‚äîl‚Ä≤‚â°l‚ÇÇ ‚â§·µò‚äî·µòÀ°
    , l
    , ‚ä¢A
    , PE.subst (l ‚â§·µò_) l‚äîl‚Ä≤‚â°l‚ÇÇ ‚â§·µò‚äî·µò ≥

opaque

  -- An inversion lemma for Lift.

  inversion-Lift :
    Œì ‚ä¢ Lift s l A ‚Üí
    Lift-allowed s √ó Œì ‚ä¢ A
  inversion-Lift ‚ä¢Lift =
    Œ£.map id·∂† (univ ‚àò‚Üí proj‚ÇÅ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí proj‚ÇÇ) $
    inversion-Lift-U (inverseUniv ‚ä¢Lift .proj‚ÇÇ)

------------------------------------------------------------------------
-- A typing rule for lift

opaque
  unfolding Lift lift

  -- A typing rule for lift.

  ‚ä¢lift :
    Lift-allowed s ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ lift s l t ‚à∑ Lift s l A
  ‚ä¢lift (ok‚ÇÅ , ok‚ÇÇ) ‚ä¢t =
    let ‚ä¢A = syntacticTerm ‚ä¢t in
    prod‚±º (Unit‚±º (‚àô ‚ä¢A) ok‚ÇÇ) ‚ä¢t (star‚±º (wf ‚ä¢A) ok‚ÇÇ) ok‚ÇÅ

------------------------------------------------------------------------
-- Typing rules for liftrec

private opaque
  unfolding Lift lift

  -- A lemma used below.

  liftrec-lemma :
    Œì ‚àô Lift s l A ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ B‚ÇÅ [ lift s l (var x0) ]‚Üë ‚Üí
    Œì ‚àô A ‚àô Unit s l ‚ä¢
      unitrec‚ü® s ‚ü© l r q
        (B‚ÇÅ [ consSubst (wkSubst 3 idSubst)
                (prod s ùüô (var x2) (var x0)) ])
        (var x0) (wk1 t‚ÇÅ) ‚â°
      unitrec‚ü® s ‚ü© l r q
        (B‚ÇÇ [ consSubst (wkSubst 3 idSubst)
                (prod s ùüô (var x2) (var x0)) ])
        (var x0) (wk1 t‚ÇÇ) ‚à∑
      B‚ÇÅ [ prod s ùüô (var x1) (var x0) ]‚Üë¬≤
  liftrec-lemma {s} {l} {B‚ÇÅ} B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    let (ok‚ÇÅ , ok‚ÇÇ) , ‚ä¢A = inversion-Lift (‚ä¢‚àô‚Üí‚ä¢ (wfEq B‚ÇÅ‚â°B‚ÇÇ))
        ‚ä¢Œì               = wf ‚ä¢A
        ‚ä¢Unit            = Unit‚±º (‚àô ‚ä¢A) ok‚ÇÇ
        ‚ä¢Unit‚Ä≤           = W.wk‚ÇÅ ‚ä¢Unit ‚ä¢Unit
    in
    PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
      (B‚ÇÅ [ consSubst (wkSubst 3 idSubst)
              (prod s ùüô (var x2) (var x0)) ]
          [ var x0 ]‚ÇÄ                         ‚â°‚ü® substCompEq B‚ÇÅ ‚ü©

       B‚ÇÅ [ sgSubst (var x0) ‚Çõ‚Ä¢‚Çõ
            consSubst (wkSubst 3 idSubst)
              (prod s ùüô (var x2) (var x0)) ]  ‚â°‚ü® (flip substVar-to-subst B‚ÇÅ Œª where
                                                    x0     ‚Üí PE.refl
                                                    (_ +1) ‚Üí PE.refl) ‚ü©
       B‚ÇÅ [ consSubst (wkSubst 2 idSubst)
              (prod s ùüô (var x1) (var x0)) ]  ‚â°‚ü®‚ü©

       B‚ÇÅ [ prod s ùüô (var x1) (var x0) ]‚Üë¬≤    ‚àé) $
    unitrec‚ü®‚ü©-cong
      (substitutionEq B‚ÇÅ‚â°B‚ÇÇ
         (substRefl
            ( wk1Subst‚Ä≤ ‚ä¢Unit‚Ä≤
                (wk1Subst‚Ä≤ ‚ä¢Unit (wk1Subst‚Ä≤ ‚ä¢A (idSubst‚Ä≤ ‚ä¢Œì)))
            , prod‚±º
                (Unit‚±º
                   (‚àô (PE.subst (_‚ä¢_ _) (wk‚â°subst _ _) $
                       W.wk (W.step ∑ (W.step (W.step W.id)) ‚ä¢Unit‚Ä≤) ‚ä¢A))
                   ok‚ÇÇ)
                (PE.subst (_‚ä¢_‚à∑_ _ _) (wk[]‚â°[] 3) (var‚ÇÇ ‚ä¢Unit‚Ä≤))
                (var‚ÇÄ ‚ä¢Unit‚Ä≤) ok‚ÇÅ
            ))
         (‚àô ‚ä¢Unit‚Ä≤))
      (refl (var‚ÇÄ ‚ä¢Unit)) $
    PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
      (wk1 (B‚ÇÅ [ lift s l (var x0) ]‚Üë)                                    ‚â°‚ü®‚ü©

       (wk1 $
        B‚ÇÅ [ consSubst (wk1Subst idSubst)
               (prod s ùüô (var x0) (star s l)) ])                          ‚â°Àò‚ü® wk1Subst-wk1 B‚ÇÅ ‚ü©

       B‚ÇÅ [ wk1Subst $ consSubst (wk1Subst idSubst) $
            prod s ùüô (var x0) (star s l) ]                                ‚â°‚ü® (flip substVar-to-subst B‚ÇÅ Œª where
                                                                                x0     ‚Üí PE.refl
                                                                                (_ +1) ‚Üí PE.refl) ‚ü©
       B‚ÇÅ [ sgSubst (star s l) ‚Çõ‚Ä¢‚Çõ
            consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]  ‚â°Àò‚ü® substCompEq B‚ÇÅ ‚ü©

       B‚ÇÅ [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
          [ star s l ]‚ÇÄ                                                   ‚àé) $
    W.wkEqTerm‚ÇÅ ‚ä¢Unit t‚ÇÅ‚â°t‚ÇÇ

opaque
  unfolding Lift liftrec

  -- An equality rule for liftrec.

  liftrec-cong :
    Œì ‚àô Lift s l A ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ B‚ÇÅ [ lift s l (var x0) ]‚Üë ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ Lift s l A ‚Üí
    Œì ‚ä¢ liftrec r q s l B‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° liftrec r q s l B‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ B‚ÇÅ [ u‚ÇÅ ]‚ÇÄ
  liftrec-cong B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    prodrec‚ü®‚ü©-cong B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ $
    liftrec-lemma B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ

opaque

  -- A typing rule for liftrec.

  ‚ä¢liftrec :
    Œì ‚àô Lift s l A ‚ä¢ B ‚Üí
    Œì ‚àô A ‚ä¢ t ‚à∑ B [ lift s l (var x0) ]‚Üë ‚Üí
    Œì ‚ä¢ u ‚à∑ Lift s l A ‚Üí
    Œì ‚ä¢ liftrec r q s l B t u ‚à∑ B [ u ]‚ÇÄ
  ‚ä¢liftrec ‚ä¢B ‚ä¢t ‚ä¢u =
    syntacticEqTerm
      (liftrec-cong (refl ‚ä¢B) (refl ‚ä¢t) (refl ‚ä¢u))
      .proj‚ÇÇ .proj‚ÇÅ

opaque
  unfolding Lift lift liftrec

  -- An equality rule for liftrec.

  liftrec-Œ≤ :
    Œì ‚àô Lift s l A ‚ä¢ B ‚Üí
    Œì ‚àô A ‚ä¢ t ‚à∑ B [ lift s l (var x0) ]‚Üë ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ liftrec r q s l B t (lift s l u) ‚â° t [ u ]‚ÇÄ ‚à∑ B [ lift s l u ]‚ÇÄ
  liftrec-Œ≤ {s} {l} {B} {t} {u} {r} {q} ‚ä¢B ‚ä¢t ‚ä¢u =
    let ‚ä¢Œì               = wfTerm ‚ä¢u
        (ok‚ÇÅ , ok‚ÇÇ) , ‚ä¢A = inversion-Lift (‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B))
        ‚ä¢Unit            = Unit‚±º ‚ä¢Œì ok‚ÇÇ
    in

    liftrec r q s l B t (lift s l u)                                      ‚â°‚ü®‚ü©‚ä¢

    prodrec‚ü® s ‚ü© r ùüô q B (prod s ùüô u (star s l))
      (unitrec‚ü® s ‚ü© l r q
         (B [ consSubst (wkSubst 3 idSubst)
                (prod s ùüô (var x2) (var x0)) ])
         (var x0) (wk1 t))                                                ‚â°‚ü® prodrec‚ü®‚ü©-Œ≤ (Œª _ ‚Üí ‚ä¢B) ‚ä¢u (star‚±º ‚ä¢Œì ok‚ÇÇ)
                                                                               (syntacticEqTerm
                                                                                  (liftrec-lemma (refl ‚ä¢B) (refl ‚ä¢t))
                                                                                  .proj‚ÇÇ .proj‚ÇÅ)
                                                                               ok‚ÇÅ ‚ü©‚ä¢
    unitrec‚ü® s ‚ü© l r q
      (B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ])
      (var x0) (wk1 t) [ u , star s l ]‚ÇÅ‚ÇÄ ‚à∑
      B [ lift s l u ]‚ÇÄ                                                   ‚â°‚ü® unitrec‚ü®‚ü©-[] ‚ü©‚ä¢‚à∑‚â°
                                                                          Àò‚ü® lemma‚ÇÇ ‚ü©‚â°‚â°
    unitrec‚ü® s ‚ü© l r q
      (B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
         [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ])
      (star s l) (wk1 t [ u , star s l ]‚ÇÅ‚ÇÄ) ‚à∑
      B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]
        [ star s l ]‚ÇÄ                                                     ‚â°‚ü® unitrec‚ü®‚ü©-Œ≤-‚â°
                                                                               (Œª _ ‚Üí
                                                                                  PE.subst (_‚ä¢_ _) (PE.sym lemma‚ÇÅ) $
                                                                                  subst‚ÜëType ‚ä¢B $
                                                                                  prod‚±º (W.wk‚ÇÅ (W.wk‚ÇÅ ‚ä¢Unit ‚ä¢A) (W.wk‚ÇÅ ‚ä¢Unit ‚ä¢Unit))
                                                                                    (W.wkTerm‚ÇÅ ‚ä¢Unit ‚ä¢u) (var‚ÇÄ ‚ä¢Unit) ok‚ÇÅ) $
                                                                             PE.subst‚ÇÇ (_‚ä¢_‚à∑_ _) (PE.sym lemma‚ÇÑ) (PE.sym lemma‚ÇÉ) $
                                                                             substTerm ‚ä¢t ‚ä¢u ‚ü©‚ä¢‚à∑‚àé‚â°

    wk1 t [ u , star s l ]‚ÇÅ‚ÇÄ                                              ‚â°‚ü® lemma‚ÇÑ ‚ü©

    t [ u ]‚ÇÄ                                                              ‚àé
    where
    lemma‚ÇÅ :
      B [ consSubst (wkSubst 3 idSubst)
            (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ] PE.‚â°
      B [ prod s ùüô (wk1 u) (var x0) ]‚Üë
    lemma‚ÇÅ =
      B [ consSubst (wkSubst 3 idSubst)
            (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]      ‚â°‚ü® substCompEq B ‚ü©

      B [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ‚Çõ‚Ä¢‚Çõ
          consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]  ‚â°‚ü® (flip substVar-to-subst B Œª where
                                                                              x0     ‚Üí PE.refl
                                                                              (_ +1) ‚Üí PE.refl) ‚ü©
      B [ prod s ùüô (wk1 u) (var x0) ]‚Üë                                  ‚àé

    lemma‚ÇÇ :
      B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]
        [ star s l ]‚ÇÄ PE.‚â°
      B [ lift s l u ]‚ÇÄ
    lemma‚ÇÇ =
      B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]
        [ star s l ]‚ÇÄ                                                   ‚â°‚ü® PE.cong _[ _ ]‚ÇÄ lemma‚ÇÅ ‚ü©

      B [ prod s ùüô (wk1 u) (var x0) ]‚Üë [ star s l ]‚ÇÄ                    ‚â°‚ü® []‚Üë-[]‚ÇÄ B ‚ü©

      B [ prod s ùüô (wk1 u) (var x0) [ star s l ]‚ÇÄ ]‚ÇÄ                    ‚â°‚ü®‚ü©

      B [ prod s ùüô (wk1 u [ star s l ]‚ÇÄ) (star s l) ]‚ÇÄ                  ‚â°‚ü® PE.cong (B [_]‚ÇÄ) (PE.cong‚ÇÇ (prod s ùüô) (wk1-sgSubst _ _) PE.refl) ‚ü©

      B [ prod s ùüô u (star s l) ]‚ÇÄ                                      ‚â°‚ü®‚ü©

      B [ lift s l u ]‚ÇÄ                                                 ‚àé

    lemma‚ÇÉ :
      B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]
        [ star s l ]‚ÇÄ PE.‚â°
      B [ lift s l (var x0) ]‚Üë [ u ]‚ÇÄ
    lemma‚ÇÉ =
      B [ consSubst (wkSubst 3 idSubst) (prod s ùüô (var x2) (var x0)) ]
        [ liftSubst (consSubst (consSubst idSubst u) (star s l)) ]
        [ star s l ]‚ÇÄ                                                   ‚â°‚ü® lemma‚ÇÇ ‚ü©

      B [ lift s l u ]‚ÇÄ                                                 ‚â°‚ü®‚ü©

      B [ lift s l (var x0) [ u ]‚ÇÄ ]‚ÇÄ                                   ‚â°Àò‚ü® []‚Üë-[]‚ÇÄ B ‚ü©

      B [ lift s l (var x0) ]‚Üë [ u ]‚ÇÄ                                   ‚àé

    lemma‚ÇÑ : wk1 t [ u , star s l ]‚ÇÅ‚ÇÄ PE.‚â° t [ u ]‚ÇÄ
    lemma‚ÇÑ =
      wk1 t [ u , star s l ]‚ÇÅ‚ÇÄ  ‚â°‚ü® step-consSubst t ‚ü©
      wk id t [ u ]‚ÇÄ            ‚â°‚ü® PE.cong _[ _ ]‚ÇÄ $ wk-id t ‚ü©
      t [ u ]‚ÇÄ                  ‚àé
