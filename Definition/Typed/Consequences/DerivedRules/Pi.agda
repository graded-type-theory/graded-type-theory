------------------------------------------------------------------------
-- Derived rules related to Œ†-types
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.DerivedRules.Pi
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.Substitution R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.Properties R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.RedSteps R
import Definition.Typed.Substitution R as S
open import Definition.Typed.Weakening R as W hiding (wk)

open import Definition.Untyped M
open import Definition.Untyped.Properties M

open import Tools.Fin
open import Tools.Function
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

private variable
  Œì                                                   : Con _ _
  A B C D E t u u‚ÇÅ u‚ÇÇ u‚ÇÉ u‚ÇÑ v w                       : Term _
  p p‚Ä≤ p‚Ä≥ p‚ÇÅ p‚ÇÅ‚Ä≤ p‚ÇÇ p‚ÇÇ‚Ä≤ p‚ÇÉ p‚ÇÉ‚Ä≤ p‚ÇÑ p‚ÇÑ‚Ä≤ q q‚ÇÅ q‚ÇÇ q‚ÇÉ q‚ÇÑ r : M

------------------------------------------------------------------------
-- Simple variants of typing/equality/reduction rules

opaque

  -- A variant of the reduction rule Œ≤-red.

  Œ≤-red-‚áí :
    Œì ‚àô A ‚ä¢ t ‚à∑ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œ†-allowed p q ‚Üí
    Œì ‚ä¢ lam p t ‚àò‚ü® p ‚ü© u ‚áí t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  Œ≤-red-‚áí ‚ä¢t ‚ä¢u =
    Œ≤-red (syntacticTerm ‚ä¢t) ‚ä¢t ‚ä¢u PE.refl

opaque

  -- A variant of the equality rule Œ≤-red.

  Œ≤-red-‚â° :
    Œì ‚àô A ‚ä¢ t ‚à∑ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œ†-allowed p q ‚Üí
    Œì ‚ä¢ lam p t ‚àò‚ü® p ‚ü© u ‚â° t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  Œ≤-red-‚â° ‚ä¢t ‚ä¢u ok =
    subsetTerm (Œ≤-red-‚áí ‚ä¢t ‚ä¢u ok)

------------------------------------------------------------------------
-- Other derived rules

opaque

  -- Another variant of the reduction rule Œ≤-red.

  Œ≤-red-‚áí‚ÇÅ :
    Œì ‚ä¢ lam p t ‚à∑ Œ† p‚Ä≤ , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ lam p t ‚àò‚ü® p‚Ä≤ ‚ü© u ‚áí t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  Œ≤-red-‚áí‚ÇÅ ‚ä¢lam ‚ä¢u =
    case inversion-lam-Œ† ‚ä¢lam of Œª {
      (‚ä¢t , PE.refl , ok) ‚Üí
    Œ≤-red-‚áí ‚ä¢t ‚ä¢u ok }

opaque

  -- Another variant of the equality rule Œ≤-red.

  Œ≤-red-‚â°‚ÇÅ :
    Œì ‚ä¢ lam p t ‚à∑ Œ† p‚Ä≤ , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ lam p t ‚àò‚ü® p‚Ä≤ ‚ü© u ‚â° t [ u ]‚ÇÄ ‚à∑ B [ u ]‚ÇÄ
  Œ≤-red-‚â°‚ÇÅ ‚ä¢lam ‚ä¢u =
    subsetTerm (Œ≤-red-‚áí‚ÇÅ ‚ä¢lam ‚ä¢u)

opaque

  -- A variant of Œ≤-red-‚áí‚ÇÅ for functions of two arguments.

  Œ≤-red-‚áí‚ÇÇ :
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ t) ‚à∑ Œ† p‚ÇÅ‚Ä≤ , q‚ÇÅ ‚ñ∑ A ‚ñπ Œ† p‚ÇÇ‚Ä≤ , q‚ÇÇ ‚ñ∑ B ‚ñπ C ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ v ‚à∑ B [ u ]‚ÇÄ ‚Üí
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ t) ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© v ‚áí* t [ u , v ]‚ÇÅ‚ÇÄ ‚à∑
      C [ u , v ]‚ÇÅ‚ÇÄ
  Œ≤-red-‚áí‚ÇÇ {p‚ÇÅ} {p‚ÇÇ} {t} {p‚ÇÅ‚Ä≤} {p‚ÇÇ‚Ä≤} {C} {u} {v} ‚ä¢lam ‚ä¢u ‚ä¢v =
    case substitutionTerm (inversion-lam-Œ† ‚ä¢lam .proj‚ÇÅ)
           (singleSubst ‚ä¢u) (wfTerm ‚ä¢u) of Œª {
      ‚ä¢lam‚Ä≤ ‚Üí                                         ‚ü® PE.sym $ singleSubstComp _ _ C ‚ü©‚áí‚â°
    lam p‚ÇÅ (lam p‚ÇÇ t) ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© v          ‚áí‚ü® app-subst (Œ≤-red-‚áí‚ÇÅ ‚ä¢lam ‚ä¢u) ‚ä¢v ‚ü©
    lam p‚ÇÇ (t [ liftSubst (sgSubst u) ]) ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© v  ‚áí‚ü® Œ≤-red-‚áí‚ÇÅ ‚ä¢lam‚Ä≤ ‚ä¢v ‚ü©‚àé‚â°
    t [ liftSubst (sgSubst u) ] [ v ]‚ÇÄ               ‚â°‚ü® singleSubstComp _ _ t ‚ü©
    t [ u , v ]‚ÇÅ‚ÇÄ                                    ‚àé }

opaque

  -- A variant of Œ≤-red-‚áí‚ÇÅ for functions of three arguments.

  Œ≤-red-‚áí‚ÇÉ :
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ t)) ‚à∑
        Œ† p‚ÇÅ‚Ä≤ , q‚ÇÅ ‚ñ∑ A ‚ñπ Œ† p‚ÇÇ‚Ä≤ , q‚ÇÇ ‚ñ∑ B ‚ñπ Œ† p‚ÇÉ‚Ä≤ , q‚ÇÉ ‚ñ∑ C ‚ñπ D ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ v ‚à∑ B [ u ]‚ÇÄ ‚Üí
    Œì ‚ä¢ w ‚à∑ C [ u , v ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ t)) ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© v ‚àò‚ü® p‚ÇÉ‚Ä≤ ‚ü© w ‚áí*
        t [ consSubst (consSubst (sgSubst u) v) w ] ‚à∑
        D [ consSubst (consSubst (sgSubst u) v) w ]
  Œ≤-red-‚áí‚ÇÉ
    {p‚ÇÅ} {p‚ÇÇ} {p‚ÇÉ} {t} {p‚ÇÅ‚Ä≤} {p‚ÇÇ‚Ä≤} {p‚ÇÉ‚Ä≤} {D} {u} {v} {w} ‚ä¢lam ‚ä¢u ‚ä¢v ‚ä¢w =
    case substitutionTerm
           (inversion-lam-Œ† (inversion-lam-Œ† ‚ä¢lam .proj‚ÇÅ) .proj‚ÇÅ)
           (singleSubst ‚ä¢u , ‚ä¢v)
           (wfTerm ‚ä¢u) of Œª {
      ‚ä¢lam‚Ä≤ ‚Üí                                                        ‚ü® PE.sym $ singleSubstComp _ _ D ‚ü©‚áí‚â°
    lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ t)) ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© v ‚àò‚ü® p‚ÇÉ‚Ä≤ ‚ü© w    ‚áí*‚ü® app-subst* (Œ≤-red-‚áí‚ÇÇ ‚ä¢lam ‚ä¢u ‚ä¢v) ‚ä¢w ‚ü©
    lam p‚ÇÉ (t [ liftSubst (consSubst (sgSubst u) v) ]) ‚àò‚ü® p‚ÇÉ‚Ä≤ ‚ü© w  ‚áí‚ü® Œ≤-red-‚áí‚ÇÅ ‚ä¢lam‚Ä≤ ‚ä¢w ‚ü©‚àé‚â°
    t [ liftSubst (consSubst (sgSubst u) v) ] [ w ]‚ÇÄ               ‚â°‚ü® singleSubstComp _ _ t ‚ü©
    t [ consSubst (consSubst (sgSubst u) v) w ]                    ‚àé }

opaque

  -- A variant of Œ≤-red-‚áí‚ÇÅ for functions of four arguments.

  Œ≤-red-‚áí‚ÇÑ :
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ (lam p‚ÇÑ t))) ‚à∑
        Œ† p‚ÇÅ‚Ä≤ , q‚ÇÅ ‚ñ∑ A ‚ñπ Œ† p‚ÇÇ‚Ä≤ , q‚ÇÇ ‚ñ∑ B ‚ñπ Œ† p‚ÇÉ‚Ä≤ , q‚ÇÉ ‚ñ∑ C ‚ñπ
        Œ† p‚ÇÑ‚Ä≤ , q‚ÇÑ ‚ñ∑ D ‚ñπ E ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚à∑ A ‚Üí
    Œì ‚ä¢ u‚ÇÇ ‚à∑ B [ u‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u‚ÇÉ ‚à∑ C [ u‚ÇÅ , u‚ÇÇ ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ u‚ÇÑ ‚à∑ D [ consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ ] ‚Üí
    Œì ‚ä¢ lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ (lam p‚ÇÑ t)))
          ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u‚ÇÅ ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© u‚ÇÇ ‚àò‚ü® p‚ÇÉ‚Ä≤ ‚ü© u‚ÇÉ ‚àò‚ü® p‚ÇÑ‚Ä≤ ‚ü© u‚ÇÑ ‚áí*
        t [ consSubst (consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ) u‚ÇÑ ] ‚à∑
        E [ consSubst (consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ) u‚ÇÑ ]
  Œ≤-red-‚áí‚ÇÑ
    {p‚ÇÅ} {p‚ÇÇ} {p‚ÇÉ} {p‚ÇÑ} {t} {p‚ÇÅ‚Ä≤} {p‚ÇÇ‚Ä≤} {p‚ÇÉ‚Ä≤} {p‚ÇÑ‚Ä≤} {E}
    {u‚ÇÅ} {u‚ÇÇ} {u‚ÇÉ} {u‚ÇÑ} ‚ä¢lam ‚ä¢u‚ÇÅ ‚ä¢u‚ÇÇ ‚ä¢u‚ÇÉ ‚ä¢u‚ÇÑ =
    case substitutionTerm
           (inversion-lam-Œ†
              (inversion-lam-Œ† (inversion-lam-Œ† ‚ä¢lam .proj‚ÇÅ) .proj‚ÇÅ)
              .proj‚ÇÅ)
           ((singleSubst ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ) , ‚ä¢u‚ÇÉ)
           (wfTerm ‚ä¢u‚ÇÅ) of Œª {
      ‚ä¢lam‚Ä≤ ‚Üí                                                              ‚ü® PE.sym $ singleSubstComp _ _ E ‚ü©‚áí‚â°
    lam p‚ÇÅ (lam p‚ÇÇ (lam p‚ÇÉ (lam p‚ÇÑ t)))
      ‚àò‚ü® p‚ÇÅ‚Ä≤ ‚ü© u‚ÇÅ ‚àò‚ü® p‚ÇÇ‚Ä≤ ‚ü© u‚ÇÇ ‚àò‚ü® p‚ÇÉ‚Ä≤ ‚ü© u‚ÇÉ ‚àò‚ü® p‚ÇÑ‚Ä≤ ‚ü© u‚ÇÑ                    ‚áí*‚ü® app-subst* (Œ≤-red-‚áí‚ÇÉ ‚ä¢lam ‚ä¢u‚ÇÅ ‚ä¢u‚ÇÇ ‚ä¢u‚ÇÉ) ‚ä¢u‚ÇÑ ‚ü©

    lam p‚ÇÑ (t [ liftSubst (consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ) ])
      ‚àò‚ü® p‚ÇÑ‚Ä≤ ‚ü© u‚ÇÑ                                                        ‚áí‚ü® Œ≤-red-‚áí‚ÇÅ ‚ä¢lam‚Ä≤ ‚ä¢u‚ÇÑ ‚ü©‚àé‚â°

    t [ liftSubst (consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ) ] [ u‚ÇÑ ]‚ÇÄ   ‚â°‚ü® singleSubstComp _ _ t ‚ü©

    t [ consSubst (consSubst (consSubst (sgSubst u‚ÇÅ) u‚ÇÇ) u‚ÇÉ) u‚ÇÑ ]        ‚àé }

opaque

  -- Lambdas preserve definitional equality.

  lam-cong :
    Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B ‚Üí
    Œ†-allowed p q ‚Üí
    Œì ‚ä¢ lam p t ‚â° lam p u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  lam-cong t‚â°u =
    let ‚ä¢B , ‚ä¢t , ‚ä¢u = syntacticEqTerm t‚â°u in
    S.lam-cong ‚ä¢B ‚ä¢t ‚ä¢u t‚â°u

opaque

  -- A reduction rule for weakened lambdas applied to variable zero.

  wk1-lam‚àò0‚áí :
    Œì ‚ä¢ lam p t ‚à∑ Œ† q , r ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ wk1 (lam p t) ‚àò‚ü® p ‚ü© var x0 ‚áí t ‚à∑ B
  wk1-lam‚àò0‚áí ‚ä¢lam =
    case inversion-lam-Œ† ‚ä¢lam of Œª {
      (‚ä¢t , PE.refl , ok) ‚Üí
    case wfTerm ‚ä¢t of Œª {
      (‚àô ‚ä¢A) ‚Üí
    PE.subst‚ÇÇ (_‚ä¢_‚áí_‚à∑_ _ _)
      (wkSingleSubstId _)
      (wkSingleSubstId _)
      (Œ≤-red-‚áí
         (wkTerm (lift ∑ (step id) (W.wk (step ∑ id ‚ä¢A) ‚ä¢A)) ‚ä¢t)
         (var‚ÇÄ ‚ä¢A) ok) }}

opaque

  -- An equality rule for weakened lambdas applied to variable zero.

  wk1-lam‚àò0‚â° :
    Œì ‚ä¢ lam p t ‚à∑ Œ† q , r ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ wk1 (lam p t) ‚àò‚ü® p ‚ü© var x0 ‚â° t ‚à∑ B
  wk1-lam‚àò0‚â° ‚ä¢lam = subsetTerm (wk1-lam‚àò0‚áí ‚ä¢lam)

opaque

  -- An inverse of uncurry¬†lam-cong (up to logical equivalence).

  lam-cong‚Åª¬π :
    Œì ‚ä¢ lam p t ‚â° lam p u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B √ó Œ†-allowed p q
  lam-cong‚Åª¬π {Œì} {p} {t} {u} {q} {A} {B} lam-t‚â°lam-u =
    case syntacticEqTerm lam-t‚â°lam-u of Œª {
      (‚ä¢Œ†AB , ‚ä¢lam-t , ‚ä¢lam-u) ‚Üí
    case inversion-Œ†Œ£ ‚ä¢Œ†AB .proj‚ÇÅ of Œª {
      ‚ä¢A ‚Üí                                                               $‚ü® lam-t‚â°lam-u ‚ü©

    Œì ‚ä¢ lam p t ‚â° lam p u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B                              ‚Üí‚ü® wkEqTerm‚ÇÅ ‚ä¢A ‚ü©

    Œì ‚àô A ‚ä¢ wk1 (lam p t) ‚â° wk1 (lam p u) ‚à∑ wk1 (Œ† p , q ‚ñ∑ A ‚ñπ B)        ‚Üí‚ü® flip app-cong (refl (var‚ÇÄ ‚ä¢A)) ‚ü©

    Œì ‚àô A ‚ä¢ wk1 (lam p t) ‚àò‚ü® p ‚ü© var x0 ‚â° wk1 (lam p u) ‚àò‚ü® p ‚ü© var x0 ‚à∑
      wk (lift (step id)) B [ var x0 ]‚ÇÄ                                  ‚Üí‚ü® PE.subst (_ ‚ä¢ _ ‚â° _ ‚à∑_) (wkSingleSubstId _) ‚ü©

    Œì ‚àô A ‚ä¢ wk1 (lam p t) ‚àò‚ü® p ‚ü© var x0 ‚â° wk1 (lam p u) ‚àò‚ü® p ‚ü© var x0 ‚à∑
      B                                                                  ‚Üí‚ü® (Œª hyp ‚Üí trans
                                                                               (sym‚Ä≤ (wk1-lam‚àò0‚â° ‚ä¢lam-t))
                                                                               (trans hyp (wk1-lam‚àò0‚â° ‚ä¢lam-u))) ‚ü©

    Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B                                                    ‚Üí‚ü® _, inversion-lam-Œ† ‚ä¢lam-t .proj‚ÇÇ .proj‚ÇÇ ‚ü©

    Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B √ó Œ†-allowed p q                                    ‚ñ° }}

opaque

  -- An injectivity lemma for lam.

  lam-injective :
    Œì ‚ä¢ lam p t ‚â° lam p‚Ä≤ u ‚à∑ Œ† p‚Ä≥ , q ‚ñ∑ A ‚ñπ B ‚Üí
    p PE.‚â° p‚Ä≤ √ó Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B √ó Œ†-allowed p q √ó p‚Ä≤ PE.‚â° p‚Ä≥
  lam-injective {Œì} {p} {t} {p‚Ä≤} {u} {p‚Ä≥} {q} {A} {B} lam-t‚â°lam-u =
    case syntacticEqTerm lam-t‚â°lam-u of Œª {
      (_ , ‚ä¢lam‚ÇÅ , ‚ä¢lam‚ÇÇ) ‚Üí
    case inversion-lam-Œ† ‚ä¢lam‚ÇÅ of Œª {
      (_ , PE.refl , _) ‚Üí
    case inversion-lam-Œ† ‚ä¢lam‚ÇÇ of Œª {
      (_ , PE.refl , _) ‚Üí
    case lam-cong‚Åª¬π lam-t‚â°lam-u of Œª {
      (t‚â°u , ok) ‚Üí
    PE.refl , t‚â°u , ok , PE.refl }}}}

opaque

  -- An Œ∑-rule for Œ†-types.

  Œ†-Œ∑ :
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ lam p (wk1 t ‚àò‚ü® p ‚ü© var x0) ‚â° t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  Œ†-Œ∑ {Œì} {t} {p} {q} {A} {B} ‚ä¢t =
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (‚ä¢A , _ , ok) ‚Üí
    case                                                               $‚ü® wkTerm‚ÇÅ ‚ä¢A ‚ä¢t ‚àò‚±º var‚ÇÄ ‚ä¢A ‚ü©
      Œì ‚àô A ‚ä¢ wk1 t ‚àò‚ü® p ‚ü© var x0 ‚à∑ wk (lift (step id)) B [ var x0 ]‚ÇÄ  ‚Üí‚ü® PE.subst (_ ‚ä¢ _ ‚à∑_) (wkSingleSubstId _) ‚ü©
      Œì ‚àô A ‚ä¢ wk1 t ‚àò‚ü® p ‚ü© var x0 ‚à∑ B                                  ‚Üí‚ü® lam‚±º‚Ä≤ ok ‚ü©
      Œì ‚ä¢ lam p (wk1 t ‚àò‚ü® p ‚ü© var x0) ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B                ‚ñ°
    of Œª {
      ‚ä¢lam ‚Üí
    Œ∑-eq‚Ä≤ ‚ä¢lam ‚ä¢t
      (                                                     $‚ü® ‚ä¢lam ‚ü©

       Œì ‚ä¢ lam p (wk1 t ‚àò‚ü® p ‚ü© var x0) ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B    ‚Üí‚ü® wk1-lam‚àò0‚â° ‚ü©

       Œì ‚àô A ‚ä¢
         wk1 (lam p (wk1 t ‚àò‚ü® p ‚ü© var x0)) ‚àò‚ü® p ‚ü© var x0 ‚â°
         wk1 t ‚àò‚ü® p ‚ü© var x0 ‚à∑
         B                                                  ‚ñ°) }}
