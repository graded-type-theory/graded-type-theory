------------------------------------------------------------------------
-- Derived rules related to Œ£-types
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.DerivedRules.Sigma
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Consequences.DerivedRules.Pi-Sigma R
open import Definition.Typed.Consequences.Inequality R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.Reduction R
open import Definition.Typed.Consequences.Substitution R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.Properties R
open import Definition.Typed.Weakening R as W

open import Definition.Untyped M as U
  hiding (_‚à∑_) renaming (_[_,_] to _[_‚à£_])
open import Definition.Untyped.Properties M
open import Definition.Untyped.Sigma M as Sigma using (prodrecÀ¢)

open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+)
open import Tools.Product
import Tools.PropositionalEquality as PE
import Tools.Reasoning.PropositionalEquality
open import Tools.Relation

private variable
  n                                           : Nat
  Œì                                           : Con _ _
  A A‚ÇÅ A‚ÇÇ B B‚ÇÅ B‚ÇÇ C C‚ÇÅ C‚ÇÇ t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ v w : Term _
  p q q‚Ä≤ r                                    : M
  s s‚Ä≤                                        : Strength

------------------------------------------------------------------------
-- Some derived rules

-- A variant of the typing rule for prod.

‚ä¢prod :
  Œì ‚àô A ‚ä¢ B ‚Üí
  Œì ‚ä¢ t ‚à∑ A ‚Üí
  Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
  Œ£-allowed s p q ‚Üí
  Œì ‚ä¢ prod s p t u ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B
‚ä¢prod ‚ä¢B ‚ä¢t = prod‚±º (syntacticTerm ‚ä¢t) ‚ä¢B ‚ä¢t

opaque

  -- A variant of the typing rule for fst.

  fst‚±º‚Ä≤ :
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst p t ‚à∑ A
  fst‚±º‚Ä≤ ‚ä¢t =
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    fst‚±º ‚ä¢A ‚ä¢B ‚ä¢t }

opaque

  -- A variant of the typing rule for snd.

  snd‚±º‚Ä≤ :
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ snd p t ‚à∑ B [ fst p t ]‚ÇÄ
  snd‚±º‚Ä≤ ‚ä¢t =
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    snd‚±º ‚ä¢A ‚ä¢B ‚ä¢t }

opaque

  -- A variant of the typing rule for prodrec.

  prodrec‚±º‚Ä≤ :
    Œì ‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚ä¢ C ‚Üí
    Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚àô B ‚ä¢ u ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C t u ‚à∑ C [ t ]‚ÇÄ
  prodrec‚±º‚Ä≤ ‚ä¢C ‚ä¢t ‚ä¢u =
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (‚ä¢A , ‚ä¢B , ok) ‚Üí
    prodrec‚±º ‚ä¢A ‚ä¢B ‚ä¢C ‚ä¢t ‚ä¢u ok }

opaque

  -- A variant of prod-cong.

  prod-cong‚Ä≤ :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œ£-allowed s p q ‚Üí
    Œì ‚ä¢ prod s p t‚ÇÅ u‚ÇÅ ‚â° prod s p t‚ÇÇ u‚ÇÇ ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B
  prod-cong‚Ä≤ ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ =
    prod-cong (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ) ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ

opaque

  -- A variant of fst-subst.

  fst-subst‚Ä≤ :
    Œì ‚ä¢ t ‚áí u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst p t ‚áí fst p u ‚à∑ A
  fst-subst‚Ä≤ t‚áíu =
    case inversion-Œ†Œ£ (syntacticTerm (redFirstTerm t‚áíu)) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    fst-subst ‚ä¢A ‚ä¢B t‚áíu }

opaque

  -- A variant of fst-cong.

  fst-cong‚Ä≤ :
    Œì ‚ä¢ t ‚â° u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst p t ‚â° fst p u ‚à∑ A
  fst-cong‚Ä≤ t‚â°u =
    case inversion-Œ†Œ£ (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    fst-cong ‚ä¢A ‚ä¢B t‚â°u }

opaque

  -- A variant of snd-subst.

  snd-subst‚Ä≤ :
    Œì ‚ä¢ t ‚áí u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ snd p t ‚áí snd p u ‚à∑ B [ fst p t ]‚ÇÄ
  snd-subst‚Ä≤ t‚áíu =
    case inversion-Œ†Œ£ (syntacticTerm (redFirstTerm t‚áíu)) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    snd-subst ‚ä¢A ‚ä¢B t‚áíu }

opaque

  -- A variant of snd-cong.

  snd-cong‚Ä≤ :
    Œì ‚ä¢ t ‚â° u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ snd p t ‚â° snd p u ‚à∑ B [ fst p t ]‚ÇÄ
  snd-cong‚Ä≤ t‚â°u =
    case inversion-Œ†Œ£ (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    snd-cong ‚ä¢A ‚ä¢B t‚â°u }

opaque

  -- A variant of prodrec-subst.

  prodrec-subst‚Ä≤ :
    Œì ‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚àô A ‚àô B ‚ä¢ u ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚áí t‚ÇÇ ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œ£ ∑-allowed p q‚Ä≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C t‚ÇÅ u ‚áí prodrec r p q C t‚ÇÇ u ‚à∑ C [ t‚ÇÅ ]‚ÇÄ
  prodrec-subst‚Ä≤ ‚ä¢C ‚ä¢u t‚ÇÅ‚áít‚ÇÇ =
    case inversion-Œ†Œ£ (syntacticTerm (redFirstTerm t‚ÇÅ‚áít‚ÇÇ)) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    prodrec-subst ‚ä¢A ‚ä¢B ‚ä¢C ‚ä¢u t‚ÇÅ‚áít‚ÇÇ }

opaque

  -- A variant of prodrec-cong.

  prodrec-cong‚Ä≤ :
    Œì ‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C‚ÇÅ ‚â° C‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚àô B ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° prodrec r p q C‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ C‚ÇÅ [ t‚ÇÅ ]‚ÇÄ
  prodrec-cong‚Ä≤ C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case inversion-Œ†Œ£ (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ) of Œª {
      (‚ä¢A , ‚ä¢B , ok) ‚Üí
    prodrec-cong ‚ä¢A ‚ä¢B C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ ok }

opaque

  -- A variant of the reduction rule Œ£-Œ≤‚ÇÅ.

  Œ£-Œ≤‚ÇÅ-‚áí :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£À¢-allowed p q ‚Üí
    Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚áí t ‚à∑ A
  Œ£-Œ≤‚ÇÅ-‚áí ‚ä¢B ‚ä¢t ‚ä¢u =
    Œ£-Œ≤‚ÇÅ (syntacticTerm ‚ä¢t) ‚ä¢B ‚ä¢t ‚ä¢u PE.refl

opaque

  -- A variant of the equality rule Œ£-Œ≤‚ÇÅ.

  Œ£-Œ≤‚ÇÅ-‚â° :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£À¢-allowed p q ‚Üí
    Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚â° t ‚à∑ A
  Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok =
    subsetTerm (Œ£-Œ≤‚ÇÅ-‚áí ‚ä¢B ‚ä¢t ‚ä¢u ok)

opaque

  -- A variant of the reduction rule Œ£-Œ≤‚ÇÇ.

  Œ£-Œ≤‚ÇÇ-‚áí :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£À¢-allowed p q ‚Üí
    Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚áí u ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ
  Œ£-Œ≤‚ÇÇ-‚áí ‚ä¢B ‚ä¢t ‚ä¢u =
    Œ£-Œ≤‚ÇÇ (syntacticTerm ‚ä¢t) ‚ä¢B ‚ä¢t ‚ä¢u PE.refl

opaque

  -- A variant of the equality rule Œ£-Œ≤‚ÇÇ.

  Œ£-Œ≤‚ÇÇ-‚â° :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£À¢-allowed p q ‚Üí
    Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚â° u ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ
  Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok =
    subsetTerm (Œ£-Œ≤‚ÇÇ-‚áí ‚ä¢B ‚ä¢t ‚ä¢u ok)

opaque

  -- A variant of the reduction rule prodrec-Œ≤.

  prodrec-Œ≤-‚áí :
    Œì ‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚àô A ‚àô B ‚ä¢ v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œ£ ∑-allowed p q‚Ä≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C (prod ∑ p t u) v ‚áí v [ t ‚à£ u ] ‚à∑
      C [ prod ∑ p t u ]‚ÇÄ
  prodrec-Œ≤-‚áí ‚ä¢C ‚ä¢t ‚ä¢u ‚ä¢v ok =
    case wf ‚ä¢C of Œª {
      (_ ‚àô ‚ä¢Œ£AB) ‚Üí
    case inversion-Œ†Œ£ ‚ä¢Œ£AB of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    prodrec-Œ≤ ‚ä¢A ‚ä¢B ‚ä¢C ‚ä¢t ‚ä¢u ‚ä¢v PE.refl ok }}

opaque

  -- A variant of the equality rule prodrec-Œ≤.

  prodrec-Œ≤-‚â° :
    Œì ‚àô (Œ£ ∑ p , q‚Ä≤ ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚àô A ‚àô B ‚ä¢ v ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
    Œ£ ∑-allowed p q‚Ä≤ ‚Üí
    Œì ‚ä¢ prodrec r p q C (prod ∑ p t u) v ‚â° v [ t ‚à£ u ] ‚à∑
      C [ prod ∑ p t u ]‚ÇÄ
  prodrec-Œ≤-‚â° ‚ä¢C ‚ä¢t ‚ä¢u ‚ä¢v ok =
    subsetTerm (prodrec-Œ≤-‚áí ‚ä¢C ‚ä¢t ‚ä¢u ‚ä¢v ok)

opaque

  -- A variant of Œ£-Œ∑.

  Œ£-Œ∑‚Ä≤ :
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst p t ‚â° fst p u ‚à∑ A ‚Üí
    Œì ‚ä¢ snd p t ‚â° snd p u ‚à∑ B [ fst p t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ t ‚â° u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  Œ£-Œ∑‚Ä≤ ‚ä¢t =
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
      (‚ä¢A , ‚ä¢B , _) ‚Üí
    Œ£-Œ∑ ‚ä¢A ‚ä¢B ‚ä¢t }

-- An Œ∑-rule for strong Œ£-types.

Œ£-Œ∑-prod-fst-snd :
  Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  Œì ‚ä¢ prodÀ¢ p (fst p t) (snd p t) ‚â° t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
Œ£-Œ∑-prod-fst-snd ‚ä¢t = Œ£-Œ∑‚Ä≤
  (‚ä¢prod ‚ä¢B ‚ä¢fst ‚ä¢snd ok)
  ‚ä¢t
  (Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢fst ‚ä¢snd ok)
  (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢fst ‚ä¢snd ok)
  where
  ‚ä¢B,ok = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) .proj‚ÇÇ
  ‚ä¢B    = ‚ä¢B,ok .proj‚ÇÅ
  ok    = ‚ä¢B,ok .proj‚ÇÇ
  ‚ä¢fst  = fst‚±º‚Ä≤ ‚ä¢t
  ‚ä¢snd  = snd‚±º‚Ä≤ ‚ä¢t

-- An "inverse" of prod-cong for Œ£À¢.

prod-cong‚Åª¬π-Œ£À¢ :
  Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£À¢-allowed p q
prod-cong‚Åª¬π-Œ£À¢
  {Œì = Œì} {p = p} {t = t} {u = u} {v = v} {w = w}
  {q = q} {A = A} {B = B} prod‚â°prod =
  ‚ä¢B , t‚â°v , u‚â°w , ok
  where
  ‚ä¢Œ£AB = syntacticEqTerm prod‚â°prod .proj‚ÇÅ
  ‚ä¢B   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÅ
  ok   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢t,u = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢t   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÅ
  ‚ä¢u   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢v,w = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢v   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÅ
  ‚ä¢w   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÇ .proj‚ÇÅ

  fst-t,u‚â°t = Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok

  t‚â°v =                                                $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B   ‚Üí‚ü® fst-cong‚Ä≤ ‚ü©
    Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚â° fst p (prodÀ¢ p v w) ‚à∑ A  ‚Üí‚ü® (Œª hyp ‚Üí trans (sym fst-t,u‚â°t) (trans hyp (Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok))) ‚ü©
    Œì ‚ä¢ t ‚â° v ‚à∑ A                                      ‚ñ°

  u‚â°w =                                               $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prodÀ¢ p t u ‚â° prodÀ¢ p v w ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B  ‚Üí‚ü® snd-cong‚Ä≤ ‚ü©

    Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚â° snd p (prodÀ¢ p v w) ‚à∑
      B [ fst p (prodÀ¢ p t u) ]‚ÇÄ                       ‚Üí‚ü® (Œª hyp ‚Üí trans
                                                            (sym (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok))
                                                               (trans hyp
                                                                  (conv (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok)
                                                                     (substTypeEq (refl ‚ä¢B)
                                                                        (fst-cong‚Ä≤ (sym prod‚â°prod)))))) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ             ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.conv (substTypeEq (refl ‚ä¢B) fst-t,u‚â°t) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ                               ‚ñ°

------------------------------------------------------------------------
-- An investigation of to what degree weak Œ£-types can emulate strong
-- Œ£-types, and vice versa

-- The rest of this module, down to "More derived rules", consists of
-- (parts of) an investigation of to what degree weak Œ£-types can
-- emulate strong Œ£-types, and vice versa. This investigation was
-- prompted by a question asked by an anonymous reviewer. See also
-- Definition.Untyped.Sigma, which contains some basic definitions,
-- and Graded.Derived.Sigma, which contains properties related to
-- usage. This module contains properties related to typing.

------------------------------------------------------------------------
-- Typing and equality rules for prodrecÀ¢

private

  -- A lemma used below.

  ‚ä¢[1,0]‚Üë¬≤[fst,snd]‚â° :
    Œì ‚àô (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢
      C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ [ fst p t ‚à£ snd p t ] ‚â°
      C [ t ]‚ÇÄ
  ‚ä¢[1,0]‚Üë¬≤[fst,snd]‚â°
    {Œì = Œì} {p = p} {q = q} {A = A} {B = B} {C = C} {t = t} ‚ä¢C =
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B                                     ‚Üí‚ü® Œ£-Œ∑-prod-fst-snd ‚ü©

    Œì ‚ä¢ prodÀ¢ p (fst p t) (snd p t) ‚â° t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B       ‚Üí‚ü® substTypeEq (refl ‚ä¢C) ‚ü©

    Œì ‚ä¢ C [ prodÀ¢ p (fst p t) (snd p t) ]‚ÇÄ ‚â° C [ t ]‚ÇÄ              ‚Üí‚ü® PE.subst (_ ‚ä¢_‚â° _) (PE.sym $ [1,0]‚Üë¬≤[,] C) ‚ü©

    Œì ‚ä¢
      C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ [ fst p t ‚à£ snd p t ] ‚â°
      C [ t ]‚ÇÄ                                                    ‚ñ°

-- A typing rule for prodrecÀ¢.

prodrecÀ¢‚±º :
  Œì ‚àô (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
  Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  Œì ‚àô A ‚àô B ‚ä¢ u ‚à∑ C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
  Œì ‚ä¢ prodrecÀ¢ p t u ‚à∑ C [ t ]‚ÇÄ
prodrecÀ¢‚±º
  {Œì = Œì} {p = p} {q = q} {A = A} {B = B} {C = C} {t = t} {u = u}
  ‚ä¢C ‚ä¢t ‚ä¢u =                                                 $‚ü® fst‚±º‚Ä≤ ‚ä¢t , snd‚±º‚Ä≤ ‚ä¢t ‚ü©
  Œì ‚ä¢ fst p t ‚à∑ A √ó
  Œì ‚ä¢ snd p t ‚à∑ B [ fst p t ]‚ÇÄ                                ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí
                                                                   PE.subst (_ ‚ä¢ _ ‚à∑_) (PE.sym (subst-id _)) hyp‚ÇÅ , hyp‚ÇÇ) ‚ü©
  Œì ‚ä¢ fst p t ‚à∑ A [ idSubst ] √ó
  Œì ‚ä¢ snd p t ‚à∑ B [ fst p t ]‚ÇÄ                                ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí (idSubst‚Ä≤ ‚ä¢Œì , hyp‚ÇÅ) , hyp‚ÇÇ) ‚ü©

  Œì ‚ä¢À¢
    consSubst (consSubst idSubst (fst p t)) (snd p t) ‚à∑
    Œì ‚àô A ‚àô B                                                ‚Üí‚ü® flip (substitutionTerm ‚ä¢u) ‚ä¢Œì ‚ü©

  Œì ‚ä¢
    prodrecÀ¢ p t u ‚à∑
    C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ [ fst p t ‚à£ snd p t ]  ‚Üí‚ü® flip conv (‚ä¢[1,0]‚Üë¬≤[fst,snd]‚â° ‚ä¢C ‚ä¢t) ‚ü©

  Œì ‚ä¢ prodrecÀ¢ p t u ‚à∑ C [ t ]‚ÇÄ                               ‚ñ°
  where
  ‚ä¢Œì = wfTerm ‚ä¢t

-- An equality rule for prodrecÀ¢.

prodrecÀ¢-Œ≤ :
  Œì ‚ä¢ t ‚à∑ A ‚Üí
  Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
  Œì ‚àô A ‚àô B ‚ä¢ v ‚à∑ C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
  Œ£À¢-allowed p q ‚Üí
  Œì ‚ä¢ prodrecÀ¢ p (prodÀ¢ p t u) v ‚â° v [ t ‚à£ u ] ‚à∑ C [ prodÀ¢ p t u ]‚ÇÄ
prodrecÀ¢-Œ≤
  {Œì = Œì} {t = t} {A = A} {u = u} {B = B} {v = v} {C = C} {p = p}
  ‚ä¢t ‚ä¢u ‚ä¢v ok =                                                     $‚ü® Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok
                                                                     , Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok
                                                                     ‚ü©
  Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚â° t ‚à∑ A √ó
  Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚â° u ‚à∑ B [ fst p (prodÀ¢ p t u) ]‚ÇÄ           ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí
                                                                            PE.subst (_ ‚ä¢ _ ‚â° _ ‚à∑_) (PE.sym $ subst-id _) hyp‚ÇÅ
                                                                          , conv hyp‚ÇÇ (substTypeEq (refl ‚ä¢B) hyp‚ÇÅ)) ‚ü©
  Œì ‚ä¢ fst p (prodÀ¢ p t u) ‚â° t ‚à∑ A [ idSubst ] √ó
  Œì ‚ä¢ snd p (prodÀ¢ p t u) ‚â° u ‚à∑ B [ t ]‚ÇÄ                             ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí
                                                                          (substRefl (idSubst‚Ä≤ ‚ä¢Œì) , sym hyp‚ÇÅ) , sym hyp‚ÇÇ) ‚ü©
  Œì ‚ä¢À¢
    consSubst (consSubst idSubst t) u ‚â°
    consSubst (consSubst idSubst (fst p (prodÀ¢ p t u)))
      (snd p (prodÀ¢ p t u)) ‚à∑
    Œì ‚àô A ‚àô B                                                       ‚Üí‚ü® flip (substitutionEqTerm (refl ‚ä¢v)) ‚ä¢Œì ‚ü©

  Œì ‚ä¢
    v [ t ‚à£ u ] ‚â°
    prodrecÀ¢ p (prodÀ¢ p t u) v ‚à∑
    C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ [ t ‚à£ u ]                     ‚Üí‚ü® PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) ([1,0]‚Üë¬≤[,] C) ‚àò‚Üí sym ‚ü©

  Œì ‚ä¢ prodrecÀ¢ p (prodÀ¢ p t u) v ‚â° v [ t ‚à£ u ] ‚à∑ C [ prodÀ¢ p t u ]‚ÇÄ  ‚ñ°
  where
  ‚ä¢Œì = wfTerm ‚ä¢t
  ‚ä¢B = case wfTerm ‚ä¢v of Œª where
         (_ ‚àô _ ‚àô ‚ä¢B) ‚Üí ‚ä¢B

-- Another equality rule for prodrecÀ¢.

prodrecÀ¢-cong :
  Œì ‚àô (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
  Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  Œì ‚àô A ‚àô B ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
  Œì ‚ä¢ prodrecÀ¢ p t‚ÇÅ u‚ÇÅ ‚â° prodrecÀ¢ p t‚ÇÇ u‚ÇÇ ‚à∑ C [ t‚ÇÅ ]‚ÇÄ
prodrecÀ¢-cong
  {Œì = Œì} {p = p} {q = q} {A = A} {B = B} {C = C} {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ}
  {u‚ÇÅ = u‚ÇÅ} {u‚ÇÇ = u‚ÇÇ} ‚ä¢C t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =                         $‚ü® fst-cong‚Ä≤ t‚ÇÅ‚â°t‚ÇÇ , snd-cong‚Ä≤ t‚ÇÅ‚â°t‚ÇÇ ‚ü©
  Œì ‚ä¢ fst p t‚ÇÅ ‚â° fst p t‚ÇÇ ‚à∑ A √ó
  Œì ‚ä¢ snd p t‚ÇÅ ‚â° snd p t‚ÇÇ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ                     ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí
                                                                     PE.subst (_ ‚ä¢ _ ‚â° _ ‚à∑_) (PE.sym (subst-id _)) hyp‚ÇÅ , hyp‚ÇÇ) ‚ü©
  Œì ‚ä¢ fst p t‚ÇÅ ‚â° fst p t‚ÇÇ ‚à∑ A [ idSubst ] √ó
  Œì ‚ä¢ snd p t‚ÇÅ ‚â° snd p t‚ÇÇ ‚à∑ B [ fst p t‚ÇÅ ]‚ÇÄ                     ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí (substRefl (idSubst‚Ä≤ ‚ä¢Œì) , hyp‚ÇÅ) , hyp‚ÇÇ) ‚ü©

  Œì ‚ä¢À¢
    consSubst (consSubst idSubst (fst p t‚ÇÅ)) (snd p t‚ÇÅ) ‚â°
    consSubst (consSubst idSubst (fst p t‚ÇÇ)) (snd p t‚ÇÇ) ‚à∑
    Œì ‚àô A ‚àô B                                                   ‚Üí‚ü® flip (substitutionEqTerm u‚ÇÅ‚â°u‚ÇÇ) ‚ä¢Œì ‚ü©

  Œì ‚ä¢
    prodrecÀ¢ p t‚ÇÅ u‚ÇÅ ‚â°
    prodrecÀ¢ p t‚ÇÇ u‚ÇÇ ‚à∑
    C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ [ fst p t‚ÇÅ ‚à£ snd p t‚ÇÅ ]   ‚Üí‚ü® flip conv (‚ä¢[1,0]‚Üë¬≤[fst,snd]‚â° ‚ä¢C ‚ä¢t‚ÇÅ) ‚ü©

  Œì ‚ä¢ prodrecÀ¢ p t‚ÇÅ u‚ÇÅ ‚â° prodrecÀ¢ p t‚ÇÇ u‚ÇÇ ‚à∑ C [ t‚ÇÅ ]‚ÇÄ           ‚ñ°
  where
  ‚ä¢Œì  = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ
  ‚ä¢t‚ÇÅ = syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ

-- This module does not contain proofs of any reduction rules for
-- prodrecÀ¢. One might have hoped that the following rules should
-- hold:
--
--   Œì ‚àô (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
--   Œì ‚ä¢ t ‚à∑ A ‚Üí
--   Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
--   Œì ‚àô A ‚àô B ‚ä¢ v ‚à∑ C [ prodÀ¢ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
--   Œì ‚ä¢ prodrecÀ¢ p (prodÀ¢ p t u) v ‚áí v [ t ‚à£ u ] ‚à∑ C [ prodÀ¢ p t u ]‚ÇÄ
--
--   Œì ‚àô (Œ£À¢ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ C ‚Üí
--   Œì ‚àô A ‚àô B ‚ä¢ u ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ ‚Üí
--   Œì ‚ä¢ t‚ÇÅ ‚áí t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
--   Œì ‚ä¢ prodrecÀ¢ p t‚ÇÅ u ‚áí prodrecÀ¢ p t‚ÇÇ u ‚à∑ C [ t‚ÇÅ ]‚ÇÄ
--
-- However, the reduction relation only allows reduction in certain
-- places in terms. For instance, it does not include reduction under
-- lambdas. Thus it seems unlikely that the rules above can be proved
-- (but there is no formal proof of this in this module).

------------------------------------------------------------------------
-- The first and second projections for weak Œ£-types

-- The projections are defined using some extra quantities r‚Ä≤ and¬†q‚Ä≤.

module Fst ∑-snd ∑ (r‚Ä≤ q‚Ä≤ : M) where

  open Sigma.Fst ∑-snd ∑ r‚Ä≤ q‚Ä≤ public

  ----------------------------------------------------------------------
  -- Some private lemmas related to wk1 and wk1Subst

  private

    -- Some lemmas used below.

    ‚ä¢wk1 :
      Œì ‚ä¢ A ‚Üí
      Œì ‚ä¢ B ‚Üí
      Œì ‚àô A ‚ä¢ wk1 B
    ‚ä¢wk1 ‚ä¢A = W.wk (step id) (wf ‚ä¢A ‚àô ‚ä¢A)

    Œ£‚ä¢wk1 :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œ£ ∑-allowed p q ‚Üí
      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ wk1 A
    Œ£‚ä¢wk1 ‚ä¢B ok = ‚ä¢wk1 (Œ†Œ£‚±º‚Ä≤ ‚ä¢B ok) ‚ä¢A
      where
      ‚ä¢A = case wf ‚ä¢B of Œª where
             (_ ‚àô ‚ä¢A) ‚Üí ‚ä¢A

    ‚ä¢wk1-wk1 :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A)
    ‚ä¢wk1-wk1 ‚ä¢B = W.wk (step id) ‚ä¢ŒìAB (W.wk (step id) ‚ä¢ŒìA ‚ä¢A)
      where
      ‚ä¢ŒìA  = wf ‚ä¢B
      ‚ä¢A   = case ‚ä¢ŒìA of Œª where
               (_ ‚àô ‚ä¢A) ‚Üí ‚ä¢A
      ‚ä¢ŒìAB = ‚ä¢ŒìA ‚àô ‚ä¢B

    ‚ä¢wk1[]‚â° :
      Œì ‚ä¢ A ‚Üí
      Œì ‚ä¢ wk1 A [ t ]‚ÇÄ ‚â° A
    ‚ä¢wk1[]‚â° {Œì = Œì} {A = A} {t = t} =
      Œì ‚ä¢ A                  ‚Üí‚ü® refl ‚ü©
      (Œì ‚ä¢ A ‚â° A)            ‚Üí‚ü® PE.subst (_ ‚ä¢_‚â° _) (PE.sym (wk1-sgSubst _ _)) ‚ü©
      (Œì ‚ä¢ wk1 A [ t ]‚ÇÄ ‚â° A)  ‚ñ°

    ‚ä¢wk1‚â° :
      Œì ‚ä¢ A ‚Üí
      Œì ‚ä¢ B ‚Üí
      Œì ‚àô A ‚ä¢ wk1 B ‚â° B [ wk1Subst idSubst ]
    ‚ä¢wk1‚â° {Œì = Œì} {A = A} {B = B} ‚ä¢A =
      Œì ‚ä¢ B                                         ‚Üí‚ü® ‚ä¢wk1 ‚ä¢A ‚ü©
      Œì ‚àô A ‚ä¢ wk1 B                                 ‚Üí‚ü® refl ‚ü©
      (Œì ‚àô A ‚ä¢ wk1 B ‚â° wk1 B)                       ‚Üí‚ü® PE.subst‚ÇÇ (_ ‚ä¢_‚â°_) PE.refl lemma ‚ü©
      (Œì ‚àô A ‚ä¢ wk1 B ‚â° B [ wk1Subst idSubst ])  ‚ñ°
      where
      open Tools.Reasoning.PropositionalEquality

      lemma =
        wk1 B                    ‚â°‚ü® wk‚â°subst _ _ ‚ü©
        B [ toSubst (step id) ]  ‚â°‚ü®‚ü©
        B [ wk1Subst idSubst ]   ‚àé

    ‚ä¢wk1-wk1‚â° :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A) ‚â° A [ wk1Subst (wk1Subst idSubst) ]
    ‚ä¢wk1-wk1‚â° {Œì = Œì} {A = A} {B = B} =
      Œì ‚àô A ‚ä¢ B                                                      ‚Üí‚ü® ‚ä¢wk1-wk1 ‚ü©
      Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A)                                        ‚Üí‚ü® refl ‚ü©
      (Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A) ‚â° wk1 (wk1 A))                        ‚Üí‚ü® PE.subst‚ÇÇ (_ ‚ä¢_‚â°_) PE.refl lemma ‚ü©
      (Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A) ‚â° A [ wk1Subst (wk1Subst idSubst) ])  ‚ñ°
      where
      open Tools.Reasoning.PropositionalEquality

      lemma =
        wk1 (wk1 A)                        ‚â°‚ü® wk1-wk _ _ ‚ü©
        U.wk (step (step id)) A            ‚â°‚ü® wk‚â°subst _ _ ‚ü©
        A [ toSubst (step (step id)) ]     ‚â°‚ü®‚ü©
        A [ wk1Subst (wk1Subst idSubst) ]  ‚àé

    ‚ä¢À¢wk1Subst-idSubst :
      Œì ‚ä¢ A ‚Üí
      Œì ‚àô A ‚ä¢À¢ wk1Subst idSubst ‚à∑ Œì
    ‚ä¢À¢wk1Subst-idSubst {Œì = Œì} {A = A} ‚ä¢A =
                                     $‚ü® idSubst‚Ä≤ ‚ä¢Œì ‚ü©
      Œì ‚ä¢À¢ idSubst ‚à∑ Œì               ‚Üí‚ü® wk1Subst‚Ä≤ ‚ä¢Œì ‚ä¢Œì ‚ä¢A ‚ü©
      Œì ‚àô A ‚ä¢À¢ wk1Subst idSubst ‚à∑ Œì  ‚ñ°
      where
      ‚ä¢Œì = wf ‚ä¢A

    ‚ä¢À¢wk1Subst-wk1Subst-idSubst :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢À¢ wk1Subst (wk1Subst idSubst) ‚à∑ Œì
    ‚ä¢À¢wk1Subst-wk1Subst-idSubst {Œì = Œì} {A = A} {B = B} ‚ä¢B =
      case ‚ä¢ŒìA of Œª { (‚ä¢Œì ‚àô ‚ä¢A) ‚Üí
                                                    $‚ü® ‚ä¢À¢wk1Subst-idSubst ‚ä¢A ‚ü©
      Œì ‚àô A ‚ä¢À¢ wk1Subst idSubst ‚à∑ Œì                 ‚Üí‚ü® wk1Subst‚Ä≤ ‚ä¢Œì ‚ä¢ŒìA ‚ä¢B ‚ü©
      Œì ‚àô A ‚àô B ‚ä¢À¢ wk1Subst (wk1Subst idSubst) ‚à∑ Œì  ‚ñ° }
      where
      ‚ä¢ŒìA = wf ‚ä¢B

  ----------------------------------------------------------------------
  -- Typing rules for fst ∑

  private

    -- A lemma used below.

    1‚à∑wk1[1,0] :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤
    1‚à∑wk1[1,0] {Œì = Œì} {A = A} {B = B} {p = p} ‚ä¢B =                      $‚ü® ‚ä¢B ‚ü©
      Œì ‚àô A ‚ä¢ B                                                          ‚Üí‚ü® ‚ä¢wk1-wk1 ‚ü©
      Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A)                                            ‚Üí‚ü® refl ‚ü©
      (Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A) ‚â° wk1 (wk1 A))                            ‚Üí‚ü® PE.subst (_‚ä¢_‚â°_ _ _) (PE.sym wk1-[]‚Üë¬≤) ‚ü©
      (Œì ‚àô A ‚àô B ‚ä¢ wk1 (wk1 A) ‚â° wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤)  ‚Üí‚ü® conv (var (wf ‚ä¢B ‚àô ‚ä¢B) (there here)) ‚ü©
      (Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤)       ‚ñ°

  -- A typing rule for fst ∑.

  fst ∑‚±º :
    Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst ∑ p A t ‚à∑ A
  fst ∑‚±º {Œì = Œì} {t = t} {p = p} {q = q} {A = A} {B = B} ‚ä¢t =    $‚ü® Œ£‚ä¢wk1 ‚ä¢B ok , 1‚à∑wk1[1,0] ‚ä¢B ‚ü©
    (Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ wk1 A) √ó
    Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí prodrec‚±º‚Ä≤ hyp‚ÇÅ ‚ä¢t hyp‚ÇÇ) ‚ü©

    Œì ‚ä¢ fst ∑ p A t ‚à∑ wk1 A [ t ]‚ÇÄ                                ‚Üí‚ü® flip conv (‚ä¢wk1[]‚â° ‚ä¢A) ‚ü©

    Œì ‚ä¢ fst ∑ p A t ‚à∑ A                                          ‚ñ°
    where
    ‚ä¢A,‚ä¢B,ok = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t)
    ‚ä¢A       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÅ
    ‚ä¢B       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÇ .proj‚ÇÅ
    ok       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÇ .proj‚ÇÇ

  -- A reduction rule for fst ∑.

  fst ∑-Œ≤-‚áí :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚áí t ‚à∑ A
  fst ∑-Œ≤-‚áí
    {Œì = Œì} {A = A} {B = B} {t = t} {u = u} {p = p} {q = q}
    ‚ä¢B ‚ä¢t ‚ä¢u ok =                                                $‚ü® Œ£‚ä¢wk1 ‚ä¢B ok , 1‚à∑wk1[1,0] ‚ä¢B ‚ü©
    (Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ wk1 A) √ó
    Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤   ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí prodrec-Œ≤-‚áí hyp‚ÇÅ ‚ä¢t ‚ä¢u hyp‚ÇÇ ok) ‚ü©

    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚áí t ‚à∑ wk1 A [ prod ∑ p t u ]‚ÇÄ      ‚Üí‚ü® flip conv (‚ä¢wk1[]‚â° ‚ä¢A) ‚ü©

    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚áí t ‚à∑ A                           ‚ñ°
    where
    ‚ä¢A = syntacticTerm ‚ä¢t

  -- Another reduction rule for fst ∑.

  fst ∑-subst :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚áí t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst ∑ p A t‚ÇÅ ‚áí fst ∑ p A t‚ÇÇ ‚à∑ A
  fst ∑-subst
    {Œì = Œì} {A = A} {B = B} {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ} {p = p} {q = q}
    ‚ä¢B t‚ÇÅ‚áít‚ÇÇ =                                                   $‚ü® Œ£‚ä¢wk1 ‚ä¢B ok , 1‚à∑wk1[1,0] ‚ä¢B ‚ü©
    (Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ wk1 A) √ó
    Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 A [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤   ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí prodrec-subst‚Ä≤ hyp‚ÇÅ hyp‚ÇÇ t‚ÇÅ‚áít‚ÇÇ ok) ‚ü©

    Œì ‚ä¢ fst ∑ p A t‚ÇÅ ‚áí fst ∑ p A t‚ÇÇ ‚à∑ wk1 A [ t‚ÇÅ ]‚ÇÄ                ‚Üí‚ü® flip conv (‚ä¢wk1[]‚â° ‚ä¢A) ‚ü©

    Œì ‚ä¢ fst ∑ p A t‚ÇÅ ‚áí fst ∑ p A t‚ÇÇ ‚à∑ A                            ‚ñ°
    where
    ‚ä¢A = case wf ‚ä¢B of Œª where
           (_ ‚àô ‚ä¢A) ‚Üí ‚ä¢A
    ok = ‚ä¢‚à∑Œ†Œ£‚ÜíŒ†Œ£-allowed $
         syntacticRedTerm (redMany t‚ÇÅ‚áít‚ÇÇ) .proj‚ÇÇ .proj‚ÇÅ

  -- An equality rule for fst ∑.

  fst ∑-Œ≤-‚â° :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚â° t ‚à∑ A
  fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok = subsetTerm (fst ∑-Œ≤-‚áí ‚ä¢B ‚ä¢t ‚ä¢u ok)

  -- Another equality rule for fst ∑.

  fst ∑-cong :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚Üí
    Œì ‚ä¢ fst ∑ p A‚ÇÅ t‚ÇÅ ‚â° fst ∑ p A‚ÇÇ t‚ÇÇ ‚à∑ A‚ÇÅ
  fst ∑-cong
    {Œì = Œì} {A‚ÇÅ = A‚ÇÅ} {A‚ÇÇ = A‚ÇÇ} {B‚ÇÅ = B‚ÇÅ} {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ}
    {p = p} {q = q} A‚ÇÅ‚â°A‚ÇÇ ‚ä¢B‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ =                              $‚ü® W.wkEq (step id) (wfEq A‚ÇÅ‚â°A‚ÇÇ ‚àô Œ†Œ£‚±º‚Ä≤ ‚ä¢B‚ÇÅ ok) A‚ÇÅ‚â°A‚ÇÇ
                                                                    , 1‚à∑wk1[1,0] ‚ä¢B‚ÇÅ
                                                                    ‚ü©
    (Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢ wk1 A‚ÇÅ ‚â° wk1 A‚ÇÇ) √ó
    Œì ‚àô A‚ÇÅ ‚àô B‚ÇÅ ‚ä¢ var x1 ‚à∑ wk1 A‚ÇÅ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚Üí‚ü® (Œª (hyp‚ÇÅ , hyp‚ÇÇ) ‚Üí prodrec-cong‚Ä≤ hyp‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ (refl hyp‚ÇÇ)) ‚ü©

    Œì ‚ä¢ fst ∑ p A‚ÇÅ t‚ÇÅ ‚â° fst ∑ p A‚ÇÇ t‚ÇÇ ‚à∑ wk1 A‚ÇÅ [ t‚ÇÅ ]‚ÇÄ               ‚Üí‚ü® flip conv (‚ä¢wk1[]‚â° ‚ä¢A‚ÇÅ) ‚ü©

    Œì ‚ä¢ fst ∑ p A‚ÇÅ t‚ÇÅ ‚â° fst ∑ p A‚ÇÇ t‚ÇÇ ‚à∑ A‚ÇÅ                           ‚ñ°
    where
    ‚ä¢A‚ÇÅ = syntacticEq A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ
    ok  = ‚ä¢‚à∑Œ†Œ£‚ÜíŒ†Œ£-allowed $
          syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ

  ----------------------------------------------------------------------
  -- Some private lemmas related to fst ∑

  private

    -- Some lemmas used below.

    fst ∑-0[] : fst ∑ p (wk1 A) (var x0) [ t ]‚ÇÄ PE.‚â° fst ∑ p A t
    fst ∑-0[] {A = A} {t = t} = PE.cong (Œª A ‚Üí prodrec _ _ _ A _ _) $
      wk1 (wk1 A) [ liftSubst (sgSubst t) ]  ‚â°‚ü® subst-wk (wk1 A) ‚ü©
      wk1 A [ wk1 ‚àò‚Üí sgSubst t ]             ‚â°‚ü® wk1-tail A ‚ü©
      A [ wk1Subst idSubst ]                 ‚â°Àò‚ü® wk‚â°subst _ _ ‚ü©
      wk1 A                                  ‚àé
      where
      open Tools.Reasoning.PropositionalEquality

    [fst ∑] :
      ‚àÄ B ‚Üí B [ fst ∑ p A t ]‚ÇÄ PE.‚â° B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t ]‚ÇÄ
    [fst ∑] {p = p} {A = A} {t = t} B =
      B [ fst ∑ p A t ]‚ÇÄ                                            ‚â°Àò‚ü® (flip substVar-to-subst B Œª where
                                                                          x0     ‚Üí fst ∑-0[]
                                                                          (_ +1) ‚Üí PE.refl) ‚ü©
      B [ sgSubst t ‚Çõ‚Ä¢‚Çõ
          consSubst (wk1Subst idSubst) (fst ∑ p (wk1 A) (var x0)) ] ‚â°Àò‚ü® substCompEq B ‚ü©

      B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t ]‚ÇÄ                        ‚àé
      where
      open Tools.Reasoning.PropositionalEquality

    ‚ä¢‚â°[fst ∑] :
      Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
      Œì ‚ä¢ B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t ]‚ÇÄ ‚â° B [ fst ∑ p A t ]‚ÇÄ
    ‚ä¢‚â°[fst ∑] {Œì = Œì} {t = t} {p = p} {A = A} {B = B} ‚ä¢t =              $‚ü® substitution ‚ä¢B (singleSubst (fst ∑‚±º ‚ä¢t)) ‚ä¢Œì ‚ü©
      Œì ‚ä¢ B [ fst ∑ p A t ]‚ÇÄ                                            ‚Üí‚ü® refl ‚ü©
      (Œì ‚ä¢ B [ fst ∑ p A t ]‚ÇÄ ‚â° B [ fst ∑ p A t ]‚ÇÄ)                      ‚Üí‚ü® PE.subst‚ÇÇ (_ ‚ä¢_‚â°_) ([fst ∑] B) PE.refl ‚ü©
      (Œì ‚ä¢ B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t ]‚ÇÄ ‚â° B [ fst ∑ p A t ]‚ÇÄ)  ‚ñ°
      where
      ‚ä¢Œì = wfTerm ‚ä¢t
      ‚ä¢B = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) .proj‚ÇÇ .proj‚ÇÅ

    [fst ∑-0]‚Üë[1,0]‚Üë¬≤ :
      ‚àÄ B ‚Üí
      B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤
        PE.‚â°
      B [ fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0)) ]‚Üë¬≤
    [fst ∑-0]‚Üë[1,0]‚Üë¬≤ {p = p} {A = A} B =
      B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚â°‚ü® substCompEq B ‚ü©

      B [ consSubst (wk1Subst (wk1Subst idSubst))
           (prod ∑ p (var x1) (var x0)) ‚Çõ‚Ä¢‚Çõ
         consSubst (wk1Subst idSubst) (fst ∑ p (wk1 A) (var x0)) ]     ‚â°‚ü® (flip substVar-to-subst B Œª where
                                                                            x0     ‚Üí PE.refl
                                                                            (_ +1) ‚Üí PE.refl) ‚ü©
      B [ prodrec r‚Ä≤ p q‚Ä≤
            (wk1 (wk1 A) [ liftSubst $
              consSubst (wk1Subst (wk1Subst idSubst)) $
              prod ∑ p (var x1) (var x0) ])
            (prod ∑ p (var x1) (var x0))
            (var x1) ]‚Üë¬≤                                              ‚â°‚ü® PE.cong (Œª A ‚Üí B [ prodrec _ _ _ A _ _ ]‚Üë¬≤) $
                                                                         PE.trans (wk1-tail (wk1 A)) $
                                                                         wk1-tail A ‚ü©
      B [ prodrec r‚Ä≤ p q‚Ä≤
            (A [ wk1Subst (wk1Subst (wk1Subst idSubst)) ])
            (prod ∑ p (var x1) (var x0))
            (var x1) ]‚Üë¬≤                                              ‚â°Àò‚ü® PE.cong (Œª A ‚Üí B [ prodrec _ _ _ A _ _ ]‚Üë¬≤) $
                                                                          PE.trans (PE.cong (_[ _ ]) $ substCompEq A) $
                                                                          substCompEq A ‚ü©
      B [ prodrec r‚Ä≤ p q‚Ä≤
            (_[ wk1Subst idSubst ] $
             _[ wk1Subst idSubst ] $
             A [ wk1Subst idSubst ])
            (prod ∑ p (var x1) (var x0))
            (var x1) ]‚Üë¬≤                                              ‚â°Àò‚ü® PE.cong (Œª A ‚Üí B [ prodrec _ _ _ A _ _ ]‚Üë¬≤) $
                                                                          PE.trans (wk‚â°subst _ _) $
                                                                          PE.trans (PE.cong (_[ _ ]) $ wk‚â°subst _ (wk1 A)) $
                                                                          PE.cong (_[ _ ]) $ PE.cong (_[ _ ]) $ wk‚â°subst _ A ‚ü©
      B [ fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0)) ]‚Üë¬≤        ‚àé
      where
      open Tools.Reasoning.PropositionalEquality

    ‚ä¢‚â°[fst ∑-0]‚Üë[1,0]‚Üë¬≤ :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œ£ ∑-allowed p q ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢
        wk1 B ‚â°
        B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤
    ‚ä¢‚â°[fst ∑-0]‚Üë[1,0]‚Üë¬≤ {Œì = Œì} {A = A} {B = B} {p = p} ‚ä¢B ok =          $‚ü® substRefl (‚ä¢À¢wk1Subst-wk1Subst-idSubst ‚ä¢B) , lemma ‚ü©
      Œì ‚àô A ‚àô B ‚ä¢À¢
        consSubst (wk1Subst (wk1Subst idSubst)) (var x1) ‚â°
        consSubst (wk1Subst (wk1Subst idSubst))
          (fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0))) ‚à∑
        Œì ‚àô A                                                           ‚Üí‚ü® flip (substitutionEq (refl ‚ä¢B)) ‚ä¢ŒìAB ‚ü©

      Œì ‚àô A ‚àô B ‚ä¢
        B [ var x1 ]‚Üë¬≤ ‚â°
        B [ fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0)) ]‚Üë¬≤        ‚Üí‚ü® PE.subst‚ÇÇ (_ ‚ä¢_‚â°_) [1]‚Üë¬≤ (PE.sym $ [fst ∑-0]‚Üë[1,0]‚Üë¬≤ B) ‚ü©

      Œì ‚àô A ‚àô B ‚ä¢
        wk1 B ‚â°
        B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚ñ°
      where
      ‚ä¢ŒìAB = wf ‚ä¢B ‚àô ‚ä¢B

      lemma =                                                  $‚ü® ‚ä¢wk1 ‚ä¢B ‚ä¢B ‚ü©

        (Œì ‚àô A ‚àô B ‚ä¢ wk1 B)                                    ‚Üí‚ü® refl ‚ü©

        Œì ‚àô A ‚àô B ‚ä¢ wk1 B ‚â° wk1 B                              ‚Üí‚ü® PE.subst‚ÇÇ (_ ‚ä¢_‚â°_) PE.refl (PE.sym (wk1-sgSubst (wk1 B) _)) ‚ü©

        Œì ‚àô A ‚àô B ‚ä¢ wk1 B ‚â° wk1 (wk1 B) [ var x1 ]‚ÇÄ            ‚Üí‚ü® conv (var ‚ä¢ŒìAB here) ‚ü©

        (Œì ‚àô A ‚àô B ‚ä¢ var x0 ‚à∑ wk1 (wk1 B) [ var x1 ]‚ÇÄ)         ‚Üí‚ü® (Œª ‚ä¢0 ‚Üí ‚ä¢wk1-wk1 (‚ä¢wk1-wk1 ‚ä¢B) , var ‚ä¢ŒìAB (there here) , ‚ä¢0) ‚ü©

        (Œì ‚àô A ‚àô B ‚àô wk1 (wk1 A) ‚ä¢ wk1 (wk1 B)) √ó
        (Œì ‚àô A ‚àô B ‚ä¢ var x1 ‚à∑ wk1 (wk1 A)) √ó
        (Œì ‚àô A ‚àô B ‚ä¢ var x0 ‚à∑ wk1 (wk1 B) [ var x1 ]‚ÇÄ)         ‚Üí‚ü® (Œª (‚ä¢B , ‚ä¢1 , ‚ä¢0) ‚Üí fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢1 ‚ä¢0 ok) ‚ü©

        (Œì ‚àô A ‚àô B ‚ä¢
           fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0)) ‚â°
           var x1 ‚à∑
           wk1 (wk1 A))                                        ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.conv (‚ä¢wk1-wk1‚â° ‚ä¢B) ‚àò‚Üí _‚ä¢_‚â°_‚à∑_.sym ‚ü©

        (Œì ‚àô A ‚àô B ‚ä¢
           var x1 ‚â°
           fst ∑ p (wk1 (wk1 A)) (prod ∑ p (var x1) (var x0)) ‚à∑
           A [ wk1Subst (wk1Subst idSubst) ])                  ‚ñ°

    ‚ä¢[fst ∑-0]‚Üë‚â°[fst ∑-0]‚Üë :
      Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
      Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
      Œ£ ∑-allowed p q ‚Üí
      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢
        B‚ÇÅ [ fst ∑ p (wk1 A‚ÇÅ) (var x0) ]‚Üë ‚â°
        B‚ÇÇ [ fst ∑ p (wk1 A‚ÇÇ) (var x0) ]‚Üë
    ‚ä¢[fst ∑-0]‚Üë‚â°[fst ∑-0]‚Üë
      {Œì = Œì} {A‚ÇÅ = A‚ÇÅ} {A‚ÇÇ = A‚ÇÇ} {B‚ÇÅ = B‚ÇÅ} {B‚ÇÇ = B‚ÇÇ} {p = p} {q = q}
      A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ ok =                                             $‚ü® refl (var ‚ä¢ŒìŒ£A‚ÇÅB‚ÇÅ here) ‚ü©
      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢
        var x0 ‚â°
        var x0 ‚à∑
        wk1 (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)                                   ‚Üí‚ü® fst ∑-cong
                                                                        (wkEq (step id) ‚ä¢ŒìŒ£A‚ÇÅB‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ)
                                                                        (W.wk (lift (step id)) (‚ä¢ŒìŒ£A‚ÇÅB‚ÇÅ ‚àô ‚ä¢wk1 ‚ä¢Œ£A‚ÇÅB‚ÇÅ ‚ä¢A‚ÇÅ) ‚ä¢B‚ÇÅ) ‚ü©
      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢
        fst ∑ p (wk1 A‚ÇÅ) (var x0) ‚â°
        fst ∑ p (wk1 A‚ÇÇ) (var x0) ‚à∑
        wk1 A‚ÇÅ                                                     ‚Üí‚ü® flip conv (‚ä¢wk1‚â° ‚ä¢Œ£A‚ÇÅB‚ÇÅ ‚ä¢A‚ÇÅ) ‚ü©

      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢
        fst ∑ p (wk1 A‚ÇÅ) (var x0) ‚â°
        fst ∑ p (wk1 A‚ÇÇ) (var x0) ‚à∑
        A‚ÇÅ [ wk1Subst idSubst ]                                    ‚Üí‚ü® substRefl (‚ä¢À¢wk1Subst-idSubst ‚ä¢Œ£A‚ÇÅB‚ÇÅ) ,_ ‚ü©

      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢À¢
        consSubst (wk1Subst idSubst) (fst ∑ p (wk1 A‚ÇÅ) (var x0)) ‚â°
        consSubst (wk1Subst idSubst) (fst ∑ p (wk1 A‚ÇÇ) (var x0)) ‚à∑
        Œì ‚àô A‚ÇÅ                                                     ‚Üí‚ü® flip (substitutionEq B‚ÇÅ‚â°B‚ÇÇ) ‚ä¢ŒìŒ£A‚ÇÅB‚ÇÅ ‚ü©

      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ) ‚ä¢
        B‚ÇÅ [ fst ∑ p (wk1 A‚ÇÅ) (var x0) ]‚Üë ‚â°
        B‚ÇÇ [ fst ∑ p (wk1 A‚ÇÇ) (var x0) ]‚Üë                           ‚ñ°
      where
      ‚ä¢A‚ÇÅ     = syntacticEq A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ
      ‚ä¢B‚ÇÅ     = syntacticEq B‚ÇÅ‚â°B‚ÇÇ .proj‚ÇÅ
      ‚ä¢Œ£A‚ÇÅB‚ÇÅ  = Œ†Œ£‚±º‚Ä≤ ‚ä¢B‚ÇÅ ok
      ‚ä¢ŒìŒ£A‚ÇÅB‚ÇÅ = wf ‚ä¢A‚ÇÅ ‚àô ‚ä¢Œ£A‚ÇÅB‚ÇÅ

    ‚ä¢[fst ∑-0]‚Üë :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œ£ ∑-allowed p q ‚Üí
      Œì ‚àô (Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B) ‚ä¢ B [ fst ∑ p (wk1 A) (var x0) ]‚Üë
    ‚ä¢[fst ∑-0]‚Üë ‚ä¢B ok =
      syntacticEq (‚ä¢[fst ∑-0]‚Üë‚â°[fst ∑-0]‚Üë (refl ‚ä¢A) (refl ‚ä¢B) ok) .proj‚ÇÅ
      where
      ‚ä¢A = case wf ‚ä¢B of Œª where
             (_ ‚àô ‚ä¢A) ‚Üí ‚ä¢A

    ‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ :
      Œì ‚àô A ‚ä¢ B ‚Üí
      Œ£ ∑-allowed p q ‚Üí
      Œì ‚àô A ‚àô B ‚ä¢
        var x0 ‚à∑
        B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤
    ‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ {Œì = Œì} {A = A} {B = B} {p = p} ‚ä¢B ok =
                                                                        $‚ü® var (wf ‚ä¢B ‚àô ‚ä¢B) here ‚ü©

      Œì ‚àô A ‚àô B ‚ä¢ var x0 ‚à∑ wk1 B                                        ‚Üí‚ü® flip conv (‚ä¢‚â°[fst ∑-0]‚Üë[1,0]‚Üë¬≤ ‚ä¢B ok) ‚ü©

      Œì ‚àô A ‚àô B ‚ä¢
        var x0 ‚à∑
        B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚ñ°

  ----------------------------------------------------------------------
  -- Typing rules for snd ∑

  -- A typing rule for snd ∑.

  snd ∑‚±º :
    Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ snd ∑ p q A B t ‚à∑ B [ fst ∑ p A t ]‚ÇÄ
  snd ∑‚±º {Œì = Œì} {t = t} {p = p} {q = q} {A = A} {B = B} ‚ä¢t =    $‚ü® prodrec‚±º ‚ä¢A ‚ä¢B (‚ä¢[fst ∑-0]‚Üë ‚ä¢B ok) ‚ä¢t
                                                                     (‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ ‚ä¢B ok) ok ‚ü©
    Œì ‚ä¢ snd ∑ p q A B t ‚à∑ B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t ]‚ÇÄ  ‚Üí‚ü® flip conv (‚ä¢‚â°[fst ∑] ‚ä¢t) ‚ü©
    Œì ‚ä¢ snd ∑ p q A B t ‚à∑ B [ fst ∑ p A t ]‚ÇÄ                      ‚ñ°
    where
    ‚ä¢A,‚ä¢B,ok = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t)
    ‚ä¢A       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÅ
    ‚ä¢B       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÇ .proj‚ÇÅ
    ok       = ‚ä¢A,‚ä¢B,ok .proj‚ÇÇ .proj‚ÇÇ

  -- A reduction rule for snd ∑.

  snd ∑-Œ≤-‚áí :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚áí u ‚à∑ B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ
  snd ∑-Œ≤-‚áí
    {Œì = Œì} {A = A} {B = B} {t = t} {u = u} {p = p} {q = q}
    ‚ä¢B ‚ä¢t ‚ä¢u ok =                                      $‚ü® prodrec-Œ≤ (syntacticTerm ‚ä¢t) ‚ä¢B (‚ä¢[fst ∑-0]‚Üë {q = q} ‚ä¢B ok)
                                                            ‚ä¢t ‚ä¢u (‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ ‚ä¢B ok) PE.refl ok ‚ü©
    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚áí u ‚à∑
      B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ prod ∑ p t u ]‚ÇÄ  ‚Üí‚ü® flip conv (‚ä¢‚â°[fst ∑] (‚ä¢prod ‚ä¢B ‚ä¢t ‚ä¢u ok)) ‚ü©

    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚áí u ‚à∑
      B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ                    ‚ñ°

  -- Another reduction rule for snd ∑.

  snd ∑-subst :
    Œì ‚ä¢ t‚ÇÅ ‚áí t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ snd ∑ p q A B t‚ÇÅ ‚áí snd ∑ p q A B t‚ÇÇ ‚à∑ B [ fst ∑ p A t‚ÇÅ ]‚ÇÄ
  snd ∑-subst
    {Œì = Œì} {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ} {p = p} {q = q} {A = A} {B = B} t‚ÇÅ‚áít‚ÇÇ =
                                              $‚ü® prodrec-subst‚Ä≤ (‚ä¢[fst ∑-0]‚Üë ‚ä¢B ok) (‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ ‚ä¢B ok) t‚ÇÅ‚áít‚ÇÇ ok ‚ü©
    Œì ‚ä¢ snd ∑ p q A B t‚ÇÅ ‚áí snd ∑ p q A B t‚ÇÇ ‚à∑
      B [ fst ∑ p (wk1 A) (var x0) ]‚Üë [ t‚ÇÅ ]‚ÇÄ  ‚Üí‚ü® flip conv (‚ä¢‚â°[fst ∑] ‚ä¢t‚ÇÅ) ‚ü©

    Œì ‚ä¢ snd ∑ p q A B t‚ÇÅ ‚áí snd ∑ p q A B t‚ÇÇ ‚à∑
      B [ fst ∑ p A t‚ÇÅ ]‚ÇÄ                      ‚ñ°
    where
    ‚ä¢t‚ÇÅ   = syntacticEqTerm (subsetTerm t‚ÇÅ‚áít‚ÇÇ) .proj‚ÇÇ .proj‚ÇÅ
    ‚ä¢B,ok = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t‚ÇÅ) .proj‚ÇÇ
    ‚ä¢B    = ‚ä¢B,ok .proj‚ÇÅ
    ok    = ‚ä¢B,ok .proj‚ÇÇ

  -- An equality rule for snd ∑.

  snd ∑-Œ≤-‚â° :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚â° u ‚à∑ B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ
  snd ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok = subsetTerm (snd ∑-Œ≤-‚áí ‚ä¢B ‚ä¢t ‚ä¢u ok)

  -- Another equality rule for snd ∑.

  snd ∑-cong :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ ‚Üí
    Œì ‚ä¢ snd ∑ p q A‚ÇÅ B‚ÇÅ t‚ÇÅ ‚â° snd ∑ p q A‚ÇÇ B‚ÇÇ t‚ÇÇ ‚à∑ B‚ÇÅ [ fst ∑ p A‚ÇÅ t‚ÇÅ ]‚ÇÄ
  snd ∑-cong
    {Œì = Œì} {A‚ÇÅ = A‚ÇÅ} {A‚ÇÇ = A‚ÇÇ} {B‚ÇÅ = B‚ÇÅ} {B‚ÇÇ = B‚ÇÇ} {t‚ÇÅ = t‚ÇÅ} {t‚ÇÇ = t‚ÇÇ}
    {p = p} {q = q} A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =           $‚ü® prodrec-cong‚Ä≤ (‚ä¢[fst ∑-0]‚Üë‚â°[fst ∑-0]‚Üë A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ ok)
                                                       t‚ÇÅ‚â°t‚ÇÇ (refl (‚ä¢0‚à∑[fst ∑-0]‚Üë[1,0]‚Üë¬≤ ‚ä¢B ok)) ‚ü©
    Œì ‚ä¢ snd ∑ p q A‚ÇÅ B‚ÇÅ t‚ÇÅ ‚â° snd ∑ p q A‚ÇÇ B‚ÇÇ t‚ÇÇ ‚à∑
      B‚ÇÅ [ fst ∑ p (wk1 A‚ÇÅ) (var x0) ]‚Üë [ t‚ÇÅ ]‚ÇÄ    ‚Üí‚ü® flip conv (‚ä¢‚â°[fst ∑] ‚ä¢t‚ÇÅ) ‚ü©

    Œì ‚ä¢ snd ∑ p q A‚ÇÅ B‚ÇÅ t‚ÇÅ ‚â° snd ∑ p q A‚ÇÇ B‚ÇÇ t‚ÇÇ ‚à∑
      B‚ÇÅ [ fst ∑ p A‚ÇÅ t‚ÇÅ ]‚ÇÄ                        ‚ñ°
    where
    ‚ä¢t‚ÇÅ   = syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ
    ‚ä¢B,ok = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t‚ÇÅ) .proj‚ÇÇ
    ‚ä¢B    = ‚ä¢B,ok .proj‚ÇÅ
    ok    = ‚ä¢B,ok .proj‚ÇÇ

  -- If Œ£ ∑-allowed¬†p¬†q holds for some p and¬†q, then a certain Œ∑-rule
  -- for Œ£ ∑, fst ∑ and snd ∑ does not hold in general.

  ¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ :
    ‚àÄ {p q} ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    ¬¨ (‚àÄ {n} {Œì : Con Term n} {t A B} ‚Üí
       Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
       Œì ‚ä¢ prod ∑ p (fst ∑ p A t) (snd ∑ p q A B t) ‚â° t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
  ¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ {p = p} {q = q} Œ£-ok hyp = ¬¨fst,snd‚â° fst,snd‚â°
    where
    A‚Ä≤ = ‚Ñï
    B‚Ä≤ = ‚Ñï

    Œì‚Ä≤ = Œµ ‚àô Œ£ ∑ p , q ‚ñ∑ ‚Ñï ‚ñπ ‚Ñï

    t‚Ä≤ : Term 1
    t‚Ä≤ = var x0

    ‚ä¢Œì : ‚ä¢ Œì‚Ä≤
    ‚ä¢Œì = Œµ ‚àô Œ†Œ£‚±º‚Ä≤ (‚Ñï‚±º (Œµ ‚àô ‚Ñï‚±º Œµ)) Œ£-ok

    ‚ä¢B : Œì‚Ä≤ ‚àô A‚Ä≤ ‚ä¢ B‚Ä≤
    ‚ä¢B = ‚Ñï‚±º (‚ä¢Œì ‚àô ‚Ñï‚±º ‚ä¢Œì)

    ‚ä¢t : Œì‚Ä≤ ‚ä¢ t‚Ä≤ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
    ‚ä¢t = var ‚ä¢Œì here

    fst,snd‚â° :
      Œì‚Ä≤ ‚ä¢ prod ∑ p (fst ∑ p A‚Ä≤ t‚Ä≤) (snd ∑ p q A‚Ä≤ B‚Ä≤ t‚Ä≤) ‚â° t‚Ä≤ ‚à∑
        Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
    fst,snd‚â° = hyp ‚ä¢t

    ¬¨fst,snd‚â° :
      ¬¨ Œì‚Ä≤ ‚ä¢ prod ∑ p (fst ∑ p A‚Ä≤ t‚Ä≤) (snd ∑ p q A‚Ä≤ B‚Ä≤ t‚Ä≤) ‚â° t‚Ä≤ ‚à∑
          Œ£ ∑ p , q ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤
    ¬¨fst,snd‚â° = prod ∑‚â¢ne (var _)

  -- If Œ£ ∑-allowed¬†p¬†q holds for some p and¬†q, then a certain Œ∑-rule
  -- for Œ£ ∑, fst ∑ and snd ∑ does not hold in general.

  ¬¨-Œ£ ∑-Œ∑ :
    ‚àÄ {p q} ‚Üí
    Œ£ ∑-allowed p q ‚Üí
    ¬¨ (‚àÄ {n} {Œì : Con Term n} {t A B u} ‚Üí
       Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
       Œì ‚ä¢ u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
       Œì ‚ä¢ fst ∑ p A t ‚â° fst ∑ p A u ‚à∑ A ‚Üí
       Œì ‚ä¢ snd ∑ p q A B t ‚â° snd ∑ p q A B u ‚à∑ B [ fst ∑ p A t ]‚ÇÄ ‚Üí
       Œì ‚ä¢ t ‚â° u ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B)
  ¬¨-Œ£ ∑-Œ∑ Œ£-ok hyp =
    ¬¨-Œ£ ∑-Œ∑-prod ∑-fst ∑-snd ∑ Œ£-ok Œª ‚ä¢t ‚Üí
      case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
        (_ , ‚ä¢B , ok) ‚Üí
      hyp (‚ä¢prod ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok) ‚ä¢t
        (fst ∑-Œ≤-‚â° ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok)
        (snd ∑-Œ≤-‚â° ‚ä¢B (fst ∑‚±º ‚ä¢t) (snd ∑‚±º ‚ä¢t) ok) }


  -- Inversion lemma for fst ∑.

  inversion-fst ∑ : Œì ‚ä¢ fst ∑ p A t ‚à∑ C ‚Üí
    ‚àÉ‚ÇÇ Œª q B ‚Üí Œì ‚ä¢ t ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B √ó Œì ‚ä¢ C ‚â° A
  inversion-fst ∑ {p = p} {A} {t} ‚ä¢t‚ÇÅ =
    case inversion-prodrec ‚ä¢t‚ÇÅ of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢wk1A , ‚ä¢t , ‚ä¢x‚ÇÅ , C‚â°) ‚Üí
    case inversion-var ‚ä¢x‚ÇÅ of Œª {
      (_ , there here , ‚â°wk2F) ‚Üí
    case PE.subst (_ ‚ä¢ _ ‚â°_) (wk1-sgSubst A t) C‚â° of Œª
      C‚â°A ‚Üí
    case PE.subst (_ ‚ä¢_‚â° _) (wk1-[]‚Üë¬≤ {t = A}) ‚â°wk2F of Œª
      wk2A‚â°wk2F ‚Üí
    case PE.subst (_ ‚ä¢ fst ∑ p F t ‚à∑_) (PE.sym (subst-id F)) (fst ∑‚±º ‚ä¢t) of Œª
      ‚ä¢t‚ÇÅ ‚Üí
    case snd ∑‚±º ‚ä¢t of Œª
      ‚ä¢t‚ÇÇ ‚Üí
    case substRefl {œÉ = consSubst (sgSubst (fst ∑ p F t)) (snd ∑ p q F G t)}
                   ((idSubst‚Ä≤ (wfTerm ‚ä¢t‚ÇÅ) , ‚ä¢t‚ÇÅ) , ‚ä¢t‚ÇÇ) of Œª
      [œÉ] ‚Üí
    case substitutionEq wk2A‚â°wk2F [œÉ] (wfTerm ‚ä¢t‚ÇÅ) of Œª
      A‚â°F‚Ä≤ ‚Üí
    case PE.subst‚ÇÇ (_ ‚ä¢_‚â°_)
                   (PE.trans (wk2-tail A) (subst-id A))
                   (PE.trans (wk2-tail F) (subst-id F))
                   A‚â°F‚Ä≤ of Œª
      A‚â°F ‚Üí
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª
      (_ , _ , Œ£-ok) ‚Üí
    q , G , conv ‚ä¢t (Œ†Œ£-cong ‚ä¢F (sym A‚â°F) (refl ‚ä¢G) Œ£-ok) , C‚â°A  }

------------------------------------------------------------------------
-- More derived rules

-- An "inverse" of prod-cong for Œ£ ∑.

prod-cong‚Åª¬π-Œ£ ∑ :
  Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£ ∑-allowed p q
prod-cong‚Åª¬π-Œ£ ∑
  {Œì = Œì} {p = p} {t = t} {u = u} {v = v} {w = w}
  {q = q} {A = A} {B = B} prod‚â°prod =
  ‚ä¢B , t‚â°v , u‚â°w , ok
  where
  ‚ä¢Œ£AB = syntacticEqTerm prod‚â°prod .proj‚ÇÅ
  ‚ä¢A   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÅ
  ‚ä¢B   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÅ
  ok   = inversion-Œ†Œ£ ‚ä¢Œ£AB .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢t,u = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢t   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÅ
  ‚ä¢u   = inversion-prod-Œ£ ‚ä¢t,u .proj‚ÇÇ .proj‚ÇÅ
  ‚ä¢v,w = syntacticEqTerm prod‚â°prod .proj‚ÇÇ .proj‚ÇÇ
  ‚ä¢v   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÅ
  ‚ä¢w   = inversion-prod-Œ£ ‚ä¢v,w .proj‚ÇÇ .proj‚ÇÅ

  open Fst ∑-snd ∑ p p

  fst-t,u‚â°t = fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok

  t‚â°v =                                                      $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B         ‚Üí‚ü® fst ∑-cong (refl ‚ä¢A) ‚ä¢B ‚ü©
    Œì ‚ä¢ fst ∑ p A (prod ∑ p t u) ‚â° fst ∑ p A (prod ∑ p v w) ‚à∑ A  ‚Üí‚ü® (Œª hyp ‚Üí trans (sym fst-t,u‚â°t)
                                                                   (trans hyp (fst ∑-Œ≤-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok))) ‚ü©
    Œì ‚ä¢ t ‚â° v ‚à∑ A                                            ‚ñ°

  u‚â°w =                                                            $‚ü® prod‚â°prod ‚ü©
    Œì ‚ä¢ prod ∑ p t u ‚â° prod ∑ p v w ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B               ‚Üí‚ü® snd ∑-cong (refl ‚ä¢A) (refl ‚ä¢B) ‚ü©

    Œì ‚ä¢ snd ∑ p q A B (prod ∑ p t u) ‚â° snd ∑ p q A B (prod ∑ p v w) ‚à∑
      B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ                                ‚Üí‚ü® (Œª hyp ‚Üí trans
                                                                         (sym (snd ∑-Œ≤-‚â° ‚ä¢B ‚ä¢t ‚ä¢u ok))
                                                                            (trans hyp
                                                                               (conv (snd ∑-Œ≤-‚â° ‚ä¢B ‚ä¢v ‚ä¢w ok)
                                                                                  (substTypeEq (refl ‚ä¢B)
                                                                                     (fst ∑-cong (refl ‚ä¢A) ‚ä¢B (sym prod‚â°prod)))))) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ fst ∑ p A (prod ∑ p t u) ]‚ÇÄ                      ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.conv (substTypeEq (refl ‚ä¢B) fst-t,u‚â°t) ‚ü©

    Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ                                           ‚ñ°

-- An "inverse" of prod-cong.

prod-cong‚Åª¬π :
  Œì ‚ä¢ prod s p t u ‚â° prod s p v w ‚à∑ Œ£‚ü® s ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
  (Œì ‚àô A ‚ä¢ B) √ó Œì ‚ä¢ t ‚â° v ‚à∑ A √ó Œì ‚ä¢ u ‚â° w ‚à∑ B [ t ]‚ÇÄ √ó
  Œ£-allowed s p q
prod-cong‚Åª¬π {s = ùï§} = prod-cong‚Åª¬π-Œ£À¢
prod-cong‚Åª¬π {s = ùï®} = prod-cong‚Åª¬π-Œ£ ∑
