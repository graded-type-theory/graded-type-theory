------------------------------------------------------------------------
-- Properties of the reduction relation.
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Reduction
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.EqRelInstance R
open import Definition.Typed.Consequences.Equality R
open import Definition.Typed.Consequences.Inequality R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.RedSteps R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.Fundamental.Reducibility R
open import Definition.LogicalRelation.ShapeView R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B t u v : Term _
    p q : M
    l : TypeLevel
    m : Strength

opaque

  -- If the type of t is¬†U, then t reduces to an application of a type
  -- constructor or a neutral term.

  red-U : Œì ‚ä¢ t ‚à∑ U ‚Üí ‚àÉ Œª u ‚Üí Type u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ U
  red-U {Œì} {t} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©U , ‚ä©t) ‚Üí
    helper (U-elim ‚ä©U) (irrelevanceTerm ‚ä©U (U-intr (U-elim ‚ä©U)) ‚ä©t) }
    where
    helper :
      (‚ä©U : Œì ‚ä©‚ü® l ‚ü©U) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ U / U-intr ‚ä©U ‚Üí
      ‚àÉ Œª u ‚Üí Type u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ U
    helper (emb 0<1 ‚ä©U) ‚ä©t =
      helper ‚ä©U ‚ä©t
    helper (noemb (U·µ£ _ _ _)) (U‚Çú u t‚áí*u u-type _ _) =
      u , u-type , t‚áí*u

opaque

  -- If the type of t is Empty, then t reduces to a neutral term.

  red-Empty : Œì ‚ä¢ t ‚à∑ Empty ‚Üí ‚àÉ Œª u ‚Üí Neutral u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ Empty
  red-Empty {Œì} {t} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©Empty‚Ä≤ , ‚ä©t) ‚Üí
    helper (Empty-elim ‚ä©Empty‚Ä≤)
      (irrelevanceTerm ‚ä©Empty‚Ä≤ (Empty-intr (Empty-elim ‚ä©Empty‚Ä≤)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©Empty A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Empty-intr ‚ä©A ‚Üí
      ‚àÉ Œª u ‚Üí Neutral u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper (noemb A‚áí*Empty) (Empty‚Çú u t‚áí*u _ (ne (neNf‚Çú u-ne _ _))) =
        u
      , u-ne
      , convRed:*: t‚áí*u (sym (subset* (red A‚áí*Empty)))

opaque

  -- If the type of t is Unit, then t reduces to star or a neutral
  -- term.

  red-Unit : Œì ‚ä¢ t ‚à∑ Unit m ‚Üí ‚àÉ Œª u ‚Üí Star u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ Unit m
  red-Unit {Œì} {t} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©Unit‚Ä≤ , ‚ä©t) ‚Üí
    helper (Unit-elim ‚ä©Unit‚Ä≤)
      (irrelevanceTerm ‚ä©Unit‚Ä≤ (Unit-intr (Unit-elim ‚ä©Unit‚Ä≤)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©Unit‚ü® m ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Unit-intr ‚ä©A ‚Üí
      ‚àÉ Œª u ‚Üí Star u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper (noemb (Unit‚Çú A‚áí*Unit _)) (Unit‚Çú u t‚áí*u _ prop) =
        u
      , (case prop of Œª where
              star·µ£ ‚Üí star‚Çô
              (ne (neNf‚Çú neK ‚ä¢k k‚â°k)) ‚Üí ne neK)
      , convRed:*: t‚áí*u (sym (subset* (red A‚áí*Unit)))

opaque

  -- If the type of t is ‚Ñï, then t reduces to zero, an application of
  -- suc, or a neutral term.

  red-‚Ñï : Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí ‚àÉ Œª u ‚Üí Natural u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ ‚Ñï
  red-‚Ñï {Œì} {t} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©‚Ñï‚Ä≤ , ‚ä©t) ‚Üí
    helper (‚Ñï-elim ‚ä©‚Ñï‚Ä≤) (irrelevanceTerm ‚ä©‚Ñï‚Ä≤ (‚Ñï-intr (‚Ñï-elim ‚ä©‚Ñï‚Ä≤)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©‚Ñï A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / ‚Ñï-intr ‚ä©A ‚Üí
      ‚àÉ Œª u ‚Üí Natural u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper (noemb A‚áí*‚Ñï) (‚Ñï‚Çú u t‚áí*u _ ok) =
        u
      , (case ok of Œª where
           zero·µ£                 ‚Üí zero‚Çô
           (suc·µ£ _)              ‚Üí suc‚Çô
           (ne (neNf‚Çú u-ne _ _)) ‚Üí ne u-ne)
      , convRed:*: t‚áí*u (sym (subset* (red A‚áí*‚Ñï)))

opaque

  -- If t has a Œ†-type, then t reduces to a lambda or a neutral term.

  red-Œ† :
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    ‚àÉ Œª u ‚Üí Function u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  red-Œ† {Œì} {t} {p} {q} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©Œ† , ‚ä©t) ‚Üí
    helper (Œ†-elim ‚ä©Œ†)
      (irrelevanceTerm ‚ä©Œ† (B-intr (BŒ† p q) (Œ†-elim ‚ä©Œ†)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ† p q ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / B-intr (BŒ† p q) ‚ä©A ‚Üí
      ‚àÉ Œª u ‚Üí Function u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper (noemb (B·µ£ _ _ A‚áí*Œ† _ _ _ _ _ _ _)) (u , t‚áí*u , u-fun , _) =
      u , u-fun , convRed:*: t‚áí*u (sym (subset* (red A‚áí*Œ†)))

opaque

  -- If t has a Œ£-type, then t reduces to a pair or a neutral term.

  red-Œ£ :
    Œì ‚ä¢ t ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ A ‚ñπ B ‚Üí
    ‚àÉ Œª u ‚Üí Product u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ Œ£‚ü® m ‚ü© p , q ‚ñ∑ A ‚ñπ B
  red-Œ£ {Œì} {t} {m} {p} {q} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©Œ£ , ‚ä©t) ‚Üí
    helper (Œ£-elim ‚ä©Œ£)
      (irrelevanceTerm ‚ä©Œ£ (B-intr (BŒ£ m p q) (Œ£-elim ‚ä©Œ£)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©B‚ü® BŒ£ m p q ‚ü© A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / B-intr (BŒ£ m p q) ‚ä©A ‚Üí
      ‚àÉ Œª u ‚Üí Product u √ó Œì ‚ä¢ t :‚áí*: u ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper
      (noemb (B·µ£ _ _ A‚áí*Œ£ _ _ _ _ _ _ _)) (u , t‚áí*u , _ , u-prod , _) =
      u , u-prod , convRed:*: t‚áí*u (sym (subset* (red A‚áí*Œ£)))

opaque

  -- If the type of t is Id¬†A¬†u¬†v, then t reduces to rfl or a neutral
  -- term.

  red-Id :
    Œì ‚ä¢ t ‚à∑ Id A u v ‚Üí
    ‚àÉ Œª w ‚Üí Identity w √ó Œì ‚ä¢ t :‚áí*: w ‚à∑ Id A u v
  red-Id {Œì} {t} ‚ä¢t =
    case reducibleTerm ‚ä¢t of Œª {
      (‚ä©Id , ‚ä©t) ‚Üí
    helper (Id-elim ‚ä©Id)
      (irrelevanceTerm ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©t) }
    where
    helper :
      (‚ä©A : Œì ‚ä©‚ü® l ‚ü©Id A) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚à∑ A / Id-intr ‚ä©A ‚Üí
      ‚àÉ Œª w ‚Üí Identity w √ó Œì ‚ä¢ t :‚áí*: w ‚à∑ A
    helper (emb 0<1 ‚ä©A) ‚ä©t =
      helper ‚ä©A ‚ä©t
    helper (noemb ‚ä©A) (w , t‚áí*w , w-id , _) =
        w
      , w-id
      , convRed:*: t‚áí*w (sym (subset* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©A))))

-- Helper function where all reducible types can be reduced to WHNF.
whNorm‚Ä≤ : ‚àÄ {A l} ([A] : Œì ‚ä©‚ü® l ‚ü© A)
                ‚Üí ‚àÉ Œª B ‚Üí Whnf B √ó Œì ‚ä¢ A :‚áí*: B
whNorm‚Ä≤ (U·µ£‚Ä≤ .‚Å∞ 0<1 ‚ä¢Œì) = U , U‚Çô , idRed:*: (U‚±º ‚ä¢Œì)
whNorm‚Ä≤ (‚Ñï·µ£ D) = ‚Ñï , ‚Ñï‚Çô , D
whNorm‚Ä≤ (Empty·µ£ D) = Empty , Empty‚Çô , D
whNorm‚Ä≤ (Unit·µ£ (Unit‚Çú D _)) = Unit! , Unit‚Çô , D
whNorm‚Ä≤ (ne‚Ä≤ H D neH H‚â°H) = H , ne neH , D
whNorm‚Ä≤ (Œ†·µ£‚Ä≤ F G D _ _ _ _ _ _ _) = Œ† _ , _ ‚ñ∑ F ‚ñπ G , Œ†Œ£‚Çô , D
whNorm‚Ä≤ (ùï®‚Ä≤ F G D _ _ _ _ _ _ _) = Œ£ _ , _ ‚ñ∑ F ‚ñπ G , Œ†Œ£‚Çô , D
whNorm‚Ä≤ (Id·µ£ ‚ä©Id) = _ , Id‚Çô , _‚ä©‚ÇóId_.‚áí*Id ‚ä©Id
whNorm‚Ä≤ (emb 0<1 [A]) = whNorm‚Ä≤ [A]

-- Well-formed types can all be reduced to WHNF.
whNorm : ‚àÄ {A} ‚Üí Œì ‚ä¢ A ‚Üí ‚àÉ Œª B ‚Üí Whnf B √ó Œì ‚ä¢ A :‚áí*: B
whNorm A = whNorm‚Ä≤ (reducible A)

Œ†Norm : ‚àÄ {A F G} ‚Üí Œì ‚ä¢ A ‚Üí Œì ‚ä¢ A ‚â° Œ† p , q ‚ñ∑ F ‚ñπ G
      ‚Üí ‚àÉ‚ÇÇ Œª F‚Ä≤ G‚Ä≤ ‚Üí Œì ‚ä¢ A ‚áí* Œ† p , q ‚ñ∑ F‚Ä≤ ‚ñπ G‚Ä≤ √ó Œì ‚ä¢ F ‚â° F‚Ä≤
         √ó Œì ‚àô F ‚ä¢ G ‚â° G‚Ä≤
Œ†Norm {A = A} ‚ä¢A A‚â°Œ†FG with whNorm ‚ä¢A
... | _ , U‚Çô , D = ‚ä•-elim (U‚â¢Œ† (trans (sym (subset* (red D))) A‚â°Œ†FG))
... | _ , Œ†Œ£‚Çô {b = BMŒ†} , D =
  let Œ†‚â°Œ†‚Ä≤ = trans (sym A‚â°Œ†FG) (subset* (red D))
      F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤ = injectivity Œ†‚â°Œ†‚Ä≤
      D‚Ä≤ = PE.subst‚ÇÇ (Œª p q ‚Üí _ ‚ä¢ A ‚áí* Œ† p , q ‚ñ∑ _ ‚ñπ _) (PE.sym p‚â°p‚Ä≤) (PE.sym q‚â°q‚Ä≤) (red D)
  in  _ , _ , D‚Ä≤ , F‚â°F‚Ä≤ , G‚â°G‚Ä≤
... | _ , Œ†Œ£‚Çô {b = BMŒ£ s} , D = ‚ä•-elim (Œ†‚â¢Œ£‚±º (trans (sym A‚â°Œ†FG) (subset* (red D))))
... | _ , ‚Ñï‚Çô , D = ‚ä•-elim (‚Ñï‚â¢Œ† (trans (sym (subset* (red D))) A‚â°Œ†FG))
... | _ , Unit‚Çô , D = ‚ä•-elim (Unit‚â¢Œ†‚±º (trans (sym (subset* (red D))) A‚â°Œ†FG))
... | _ , Empty‚Çô , D = ‚ä•-elim (Empty‚â¢Œ†‚±º (trans (sym (subset* (red D))) A‚â°Œ†FG))
... | _ , Id‚Çô , A‚áí*Id =
  ‚ä•-elim $ Id‚â¢Œ† (trans (sym (subset* (red A‚áí*Id))) A‚â°Œ†FG)
... | _ , lam‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] =
  let _ , _ , _ , _ , _ , U‚â°Œ† , _ = inversion-lam ‚ä¢B
  in  ‚ä•-elim (U‚â¢Œ† U‚â°Œ†)
... | _ , zero‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] = ‚ä•-elim (U‚â¢‚Ñï (inversion-zero ‚ä¢B))
... | _ , suc‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] = ‚ä•-elim (U‚â¢‚Ñï (proj‚ÇÇ (inversion-suc ‚ä¢B)))
... | _ , star‚Çô , [ _ , univ ‚ä¢B , _ ] =
  ‚ä•-elim (U‚â¢Unit‚±º (inversion-star ‚ä¢B .proj‚ÇÅ))
... | _ , prod‚Çô , [ _ , univ ‚ä¢B , _ ] =
  let _ , _ , _ , _ , _ , _ , _ , U‚â°Œ£ , _ = inversion-prod ‚ä¢B
  in  ‚ä•-elim (U‚â¢Œ£ U‚â°Œ£)
... | _ , rfl‚Çô , [ _ , univ ‚ä¢rfl , _ ] =
  ‚ä•-elim $ Id‚â¢U $ sym (inversion-rfl ‚ä¢rfl .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ)
... | _ , ne x , D = ‚ä•-elim (Œ†‚â¢ne x (trans (sym A‚â°Œ†FG) (subset* (red D))))

Œ£Norm : ‚àÄ {A F G m} ‚Üí Œì ‚ä¢ A ‚Üí Œì ‚ä¢ A ‚â° Œ£‚ü® m ‚ü© p , q ‚ñ∑ F ‚ñπ G
      ‚Üí ‚àÉ‚ÇÇ Œª F‚Ä≤ G‚Ä≤ ‚Üí Œì ‚ä¢ A ‚áí* Œ£‚ü® m ‚ü© p , q ‚ñ∑ F‚Ä≤ ‚ñπ G‚Ä≤
         √ó Œì ‚ä¢ F ‚â° F‚Ä≤ √ó Œì ‚àô F ‚ä¢ G ‚â° G‚Ä≤
Œ£Norm {A = A} ‚ä¢A A‚â°Œ£FG with whNorm ‚ä¢A
... | _ , U‚Çô , D = ‚ä•-elim (U‚â¢Œ£ (trans (sym (subset* (red D))) A‚â°Œ£FG))
... | _ , (Œ†Œ£‚Çô {b = BMŒ†}) , D = ‚ä•-elim (Œ†‚â¢Œ£‚±º (trans (sym (subset* (red D))) A‚â°Œ£FG))
... | _ , (Œ†Œ£‚Çô {b = BMŒ£ m}) , D =
  let Œ£‚â°Œ£‚Ä≤ = trans (sym A‚â°Œ£FG) (subset* (red D))
      F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , p‚â°p‚Ä≤ , q‚â°q‚Ä≤ , m‚â°m‚Ä≤ = Œ£-injectivity Œ£‚â°Œ£‚Ä≤
      D‚Ä≤ = PE.subst‚ÇÉ (Œª m p q ‚Üí _ ‚ä¢ A ‚áí* Œ£‚ü® m ‚ü© p , q ‚ñ∑ _ ‚ñπ _)
                     (PE.sym m‚â°m‚Ä≤) (PE.sym p‚â°p‚Ä≤) (PE.sym q‚â°q‚Ä≤) (red D)
  in  _ , _ , D‚Ä≤ , F‚â°F‚Ä≤ , G‚â°G‚Ä≤
... | _ , ‚Ñï‚Çô , D = ‚ä•-elim (‚Ñï‚â¢Œ£ (trans (sym (subset* (red D))) A‚â°Œ£FG))
... | _ , Unit‚Çô , D = ‚ä•-elim (Unit‚â¢Œ£‚±º (trans (sym (subset* (red D))) A‚â°Œ£FG))
... | _ , Empty‚Çô , D = ‚ä•-elim (Empty‚â¢Œ£‚±º (trans (sym (subset* (red D))) A‚â°Œ£FG))
... | _ , Id‚Çô , A‚áí*Id =
  ‚ä•-elim $ Id‚â¢Œ£ (trans (sym (subset* (red A‚áí*Id))) A‚â°Œ£FG)
... | _ , lam‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] =
  let _ , _ , _ , _ , _ , U‚â°Œ† , _ = inversion-lam ‚ä¢B
  in  ‚ä•-elim (U‚â¢Œ† U‚â°Œ†)
... | _ , zero‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] = ‚ä•-elim (U‚â¢‚Ñï (inversion-zero ‚ä¢B))
... | _ , suc‚Çô , [ ‚ä¢A , univ ‚ä¢B , A‚áíB ] = ‚ä•-elim (U‚â¢‚Ñï (proj‚ÇÇ (inversion-suc ‚ä¢B)))
... | _ , star‚Çô , [ _ , univ ‚ä¢B , _ ] =
  ‚ä•-elim (U‚â¢Unit‚±º (inversion-star ‚ä¢B .proj‚ÇÅ))
... | _ , prod‚Çô , [ _ , univ ‚ä¢B , _ ] =
  let _ , _ , _ , _ , _ , _ , _ , U‚â°Œ£ , _ = inversion-prod ‚ä¢B
  in  ‚ä•-elim (U‚â¢Œ£ U‚â°Œ£)
... | _ , rfl‚Çô , [ _ , univ ‚ä¢rfl , _ ] =
  ‚ä•-elim $ Id‚â¢U $ sym (inversion-rfl ‚ä¢rfl .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ)
... | _ , ne x , D = ‚ä•-elim (Œ£‚â¢ne x (trans (sym A‚â°Œ£FG) (subset* (red D))))

opaque

  -- If A is definitionally equal to Id¬†B¬†t¬†u, then A reduces to
  -- Id¬†B‚Ä≤¬†t‚Ä≤¬†u‚Ä≤ for some B‚Ä≤, t‚Ä≤ and u‚Ä≤ that are definitionally equal to
  -- B, t and¬†u.

  Id-norm :
    Œì ‚ä¢ A ‚â° Id B t u ‚Üí
    ‚àÉ‚ÇÉ Œª B‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí (Œì ‚ä¢ A ‚áí* Id B‚Ä≤ t‚Ä≤ u‚Ä≤) √ó
    (Œì ‚ä¢ B ‚â° B‚Ä≤) √ó Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ B √ó Œì ‚ä¢ u ‚â° u‚Ä≤ ‚à∑ B
  Id-norm A‚â°Id =
    case whNorm (syntacticEq A‚â°Id .proj‚ÇÅ) of Œª {
      (_ , A‚Ä≤-whnf , A‚áí*A‚Ä≤) ‚Üí
    case trans (sym A‚â°Id) (subset* (red A‚áí*A‚Ä≤)) of Œª {
      Id‚â°A‚Ä≤ ‚Üí
    case Id‚â°Whnf Id‚â°A‚Ä≤ A‚Ä≤-whnf of Œª {
      (_ , _ , _ , PE.refl) ‚Üí
    _ , _ , _ , red A‚áí*A‚Ä≤ , Id-injectivity Id‚â°A‚Ä≤ }}}

-- Helper function where reducible all terms can be reduced to WHNF.
whNormTerm‚Ä≤ : ‚àÄ {a A l} ([A] : Œì ‚ä©‚ü® l ‚ü© A) ‚Üí Œì ‚ä©‚ü® l ‚ü© a ‚à∑ A / [A]
                ‚Üí ‚àÉ Œª b ‚Üí Whnf b √ó Œì ‚ä¢ a :‚áí*: b ‚à∑ A
whNormTerm‚Ä≤ (U·µ£ x) (U‚Çú A d typeA A‚â°A [t]) = A , typeWhnf typeA , d
whNormTerm‚Ä≤ (‚Ñï·µ£ x) (‚Ñï‚Çú n d n‚â°n prop) =
  let natN = natural prop
  in  n , naturalWhnf natN , convRed:*: d (sym (subset* (red x)))
whNormTerm‚Ä≤ (Empty·µ£ x) (Empty‚Çú n d n‚â°n prop) =
  let emptyN = empty prop
  in  n , ne emptyN , convRed:*: d (sym (subset* (red x)))
whNormTerm‚Ä≤ (Unit·µ£ (Unit‚Çú x _)) (Unit‚Çú n d n‚â°n prop) =
  n , unit prop , convRed:*: d (sym (subset* (red x)))
whNormTerm‚Ä≤ (ne (ne H D neH H‚â°H)) (ne‚Çú k d (neNf‚Çú neH‚ÇÅ ‚ä¢k k‚â°k)) =
  k , ne neH‚ÇÅ , convRed:*: d (sym (subset* (red D)))
whNormTerm‚Ä≤ (Œ†·µ£‚Ä≤ _ _ D _ _ _ _ _ _ _) (Œ†‚Çú f d funcF _ _ _) =
  f , functionWhnf funcF , convRed:*: d (sym (subset* (red D)))
whNormTerm‚Ä≤ (ùï®‚Ä≤ _ _ D _ _ _ _ _ _ _) (Œ£‚Çú p d _ pProd _) =
  p , productWhnf pProd , convRed:*: d (sym (subset* (red D)))
whNormTerm‚Ä≤ (Id·µ£ ‚ä©Id) (a‚Ä≤ , a‚áí*a‚Ä≤ , a‚Ä≤-id , _) =
    a‚Ä≤ , identityWhnf a‚Ä≤-id
  , convRed:*: a‚áí*a‚Ä≤ (sym (subset* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©Id))))
whNormTerm‚Ä≤ (emb 0<1 [A]) [a] = whNormTerm‚Ä≤ [A] [a]

-- Well-formed terms can all be reduced to WHNF.
whNormTerm : ‚àÄ {a A} ‚Üí Œì ‚ä¢ a ‚à∑ A ‚Üí ‚àÉ Œª b ‚Üí Whnf b √ó Œì ‚ä¢ a :‚áí*: b ‚à∑ A
whNormTerm {a} {A} ‚ä¢a =
  let [A] , [a] = reducibleTerm ‚ä¢a
  in  whNormTerm‚Ä≤ [A] [a]

redMany : ‚àÄ {t u A} ‚Üí Œì ‚ä¢ t ‚áí u ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* u ‚à∑ A
redMany d =
  let _ , _ , ‚ä¢u = syntacticEqTerm (subsetTerm d)
  in  d ‚á® id ‚ä¢u
