------------------------------------------------------------------------
-- Neutral terms have only one type (up to type equality).
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.NeTypeEq
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.Consequences.Injectivity R
open import Definition.Typed.Consequences.Substitution R
open import Definition.Typed.Properties R

open import Graded.Derived.Erased.Typed R

open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n

-- Helper function for the same variable instance of a context have equal types.
varTypeEq‚Ä≤ : ‚àÄ {n R T} ‚Üí n ‚à∑ R ‚àà Œì ‚Üí n ‚à∑ T ‚àà Œì ‚Üí R PE.‚â° T
varTypeEq‚Ä≤ here here = PE.refl
varTypeEq‚Ä≤ (there n‚à∑R) (there n‚à∑T) rewrite varTypeEq‚Ä≤ n‚à∑R n‚à∑T = PE.refl

-- The same variable instance of a context have equal types.
varTypeEq : ‚àÄ {x A B} ‚Üí Œì ‚ä¢ A ‚Üí Œì ‚ä¢ B ‚Üí x ‚à∑ A ‚àà Œì ‚Üí x ‚à∑ B ‚àà Œì ‚Üí Œì ‚ä¢ A ‚â° B
varTypeEq A B x‚à∑A x‚à∑B rewrite varTypeEq‚Ä≤ x‚à∑A x‚à∑B = refl A

-- The same neutral term have equal types.
neTypeEq : ‚àÄ {t A B} ‚Üí Neutral t ‚Üí Œì ‚ä¢ t ‚à∑ A ‚Üí Œì ‚ä¢ t ‚à∑ B ‚Üí Œì ‚ä¢ A ‚â° B
neTypeEq (var x) (var x‚ÇÅ x‚ÇÇ) (var x‚ÇÉ x‚ÇÑ) =
  varTypeEq (syntacticTerm (var x‚ÇÉ x‚ÇÇ)) (syntacticTerm (var x‚ÇÉ x‚ÇÑ)) x‚ÇÇ x‚ÇÑ
neTypeEq (‚àò‚Çô neT) (t‚à∑A ‚àò‚±º t‚à∑A‚ÇÅ) (t‚à∑B ‚àò‚±º t‚à∑B‚ÇÅ) with neTypeEq neT t‚à∑A t‚à∑B
... | q = let w = proj‚ÇÅ (proj‚ÇÇ (injectivity q))
          in  substTypeEq w (refl t‚à∑A‚ÇÅ)
neTypeEq (fst‚Çô neP) (fst‚±º _ ‚ä¢t) (fst‚±º _ ‚ä¢t‚Ä≤) with neTypeEq neP ‚ä¢t ‚ä¢t‚Ä≤
... | q = proj‚ÇÅ (Œ£-injectivity q)
neTypeEq (snd‚Çô neP) (snd‚±º ‚ä¢G ‚ä¢t) (snd‚±º _ ‚ä¢t‚Ä≤) with neTypeEq neP ‚ä¢t ‚ä¢t‚Ä≤
... | q = let G‚â°G‚ÇÅ = proj‚ÇÅ (proj‚ÇÇ (Œ£-injectivity q))
              ‚ä¢fst = fst‚±º ‚ä¢G ‚ä¢t
          in  substTypeEq G‚â°G‚ÇÅ (refl ‚ä¢fst)
neTypeEq (natrec‚Çô _) ‚ä¢t@(natrec‚±º _ _ _) (natrec‚±º _ _ _) =
  refl (syntacticTerm ‚ä¢t)
neTypeEq
  (prodrec‚Çô neT) (prodrec‚±º ‚ä¢A ‚ä¢t _ _) (prodrec‚±º _ _ _ _) =
  refl (substType ‚ä¢A ‚ä¢t)
neTypeEq (emptyrec‚Çô neT) (emptyrec‚±º x t‚à∑A) (emptyrec‚±º x‚ÇÅ t‚à∑B) =
  refl x‚ÇÅ
neTypeEq (unitrec‚Çô _ neT) (unitrec‚±º ‚ä¢A ‚ä¢t _ _) (unitrec‚±º _ _ _ _) =
  refl (substType ‚ä¢A ‚ä¢t)
neTypeEq {Œì} (J‚Çô _) (J‚±º {w} _ ‚ä¢B _ ‚ä¢v ‚ä¢w) (J‚±º _ _ _ _ _) =
  refl $
  substType‚ÇÇ ‚ä¢B ‚ä¢v $
  PE.subst (Œì ‚ä¢ w ‚à∑_) ‚â°Id-wk1-wk1-0[]‚ÇÄ ‚ä¢w
neTypeEq (K‚Çô _) (K‚±º _ ‚ä¢B _ ‚ä¢v _) (K‚±º _ _ _ _ _) =
  refl (substType ‚ä¢B ‚ä¢v)
neTypeEq ([]-cong‚Çô _) ([]-cong‚±º _ ‚ä¢t ‚ä¢u _ ok) ([]-cong‚±º _ _ _ _ _) =
  refl (Id‚±º‚Ä≤ ([]‚±º ([]-cong‚ÜíErased ok) ‚ä¢t) ([]‚±º ([]-cong‚ÜíErased ok) ‚ä¢u))
neTypeEq x (conv t‚à∑A x‚ÇÅ) t‚à∑B = let q = neTypeEq x t‚à∑A t‚à∑B
                               in  trans (sym x‚ÇÅ) q
neTypeEq x t‚à∑A (conv t‚à∑B x‚ÇÉ) = let q = neTypeEq x t‚à∑A t‚à∑B
                               in  trans q x‚ÇÉ
