------------------------------------------------------------------------
-- Equality lemmata.
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Equality
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M
open import Definition.Typed R
open import Definition.Typed.Properties R
open import Definition.Typed.EqRelInstance R
open import Definition.Typed.Consequences.Inequality R as I
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.RedSteps R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.Properties R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Fundamental.Reducibility R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n             : Nat
    Œì             : Con Term n
    A B F G t u v : Term _
    b             : BinderMode
    p q           : M
    l             : TypeLevel
    s             : Strength

U‚â°A‚Ä≤ : ‚àÄ {A l} ([U] : Œì ‚ä©‚ü® l ‚ü©U)
    ‚Üí Œì ‚ä©‚ü® l ‚ü© U ‚â° A / (U-intr [U])
    ‚Üí A PE.‚â° U
U‚â°A‚Ä≤ (noemb [U]) A‚â°U = A‚â°U
U‚â°A‚Ä≤ (emb 0<1 [U]) [U‚â°A] = U‚â°A‚Ä≤ [U] [U‚â°A]

-- If A is judgmentally equal to U, then A is propositionally equal to U.
U‚â°A : ‚àÄ {A}
    ‚Üí Œì ‚ä¢ U ‚â° A
    ‚Üí A PE.‚â° U
U‚â°A {A} U‚â°A with reducibleEq U‚â°A
U‚â°A {A} U‚â°A | [U] , [A] , [U‚â°A] =
  U‚â°A‚Ä≤ (U-elim [U]) (irrelevanceEq [U] (U-intr (U-elim [U])) [U‚â°A])

‚Ñï‚â°A‚Ä≤ : ‚àÄ {A l} ([‚Ñï] : Œì ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï)
    ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚Ñï ‚â° A / (‚Ñï-intr [‚Ñï])
    ‚Üí Whnf A
    ‚Üí A PE.‚â° ‚Ñï
‚Ñï‚â°A‚Ä≤ (noemb x) [‚Ñï‚â°A] whnfA = whnfRed* [‚Ñï‚â°A] whnfA
‚Ñï‚â°A‚Ä≤ (emb 0<1 [‚Ñï]) [‚Ñï‚â°A] whnfA = ‚Ñï‚â°A‚Ä≤ [‚Ñï] [‚Ñï‚â°A] whnfA

-- If A in WHNF is judgmentally equal to ‚Ñï, then A is propositionally equal to ‚Ñï.
‚Ñï‚â°A : ‚àÄ {A}
    ‚Üí Œì ‚ä¢ ‚Ñï ‚â° A
    ‚Üí Whnf A
    ‚Üí A PE.‚â° ‚Ñï
‚Ñï‚â°A {A} ‚Ñï‚â°A whnfA with reducibleEq ‚Ñï‚â°A
‚Ñï‚â°A {A} ‚Ñï‚â°A whnfA | [‚Ñï] , [A] , [‚Ñï‚â°A] =
  ‚Ñï‚â°A‚Ä≤ (‚Ñï-elim [‚Ñï]) (irrelevanceEq [‚Ñï] (‚Ñï-intr (‚Ñï-elim [‚Ñï])) [‚Ñï‚â°A]) whnfA

-- If A in WHNF is judgmentally equal to Empty, then A is propositionally equal to Empty.
Empty‚â°A‚Ä≤ : ‚àÄ {A l} ([Empty] : Œì ‚ä©‚ü® l ‚ü©Empty Empty)
    ‚Üí Œì ‚ä©‚ü® l ‚ü© Empty ‚â° A / (Empty-intr [Empty])
    ‚Üí Whnf A
    ‚Üí A PE.‚â° Empty
Empty‚â°A‚Ä≤ (noemb x) [Empty‚â°A] whnfA = whnfRed* [Empty‚â°A] whnfA
Empty‚â°A‚Ä≤ (emb 0<1 [Empty]) [Empty‚â°A] whnfA = Empty‚â°A‚Ä≤ [Empty] [Empty‚â°A] whnfA

Empty‚â°A : ‚àÄ {A}
    ‚Üí Œì ‚ä¢ Empty ‚â° A
    ‚Üí Whnf A
    ‚Üí A PE.‚â° Empty
Empty‚â°A {A} Empty‚â°A whnfA with reducibleEq Empty‚â°A
Empty‚â°A {A} Empty‚â°A whnfA | [Empty] , [A] , [Empty‚â°A] =
  Empty‚â°A‚Ä≤ (Empty-elim [Empty]) (irrelevanceEq [Empty] (Empty-intr (Empty-elim [Empty])) [Empty‚â°A]) whnfA

Unit‚â°A‚Ä≤ : ‚àÄ {A l} ([Unit] : Œì ‚ä©‚ü® l ‚ü©Unit‚ü® s ‚ü© Unit s)
    ‚Üí Œì ‚ä©‚ü® l ‚ü© Unit! ‚â° A / (Unit-intr [Unit])
    ‚Üí Whnf A
    ‚Üí A PE.‚â° Unit s
Unit‚â°A‚Ä≤ (noemb x) [Unit‚â°A] whnfA = whnfRed* [Unit‚â°A] whnfA
Unit‚â°A‚Ä≤ (emb 0<1 [Unit]) [Unit‚â°A] whnfA = Unit‚â°A‚Ä≤ [Unit] [Unit‚â°A] whnfA

Unit‚â°A : ‚àÄ {A}
    ‚Üí Œì ‚ä¢ Unit s ‚â° A
    ‚Üí Whnf A
    ‚Üí A PE.‚â° Unit s
Unit‚â°A {A} Unit‚â°A whnfA with reducibleEq Unit‚â°A
Unit‚â°A {A} Unit‚â°A whnfA | [Unit] , [A] , [Unit‚â°A] =
  Unit‚â°A‚Ä≤ (Unit-elim [Unit]) (irrelevanceEq [Unit] (Unit-intr (Unit-elim [Unit])) [Unit‚â°A]) whnfA

ne‚â°A‚Ä≤ : ‚àÄ {A K l}
     ‚Üí ([K] : Œì ‚ä©‚ü® l ‚ü©ne K)
     ‚Üí Œì ‚ä©‚ü® l ‚ü© K ‚â° A / (ne-intr [K])
     ‚Üí Whnf A
     ‚Üí ‚àÉ Œª M ‚Üí Neutral M √ó A PE.‚â° M
ne‚â°A‚Ä≤ (noemb [K]) (ne‚Çå M D‚Ä≤ neM K‚â°M) whnfA =
  M , neM , (whnfRed* (red D‚Ä≤) whnfA)
ne‚â°A‚Ä≤ (emb 0<1 [K]) [K‚â°A] whnfA = ne‚â°A‚Ä≤ [K] [K‚â°A] whnfA

-- If A in WHNF is judgmentally equal to K, then there exists a M such that
-- A is propositionally equal to M.
ne‚â°A : ‚àÄ {A K}
    ‚Üí Neutral K
    ‚Üí Œì ‚ä¢ K ‚â° A
    ‚Üí Whnf A
    ‚Üí ‚àÉ Œª M ‚Üí Neutral M √ó A PE.‚â° M
ne‚â°A {A} neK ne‚â°A whnfA with reducibleEq ne‚â°A
ne‚â°A {A} neK ne‚â°A whnfA | [ne] , [A] , [ne‚â°A] =
  ne‚â°A‚Ä≤ (ne-elim neK [ne])
        (irrelevanceEq [ne] (ne-intr (ne-elim neK [ne])) [ne‚â°A]) whnfA

B‚â°A‚Ä≤ : ‚àÄ {A F G l} W ([W] : Œì ‚ä©‚ü® l ‚ü©B‚ü® W ‚ü© ‚ü¶ W ‚üß F ‚ñπ G)
    ‚Üí Œì ‚ä©‚ü® l ‚ü© ‚ü¶ W ‚üß F ‚ñπ G ‚â° A / (B-intr W [W])
    ‚Üí Whnf A
    ‚Üí ‚àÉ‚ÇÇ Œª H E ‚Üí A PE.‚â° ‚ü¶ W ‚üß H ‚ñπ E
B‚â°A‚Ä≤ W (noemb [W]) (B‚Çå F‚Ä≤ G‚Ä≤ D‚Ä≤ A‚â°B [F‚â°F‚Ä≤] [G‚â°G‚Ä≤]) whnfA =
  F‚Ä≤ , G‚Ä≤ , whnfRed* D‚Ä≤ whnfA
B‚â°A‚Ä≤ W (emb 0<1 [W]) [W‚â°A] whnfA = B‚â°A‚Ä≤ W [W] [W‚â°A] whnfA

Œ†‚â°A‚Ä≤ : ‚àÄ {Œì : Con Term n} {A F G l p q} ‚Üí _
Œ†‚â°A‚Ä≤ {Œì = Œì} {A} {F} {G} {l} {p} {q} = B‚â°A‚Ä≤ {Œì = Œì} {A} {F} {G} {l} (BŒ† p q)
Œ£‚â°A‚Ä≤ : ‚àÄ {Œì : Con Term n} {A F G l p q m} ‚Üí _
Œ£‚â°A‚Ä≤ {Œì = Œì} {A} {F} {G} {l} {p} {q} {m} =
  B‚â°A‚Ä≤ {Œì = Œì} {A} {F} {G} {l} (BŒ£ m p q)

-- If A is judgmentally equal to Œ† F ‚ñπ G, then there exists H and E such that
-- A is propositionally equal to  Œ† H ‚ñπ E.
B‚â°A : ‚àÄ {A F G} W
    ‚Üí Œì ‚ä¢ ‚ü¶ W ‚üß F ‚ñπ G ‚â° A
    ‚Üí Whnf A
    ‚Üí ‚àÉ‚ÇÇ Œª H E ‚Üí A PE.‚â° ‚ü¶ W ‚üß H ‚ñπ E
B‚â°A {A} W W‚â°A whnfA with reducibleEq W‚â°A
B‚â°A {A} W W‚â°A whnfA | [W] , [A] , [W‚â°A] =
  B‚â°A‚Ä≤ W (B-elim W [W]) (irrelevanceEq [W] (B-intr W (B-elim W [W])) [W‚â°A]) whnfA

Œ†‚â°A : ‚àÄ {Œì : Con Term n} {A F G p q} ‚Üí Œì ‚ä¢ ‚ü¶ BŒ† p q ‚üß F ‚ñπ G ‚â° A
    ‚Üí Whnf A ‚Üí ‚àÉ‚ÇÇ Œª H E ‚Üí A PE.‚â° ‚ü¶ BŒ† p q ‚üß H ‚ñπ E
Œ†‚â°A {Œì = Œì} {A} {F} {G} {p} {q} x y with B‚â°A {Œì = Œì} {A} {F} {G} (BŒ† p q) x y
... | H , E , A‚â°Œ†HE = H , E , A‚â°Œ†HE

Œ£‚â°A : ‚àÄ {Œì : Con Term n} {A F G p q m} ‚Üí Œì ‚ä¢ ‚ü¶ BŒ£ m p q ‚üß F ‚ñπ G ‚â° A
    ‚Üí Whnf A ‚Üí ‚àÉ‚ÇÇ Œª H E ‚Üí A PE.‚â° ‚ü¶ BŒ£ m p q ‚üß H ‚ñπ E
Œ£‚â°A {p = p} {q} {m} x y with B‚â°A (BŒ£ m p q) x y
Œ£‚â°A _ _ | H , E , A‚â°Œ£HE   = H , E , A‚â°Œ£HE

-- If a WHNF A is definitionally equal to Œ†Œ£‚ü®¬†b¬†‚ü©¬†p¬†,¬†q¬†‚ñ∑¬†F¬†‚ñπ¬†G, then
-- A has the shape Œ†Œ£‚ü®¬†b¬†‚ü©¬†p¬†,¬†q¬†‚ñ∑¬†_¬†‚ñπ¬†_.

Œ†Œ£‚â°Whnf :
  Œì ‚ä¢ Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ F ‚ñπ G ‚â° A ‚Üí Whnf A ‚Üí
  ‚àÉ‚ÇÇ Œª H E ‚Üí A PE.‚â° Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ H ‚ñπ E
Œ†Œ£‚â°Whnf {b = BMŒ†}   = Œ†‚â°A
Œ†Œ£‚â°Whnf {b = BMŒ£ _} = Œ£‚â°A

opaque

  -- If the WHNF B is judgmentally equal to Id¬†A¬†t¬†u, then there are
  -- A‚Ä≤, t‚Ä≤ and u‚Ä≤ such that B is propositionally equal to
  -- Id¬†A‚Ä≤¬†t‚Ä≤¬†u‚Ä≤.

  Id‚â°Whnf :
    Œì ‚ä¢ Id A t u ‚â° B ‚Üí Whnf B ‚Üí
    ‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí B PE.‚â° Id A‚Ä≤ t‚Ä≤ u‚Ä≤
  Id‚â°Whnf {Œì} {A} {t} {u} {B} Id‚â°B B-whnf =
    case reducibleEq Id‚â°B of Œª {
      (‚ä©Id , ‚ä©B , ‚ä©Id‚â°B) ‚Üí
      helper (Id-elim ‚ä©Id)
        (irrelevanceEq ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©Id‚â°B) }
    where
    helper :
      (‚ä©Id : Œì ‚ä©‚ü® l ‚ü©Id Id A t u) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© Id A t u ‚â° B / Id-intr ‚ä©Id ‚Üí
      ‚àÉ‚ÇÉ Œª A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚Üí B PE.‚â° Id A‚Ä≤ t‚Ä≤ u‚Ä≤
    helper (emb 0<1 ‚ä©Id) ‚ä©Id‚â°B = helper ‚ä©Id ‚ä©Id‚â°B
    helper (noemb ‚ä©Id)   ‚ä©Id‚â°B =
      _ , _ , _ , whnfRed* (red (_‚ä©‚ÇóId_‚â°_/_.‚áí*Id‚Ä≤ ‚ä©Id‚â°B)) B-whnf

opaque

  -- If t is definitionally equal to rfl, then t reduces to rfl.

  rfl-norm : Œì ‚ä¢ t ‚â° rfl ‚à∑ A ‚Üí Œì ‚ä¢ t ‚áí* rfl ‚à∑ A
  rfl-norm {Œì} {t} t‚â°rfl =
    case inversion-rfl (syntacticEqTerm t‚â°rfl .proj‚ÇÇ .proj‚ÇÇ) of Œª {
      (_ , _ , _ , _ , A‚â°Id) ‚Üí
    case reducibleEqTerm (conv t‚â°rfl A‚â°Id) of Œª {
      (‚ä©Id , ‚ä©t‚â°rfl) ‚Üí
    conv*
      (helper (Id-elim ‚ä©Id)
         (irrelevanceEqTerm ‚ä©Id (Id-intr (Id-elim ‚ä©Id)) ‚ä©t‚â°rfl))
      (sym A‚â°Id) }}
    where
    helper :
      (‚ä©Id : Œì ‚ä©‚ü® l ‚ü©Id Id B u v) ‚Üí
      Œì ‚ä©‚ü® l ‚ü© t ‚â° rfl ‚à∑ Id B u v / Id-intr ‚ä©Id ‚Üí
      Œì ‚ä¢ t ‚áí* rfl ‚à∑ Id B u v
    helper (emb 0<1 ‚ä©Id) ‚ä©t‚â°rfl =
      helper ‚ä©Id ‚ä©t‚â°rfl
    helper {B} {u} {v} (noemb ‚ä©Id) ‚ä©t‚â°rfl@(t‚Ä≤ , _ , t‚áí*t‚Ä≤ , _) =
      case PE.subst (_‚ä¢_‚áí*_‚à∑_ _ _ _)
             (PE.sym $ whnfRed* (red (_‚ä©‚ÇóId_.‚áí*Id ‚ä©Id)) Id‚Çô)
             (red‚Çú t‚áí*t‚Ä≤) of Œª {
        t‚áí*t‚Ä≤ ‚Üí
      case ‚ä©Id‚â°‚à∑-view-inhabited ‚ä©Id ‚ä©t‚â°rfl of Œª where
        (rfl‚Çå _)       ‚Üí t‚áí*t‚Ä≤
        (ne t‚Ä≤-ne _ _) ‚Üí           $‚ü® t‚áí*t‚Ä≤ ‚ü©
          Œì ‚ä¢ t ‚áí* t‚Ä≤ ‚à∑ Id B u v   ‚Üí‚ü® subset*Term ‚ü©
          Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ Id B u v    ‚Üí‚ü® trans (sym (escapeTermEq (Id·µ£ ‚ä©Id) ‚ä©t‚â°rfl)) ‚ü©
          Œì ‚ä¢ rfl ‚â° t‚Ä≤ ‚à∑ Id B u v  ‚Üí‚ü® I.rfl‚â¢ne t‚Ä≤-ne ‚ü©
          ‚ä•                        ‚Üí‚ü® ‚ä•-elim ‚ü©
          Œì ‚ä¢ t ‚áí* rfl ‚à∑ Id B u v  ‚ñ° }

opaque

  -- If the WHNF t is judgmentally equal to rfl, then t is
  -- propositionally equal to rfl.

  whnf‚â°rfl : Œì ‚ä¢ t ‚â° rfl ‚à∑ A ‚Üí Whnf t ‚Üí t PE.‚â° rfl
  whnf‚â°rfl = whnfRed*Term ‚àò‚Üí rfl-norm
