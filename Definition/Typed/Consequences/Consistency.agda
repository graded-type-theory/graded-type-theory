------------------------------------------------------------------------
-- Consistency of equality of natural numbers.
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Consequences.Consistency
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.Typed R
open import Definition.Typed.Consequences.Canonicity R
open import Definition.Typed.Consequences.Substitution R
open import Definition.Typed.Properties R
open import Definition.Typed.EqRelInstance R
open import Definition.LogicalRelation R
open import Definition.LogicalRelation.Irrelevance R
open import Definition.LogicalRelation.ShapeView R
open import Definition.LogicalRelation.Fundamental.Reducibility R

open import Tools.Empty
open import Tools.Function
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Relation

private
  variable
    n   : Nat
    Œì   : Con Term n
    œÉ   : Subst _ _
    t u : Term n

opaque

  -- If there is some way to instantiate all the types in¬†Œì, then Œì is
  -- consistent.

  inhabited-consistent : Œµ ‚ä¢À¢ œÉ ‚à∑ Œì ‚Üí Consistent Œì
  inhabited-consistent ‚ä¢œÉ _ ‚ä¢t = ¬¨Empty (substitutionTerm ‚ä¢t ‚ä¢œÉ Œµ)

zero‚â¢suc‚Ä≤ : ‚àÄ {l} ([‚Ñï] : Œì ‚ä©‚ü® l ‚ü©‚Ñï ‚Ñï)
           ‚Üí Œì ‚ä©‚ü® l ‚ü© zero ‚â° suc t ‚à∑ ‚Ñï / ‚Ñï-intr [‚Ñï] ‚Üí ‚ä•
zero‚â¢suc‚Ä≤ (noemb x) (‚Ñï‚Çú‚Çå .(suc _) .(suc _) d d‚Ä≤ k‚â°k‚Ä≤ (suc·µ£ x‚ÇÅ))
  with whnfRed*Term (red‚Çú d) zero‚Çô
... | ()
zero‚â¢suc‚Ä≤ (noemb x) (‚Ñï‚Çú‚Çå .zero .zero d d‚Ä≤ k‚â°k‚Ä≤ zero·µ£)
  with (PE.sym (whnfRed*Term (red‚Çú d‚Ä≤) suc‚Çô))
... | ()
zero‚â¢suc‚Ä≤ (noemb x) (‚Ñï‚Çú‚Çå k k‚Ä≤ d d‚Ä≤ k‚â°k‚Ä≤ (ne (neNf‚Çú‚Çå neK neM k‚â°m))) =
  zero‚â¢ne neK (whnfRed*Term (red‚Çú d) zero‚Çô)
zero‚â¢suc‚Ä≤ (emb 0<1 [‚Ñï]) n = zero‚â¢suc‚Ä≤ [‚Ñï] n

-- Zero cannot be judgmentally equal to suc t.
zero‚â¢suc : Œì ‚ä¢ zero ‚â° suc t ‚à∑ ‚Ñï ‚Üí ‚ä•
zero‚â¢suc 0‚â°s =
  let [‚Ñï] , [0‚â°s] = reducibleEqTerm 0‚â°s
  in  zero‚â¢suc‚Ä≤ (‚Ñï-elim [‚Ñï]) (irrelevanceEqTerm [‚Ñï] (‚Ñï-intr (‚Ñï-elim [‚Ñï])) [0‚â°s])

zero‚â¢one : Œì ‚ä¢ zero ‚â° suc zero ‚à∑ ‚Ñï ‚Üí ‚ä•
zero‚â¢one = zero‚â¢suc

opaque

  -- A variant of zero‚â¢suc: the identity type Id¬†‚Ñï¬†zero¬†(suc¬†t) is not
  -- inhabited in the empty context.

  ¬¨-Id-‚Ñï-zero-suc : ¬¨ Œµ ‚ä¢ u ‚à∑ Id ‚Ñï zero (suc t)
  ¬¨-Id-‚Ñï-zero-suc {u} {t} =
    Œµ ‚ä¢ u ‚à∑ Id ‚Ñï zero (suc t)  ‚Üí‚ü® Œµ‚ä¢‚à∑Id‚ÜíŒµ‚ä¢‚â°‚à∑ ‚ü©
    Œµ ‚ä¢ zero ‚â° suc t ‚à∑ ‚Ñï       ‚Üí‚ü® zero‚â¢suc ‚ü©
    ‚ä•                          ‚ñ°
