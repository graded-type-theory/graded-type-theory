------------------------------------------------------------------------
-- Well-formedness lemmas
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Well-formed
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Typed R
open import Definition.Typed.Properties.Admissible.Primitive R
open import Definition.Typed.Properties.Inversion R
open import Definition.Typed.Properties.Well-formed R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution R
open import Definition.Typed.Weakening R

open import Definition.Untyped M
open import Definition.Untyped.Properties M

import Graded.Derived.Erased.Typed.Primitive R as Erased

open import Tools.Fin
open import Tools.Function
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÇ)

private variable
  x             : Fin _
  Œì Œî           : Con Term _
  A B t t‚ÇÅ t‚ÇÇ u : Term _
  œÉ‚ÇÅ œÉ‚ÇÇ         : Subst _ _

------------------------------------------------------------------------
-- Well-formedness lemmas

opaque

  -- A well-formedness lemma for _‚à∑_‚àà_.

  wf-‚à∑‚àà : x ‚à∑ A ‚àà Œì ‚Üí ‚ä¢ Œì ‚Üí Œì ‚ä¢ A
  wf-‚à∑‚àà here       (‚àô ‚ä¢A) = wk‚ÇÅ ‚ä¢A ‚ä¢A
  wf-‚à∑‚àà (there x‚àà) (‚àô ‚ä¢B) = wk‚ÇÅ ‚ä¢B (wf-‚à∑‚àà x‚àà (wf ‚ä¢B))

opaque mutual

  -- A well-formedness lemma for _‚ä¢_‚à∑_.

  wf-‚ä¢‚à∑ : Œì ‚ä¢ t ‚à∑ A ‚Üí Œì ‚ä¢ A
  wf-‚ä¢‚à∑ = Œª where
    (conv _ B‚â°A) ‚Üí
      let _ , ‚ä¢A = wf-‚ä¢‚â° B‚â°A in
      ‚ä¢A
    (var ‚ä¢Œì x‚àà) ‚Üí
      wf-‚à∑‚àà x‚àà ‚ä¢Œì
    (U‚±º ‚ä¢Œì) ‚Üí
      U‚±º ‚ä¢Œì
    (Œ†Œ£‚±º ‚ä¢A _ _) ‚Üí
      U‚±º (wfTerm ‚ä¢A)
    (lam‚±º ‚ä¢B _ ok) ‚Üí
      Œ†Œ£‚±º ‚ä¢B ok
    (‚ä¢t ‚àò‚±º ‚ä¢u) ‚Üí
      let _ , (‚ä¢B , _) , _ = inversion-Œ†Œ£-‚ä¢ (wf-‚ä¢‚à∑ ‚ä¢t) in
      subst-‚ä¢ ‚ä¢B (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢u)
    (prod‚±º ‚ä¢B _ _ ok) ‚Üí
      Œ†Œ£‚±º ‚ä¢B ok
    (fst‚±º ‚ä¢B _) ‚Üí
      ‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B)
    (snd‚±º ‚ä¢B ‚ä¢t) ‚Üí
      subst-‚ä¢ ‚ä¢B (‚ä¢À¢ ∑‚à∑-sgSubst (fst‚±º ‚ä¢B ‚ä¢t))
    (prodrec‚±º ‚ä¢C ‚ä¢t _ _) ‚Üí
      subst-‚ä¢ ‚ä¢C (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t)
    (Empty‚±º ‚ä¢Œì) ‚Üí
      U‚±º ‚ä¢Œì
    (emptyrec‚±º ‚ä¢A _) ‚Üí
      ‚ä¢A
    (star‚±º ‚ä¢Œì ok) ‚Üí
      Unit‚±º ‚ä¢Œì ok
    (unitrec‚±º ‚ä¢A ‚ä¢t _ _) ‚Üí
      subst-‚ä¢ ‚ä¢A (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t)
    (Unit‚±º ‚ä¢Œì _) ‚Üí
      U‚±º ‚ä¢Œì
    (‚Ñï‚±º ‚ä¢Œì) ‚Üí
      U‚±º ‚ä¢Œì
    (zero‚±º ‚ä¢Œì) ‚Üí
      ‚Ñï‚±º ‚ä¢Œì
    (suc‚±º ‚ä¢t) ‚Üí
      ‚Ñï‚±º (wfTerm ‚ä¢t)
    (natrec‚±º _ ‚ä¢u ‚ä¢v) ‚Üí
      subst-‚ä¢ (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢u)) (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v)
    (Id‚±º ‚ä¢A _ _) ‚Üí
      U‚±º (wfTerm ‚ä¢A)
    (rfl‚±º ‚ä¢t) ‚Üí
      Id‚±º (wf-‚ä¢‚à∑ ‚ä¢t) ‚ä¢t ‚ä¢t
    (J‚±º _ ‚ä¢B _ ‚ä¢v ‚ä¢w) ‚Üí
      subst-‚ä¢ ‚ä¢B $
      ‚ä¢À¢ ∑‚à∑‚àô‚áî .proj‚ÇÇ
        ( ‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v
        , PE.subst (_‚ä¢_‚à∑_ _ _)
            (PE.sym $
             PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl)
            ‚ä¢w
        )
    (K‚±º ‚ä¢B _ ‚ä¢v _) ‚Üí
      subst-‚ä¢ ‚ä¢B (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v)
    ([]-cong‚±º ‚ä¢A ‚ä¢t ‚ä¢u _ ok) ‚Üí
      let open Erased ([]-cong‚ÜíErased ok) in
      Id‚±º (Erased‚±º ‚ä¢A) ([]‚±º ‚ä¢A ‚ä¢t) ([]‚±º ‚ä¢A ‚ä¢u)

  -- A well-formedness lemma for _‚ä¢_‚â°_.

  wf-‚ä¢‚â° : Œì ‚ä¢ A ‚â° B ‚Üí Œì ‚ä¢ A √ó Œì ‚ä¢ B
  wf-‚ä¢‚â° = Œª where
    (refl ‚ä¢A) ‚Üí
      ‚ä¢A , ‚ä¢A
    (sym B‚â°A) ‚Üí
      let ‚ä¢B , ‚ä¢A = wf-‚ä¢‚â° B‚â°A in
      ‚ä¢A , ‚ä¢B
    (trans A‚â°B B‚â°C) ‚Üí
      let ‚ä¢A , _  = wf-‚ä¢‚â° A‚â°B
          _  , ‚ä¢C = wf-‚ä¢‚â° B‚â°C
      in
      ‚ä¢A , ‚ä¢C
    (univ A‚â°B) ‚Üí
      let _ , ‚ä¢A , ‚ä¢B = wf-‚ä¢‚â°‚à∑ A‚â°B in
      univ ‚ä¢A , univ ‚ä¢B
    (Œ†Œ£-cong A‚ÇÅ‚â°B‚ÇÅ A‚ÇÇ‚â°B‚ÇÇ ok) ‚Üí
      let _ , ‚ä¢B‚ÇÅ   = wf-‚ä¢‚â° A‚ÇÅ‚â°B‚ÇÅ
          ‚ä¢A‚ÇÇ , ‚ä¢B‚ÇÇ = wf-‚ä¢‚â° A‚ÇÇ‚â°B‚ÇÇ
      in
      Œ†Œ£‚±º ‚ä¢A‚ÇÇ ok ,
      Œ†Œ£‚±º (stability-‚ä¢ (reflConEq (wf ‚ä¢B‚ÇÅ) ‚àô‚ü® ‚ä¢B‚ÇÅ ‚à£ A‚ÇÅ‚â°B‚ÇÅ ‚ü©) ‚ä¢B‚ÇÇ) ok
    (Id-cong A‚â°B t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ) ‚Üí
      let ‚ä¢A , ‚ä¢B       = wf-‚ä¢‚â° A‚â°B
          _ , ‚ä¢t‚ÇÅ , ‚ä¢u‚ÇÅ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°u‚ÇÅ
          _ , ‚ä¢t‚ÇÇ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÇ‚â°u‚ÇÇ
      in
      Id‚±º ‚ä¢A ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ , Id‚±º ‚ä¢B (conv ‚ä¢u‚ÇÅ A‚â°B) (conv ‚ä¢u‚ÇÇ A‚â°B)

  -- A well-formedness lemma for _‚ä¢_‚â°_‚à∑_.

  wf-‚ä¢‚â°‚à∑ : Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí (Œì ‚ä¢ A) √ó Œì ‚ä¢ t ‚à∑ A √ó Œì ‚ä¢ u ‚à∑ A
  wf-‚ä¢‚â°‚à∑ = Œª where
    (refl ‚ä¢t) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢t , ‚ä¢t , ‚ä¢t
    (sym _ t‚ÇÇ‚â°t‚ÇÅ) ‚Üí
      let ‚ä¢A , ‚ä¢t‚ÇÇ , ‚ä¢t‚ÇÅ = wf-‚ä¢‚â°‚à∑ t‚ÇÇ‚â°t‚ÇÅ in
      ‚ä¢A , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ
    (trans t‚ÇÅ‚â°t‚ÇÇ t‚ÇÇ‚â°t‚ÇÉ) ‚Üí
      let ‚ä¢A , ‚ä¢t‚ÇÅ , _ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , _ , ‚ä¢t‚ÇÉ  = wf-‚ä¢‚â°‚à∑ t‚ÇÇ‚â°t‚ÇÉ
      in
      ‚ä¢A , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÉ
    (conv t‚ÇÅ‚â°t‚ÇÇ B‚â°A) ‚Üí
      let _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢A        = wf-‚ä¢‚â° B‚â°A
      in
      ‚ä¢A , conv ‚ä¢t‚ÇÅ B‚â°A , conv ‚ä¢t‚ÇÇ B‚â°A
    (Œ†Œ£-cong A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ ok) ‚Üí
      let _ , ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ = wf-‚ä¢‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢B‚ÇÅ , ‚ä¢B‚ÇÇ = wf-‚ä¢‚â°‚à∑ B‚ÇÅ‚â°B‚ÇÇ
      in
      U‚±º (wfTerm ‚ä¢A‚ÇÅ) ,
      Œ†Œ£‚±º ‚ä¢A‚ÇÅ ‚ä¢B‚ÇÅ ok ,
      Œ†Œ£‚±º ‚ä¢A‚ÇÇ
        (stability-‚ä¢‚à∑
           (reflConEq (wfTerm ‚ä¢A‚ÇÅ) ‚àô‚ü® univ ‚ä¢A‚ÇÇ ‚à£ univ A‚ÇÅ‚â°A‚ÇÇ ‚ü©) ‚ä¢B‚ÇÇ)
        ok
    (app-cong t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
      let ‚ä¢Œ† , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ   = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ    = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          _ , (‚ä¢B , _) , _ = inversion-Œ†Œ£-‚ä¢ ‚ä¢Œ†
      in
      subst-‚ä¢ ‚ä¢B (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢u‚ÇÅ) ,
      ‚ä¢t‚ÇÅ ‚àò‚±º ‚ä¢u‚ÇÅ ,
      conv (‚ä¢t‚ÇÇ ‚àò‚±º ‚ä¢u‚ÇÇ)
        (sym (subst-‚ä¢‚â° (refl ‚ä¢B) (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢u‚ÇÅ ‚ä¢u‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ)))
    (Œ≤-red ‚ä¢B ‚ä¢t ‚ä¢u PE.refl ok) ‚Üí
      let ‚ä¢[u]‚ÇÄ = ‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢u in
      subst-‚ä¢ ‚ä¢B ‚ä¢[u]‚ÇÄ ,
      lam‚±º ‚ä¢B ‚ä¢t ok ‚àò‚±º ‚ä¢u ,
      subst-‚ä¢‚à∑ ‚ä¢t ‚ä¢[u]‚ÇÄ
    (Œ∑-eq ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ _ ok) ‚Üí
      Œ†Œ£‚±º ‚ä¢B ok , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ
    (fst-cong ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
      let _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ in
      ‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B) , fst‚±º ‚ä¢B ‚ä¢t‚ÇÅ , fst‚±º ‚ä¢B ‚ä¢t‚ÇÇ
    (snd-cong ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
      let _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ   = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          [fst]‚ÇÄ‚â°[fst]‚ÇÄ   = ‚ä¢À¢ ∑‚â°‚à∑-sgSubst (fst‚±º ‚ä¢B ‚ä¢t‚ÇÅ) (fst‚±º ‚ä¢B ‚ä¢t‚ÇÇ)
                              (fst-cong ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ)
          _ , ‚ä¢[fst]‚ÇÄ , _ = wf-‚ä¢À¢ ∑‚â°‚à∑ [fst]‚ÇÄ‚â°[fst]‚ÇÄ
      in
      subst-‚ä¢ ‚ä¢B ‚ä¢[fst]‚ÇÄ ,
      snd‚±º ‚ä¢B ‚ä¢t‚ÇÅ ,
      conv (snd‚±º ‚ä¢B ‚ä¢t‚ÇÇ) (sym (subst-‚ä¢‚â° (refl ‚ä¢B) [fst]‚ÇÄ‚â°[fst]‚ÇÄ))
    (Œ£-Œ≤‚ÇÅ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ PE.refl ok) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢t‚ÇÅ , fst‚±º ‚ä¢B (prod‚±º ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok) , ‚ä¢t‚ÇÅ
    (Œ£-Œ≤‚ÇÇ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ PE.refl ok) ‚Üí
      let ‚ä¢prod                = prod‚±º ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok
          [t]‚ÇÄ‚â°[fst[t,u]]‚ÇÄ     = ‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ (fst‚±º ‚ä¢B ‚ä¢prod)
                                   (_‚ä¢_‚â°_‚à∑_.sym (‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B)) $
                                    Œ£-Œ≤‚ÇÅ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ PE.refl ok)
          _ , _ , ‚ä¢[fst[t,u]]‚ÇÄ = wf-‚ä¢À¢ ∑‚â°‚à∑ [t]‚ÇÄ‚â°[fst[t,u]]‚ÇÄ
      in
      subst-‚ä¢ ‚ä¢B ‚ä¢[fst[t,u]]‚ÇÄ ,
      snd‚±º ‚ä¢B ‚ä¢prod ,
      conv ‚ä¢t‚ÇÇ (subst-‚ä¢‚â° (refl ‚ä¢B) [t]‚ÇÄ‚â°[fst[t,u]]‚ÇÄ)
    (Œ£-Œ∑ ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ _ _ ok) ‚Üí
      Œ†Œ£‚±º ‚ä¢B ok , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ
    (prod-cong ‚ä¢B t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ ok) ‚Üí
      let _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
      in
      Œ†Œ£‚±º ‚ä¢B ok ,
      prod‚±º ‚ä¢B ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ok ,
      prod‚±º ‚ä¢B ‚ä¢t‚ÇÇ
        (conv ‚ä¢u‚ÇÇ (subst-‚ä¢‚â° (refl ‚ä¢B) (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)))
        ok
    (prodrec-cong {G = B} C‚ÇÅ‚â°C‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ ok) ‚Üí
      let ‚ä¢C‚ÇÅ , ‚ä¢C‚ÇÇ     = wf-‚ä¢‚â° C‚ÇÅ‚â°C‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          ‚ä¢B            = ‚ä¢‚àô‚Üí‚ä¢ (wfEqTerm u‚ÇÅ‚â°u‚ÇÇ)
          ‚ä¢A            = ‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B)
          ‚ä¢wk2-id       = ‚ä¢À¢ ∑‚à∑-wk1Subst ‚ä¢B $
                          ‚ä¢À¢ ∑‚à∑-wk1Subst ‚ä¢A $
                          ‚ä¢À¢ ∑‚à∑-idSubst (wf ‚ä¢A)
      in
      subst-‚ä¢ ‚ä¢C‚ÇÅ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t‚ÇÅ) ,
      prodrec‚±º ‚ä¢C‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ok ,
      conv
        (prodrec‚±º ‚ä¢C‚ÇÇ ‚ä¢t‚ÇÇ
           (conv ‚ä¢u‚ÇÇ $
            subst-‚ä¢‚â° C‚ÇÅ‚â°C‚ÇÇ $
            refl-‚ä¢À¢ ∑‚â°‚à∑ $
            ‚ä¢À¢ ∑‚à∑‚àô‚áî .proj‚ÇÇ
              ( ‚ä¢wk2-id
              , prod‚±º
                  (subst-‚ä¢ ‚ä¢B (‚ä¢À¢ ∑‚à∑-‚áë (subst-‚ä¢ ‚ä¢A ‚ä¢wk2-id) ‚ä¢wk2-id))
                  (PE.subst (_‚ä¢_‚à∑_ _ _) (wk[]‚â°[] 2) (var‚ÇÅ ‚ä¢B))
                  (PE.subst (_‚ä¢_‚à∑_ _ _)
                     (PE.trans (PE.sym [1]‚Üë¬≤) $
                      PE.sym $ singleSubstComp _ _ B) $
                   var‚ÇÄ ‚ä¢B)
                  ok
              ))
           ok)
        (sym (subst-‚ä¢‚â° C‚ÇÅ‚â°C‚ÇÇ (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)))
    (prodrec-Œ≤ {A = C} ‚ä¢C ‚ä¢t ‚ä¢u ‚ä¢v PE.refl ok) ‚Üí
      subst-‚ä¢ ‚ä¢C (‚ä¢À¢ ∑‚à∑-sgSubst (prod‚±º (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢v)) ‚ä¢t ‚ä¢u ok)) ,
      prodrec‚±º ‚ä¢C (prod‚±º (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢v)) ‚ä¢t ‚ä¢u ok) ‚ä¢v ok ,
      PE.subst (_‚ä¢_‚à∑_ _ _) ([1,0]‚Üë¬≤[,] C)
        (subst-‚ä¢‚à∑ ‚ä¢v (‚ä¢À¢ ∑‚à∑‚àô‚áî .proj‚ÇÇ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t , ‚ä¢u)))
    (emptyrec-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
      let ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ     = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
      in
      ‚ä¢A‚ÇÅ , emptyrec‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ , conv (emptyrec‚±º ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ) (sym A‚ÇÅ‚â°A‚ÇÇ)
    (unitrec-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ ok _) ‚Üí
      let ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ     = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
      in
      subst-‚ä¢ ‚ä¢A‚ÇÅ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t‚ÇÅ) ,
      unitrec‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ok ,
      conv
        (unitrec‚±º ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ
           (conv ‚ä¢u‚ÇÇ $
            subst-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ $
            refl-‚ä¢À¢ ∑‚â°‚à∑ $ ‚ä¢À¢ ∑‚à∑-sgSubst (star‚±º (wfTerm ‚ä¢t‚ÇÅ) ok))
           ok)
        (sym (subst-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)))
    (unitrec-Œ≤ ‚ä¢A ‚ä¢t ok _) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢t , unitrec‚±º ‚ä¢A (star‚±º (wfTerm ‚ä¢t) ok) ‚ä¢t ok , ‚ä¢t
    (unitrec-Œ≤-Œ∑ ‚ä¢A ‚ä¢t ‚ä¢u ok Œ∑) ‚Üí
      let ‚ä¢star = star‚±º (wfTerm ‚ä¢t) ok in
      subst-‚ä¢ ‚ä¢A (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢t) ,
      unitrec‚±º ‚ä¢A ‚ä¢t ‚ä¢u ok ,
      conv ‚ä¢u
        (subst-‚ä¢‚â° (refl ‚ä¢A) $
         ‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢star ‚ä¢t (Œ∑-unit ‚ä¢star ‚ä¢t (inj‚ÇÇ Œ∑)))
    (Œ∑-unit ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ _) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ
    (suc-cong t‚ÇÅ‚â°t‚ÇÇ) ‚Üí
      let ‚ä¢‚Ñï , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ in
      ‚ä¢‚Ñï , suc‚±º ‚ä¢t‚ÇÅ , suc‚±º ‚ä¢t‚ÇÇ
    (natrec-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ) ‚Üí
      let ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ     = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          _ , ‚ä¢v‚ÇÅ , ‚ä¢v‚ÇÇ = wf-‚ä¢‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ
          ‚ä¢Œì            = wfTerm ‚ä¢t‚ÇÅ
      in
      subst-‚ä¢ ‚ä¢A‚ÇÅ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v‚ÇÅ) ,
      natrec‚±º ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ‚ä¢v‚ÇÅ ,
      conv
        (natrec‚±º
           (conv ‚ä¢t‚ÇÇ $
            subst-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ (refl-‚ä¢À¢ ∑‚â°‚à∑ (‚ä¢À¢ ∑‚à∑-sgSubst (zero‚±º ‚ä¢Œì))))
           (stability-‚ä¢‚à∑ (reflConEq (‚àô ‚Ñï‚±º ‚ä¢Œì) ‚àô‚ü® ‚ä¢A‚ÇÇ ‚à£ A‚ÇÅ‚â°A‚ÇÇ ‚ü©) $
            conv ‚ä¢u‚ÇÇ $ subst-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ $ refl-‚ä¢À¢ ∑‚â°‚à∑ $
            ‚ä¢À¢ ∑‚à∑‚àô‚áî .proj‚ÇÇ
              ( ‚ä¢À¢ ∑‚à∑-wk1Subst ‚ä¢A‚ÇÅ
                  (‚ä¢À¢ ∑‚à∑-wk1Subst (‚Ñï‚±º ‚ä¢Œì) (‚ä¢À¢ ∑‚à∑-idSubst ‚ä¢Œì))
              , suc‚±º (var‚ÇÅ ‚ä¢A‚ÇÅ)
              ))
           ‚ä¢v‚ÇÇ)
        (sym $ subst-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢v‚ÇÅ ‚ä¢v‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ))
    (natrec-zero ‚ä¢t ‚ä¢u) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢t , natrec‚±º ‚ä¢t ‚ä¢u (zero‚±º (wfTerm ‚ä¢t)) , ‚ä¢t
    (natrec-suc {A} ‚ä¢t ‚ä¢u ‚ä¢v) ‚Üí
      subst-‚ä¢ (‚ä¢‚àô‚Üí‚ä¢ (wfTerm ‚ä¢u)) (‚ä¢À¢ ∑‚à∑-sgSubst (suc‚±º ‚ä¢v)) ,
      natrec‚±º ‚ä¢t ‚ä¢u (suc‚±º ‚ä¢v) ,
      PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ substComp‚Üë¬≤ A _)
        (subst-‚ä¢‚à∑ ‚ä¢u $
         ‚ä¢À¢ ∑‚à∑‚àô‚áî .proj‚ÇÇ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v , natrec‚±º ‚ä¢t ‚ä¢u ‚ä¢v))
    (Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
      let _ , ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ = wf-‚ä¢‚â°‚à∑ A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          A‚ÇÅ‚â°A‚ÇÇ         = univ A‚ÇÅ‚â°A‚ÇÇ
      in
      U‚±º (wfTerm ‚ä¢A‚ÇÅ) ,
      Id‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ,
      Id‚±º ‚ä¢A‚ÇÇ (conv ‚ä¢t‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ) (conv ‚ä¢u‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ)
    (J-cong A‚ÇÅ‚â°A‚ÇÇ ‚ä¢t‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ) ‚Üí
      let ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ        = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , _ , ‚ä¢t‚ÇÇ      = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          ‚ä¢t‚ÇÇ‚Ä≤             = conv ‚ä¢t‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ
          ‚ä¢B‚ÇÅ , ‚ä¢B‚ÇÇ        = wf-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ    = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          _ , ‚ä¢v‚ÇÅ , ‚ä¢v‚ÇÇ    = wf-‚ä¢‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ
          _ , ‚ä¢w‚ÇÅ , ‚ä¢w‚ÇÇ    = wf-‚ä¢‚â°‚à∑ w‚ÇÅ‚â°w‚ÇÇ
          A‚ÇÅ‚â°A‚ÇÇ‚Ä≤           = wkEq‚ÇÅ ‚ä¢A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ
          ‚ä¢rfl             = PE.subst (_‚ä¢_‚à∑_ _ _)
                               (PE.sym $
                                PE.cong‚ÇÉ Id (wk1-sgSubst _ _)
                                  (wk1-sgSubst _ _) PE.refl) $
                             rfl‚±º ‚ä¢t‚ÇÅ
          [v‚ÇÅ,w‚ÇÅ]‚â°[v‚ÇÇ,w‚ÇÇ]  = ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî .proj‚ÇÇ
                               ( ‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢v‚ÇÅ ‚ä¢v‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ
                               , PE.subst (_‚ä¢_‚à∑_ _ _)
                                   (PE.sym $
                                    PE.cong‚ÇÉ Id (wk1-sgSubst _ _)
                                      (wk1-sgSubst _ _) PE.refl)
                                   ‚ä¢w‚ÇÅ
                               , PE.subst (_‚ä¢_‚à∑_ _ _)
                                   (PE.sym $
                                    PE.cong‚ÇÉ Id (wk1-sgSubst _ _)
                                      (wk1-sgSubst _ _) PE.refl)
                                   (conv ‚ä¢w‚ÇÇ $
                                    Id-cong (refl ‚ä¢A‚ÇÅ) (refl ‚ä¢t‚ÇÅ) v‚ÇÅ‚â°v‚ÇÇ)
                               , PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
                                   (PE.sym $
                                    PE.cong‚ÇÉ Id (wk1-sgSubst _ _)
                                      (wk1-sgSubst _ _) PE.refl)
                                   w‚ÇÅ‚â°w‚ÇÇ
                               )
          _ , ‚ä¢[v‚ÇÅ,w‚ÇÅ] , _ = wf-‚ä¢À¢ ∑‚â°‚à∑ [v‚ÇÅ,w‚ÇÅ]‚â°[v‚ÇÇ,w‚ÇÇ]
      in
      subst-‚ä¢ ‚ä¢B‚ÇÅ ‚ä¢[v‚ÇÅ,w‚ÇÅ] ,
      J‚±º ‚ä¢t‚ÇÅ ‚ä¢B‚ÇÅ ‚ä¢u‚ÇÅ ‚ä¢v‚ÇÅ ‚ä¢w‚ÇÅ ,
      conv
        (J‚±º ‚ä¢t‚ÇÇ‚Ä≤
           (stability-‚ä¢
              (reflConEq (wfTerm ‚ä¢t‚ÇÅ)
                 ‚àô‚ü® ‚ä¢A‚ÇÇ ‚à£ A‚ÇÅ‚â°A‚ÇÇ ‚ü©
                 ‚àô‚ü® Id‚±º (wk‚ÇÅ ‚ä¢A‚ÇÇ ‚ä¢A‚ÇÇ) (wkTerm‚ÇÅ ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ‚Ä≤) (var‚ÇÄ ‚ä¢A‚ÇÇ)
                  ‚à£ Id-cong A‚ÇÅ‚â°A‚ÇÇ‚Ä≤ (wkEqTerm‚ÇÅ ‚ä¢A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)
                      (refl (conv (var‚ÇÄ ‚ä¢A‚ÇÇ) (sym A‚ÇÅ‚â°A‚ÇÇ‚Ä≤)))
                  ‚ü©)
              ‚ä¢B‚ÇÇ)
           (conv ‚ä¢u‚ÇÇ $
            subst-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ $
            ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî .proj‚ÇÇ
              ( ‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
              , ‚ä¢rfl
              , conv ‚ä¢rfl
                  (PE.subst‚ÇÇ (_‚ä¢_‚â°_ _)
                     (PE.sym $
                      PE.cong‚ÇÉ Id
                        (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl)
                     (PE.sym $
                      PE.cong‚ÇÉ Id
                        (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
                   Id-cong (refl ‚ä¢A‚ÇÅ) (refl ‚ä¢t‚ÇÅ) t‚ÇÅ‚â°t‚ÇÇ)
              , refl ‚ä¢rfl
              ))
           (conv ‚ä¢v‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ) (conv ‚ä¢w‚ÇÇ (Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ)))
        (sym (subst-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ [v‚ÇÅ,w‚ÇÅ]‚â°[v‚ÇÇ,w‚ÇÇ]))
    (J-Œ≤ ‚ä¢t ‚ä¢B ‚ä¢u PE.refl) ‚Üí
      wf-‚ä¢‚à∑ ‚ä¢u , J‚±º ‚ä¢t ‚ä¢B ‚ä¢u ‚ä¢t (rfl‚±º ‚ä¢t) , ‚ä¢u
    (K-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ ok) ‚Üí
      let ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ     = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          ‚ä¢B‚ÇÅ , ‚ä¢B‚ÇÇ     = wf-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          _ , ‚ä¢v‚ÇÅ , ‚ä¢v‚ÇÇ = wf-‚ä¢‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ
          Id‚â°Id         = Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
          ‚ä¢t‚ÇÇ‚Ä≤          = conv ‚ä¢t‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ
      in
      subst-‚ä¢ ‚ä¢B‚ÇÅ (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢v‚ÇÅ) ,
      K‚±º ‚ä¢B‚ÇÅ ‚ä¢u‚ÇÅ ‚ä¢v‚ÇÅ ok ,
      conv
        (K‚±º
           (stability-‚ä¢
              (reflConEq (wf ‚ä¢A‚ÇÅ) ‚àô‚ü® Id‚±º ‚ä¢A‚ÇÇ ‚ä¢t‚ÇÇ‚Ä≤ ‚ä¢t‚ÇÇ‚Ä≤ ‚à£ Id‚â°Id ‚ü©) ‚ä¢B‚ÇÇ)
           (conv ‚ä¢u‚ÇÇ $
            subst-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ (refl-‚ä¢À¢ ∑‚â°‚à∑ (‚ä¢À¢ ∑‚à∑-sgSubst (rfl‚±º ‚ä¢t‚ÇÅ))))
           (conv ‚ä¢v‚ÇÇ Id‚â°Id) ok)
        (sym (subst-‚ä¢‚â° B‚ÇÅ‚â°B‚ÇÇ (‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢v‚ÇÅ ‚ä¢v‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ)))
    (K-Œ≤ ‚ä¢B ‚ä¢u ok) ‚Üí
      let _ , (‚ä¢t , _) , _ = inversion-Id-‚ä¢ (‚ä¢‚àô‚Üí‚ä¢ (wf ‚ä¢B)) in
      wf-‚ä¢‚à∑ ‚ä¢u , K‚±º ‚ä¢B ‚ä¢u (rfl‚±º ‚ä¢t) ok , ‚ä¢u
    ([]-cong-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ ok) ‚Üí
      let open Erased ([]-cong‚ÜíErased ok)
          ‚ä¢A‚ÇÅ , ‚ä¢A‚ÇÇ     = wf-‚ä¢‚â° A‚ÇÅ‚â°A‚ÇÇ
          _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
          _ , ‚ä¢u‚ÇÅ , ‚ä¢u‚ÇÇ = wf-‚ä¢‚â°‚à∑ u‚ÇÅ‚â°u‚ÇÇ
          _ , ‚ä¢v‚ÇÅ , ‚ä¢v‚ÇÇ = wf-‚ä¢‚â°‚à∑ v‚ÇÅ‚â°v‚ÇÇ
      in
      Id‚±º (Erased‚±º ‚ä¢A‚ÇÅ) ([]‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ) ([]‚±º ‚ä¢A‚ÇÅ ‚ä¢u‚ÇÅ) ,
      []-cong‚±º ‚ä¢A‚ÇÅ ‚ä¢t‚ÇÅ ‚ä¢u‚ÇÅ ‚ä¢v‚ÇÅ ok ,
      conv
        ([]-cong‚±º ‚ä¢A‚ÇÇ (conv ‚ä¢t‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ) (conv ‚ä¢u‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ)
           (conv ‚ä¢v‚ÇÇ (Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ)) ok)
        (_‚ä¢_‚â°_.sym $
         Id-cong (Erased-cong ‚ä¢A‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ) ([]-cong‚Ä≤ ‚ä¢A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ)
           ([]-cong‚Ä≤ ‚ä¢A‚ÇÅ u‚ÇÅ‚â°u‚ÇÇ))
    ([]-cong-Œ≤ ‚ä¢t PE.refl ok) ‚Üí
      let open Erased ([]-cong‚ÜíErased ok)
          ‚ä¢A   = wf-‚ä¢‚à∑ ‚ä¢t
          ‚ä¢[t] = []‚±º ‚ä¢A ‚ä¢t
      in
      Id‚±º (Erased‚±º ‚ä¢A) ‚ä¢[t] ‚ä¢[t] ,
      []-cong‚±º ‚ä¢A ‚ä¢t ‚ä¢t (rfl‚±º ‚ä¢t) ok ,
      rfl‚±º ‚ä¢[t]

opaque

  -- A well-formedness lemma for _‚ä¢À¢_‚â°_‚à∑_.

  wf-‚ä¢À¢‚â°‚à∑ : ‚ä¢ Œì ‚Üí Œî ‚ä¢À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚Üí Œî ‚ä¢À¢ œÉ‚ÇÅ ‚à∑ Œì √ó Œî ‚ä¢À¢ œÉ‚ÇÇ ‚à∑ Œì
  wf-‚ä¢À¢‚â°‚à∑ _      id              = id , id
  wf-‚ä¢À¢‚â°‚à∑ (‚àô ‚ä¢A) (œÉ‚ÇÅ‚â°œÉ‚ÇÇ , t‚ÇÅ‚â°t‚ÇÇ) =
    let ‚ä¢œÉ‚ÇÅ , ‚ä¢œÉ‚ÇÇ     = wf-‚ä¢À¢‚â°‚à∑ (wf ‚ä¢A) œÉ‚ÇÅ‚â°œÉ‚ÇÇ
        _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ
        œÉ‚ÇÅ‚â°œÉ‚ÇÇ         = ‚ä¢À¢ ∑‚â°‚à∑‚áî .proj‚ÇÇ (wfTerm ‚ä¢t‚ÇÅ , ‚ä¢œÉ‚ÇÅ , ‚ä¢œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
    in
    (‚ä¢œÉ‚ÇÅ , ‚ä¢t‚ÇÅ) , (‚ä¢œÉ‚ÇÇ , conv ‚ä¢t‚ÇÇ (subst-‚ä¢‚â° (refl ‚ä¢A) œÉ‚ÇÅ‚â°œÉ‚ÇÇ))

------------------------------------------------------------------------
-- Variants of some previously defined lemmas

opaque

  -- A variant of ‚ä¢À¢ ∑‚â°‚à∑‚áî.

  ‚ä¢À¢ ∑‚â°‚à∑‚áî‚Ä≤ :
    ‚ä¢ Œì ‚Üí Œî ‚ä¢À¢ ∑ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚áî (‚ä¢ Œî √ó Œî ‚ä¢À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì)
  ‚ä¢À¢ ∑‚â°‚à∑‚áî‚Ä≤ {Œì} {Œî} {œÉ‚ÇÅ} {œÉ‚ÇÇ} ‚ä¢Œì =
    Œî ‚ä¢À¢ ∑ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                                   ‚áî‚ü® ‚ä¢À¢ ∑‚â°‚à∑‚áî ‚ü©
    ‚ä¢ Œî √ó Œî ‚ä¢À¢ œÉ‚ÇÅ ‚à∑ Œì √ó Œî ‚ä¢À¢ œÉ‚ÇÇ ‚à∑ Œì √ó Œî ‚ä¢À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì  ‚áî‚ü® (Œª (‚ä¢Œî , _ , _ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) ‚Üí ‚ä¢Œî , œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                                                         , (Œª (‚ä¢Œî , œÉ‚ÇÅ‚â°œÉ‚ÇÇ) ‚Üí
                                                              let ‚ä¢œÉ‚ÇÅ , ‚ä¢œÉ‚ÇÇ = wf-‚ä¢À¢‚â°‚à∑ ‚ä¢Œì œÉ‚ÇÅ‚â°œÉ‚ÇÇ in
                                                              ‚ä¢Œî , ‚ä¢œÉ‚ÇÅ , ‚ä¢œÉ‚ÇÇ , œÉ‚ÇÅ‚â°œÉ‚ÇÇ)
                                                         ‚ü©
    ‚ä¢ Œî √ó Œî ‚ä¢À¢ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì                              ‚ñ°‚áî

opaque

  -- A variant of ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî.

  ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî‚Ä≤ :
    Œì ‚ä¢ A ‚Üí
    Œî ‚ä¢À¢ ∑ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚àô A ‚áî
    (Œî ‚ä¢À¢ ∑ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì √ó
     Œî ‚ä¢ head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ])
  ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî‚Ä≤ {Œì} {A} {Œî} {œÉ‚ÇÅ} {œÉ‚ÇÇ} ‚ä¢A =
    Œî ‚ä¢À¢ ∑ œÉ‚ÇÅ ‚â° œÉ‚ÇÇ ‚à∑ Œì ‚àô A                                                ‚áî‚ü® ‚ä¢À¢ ∑‚â°‚à∑‚àô‚áî ‚ü©

    Œî ‚ä¢À¢ ∑ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì √ó
    Œî ‚ä¢ head œÉ‚ÇÅ ‚à∑ A [ tail œÉ‚ÇÅ ] √ó
    Œî ‚ä¢ head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÇ ] √ó
    Œî ‚ä¢ head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]                                ‚áî‚ü® (Œª (œÉ‚ÇÅ‚Çä‚â°œÉ‚ÇÇ‚Çä , _ , _ , œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ) ‚Üí
                                                                               œÉ‚ÇÅ‚Çä‚â°œÉ‚ÇÇ‚Çä , œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ)
                                                                          , (Œª (œÉ‚ÇÅ‚Çä‚â°œÉ‚ÇÇ‚Çä , œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ) ‚Üí
                                                                               let _ , ‚ä¢œÉ‚ÇÅ‚ÇÄ , ‚ä¢œÉ‚ÇÇ‚ÇÄ = wf-‚ä¢‚â°‚à∑ œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ in
                                                                               œÉ‚ÇÅ‚Çä‚â°œÉ‚ÇÇ‚Çä , ‚ä¢œÉ‚ÇÅ‚ÇÄ , conv ‚ä¢œÉ‚ÇÇ‚ÇÄ (subst-‚ä¢‚â° (refl ‚ä¢A) œÉ‚ÇÅ‚Çä‚â°œÉ‚ÇÇ‚Çä) , œÉ‚ÇÅ‚ÇÄ‚â°œÉ‚ÇÇ‚ÇÄ)
                                                                          ‚ü©

    Œî ‚ä¢À¢ ∑ tail œÉ‚ÇÅ ‚â° tail œÉ‚ÇÇ ‚à∑ Œì √ó Œî ‚ä¢ head œÉ‚ÇÅ ‚â° head œÉ‚ÇÇ ‚à∑ A [ tail œÉ‚ÇÅ ]  ‚ñ°‚áî

opaque

  -- A variant of ‚ä¢À¢ ∑‚â°‚à∑-sgSubst.

  ‚ä¢À¢ ∑‚â°‚à∑-sgSubst‚Ä≤ :
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A ‚Üí
    Œì ‚ä¢À¢ ∑ sgSubst t‚ÇÅ ‚â° sgSubst t‚ÇÇ ‚à∑ Œì ‚àô A
  ‚ä¢À¢ ∑‚â°‚à∑-sgSubst‚Ä≤ t‚ÇÅ‚â°t‚ÇÇ =
    let _ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ = wf-‚ä¢‚â°‚à∑ t‚ÇÅ‚â°t‚ÇÇ in
    ‚ä¢À¢ ∑‚â°‚à∑-sgSubst ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
