------------------------------------------------------------------------
-- Admissible rules related to identity types
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Properties.Admissible.Identity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Modality ùïÑ
open Type-restrictions R

open import Definition.Untyped M as U
open import Definition.Typed R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties.Admissible.Equality R
import Definition.Typed.Properties.Admissible.Erased.Primitive R as EP
import Definition.Typed.Properties.Admissible.Identity.Primitive
open import Definition.Typed.Properties.Admissible.Pi R
open import Definition.Typed.Properties.Admissible.Var R
open import Definition.Typed.Properties.Reduction R
open import Definition.Typed.Properties.Well-formed R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.Reasoning.Term R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution.Primitive R
open import Definition.Typed.Syntactic R
open import Definition.Typed.Weakening R
open import Definition.Typed.Well-formed R
import Definition.Untyped.Erased ùïÑ as Erased
open import Definition.Untyped.Identity ùïÑ
open import Definition.Untyped.Properties M

open import Tools.Fin
open import Tools.Function
open import Tools.Level
open import Tools.Nat as N using (Nat; 1+; 2+; 3+)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

open Definition.Typed.Properties.Admissible.Identity.Primitive R public

private variable
  n                                               : Nat
  Œì Œì‚ÇÅ Œì‚ÇÇ                                         : Con Term _
  A A‚ÇÅ A‚ÇÇ A‚Ä≤ B B‚ÇÅ B‚ÇÇ C
    eq eq‚ÇÅ eq‚ÇÇ t t‚ÇÅ t‚ÇÇ t‚Ä≤ u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ w w‚ÇÅ w‚ÇÇ : Term _
  œÉ                                               : Subst _ _
  p p‚Ä≤ q q‚Ä≤                                       : M
  b                                               : BinderMode
  s                                               : Strength
  l l‚ÇÅ l‚ÇÇ                                         : Universe-level

------------------------------------------------------------------------
-- Lemmas related to rfl

opaque

  -- A variant of the typing rule for rfl.

  rfl‚±º‚Ä≤ :
    Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id A t u
  rfl‚±º‚Ä≤ t‚â°u =
    case syntacticEqTerm t‚â°u of Œª {
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    conv (rfl‚±º ‚ä¢t) (Id-cong (refl ‚ä¢A) (refl ‚ä¢t) t‚â°u) }

------------------------------------------------------------------------
-- Lemmas related to¬†J

opaque

  -- A variant of the typing rule for¬†J.

  J‚±º‚Ä≤ :
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ w ‚à∑ Id A t v ‚Üí
    Œì ‚ä¢ J p q A t B u v w ‚à∑ B [ v , w ]‚ÇÅ‚ÇÄ
  J‚±º‚Ä≤ ‚ä¢B ‚ä¢u ‚ä¢w =
    case inversion-Id (syntacticTerm ‚ä¢w) of Œª {
      (_ , ‚ä¢t , ‚ä¢v) ‚Üí
    J‚±º ‚ä¢t ‚ä¢B ‚ä¢u ‚ä¢v ‚ä¢w }

opaque

  -- A variant of J-cong.

  J-cong‚Ä≤ :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ B‚ÇÅ [ t‚ÇÅ , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ ‚Üí
    Œì ‚ä¢ J p q A‚ÇÅ t‚ÇÅ B‚ÇÅ u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚â° J p q A‚ÇÇ t‚ÇÇ B‚ÇÇ u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚à∑
      B‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ
  J-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    J-cong A‚ÇÅ‚â°A‚ÇÇ (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ) t‚ÇÅ‚â°t‚ÇÇ

opaque

  -- A variant of the equality rule J-Œ≤.

  J-Œ≤-‚â° :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ J p q A t B u t rfl ‚â° u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ
  J-Œ≤-‚â° {Œì} {t} {A} ‚ä¢t ‚ä¢B ‚ä¢u =
    J-Œ≤ ‚ä¢t ‚ä¢B ‚ä¢u PE.refl
    where
    -- If a strengthening lemma is proved then one can perhaps drop
    -- the first argument of J-Œ≤-‚â°.

    _ : Œì ‚àô A ‚ä¢ wk1 t ‚à∑ wk1 A
    _ =
      case wf ‚ä¢B of Œª {
        (‚àô ‚ä¢Id) ‚Üí
      case inversion-Id ‚ä¢Id of Œª {
        (_ , ‚ä¢wk1-t , _) ‚Üí
      ‚ä¢wk1-t }}

opaque

  -- A variant of J-subst.

  J-subst‚Ä≤ :
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚áí w‚ÇÇ ‚à∑ Id A t v ‚Üí
    Œì ‚ä¢ J p q A t B u v w‚ÇÅ ‚áí J p q A t B u v w‚ÇÇ ‚à∑ B [ v , w‚ÇÅ ]‚ÇÅ‚ÇÄ
  J-subst‚Ä≤ ‚ä¢B ‚ä¢u w‚ÇÅ‚áíw‚ÇÇ =
    case inversion-Id (syntacticTerm (redFirstTerm w‚ÇÅ‚áíw‚ÇÇ)) of Œª {
      (_ , ‚ä¢t , ‚ä¢v) ‚Üí
    J-subst ‚ä¢t ‚ä¢B ‚ä¢u ‚ä¢v w‚ÇÅ‚áíw‚ÇÇ }

opaque

  -- A variant of J-subst for _‚ä¢_‚áí*_‚à∑_.

  J-subst* :
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚áí* w‚ÇÇ ‚à∑ Id A t v ‚Üí
    Œì ‚ä¢ J p q A t B u v w‚ÇÅ ‚áí* J p q A t B u v w‚ÇÇ ‚à∑ B [ v , w‚ÇÅ ]‚ÇÅ‚ÇÄ
  J-subst* {A} {t} {B} {u} {w‚ÇÅ} {w‚ÇÇ} {v} {p} {q} ‚ä¢B ‚ä¢u = Œª where
    (id ‚ä¢w‚ÇÅ)                     ‚Üí id (J‚±º‚Ä≤ ‚ä¢B ‚ä¢u ‚ä¢w‚ÇÅ)
    (_‚á®_ {t‚Ä≤ = w‚ÇÉ} w‚ÇÅ‚áíw‚ÇÉ w‚ÇÉ‚áí*w‚ÇÇ) ‚Üí
      let w‚ÇÅ‚â°w‚ÇÉ      = subsetTerm w‚ÇÅ‚áíw‚ÇÉ
          _ , _ , ‚ä¢v = inversion-Id (wf-‚ä¢‚â°‚à∑ w‚ÇÅ‚â°w‚ÇÉ .proj‚ÇÅ)
      in
      J p q A t B u v w‚ÇÅ ‚à∑ B [ v , w‚ÇÅ ]‚ÇÅ‚ÇÄ  ‚áí‚ü® J-subst‚Ä≤ ‚ä¢B ‚ä¢u w‚ÇÅ‚áíw‚ÇÉ ‚ü©‚à∑
                                           Àò‚ü® substTypeEq‚ÇÇ (refl ‚ä¢B) (refl ‚ä¢v)
                                                (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
                                                   (PE.sym $
                                                    PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
                                                 sym‚Ä≤ w‚ÇÅ‚â°w‚ÇÉ) ‚ü©‚áí
      J p q A t B u v w‚ÇÉ ‚à∑ B [ v , w‚ÇÉ ]‚ÇÅ‚ÇÄ  ‚áí*‚ü® J-subst* ‚ä¢B ‚ä¢u w‚ÇÉ‚áí*w‚ÇÇ ‚ü©‚àé‚à∑
      J p q A t B u v w‚ÇÇ                   ‚àé

opaque

  -- A lemma related to the type of an application of¬†J.

  J-result :
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ w ‚à∑ Id A t v ‚Üí
    Œì ‚ä¢ B [ v , w ]‚ÇÅ‚ÇÄ
  J-result ‚ä¢B ‚ä¢w =
    case inversion-Id (syntacticTerm ‚ä¢w) of Œª {
      (_ , _ , ‚ä¢v) ‚Üí
    substType‚ÇÇ ‚ä¢B ‚ä¢v (PE.subst (_‚ä¢_‚à∑_ _ _) ‚â°Id-wk1-wk1-0[]‚ÇÄ ‚ä¢w) }

opaque

  -- A lemma related to the type of an application of¬†J.

  J-result-cong :
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ v‚ÇÅ ‚Üí
    Œì ‚ä¢ B‚ÇÅ [ v‚ÇÅ , w‚ÇÅ ]‚ÇÅ‚ÇÄ ‚â° B‚ÇÇ [ v‚ÇÇ , w‚ÇÇ ]‚ÇÅ‚ÇÄ
  J-result-cong B‚ÇÅ‚â°B‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ =
    substTypeEq‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ
      (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) ‚â°Id-wk1-wk1-0[]‚ÇÄ w‚ÇÅ‚â°w‚ÇÇ)

opaque

  -- A lemma related to the type of one of the assumptions of¬†J.

  J-motive-rfl-cong :
    Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ B‚ÇÅ [ t‚ÇÅ , rfl ]‚ÇÅ‚ÇÄ ‚â° B‚ÇÇ [ t‚ÇÇ , rfl ]‚ÇÅ‚ÇÄ
  J-motive-rfl-cong B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    J-result-cong B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
      (refl (rfl‚±º (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ)))

opaque

  -- A variant of the reduction rule J-Œ≤.

  J-Œ≤-‚áí :
    Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ A ‚Üí
    Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0) ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ ‚Üí
    Œì ‚ä¢ J p q A t B u t‚Ä≤ rfl ‚áí u ‚à∑ B [ t , rfl ]‚ÇÅ‚ÇÄ
  J-Œ≤-‚áí t‚â°t‚Ä≤ ‚ä¢B =
    case syntacticEqTerm t‚â°t‚Ä≤ of Œª {
      (_ , ‚ä¢t , ‚ä¢t‚Ä≤) ‚Üí
    J-Œ≤ ‚ä¢t ‚ä¢t‚Ä≤ t‚â°t‚Ä≤ ‚ä¢B (J-motive-rfl-cong (refl ‚ä¢B) t‚â°t‚Ä≤) }

opaque

  -- A lemma related to the context of one of the assumptions of¬†J.

  J-motive-context-type :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚àô A ‚ä¢ Id (wk1 A) (wk1 t) (var x0)
  J-motive-context-type ‚ä¢t =
    case syntacticTerm ‚ä¢t of Œª {
      ‚ä¢A ‚Üí
    Id‚±º‚Ä≤ (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t) (var‚ÇÄ ‚ä¢A) }

opaque

  -- A lemma related to the context of one of the assumptions of¬†J.

  J-motive-context :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    ‚ä¢ Œì ‚àô A ‚àô Id (wk1 A) (wk1 t) (var x0)
  J-motive-context ‚ä¢t = ‚àô J-motive-context-type ‚ä¢t

opaque

  -- A lemma related to the context of one of the assumptions of¬†J.

  J-motive-context-cong :
    ‚ä¢ Œì‚ÇÅ ‚â° Œì‚ÇÇ ‚Üí
    Œì‚ÇÅ ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì‚ÇÅ ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    ‚ä¢ Œì‚ÇÅ ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚â°
      Œì‚ÇÇ ‚àô A‚ÇÇ ‚àô Id (wk1 A‚ÇÇ) (wk1 t‚ÇÇ) (var x0)
  J-motive-context-cong Œì‚ÇÅ‚â°Œì‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    case syntacticEq A‚ÇÅ‚â°A‚ÇÇ .proj‚ÇÅ of Œª {
      ‚ä¢A‚ÇÅ ‚Üí
    Œì‚ÇÅ‚â°Œì‚ÇÇ ‚àô A‚ÇÅ‚â°A‚ÇÇ ‚àô
    Id-cong (wkEq‚ÇÅ ‚ä¢A‚ÇÅ A‚ÇÅ‚â°A‚ÇÇ) (wkEqTerm‚ÇÅ ‚ä¢A‚ÇÅ t‚ÇÅ‚â°t‚ÇÇ) (refl (var‚ÇÄ ‚ä¢A‚ÇÅ)) }

opaque

  -- A variant of the previous lemma.

  J-motive-context-cong‚Ä≤ :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    ‚ä¢ Œì ‚àô A‚ÇÅ ‚àô Id (wk1 A‚ÇÅ) (wk1 t‚ÇÅ) (var x0) ‚â°
      Œì ‚àô A‚ÇÇ ‚àô Id (wk1 A‚ÇÇ) (wk1 t‚ÇÇ) (var x0)
  J-motive-context-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ =
    J-motive-context-cong (reflConEq (wfEq A‚ÇÅ‚â°A‚ÇÇ)) A‚ÇÅ‚â°A‚ÇÇ

------------------------------------------------------------------------
-- Lemmas related to¬†K

opaque

  -- A variant of K-subst for _‚ä¢_‚áí*_‚à∑_.

  K-subst* :
    Œì ‚àô Id A t t ‚ä¢ B ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ rfl ]‚ÇÄ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚áí* v‚ÇÇ ‚à∑ Id A t t ‚Üí
    K-allowed ‚Üí
    Œì ‚ä¢ K p A t B u v‚ÇÅ ‚áí* K p A t B u v‚ÇÇ ‚à∑ B [ v‚ÇÅ ]‚ÇÄ
  K-subst* {A} {t} {B} {u} {v‚ÇÅ} {v‚ÇÇ} {p} ‚ä¢B ‚ä¢u v‚ÇÅ‚áí*v‚ÇÇ ok =
    case v‚ÇÅ‚áí*v‚ÇÇ of Œª where
      (id ‚ä¢v‚ÇÅ)                     ‚Üí id (K‚±º ‚ä¢B ‚ä¢u ‚ä¢v‚ÇÅ ok)
      (_‚á®_ {t‚Ä≤ = v‚ÇÉ} v‚ÇÅ‚áív‚ÇÉ v‚ÇÉ‚áí*v‚ÇÇ) ‚Üí
        K p A t B u v‚ÇÅ ‚à∑ B [ v‚ÇÅ ]‚ÇÄ  ‚áí‚ü® K-subst ‚ä¢B ‚ä¢u v‚ÇÅ‚áív‚ÇÉ ok ‚ü©‚à∑
                                    Àò‚ü® substTypeEq (refl ‚ä¢B) (sym‚Ä≤ (subsetTerm v‚ÇÅ‚áív‚ÇÉ)) ‚ü©‚áí
        K p A t B u v‚ÇÉ ‚à∑ B [ v‚ÇÉ ]‚ÇÄ  ‚áí*‚ü® K-subst* ‚ä¢B ‚ä¢u v‚ÇÉ‚áí*v‚ÇÇ ok ‚ü©‚àé‚à∑
        K p A t B u v‚ÇÇ              ‚àé

opaque

  -- A lemma related to the type of one of the assumptions of¬†K.

  K-motive-rfl-cong :
    Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ B‚ÇÅ [ rfl ]‚ÇÄ ‚â° B‚ÇÇ [ rfl ]‚ÇÄ
  K-motive-rfl-cong B‚ÇÅ‚â°B‚ÇÇ =
    case wfEq B‚ÇÅ‚â°B‚ÇÇ of Œª {
      (‚àô ‚ä¢Id) ‚Üí
    substTypeEq B‚ÇÅ‚â°B‚ÇÇ (refl (rfl‚±º (inversion-Id ‚ä¢Id .proj‚ÇÇ .proj‚ÇÅ))) }

opaque

  -- A lemma related to the context of one of the assumptions of¬†K.

  K-motive-context-type : Œì ‚ä¢ t ‚à∑ A ‚Üí Œì ‚ä¢ Id A t t
  K-motive-context-type ‚ä¢t = Id‚±º‚Ä≤ ‚ä¢t ‚ä¢t

opaque

  -- A lemma related to the context of one of the assumptions of¬†K.

  K-motive-context : Œì ‚ä¢ t ‚à∑ A ‚Üí ‚ä¢ Œì ‚àô Id A t t
  K-motive-context ‚ä¢t = ‚àô K-motive-context-type ‚ä¢t

opaque

  -- A lemma related to the context of one of the assumptions of¬†K.

  K-motive-context-cong :
    ‚ä¢ Œì‚ÇÅ ‚â° Œì‚ÇÇ ‚Üí
    Œì‚ÇÅ ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì‚ÇÅ ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    ‚ä¢ Œì‚ÇÅ ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚â° Œì‚ÇÇ ‚àô Id A‚ÇÇ t‚ÇÇ t‚ÇÇ
  K-motive-context-cong Œì‚ÇÅ‚â°Œì‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ =
    Œì‚ÇÅ‚â°Œì‚ÇÇ ‚àô Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ

opaque

  -- A variant of the previous lemma.

  K-motive-context-cong‚Ä≤ :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    ‚ä¢ Œì ‚àô Id A‚ÇÅ t‚ÇÅ t‚ÇÅ ‚â° Œì ‚àô Id A‚ÇÇ t‚ÇÇ t‚ÇÇ
  K-motive-context-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ =
    K-motive-context-cong (reflConEq (wfEq A‚ÇÅ‚â°A‚ÇÇ)) A‚ÇÅ‚â°A‚ÇÇ

------------------------------------------------------------------------
-- Lemmas related to []-cong

opaque

  -- A variant of []-cong-subst.

  []-cong-subst‚Ä≤ :
    Œì ‚ä¢ v‚ÇÅ ‚áí v‚ÇÇ ‚à∑ Id A t u ‚Üí
    []-cong-allowed s ‚Üí
    let open Erased s in
      Œì ‚ä¢ []-cong s A t u v‚ÇÅ ‚áí []-cong s A t u v‚ÇÇ ‚à∑
        Id (Erased A) ([ t ]) ([ u ])
  []-cong-subst‚Ä≤ v‚ÇÅ‚áív‚ÇÇ =
    case inversion-Id (syntacticTerm (redFirstTerm v‚ÇÅ‚áív‚ÇÇ)) of Œª {
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    []-cong-subst ‚ä¢A ‚ä¢t ‚ä¢u v‚ÇÅ‚áív‚ÇÇ }

opaque

  -- A variant of []-cong-subst for _‚ä¢_‚áí*_‚à∑_.

  []-cong-subst* :
    let open Erased s in
    Œì ‚ä¢ v‚ÇÅ ‚áí* v‚ÇÇ ‚à∑ Id A t u ‚Üí
    []-cong-allowed s ‚Üí
    Œì ‚ä¢ []-cong s A t u v‚ÇÅ ‚áí* []-cong s A t u v‚ÇÇ ‚à∑
      Id (Erased A) [ t ] ([ u ])
  []-cong-subst* {s} v‚ÇÅ‚áí*v‚ÇÇ ok =
    let ‚ä¢A , ‚ä¢t , ‚ä¢u =
          inversion-Id (syntacticTerm (redFirst*Term v‚ÇÅ‚áí*v‚ÇÇ))
    in
    case v‚ÇÅ‚áí*v‚ÇÇ of Œª where
      (id ‚ä¢v‚ÇÅ)         ‚Üí id ([]-cong‚±º ‚ä¢A ‚ä¢t ‚ä¢u ‚ä¢v‚ÇÅ ok)
      (v‚ÇÅ‚áív‚ÇÉ ‚á® v‚ÇÉ‚áí*v‚ÇÇ) ‚Üí
        []-cong-subst ‚ä¢A ‚ä¢t ‚ä¢u v‚ÇÅ‚áív‚ÇÉ ok ‚á® []-cong-subst* v‚ÇÉ‚áí*v‚ÇÇ ok

opaque

  -- A variant of the reduction rule []-cong-Œ≤.

  []-cong-Œ≤-‚áí :
    Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ A ‚Üí
    []-cong-allowed s ‚Üí
    let open Erased s in
      Œì ‚ä¢ []-cong s A t t‚Ä≤ rfl ‚áí rfl ‚à∑
        Id (Erased A) ([ t ]) ([ t‚Ä≤ ])
  []-cong-Œ≤-‚áí t‚â°t‚Ä≤ =
    case syntacticEqTerm t‚â°t‚Ä≤ of Œª {
      (‚ä¢A , ‚ä¢t , ‚ä¢t‚Ä≤) ‚Üí
    []-cong-Œ≤ ‚ä¢A ‚ä¢t ‚ä¢t‚Ä≤ t‚â°t‚Ä≤ }

opaque

  -- A variant of the equality rule []-cong-Œ≤.

  []-cong-Œ≤-‚â° :
    Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ A ‚Üí
    []-cong-allowed s ‚Üí
    let open Erased s in
      Œì ‚ä¢ []-cong s A t t‚Ä≤ rfl ‚â° rfl ‚à∑
        Id (Erased A) ([ t ]) ([ t‚Ä≤ ])
  []-cong-Œ≤-‚â° t‚â°t‚Ä≤ ok =
    case syntacticEqTerm t‚â°t‚Ä≤ of Œª {
      (‚ä¢A , ‚ä¢t , ‚ä¢t‚Ä≤) ‚Üí
    case []-cong-cong (refl ‚ä¢A) (refl ‚ä¢t) (sym‚Ä≤ t‚â°t‚Ä≤)
           (refl (rfl‚±º‚Ä≤ t‚â°t‚Ä≤)) ok of Œª
      []-cong-t‚â°[]-cong-t‚Ä≤ ‚Üí
    case ([]-cong-Œ≤ ‚ä¢t PE.refl ok) of Œª
      []-cong-‚áí ‚Üí
    trans []-cong-t‚â°[]-cong-t‚Ä≤ (conv []-cong-‚áí
      (Id-cong (refl (Erased‚±º ‚ä¢A)) (refl ([]‚±º ‚ä¢A ‚ä¢t)) ([]-cong‚Ä≤ ‚ä¢A t‚â°t‚Ä≤))) }
    where
    open EP ([]-cong‚ÜíErased ok)

------------------------------------------------------------------------
-- Lemmas related to subst

opaque
  unfolding subst

  -- A typing rule for subst.

  ‚ä¢subst :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ v ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ w ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t u v w ‚à∑ B [ u ]‚ÇÄ
  ‚ä¢subst {B} ‚ä¢B ‚ä¢v ‚ä¢w =
    case inversion-Id (syntacticTerm ‚ä¢v) of Œª {
      (_ , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _) (subst-wk B) $
    J‚±º‚Ä≤ (wk‚ÇÅ (J-motive-context-type ‚ä¢t) ‚ä¢B)
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ subst-wk B) ‚ä¢w)
      ‚ä¢v }

opaque
  unfolding subst

  -- A reduction rule for subst.

  subst-‚áí‚Ä≤ :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚â° t‚Ä≤ ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t t‚Ä≤ rfl u ‚áí u ‚à∑ B [ t ]‚ÇÄ
  subst-‚áí‚Ä≤ {B} ‚ä¢B t‚â°t‚Ä≤ ‚ä¢u =
    case syntacticEqTerm t‚â°t‚Ä≤ of Œª
      (_ , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (subst-wk B) $
    J-Œ≤-‚áí t‚â°t‚Ä≤ (wk‚ÇÅ (J-motive-context-type ‚ä¢t) ‚ä¢B)
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ subst-wk B) ‚ä¢u)

opaque

  -- Another reduction rule for subst.

  subst-‚áí :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t t rfl u ‚áí u ‚à∑ B [ t ]‚ÇÄ
  subst-‚áí ‚ä¢B ‚ä¢t = subst-‚áí‚Ä≤ ‚ä¢B (refl ‚ä¢t)

opaque

  -- An equality rule for subst.

  subst-‚â° :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t t rfl u ‚â° u ‚à∑ B [ t ]‚ÇÄ
  subst-‚â° ‚ä¢B ‚ä¢t ‚ä¢u =
    subsetTerm (subst-‚áí ‚ä¢B ‚ä¢t ‚ä¢u)

opaque
  unfolding subst

  -- An equality rule for subst.

  subst-cong :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ B‚ÇÅ [ t‚ÇÅ ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A‚ÇÅ B‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ w‚ÇÅ ‚â° subst p A‚ÇÇ B‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ w‚ÇÇ ‚à∑
      B‚ÇÅ [ u‚ÇÅ ]‚ÇÄ
  subst-cong {B‚ÇÅ} A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ =
    PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) (subst-wk B‚ÇÅ) $
    J-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
      (wkEq‚ÇÅ
         (J-motive-context-type (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÇ .proj‚ÇÅ))
         B‚ÇÅ‚â°B‚ÇÇ)
      (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) (PE.sym $ subst-wk B‚ÇÅ) w‚ÇÅ‚â°w‚ÇÇ) u‚ÇÅ‚â°u‚ÇÇ
      v‚ÇÅ‚â°v‚ÇÇ

opaque
  unfolding subst

  -- A reduction rule for subst.

  subst-subst :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚áí v‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ w ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t u v‚ÇÅ w ‚áí subst p A B t u v‚ÇÇ w ‚à∑ B [ u ]‚ÇÄ
  subst-subst {B} ‚ä¢B v‚ÇÅ‚áív‚ÇÇ ‚ä¢w =
    case inversion-Id (syntacticEqTerm (subsetTerm v‚ÇÅ‚áív‚ÇÇ) .proj‚ÇÅ) of Œª {
      (_ , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (subst-wk B) $
    J-subst‚Ä≤ (wk‚ÇÅ (J-motive-context-type ‚ä¢t) ‚ä¢B)
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ subst-wk B) ‚ä¢w) v‚ÇÅ‚áív‚ÇÇ }

opaque

  -- A reduction rule for subst.

  subst-subst* :
    Œì ‚àô A ‚ä¢ B ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚áí* v‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ w ‚à∑ B [ t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ subst p A B t u v‚ÇÅ w ‚áí* subst p A B t u v‚ÇÇ w ‚à∑ B [ u ]‚ÇÄ
  subst-subst* ‚ä¢B = Œª where
    (id ‚ä¢v)          ‚ä¢w ‚Üí id (‚ä¢subst ‚ä¢B ‚ä¢v ‚ä¢w)
    (v‚ÇÅ‚áív‚ÇÉ ‚á® v‚ÇÉ‚áí*v‚ÇÇ) ‚ä¢w ‚Üí
      subst-subst ‚ä¢B v‚ÇÅ‚áív‚ÇÉ ‚ä¢w ‚á® subst-subst* ‚ä¢B v‚ÇÉ‚áí*v‚ÇÇ ‚ä¢w

opaque
  unfolding subst

  -- An inversion lemma for subst.
  --
  -- If a suitable form of strengthening is proved, then it should be
  -- easy to add Œì¬†‚àô¬†A¬†‚ä¢¬†B to the result.

  inversion-subst :
    Œì ‚ä¢ subst p A B t u v w ‚à∑ C ‚Üí
    (Œì ‚ä¢ A) √ó
    Œì ‚ä¢ t ‚à∑ A √ó
    Œì ‚ä¢ u ‚à∑ A √ó
    Œì ‚ä¢ v ‚à∑ Id A t u √ó
    Œì ‚ä¢ w ‚à∑ B [ t ]‚ÇÄ √ó
    Œì ‚ä¢ C ‚â° B [ u ]‚ÇÄ
  inversion-subst {B} ‚ä¢subst =
    case inversion-J ‚ä¢subst of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢Id , ‚ä¢w , ‚ä¢u , ‚ä¢v , C‚â°) ‚Üí
    ‚ä¢A , ‚ä¢t , ‚ä¢u , ‚ä¢v , PE.subst (_‚ä¢_‚à∑_ _ _) (subst-wk B) ‚ä¢w ,
    PE.subst (_‚ä¢_‚â°_ _ _) (subst-wk B) C‚â°

------------------------------------------------------------------------
-- Lemmas related to cast

opaque
  unfolding cast

  -- A typing rule for cast.

  ‚ä¢cast :
    Œì ‚ä¢ t ‚à∑ Id (U l) A B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A B t u ‚à∑ B
  ‚ä¢cast ‚ä¢t ‚ä¢u =
    ‚ä¢subst (univ (var‚ÇÄ (U‚±º (wfTerm ‚ä¢t)))) ‚ä¢t ‚ä¢u

opaque
  unfolding cast

  -- A reduction rule for cast.

  cast-‚áí‚Ä≤ :
    Œì ‚ä¢ A ‚â° A‚Ä≤ ‚à∑ U l ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A A‚Ä≤ rfl t ‚áí t ‚à∑ A
  cast-‚áí‚Ä≤ A‚â°A‚Ä≤ ‚ä¢t =
    subst-‚áí‚Ä≤ (univ (var‚ÇÄ (U‚±º (wfTerm ‚ä¢t)))) A‚â°A‚Ä≤ ‚ä¢t

opaque

  -- Another reduction rule for cast.

  cast-‚áí :
    Œì ‚ä¢ A ‚à∑ U l ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A A rfl t ‚áí t ‚à∑ A
  cast-‚áí ‚ä¢A ‚ä¢t =
    cast-‚áí‚Ä≤ (refl ‚ä¢A) ‚ä¢t

opaque

  -- An equality rule for cast.

  cast-‚â° :
    Œì ‚ä¢ A ‚à∑ U l ‚Üí
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A A rfl t ‚â° t ‚à∑ A
  cast-‚â° ‚ä¢A ‚ä¢t =
    subsetTerm (cast-‚áí ‚ä¢A ‚ä¢t)

opaque
  unfolding cast

  -- An equality rule for cast.

  cast-cong :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚à∑ U l ‚Üí
    Œì ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚à∑ U l ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ Id (U l) A‚ÇÅ B‚ÇÅ ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ cast l A‚ÇÅ B‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° cast l A‚ÇÇ B‚ÇÇ t‚ÇÇ u‚ÇÇ ‚à∑ B‚ÇÅ
  cast-cong A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    case inversion-Id (syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ .proj‚ÇÅ) of Œª
      (‚ä¢U , ‚ä¢A‚ÇÅ , ‚ä¢B‚ÇÅ) ‚Üí
    subst-cong (refl ‚ä¢U) (refl (univ (var‚ÇÄ ‚ä¢U))) A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ

opaque
  unfolding cast

  -- A reduction rule for cast.

  cast-subst :
    Œì ‚ä¢ t‚ÇÅ ‚áí t‚ÇÇ ‚à∑ Id (U l) A B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A B t‚ÇÅ u ‚áí cast l A B t‚ÇÇ u ‚à∑ B
  cast-subst t‚ÇÅ‚áít‚ÇÇ ‚ä¢u =
    subst-subst (univ (var‚ÇÄ (U‚±º (wfTerm ‚ä¢u)))) t‚ÇÅ‚áít‚ÇÇ ‚ä¢u

opaque

  -- A reduction rule for cast.

  cast-subst* :
    Œì ‚ä¢ t‚ÇÅ ‚áí* t‚ÇÇ ‚à∑ Id (U l) A B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ cast l A B t‚ÇÅ u ‚áí* cast l A B t‚ÇÇ u ‚à∑ B
  cast-subst* = Œª where
    (id ‚ä¢t)          ‚ä¢u ‚Üí id (‚ä¢cast ‚ä¢t ‚ä¢u)
    (t‚ÇÅ‚áít‚ÇÉ ‚á® t‚ÇÉ‚áí*t‚ÇÇ) ‚ä¢u ‚Üí
      cast-subst t‚ÇÅ‚áít‚ÇÉ ‚ä¢u ‚á® cast-subst* t‚ÇÉ‚áí*t‚ÇÇ ‚ä¢u

opaque
  unfolding cast

  -- An inversion lemma for cast.

  inversion-cast :
    Œì ‚ä¢ cast l A B t u ‚à∑ C ‚Üí
    Œì ‚ä¢ A ‚à∑ U l √ó
    Œì ‚ä¢ B ‚à∑ U l √ó
    Œì ‚ä¢ t ‚à∑ Id (U l) A B √ó
    Œì ‚ä¢ u ‚à∑ A √ó
    Œì ‚ä¢ C ‚â° B
  inversion-cast ‚ä¢cast =
    case inversion-subst ‚ä¢cast of Œª
      (_ , ‚ä¢A , ‚ä¢B , ‚ä¢t , ‚ä¢u , C‚â°) ‚Üí
    ‚ä¢A , ‚ä¢B , ‚ä¢t , ‚ä¢u , C‚â°

------------------------------------------------------------------------
-- Lemmas related to symmetry

opaque
  unfolding symmetry

  -- A typing rule for symmetry.

  ‚ä¢symmetry :
    Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ symmetry A t u eq ‚à∑ Id A u t
  ‚ä¢symmetry ‚ä¢eq =
    case inversion-Id (syntacticTerm ‚ä¢eq) of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _)
      (PE.cong‚ÇÉ Id (wk1-sgSubst _ _) PE.refl (wk1-sgSubst _ _)) $
    ‚ä¢subst
      (Id‚±º‚Ä≤ (var‚ÇÄ ‚ä¢A) (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t))
      ‚ä¢eq
      (PE.subst (_‚ä¢_‚à∑_ _ _)
         (PE.sym $
          PE.cong‚ÇÉ Id (wk1-sgSubst _ _) PE.refl (wk1-sgSubst _ _)) $
       rfl‚±º ‚ä¢t)

opaque
  unfolding symmetry

  -- A reduction rule for symmetry.

  symmetry-‚áí :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ symmetry A t t rfl ‚áí rfl ‚à∑ Id A t t
  symmetry-‚áí ‚ä¢t =
    case syntacticTerm ‚ä¢t of Œª
      ‚ä¢A ‚Üí
    case PE.cong‚ÇÉ Id (wk1-sgSubst _ _) PE.refl (wk1-sgSubst _ _) of Œª
      Id‚â°Id ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) Id‚â°Id $
    subst-‚áí
      (Id‚±º‚Ä≤ (var‚ÇÄ ‚ä¢A) (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t))
      ‚ä¢t
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym Id‚â°Id) $
       rfl‚±º ‚ä¢t)

opaque

  -- An equality rule for symmetry.

  symmetry-‚â° :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚ä¢ symmetry A t t rfl ‚â° rfl ‚à∑ Id A t t
  symmetry-‚â° ‚ä¢t =
    subsetTerm (symmetry-‚áí ‚ä¢t)

------------------------------------------------------------------------
-- Lemmas related to transitivity

opaque
  unfolding transitivity

  -- A typing rule for transitivity.

  ‚ä¢transitivity :
    Œì ‚ä¢ eq‚ÇÅ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ eq‚ÇÇ ‚à∑ Id A u v ‚Üí
    Œì ‚ä¢ transitivity A t u v eq‚ÇÅ eq‚ÇÇ ‚à∑ Id A t v
  ‚ä¢transitivity {A} {t} {u} {eq‚ÇÇ} {v} ‚ä¢eq‚ÇÅ ‚ä¢eq‚ÇÇ =
    case inversion-Id (syntacticTerm ‚ä¢eq‚ÇÅ) of Œª {
      (_ , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym ‚â°Id-wk1-wk1-0[]‚ÇÄ) $
    ‚ä¢subst
      (J-motive-context-type ‚ä¢t)
      ‚ä¢eq‚ÇÇ
      (PE.subst (_‚ä¢_‚à∑_ _ _) ‚â°Id-wk1-wk1-0[]‚ÇÄ ‚ä¢eq‚ÇÅ) }

opaque
  unfolding transitivity

  -- A reduction rule for transitivity.

  transitivity-‚áí :
    Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ transitivity A t u u eq rfl ‚áí eq ‚à∑ Id A t u
  transitivity-‚áí ‚ä¢eq =
    case inversion-Id (syntacticTerm ‚ä¢eq) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    case PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl of Œª
      Id‚â°Id ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) Id‚â°Id $
    subst-‚áí
      (Id‚±º‚Ä≤ (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t) (var‚ÇÄ ‚ä¢A))
      ‚ä¢u
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym Id‚â°Id) ‚ä¢eq)

opaque

  -- An equality rule for transitivity.

  transitivity-‚â° :
    Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ transitivity A t u u eq rfl ‚â° eq ‚à∑ Id A t u
  transitivity-‚â° ‚ä¢eq =
    subsetTerm (transitivity-‚áí ‚ä¢eq)

------------------------------------------------------------------------
-- Lemmas related to transitivity-symmetryÀ°

opaque
  unfolding transitivity-symmetryÀ°

  -- A typing rule for transitivity-symmetryÀ°.

  ‚ä¢transitivity-symmetryÀ° :
    Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ transitivity-symmetryÀ° A t u eq ‚à∑
      Id (Id A u u) (transitivity A u t u (symmetry A t u eq) eq) rfl
  ‚ä¢transitivity-symmetryÀ° {eq} {A} {t} {u} ‚ä¢eq =
    case inversion-Id (syntacticTerm ‚ä¢eq) of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    case Id‚±º‚Ä≤ (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t) (var‚ÇÄ ‚ä¢A) of Œª
      ‚ä¢Id-t‚Ä≤-0 ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _)
      (PE.cong‚ÇÉ Id
         (PE.cong‚ÇÉ Id wk2-[,] PE.refl PE.refl)
         (transitivity (wk2 A) (var x1) (wk2 t) (var x1)
            (symmetry (wk2 A) (wk2 t) (var x1) (var x0)) (var x0)
            [ u , eq ]‚ÇÅ‚ÇÄ                                               ‚â°‚ü® transitivity-[] ‚ü©

          transitivity (wk2 A [ u , eq ]‚ÇÅ‚ÇÄ) u (wk2 t [ u , eq ]‚ÇÅ‚ÇÄ) u
            (symmetry (wk2 A) (wk2 t) (var x1) (var x0) [ u , eq ]‚ÇÅ‚ÇÄ)
            eq                                                         ‚â°‚ü® PE.cong‚ÇÜ transitivity wk2-[,] PE.refl wk2-[,] PE.refl
                                                                            symmetry-[] PE.refl ‚ü©
          transitivity A u t u
            (symmetry (wk2 A [ u , eq ]‚ÇÅ‚ÇÄ) (wk2 t [ u , eq ]‚ÇÅ‚ÇÄ) u eq)
            eq                                                         ‚â°‚ü® PE.cong‚ÇÇ (transitivity _ _ _ _)
                                                                            (PE.cong‚ÇÑ symmetry wk2-[,] wk2-[,] PE.refl PE.refl)
                                                                            PE.refl ‚ü©
          transitivity A u t u (symmetry A t u eq) eq                  ‚àé)
         PE.refl) $
    J‚±º‚Ä≤
      (Id‚±º‚Ä≤
         (‚ä¢transitivity (‚ä¢symmetry (var‚ÇÄ ‚ä¢Id-t‚Ä≤-0)) (var‚ÇÄ ‚ä¢Id-t‚Ä≤-0))
         (rfl‚±º (var‚ÇÅ ‚ä¢Id-t‚Ä≤-0)))
      (rfl‚±º‚Ä≤
         (transitivity (wk2 A) (var x1) (wk2 t) (var x1)
            (symmetry (wk2 A) (wk2 t) (var x1) (var x0)) (var x0)
            [ t , rfl ]‚ÇÅ‚ÇÄ                                                 ‚â°‚ü® transitivity-[] ‚ü©‚ä¢‚â°

          transitivity (wk2 A [ t , rfl ]‚ÇÅ‚ÇÄ) t (wk2 t [ t , rfl ]‚ÇÅ‚ÇÄ) t
            (symmetry (wk2 A) (wk2 t) (var x1) (var x0) [ t , rfl ]‚ÇÅ‚ÇÄ)
            rfl                                                           ‚â°‚ü® PE.cong‚ÇÜ transitivity wk2-[,] PE.refl wk2-[,] PE.refl
                                                                               symmetry-[] PE.refl ‚ü©‚ä¢‚â°
          transitivity A t t t
            (symmetry (wk2 A [ t , rfl ]‚ÇÅ‚ÇÄ) (wk2 t [ t , rfl ]‚ÇÅ‚ÇÄ) t rfl)
            rfl                                                           ‚â°‚ü® PE.cong‚ÇÇ (transitivity _ _ _ _)
                                                                               (PE.cong‚ÇÑ symmetry wk2-[,] wk2-[,] PE.refl PE.refl)
                                                                               PE.refl ‚ü©‚ä¢‚â°

                                                                           ‚ü® PE.subst (flip (_‚ä¢_‚â°_ _) _)
                                                                               (PE.sym $ PE.cong‚ÇÉ Id wk2-[,] PE.refl PE.refl) $
                                                                             refl (Id‚±º‚Ä≤ ‚ä¢t ‚ä¢t) ‚ü©‚â°

          transitivity A t t t (symmetry A t t rfl) rfl                   ‚â°‚ü® transitivity-‚â° (‚ä¢symmetry (rfl‚±º ‚ä¢t)) ‚ü©‚ä¢

          symmetry A t t rfl                                              ‚â°‚ü® symmetry-‚â° ‚ä¢t ‚ü©‚ä¢‚àé

          rfl                                                             ‚àé))
      ‚ä¢eq

------------------------------------------------------------------------
-- Lemmas related to cong

opaque
  unfolding cong

  -- A typing rule for cong.

  ‚ä¢cong :
    Œì ‚àô A ‚ä¢ v ‚à∑ wk1 B ‚Üí
    Œì ‚ä¢ w ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ cong p A t u B v w ‚à∑ Id B (v [ t ]‚ÇÄ) (v [ u ]‚ÇÄ)
  ‚ä¢cong ‚ä¢v ‚ä¢w =
    case inversion-Id (syntacticTerm ‚ä¢w) of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _)
      (PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
    ‚ä¢subst
      (Id‚±º‚Ä≤
         (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.cong wk1 $ wk1-sgSubst _ _) $
          wkTerm‚ÇÅ ‚ä¢A (substTerm ‚ä¢v ‚ä¢t))
         ‚ä¢v)
      ‚ä¢w
      (PE.subst (_‚ä¢_‚à∑_ _ _)
         (PE.sym $ PE.cong‚ÇÉ Id PE.refl (wk1-sgSubst _ _) PE.refl) $
       rfl‚±º (substTerm ‚ä¢v ‚ä¢t))

opaque
  unfolding cong

  -- An equality rule for cong.

  cong-cong :
    Œì ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ ‚Üí
    Œì ‚ä¢ B‚ÇÅ ‚â° B‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ wk1 B‚ÇÅ ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚â° w‚ÇÇ ‚à∑ Id A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚Üí
    Œì ‚ä¢ cong p A‚ÇÅ t‚ÇÅ u‚ÇÅ B‚ÇÅ v‚ÇÅ w‚ÇÅ ‚â° cong p A‚ÇÇ t‚ÇÇ u‚ÇÇ B‚ÇÇ v‚ÇÇ w‚ÇÇ ‚à∑
      Id B‚ÇÅ (v‚ÇÅ [ t‚ÇÅ ]‚ÇÄ) (v‚ÇÅ [ u‚ÇÅ ]‚ÇÄ)
  cong-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ =
    case syntacticEqTerm t‚ÇÅ‚â°t‚ÇÇ of Œª
      (‚ä¢A‚ÇÅ , ‚ä¢t‚ÇÅ , _) ‚Üí
    case syntacticEqTerm v‚ÇÅ‚â°v‚ÇÇ of Œª
      (_ , ‚ä¢v‚ÇÅ , _) ‚Üí
    PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
      (PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
    subst-cong A‚ÇÅ‚â°A‚ÇÇ
      (Id-cong (wkEq‚ÇÅ ‚ä¢A‚ÇÅ B‚ÇÅ‚â°B‚ÇÇ)
         (wkEqTerm‚ÇÅ ‚ä¢A‚ÇÅ $
          PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) (wk1-sgSubst _ _) $
          substTermEq v‚ÇÅ‚â°v‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ)
         v‚ÇÅ‚â°v‚ÇÇ)
      t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ w‚ÇÅ‚â°w‚ÇÇ
      (_‚ä¢_‚â°_‚à∑_.refl $
       PE.subst (_‚ä¢_‚à∑_ _ _)
         (PE.cong‚ÇÇ (Id _) (PE.sym $ wk1-sgSubst _ _) PE.refl) $
       rfl‚±º $ substTerm ‚ä¢v‚ÇÅ ‚ä¢t‚ÇÅ)

opaque
  unfolding cong

  -- A Œ≤-rule for cong.

  cong-‚áí :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚àô A ‚ä¢ u ‚à∑ wk1 B ‚Üí
    Œì ‚ä¢ cong p A t t B u rfl ‚áí rfl ‚à∑ Id B (u [ t ]‚ÇÄ) (u [ t ]‚ÇÄ)
  cong-‚áí ‚ä¢t ‚ä¢u =
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _)
      (PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
    subst-‚áí
      (Id‚±º‚Ä≤
         (PE.subst (_‚ä¢_‚à∑_ _ _)
            (PE.cong wk1 $ wk1-sgSubst _ _) $
          wkTerm‚ÇÅ (syntacticTerm ‚ä¢t) (substTerm ‚ä¢u ‚ä¢t))
         ‚ä¢u)
      ‚ä¢t
      (PE.subst (_‚ä¢_‚à∑_ _ _)
         (PE.sym $ PE.cong‚ÇÉ Id PE.refl (wk1-sgSubst _ _) PE.refl) $
       rfl‚±º (substTerm ‚ä¢u ‚ä¢t))

opaque

  -- A Œ≤-rule for cong.

  cong-‚â° :
    Œì ‚ä¢ t ‚à∑ A ‚Üí
    Œì ‚àô A ‚ä¢ u ‚à∑ wk1 B ‚Üí
    Œì ‚ä¢ cong p A t t B u rfl ‚â° rfl ‚à∑ Id B (u [ t ]‚ÇÄ) (u [ t ]‚ÇÄ)
  cong-‚â° ‚ä¢t ‚ä¢u =
    subsetTerm (cong-‚áí ‚ä¢t ‚ä¢u)

opaque
  unfolding cong

  -- A reduction rule for cong.

  cong-subst :
    Œì ‚àô A ‚ä¢ v ‚à∑ wk1 B ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚áí w‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ cong p A t u B v w‚ÇÅ ‚áí cong p A t u B v w‚ÇÇ ‚à∑
      Id B (v [ t ]‚ÇÄ) (v [ u ]‚ÇÄ)
  cong-subst ‚ä¢v w‚ÇÅ‚áíw‚ÇÇ =
    case inversion-Id $ syntacticEqTerm (subsetTerm w‚ÇÅ‚áíw‚ÇÇ) .proj‚ÇÅ of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _)
      (PE.cong‚ÇÉ Id (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl) $
    subst-subst
      (Id‚±º‚Ä≤
         (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.cong wk1 $ wk1-sgSubst _ _) $
          wkTerm‚ÇÅ ‚ä¢A (substTerm ‚ä¢v ‚ä¢t))
         ‚ä¢v)
      w‚ÇÅ‚áíw‚ÇÇ
      (PE.subst (_‚ä¢_‚à∑_ _ _)
         (PE.sym $ PE.cong‚ÇÉ Id PE.refl (wk1-sgSubst _ _) PE.refl) $
       rfl‚±º (substTerm ‚ä¢v ‚ä¢t))

opaque

  -- A reduction rule for cong.

  cong-subst* :
    Œì ‚àô A ‚ä¢ v ‚à∑ wk1 B ‚Üí
    Œì ‚ä¢ w‚ÇÅ ‚áí* w‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ cong p A t u B v w‚ÇÅ ‚áí* cong p A t u B v w‚ÇÇ ‚à∑
      Id B (v [ t ]‚ÇÄ) (v [ u ]‚ÇÄ)
  cong-subst* ‚ä¢v = Œª where
    (id ‚ä¢w)          ‚Üí id (‚ä¢cong ‚ä¢v ‚ä¢w)
    (w‚ÇÅ‚áíw‚ÇÉ ‚á® w‚ÇÉ‚áí*w‚ÇÇ) ‚Üí
      cong-subst ‚ä¢v w‚ÇÅ‚áíw‚ÇÉ ‚á® cong-subst* ‚ä¢v w‚ÇÉ‚áí*w‚ÇÇ

------------------------------------------------------------------------
-- Lemmas related to pointwise-equality

opaque
  unfolding pointwise-equality

  -- A typing rule for pointwise-equality.

  ‚ä¢pointwise-equality :
    Œì ‚ä¢ v ‚à∑ Id (Œ† p , q ‚ñ∑ A ‚ñπ B) t u ‚Üí
    Œì ‚ä¢ w ‚à∑ A ‚Üí
    Œì ‚ä¢ pointwise-equality p q A B t u v w ‚à∑
      Id (B [ w ]‚ÇÄ) (t ‚àò‚ü® p ‚ü© w) (u ‚àò‚ü® p ‚ü© w)
  ‚ä¢pointwise-equality {B} {w} ‚ä¢v ‚ä¢w =
    case inversion-Id (syntacticTerm ‚ä¢v) of Œª
      (‚ä¢Œ†AB , _ , _) ‚Üí
    PE.subst (_‚ä¢_‚à∑_ _ _)
      (PE.cong‚ÇÇ (Id (B [ w ]‚ÇÄ))
         (PE.cong (_ ‚àò‚ü® _ ‚ü©_) $ wk1-sgSubst _ _)
         (PE.cong (_ ‚àò‚ü® _ ‚ü©_) $ wk1-sgSubst _ _)) $
    ‚ä¢cong
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ wk-Œ≤ B) $
       var‚ÇÄ ‚ä¢Œ†AB ‚àò‚±º wkTerm‚ÇÅ ‚ä¢Œ†AB ‚ä¢w)
      ‚ä¢v

opaque
  unfolding pointwise-equality

  -- A reduction rule for pointwise-equality.

  pointwise-equality-‚áí :
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ pointwise-equality p q A B t t rfl u ‚áí rfl ‚à∑
      Id (B [ u ]‚ÇÄ) (t ‚àò‚ü® p ‚ü© u) (t ‚àò‚ü® p ‚ü© u)
  pointwise-equality-‚áí {B} {u} ‚ä¢t ‚ä¢u =
    case syntacticTerm ‚ä¢t of Œª
      ‚ä¢Œ†AB ‚Üí
    PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _)
      (PE.cong‚ÇÉ Id
         PE.refl
         (PE.cong (_‚àò‚ü®_‚ü©_ _ _) $ wk1-sgSubst _ _)
         (PE.cong (_‚àò‚ü®_‚ü©_ _ _) $ wk1-sgSubst _ _)) $
    cong-‚áí ‚ä¢t
      (PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ wk-Œ≤ B) $
       var‚ÇÄ ‚ä¢Œ†AB ‚àò‚±º wkTerm‚ÇÅ ‚ä¢Œ†AB ‚ä¢u)

opaque

  -- An equality rule for pointwise-equality.

  pointwise-equality-‚â° :
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ pointwise-equality p q A B t t rfl u ‚â° rfl ‚à∑
      Id (B [ u ]‚ÇÄ) (t ‚àò‚ü® p ‚ü© u) (t ‚àò‚ü® p ‚ü© u)
  pointwise-equality-‚â° ‚ä¢t ‚ä¢u =
    subsetTerm (pointwise-equality-‚áí ‚ä¢t ‚ä¢u)

------------------------------------------------------------------------
-- Lemmas related to uip

opaque
  unfolding uip

  -- A typing rule for UIP. Note that this typing rule requires that K
  -- is allowed.

  ‚ä¢uip :
    K-allowed ‚Üí
    Œì ‚ä¢ eq‚ÇÅ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ eq‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ uip p q A t u eq‚ÇÅ eq‚ÇÇ ‚à∑ Id (Id A t u) eq‚ÇÅ eq‚ÇÇ
  ‚ä¢uip {eq‚ÇÅ} {A} {t} {u} {eq‚ÇÇ} ok ‚ä¢eq‚ÇÅ ‚ä¢eq‚ÇÇ =
    case inversion-Id (syntacticTerm ‚ä¢eq‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    case Id‚±º‚Ä≤ ‚ä¢t ‚ä¢t of Œª
      ‚ä¢Id-t-t ‚Üí
    case Id‚±º‚Ä≤ ‚ä¢u ‚ä¢u of Œª
      ‚ä¢Id-u-u ‚Üí
    ‚ä¢transitivity
      (PE.subst (_‚ä¢_‚à∑_ _ _) lemma‚ÇÅ $
       J‚±º‚Ä≤
         (Id‚±º‚Ä≤
            (var‚ÇÄ (J-motive-context-type ‚ä¢t))
            (‚ä¢transitivity
               (wkTerm‚ÇÅ (J-motive-context-type ‚ä¢t) (wkTerm‚ÇÅ ‚ä¢A ‚ä¢eq‚ÇÇ)) $
             ‚ä¢transitivity
               (‚ä¢symmetry
                  (wkTerm‚ÇÅ (J-motive-context-type ‚ä¢t)
                     (wkTerm‚ÇÅ ‚ä¢A ‚ä¢eq‚ÇÅ))) $
             var‚ÇÄ (J-motive-context-type ‚ä¢t)))
         (PE.subst (_‚ä¢_‚à∑_ _ _)
            (Id (wk1 (Id A t t)) rfl (var x0)
               [ transitivity A t u t eq‚ÇÇ
                   (transitivity A u t t (symmetry A t u eq‚ÇÅ) rfl) ]‚ÇÄ    ‚â°‚ü® PE.cong‚ÇÉ Id (wk1-sgSubst _ _) PE.refl PE.refl ‚ü©

             Id (Id A t t) rfl
               (transitivity A t u t eq‚ÇÇ
                  (transitivity A u t t (symmetry A t u eq‚ÇÅ) rfl))       ‚â°Àò‚ü® lemma‚ÇÅ ‚ü©

             Id (Id (wk2 A) (wk2 t) (var x1)) (var x0)
               (transitivity (wk2 A) (wk2 t) (wk2 u) (var x1) (wk2 eq‚ÇÇ)
                  (transitivity (wk2 A) (wk2 u) (wk2 t) (var x1)
                     (symmetry (wk2 A) (wk2 t) (wk2 u) (wk2 eq‚ÇÅ))
                     (var x0)))
               [ t , rfl ]‚ÇÅ‚ÇÄ                                             ‚àé) $
          K‚±º
            (Id‚±º‚Ä≤ (rfl‚±º (wkTerm‚ÇÅ ‚ä¢Id-t-t ‚ä¢t)) (var‚ÇÄ ‚ä¢Id-t-t))
            (rfl‚±º $ rfl‚±º $
             PE.subst‚ÇÇ (_‚ä¢_‚à∑_ _)
               (PE.sym $ wk1-sgSubst _ _)
               (PE.sym $ wk1-sgSubst _ _)
               ‚ä¢t)
            (‚ä¢transitivity ‚ä¢eq‚ÇÇ $
             ‚ä¢transitivity (‚ä¢symmetry ‚ä¢eq‚ÇÅ) (rfl‚±º ‚ä¢t))
            ok)
         ‚ä¢eq‚ÇÅ)
      (conv
         (‚ä¢cong
            (‚ä¢transitivity (wkTerm‚ÇÅ ‚ä¢Id-u-u ‚ä¢eq‚ÇÇ) (var‚ÇÄ ‚ä¢Id-u-u))
            (‚ä¢transitivity-symmetryÀ° ‚ä¢eq‚ÇÅ))
         (Id-cong
            (refl (Id‚±º‚Ä≤ ‚ä¢t ‚ä¢u))
            (transitivity (wk1 A) (wk1 t) (wk1 u) (wk1 u) (wk1 eq‚ÇÇ)
               (var x0)
               [ transitivity A u t u (symmetry A t u eq‚ÇÅ) eq‚ÇÅ ]‚ÇÄ       ‚â°‚ü® lemma‚ÇÇ ‚ü©‚ä¢‚â°

             transitivity A t u u eq‚ÇÇ
               (transitivity A u t u (symmetry A t u eq‚ÇÅ) eq‚ÇÅ)          ‚àé‚ü® ‚ä¢transitivity ‚ä¢eq‚ÇÇ (‚ä¢transitivity (‚ä¢symmetry ‚ä¢eq‚ÇÅ) ‚ä¢eq‚ÇÅ) ‚ü©‚ä¢)
            (transitivity (wk1 A) (wk1 t) (wk1 u) (wk1 u) (wk1 eq‚ÇÇ)
               (var x0) [ rfl ]‚ÇÄ                                        ‚â°‚ü® lemma‚ÇÇ ‚ü©‚ä¢‚â°

             transitivity A t u u eq‚ÇÇ rfl                               ‚â°‚ü® transitivity-‚â° ‚ä¢eq‚ÇÇ ‚ü©‚ä¢‚àé

             eq‚ÇÇ                                                        ‚àé)))
      where
      lemma‚ÇÅ :
        Id (Id (wk2 A) (wk2 t) (var x1)) (var x0)
          (transitivity (wk2 A) (wk2 t) (wk2 u) (var x1) (wk2 eq‚ÇÇ)
             (transitivity (wk2 A) (wk2 u) (wk2 t) (var x1)
                (symmetry (wk2 A) (wk2 t) (wk2 u) (wk2 eq‚ÇÅ))
                (var x0)))
          [ v , eq ]‚ÇÅ‚ÇÄ PE.‚â°
        Id (Id A t v) eq
          (transitivity A t u v eq‚ÇÇ
             (transitivity A u t v (symmetry A t u eq‚ÇÅ) eq))
      lemma‚ÇÅ {v} {eq} =
        Id (Id (wk2 A) (wk2 t) (var x1)) (var x0)
          (transitivity (wk2 A) (wk2 t) (wk2 u) (var x1) (wk2 eq‚ÇÇ)
             (transitivity (wk2 A) (wk2 u) (wk2 t) (var x1)
                (symmetry (wk2 A) (wk2 t) (wk2 u) (wk2 eq‚ÇÅ))
                (var x0)))
          [ v , eq ]‚ÇÅ‚ÇÄ                                                  ‚â°‚ü® PE.cong (Id _ _) $
                                                                           PE.trans transitivity-[] $
                                                                           PE.cong (transitivity _ _ _ _ _) $
                                                                           PE.trans transitivity-[] $
                                                                           PE.cong (flip (transitivity _ _ _ _) _)
                                                                           symmetry-[] ‚ü©
        Id (Id (wk2 A [ _ ]) (wk2 t [ _ ]) v) eq
          (transitivity (wk2 A [ _ ]) (wk2 t [ _ ]) (wk2 u [ _ ]) v
             (wk2 eq‚ÇÇ [ _ ])
             (transitivity (wk2 A [ _ ]) (wk2 u [ _ ]) (wk2 t [ _ ]) v
                (symmetry (wk2 A [ _ ]) (wk2 t [ _ ]) (wk2 u [ _ ])
                   (wk2 eq‚ÇÅ [ _ ]))
                eq))                                                    ‚â°‚ü® PE.cong‚ÇÉ Id
                                                                             (PE.cong‚ÇÉ Id wk2-[,] wk2-[,] PE.refl)
                                                                             PE.refl
                                                                             (PE.cong‚ÇÜ transitivity wk2-[,] wk2-[,] wk2-[,] PE.refl wk2-[,] $
                                                                              PE.cong‚ÇÜ transitivity wk2-[,] wk2-[,] wk2-[,] PE.refl
                                                                                (PE.cong‚ÇÑ symmetry wk2-[,] wk2-[,] wk2-[,] wk2-[,])
                                                                                PE.refl) ‚ü©
        Id (Id A t v) eq
          (transitivity A t u v eq‚ÇÇ
             (transitivity A u t v (symmetry A t u eq‚ÇÅ) eq))            ‚àé

      lemma‚ÇÇ :
        transitivity (wk1 A) (wk1 t) (wk1 u) (wk1 u) (wk1 eq‚ÇÇ) (var x0)
          [ eq ]‚ÇÄ PE.‚â°
        transitivity A t u u eq‚ÇÇ eq
      lemma‚ÇÇ {eq} =
        transitivity (wk1 A) (wk1 t) (wk1 u) (wk1 u) (wk1 eq‚ÇÇ) (var x0)
          [ eq ]‚ÇÄ                                                        ‚â°‚ü® transitivity-[] ‚ü©

        transitivity (wk1 A [ _ ]‚ÇÄ) (wk1 t [ _ ]‚ÇÄ) (wk1 u [ _ ]‚ÇÄ)
          (wk1 u [ _ ]‚ÇÄ) (wk1 eq‚ÇÇ [ _ ]‚ÇÄ) eq                             ‚â°‚ü® PE.cong‚ÇÜ transitivity (wk1-sgSubst _ _) (wk1-sgSubst _ _)
                                                                              (wk1-sgSubst _ _) (wk1-sgSubst _ _) (wk1-sgSubst _ _) PE.refl ‚ü©
        transitivity A t u u eq‚ÇÇ eq                                      ‚àé

------------------------------------------------------------------------
-- Function extensionality

opaque

  -- Has-function-extensionality¬†p¬†q¬†l‚ÇÅ¬†l‚ÇÇ¬†Œì means that a certain
  -- formulation of function extensionality holds for the context Œì.

  Has-function-extensionality :
    M ‚Üí M ‚Üí Universe-level ‚Üí Universe-level ‚Üí Con Term n ‚Üí Set a
  Has-function-extensionality p q l‚ÇÅ l‚ÇÇ Œì =
    ‚àÉ Œª t ‚Üí
    Œì ‚ä¢ t ‚à∑
      Œ† p , q ‚ñ∑ U l‚ÇÅ ‚ñπ
      Œ† p , q ‚ñ∑ (Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ) ‚ñπ
      let Œ†-type = Œ† p , q ‚ñ∑ var x1 ‚ñπ (var x1 ‚àò‚ü® p ‚ü© var x0) in
      Œ† p , q ‚ñ∑ Œ†-type ‚ñπ
      Œ† p , q ‚ñ∑ wk1 Œ†-type ‚ñπ
      Œ† p , q ‚ñ∑
        (Œ† p , q ‚ñ∑ var x3 ‚ñπ
         Id (var x3 ‚àò‚ü® p ‚ü© var x0)
           (var x2 ‚àò‚ü® p ‚ü© var x0)
           (var x1 ‚àò‚ü® p ‚ü© var x0)) ‚ñπ
      Id (wk[ 3 ]‚Ä≤ Œ†-type) (var x2) (var x1)

opaque

  -- Extends the context with the assumption that a certain instance
  -- of function extensionality holds.

  with-function-extensionality-assumption :
    M ‚Üí M ‚Üí Universe-level ‚Üí Universe-level ‚Üí
    Con Term n ‚Üí Con Term (1+ n)
  with-function-extensionality-assumption p q l‚ÇÅ l‚ÇÇ Œì =
    Œì ‚àô
    Œ† p , q ‚ñ∑ U l‚ÇÅ ‚ñπ
    Œ† p , q ‚ñ∑ (Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ) ‚ñπ
    let Œ†-type = Œ† p , q ‚ñ∑ var x1 ‚ñπ (var x1 ‚àò‚ü® p ‚ü© var x0) in
    Œ† p , q ‚ñ∑ Œ†-type ‚ñπ
    Œ† p , q ‚ñ∑ wk1 Œ†-type ‚ñπ
    Œ† p , q ‚ñ∑
      (Œ† p , q ‚ñ∑ var x3 ‚ñπ
       Id (var x3 ‚àò‚ü® p ‚ü© var x0)
         (var x2 ‚àò‚ü® p ‚ü© var x0)
         (var x1 ‚àò‚ü® p ‚ü© var x0)) ‚ñπ
    Id (wk[ 3 ]‚Ä≤ Œ†-type) (var x2) (var x1)

private opaque

  -- A lemma used below.

  ‚ä¢Œ†3Id :
    Œ†-allowed p q ‚Üí
    ‚ä¢ Œì ‚Üí
    Œì ‚àô U l‚ÇÅ ‚àô Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ ‚àô
    Œ† p , q ‚ñ∑ var x1 ‚ñπ (var x1 ‚àò‚ü® p ‚ü© var x0) ‚àô
    Œ† p , q ‚ñ∑ var x2 ‚ñπ (var x2 ‚àò‚ü® p ‚ü© var x0) ‚ä¢
    Œ† p , q ‚ñ∑ var x3 ‚ñπ
    Id (var x3 ‚àò‚ü® p ‚ü© var x0)
      (var x2 ‚àò‚ü® p ‚ü© var x0) (var x1 ‚àò‚ü® p ‚ü© var x0)
  ‚ä¢Œ†3Id {p} {q} {Œì} ok ‚ä¢Œì =
    flip _‚ä¢_.Œ†Œ£‚±º ok $
    Id‚±º‚Ä≤ (var‚ÇÇ ‚ä¢3 ‚àò‚±º var‚ÇÄ ‚ä¢3) (var‚ÇÅ ‚ä¢3 ‚àò‚±º var‚ÇÄ ‚ä¢3)
    where
    ‚ä¢1 : Œì ‚àô U l‚ÇÅ ‚àô Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ ‚ä¢ var x1
    ‚ä¢1 =
      _‚ä¢_.univ $ var‚ÇÅ $ flip _‚ä¢_.Œ†Œ£‚±º ok $
      U‚±º (‚àô univ (var‚ÇÄ (U‚±º ‚ä¢Œì)))

    ‚ä¢2 :
      Œì ‚àô U l‚ÇÅ ‚àô Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ ‚àô
      Œ† p , q ‚ñ∑ var x1 ‚ñπ (var x1 ‚àò‚ü® p ‚ü© var x0) ‚ä¢
      var x2
    ‚ä¢2 =
      _‚ä¢_.univ $ var‚ÇÇ $ flip _‚ä¢_.Œ†Œ£‚±º ok $
      univ (var‚ÇÅ ‚ä¢1 ‚àò‚±º var‚ÇÄ ‚ä¢1)

    ‚ä¢3 :
      Œì ‚àô U l‚ÇÅ ‚àô Œ† p , q ‚ñ∑ var x0 ‚ñπ U l‚ÇÇ ‚àô
      Œ† p , q ‚ñ∑ var x1 ‚ñπ (var x1 ‚àò‚ü® p ‚ü© var x0) ‚àô
      Œ† p , q ‚ñ∑ var x2 ‚ñπ (var x2 ‚àò‚ü® p ‚ü© var x0) ‚ä¢
      var x3
    ‚ä¢3 =
      _‚ä¢_.univ $ var‚ÇÉ $ flip _‚ä¢_.Œ†Œ£‚±º ok $
      univ (var‚ÇÇ ‚ä¢2 ‚àò‚±º var‚ÇÄ ‚ä¢2)

opaque
  unfolding
    Has-function-extensionality with-function-extensionality-assumption

  -- If Œì is a well-formed context and certain Œ†-types are allowed,
  -- then the context
  -- with-function-extensionality-assumption¬†p¬†q¬†l‚ÇÅ¬†l‚ÇÇ¬†Œì satisfies
  -- Has-function-extensionality¬†p¬†q¬†l‚ÇÅ¬†l‚ÇÇ.

  Has-function-extensionality-with-function-extensionality-assumption :
    Œ†-allowed p q ‚Üí
    ‚ä¢ Œì ‚Üí
    Has-function-extensionality p q l‚ÇÅ l‚ÇÇ
      (with-function-extensionality-assumption p q l‚ÇÅ l‚ÇÇ Œì)
  Has-function-extensionality-with-function-extensionality-assumption
    ok ‚ä¢Œì =
    let ‚ä¢Œ†3Id = ‚ä¢Œ†3Id ok ‚ä¢Œì in
    var x0 ,
    (var‚ÇÄ $
     flip _‚ä¢_.Œ†Œ£‚±º ok $ flip _‚ä¢_.Œ†Œ£‚±º ok $ flip _‚ä¢_.Œ†Œ£‚±º ok $
     flip _‚ä¢_.Œ†Œ£‚±º ok $ flip _‚ä¢_.Œ†Œ£‚±º ok $
     Id‚±º‚Ä≤ (var‚ÇÇ ‚ä¢Œ†3Id) (var‚ÇÅ ‚ä¢Œ†3Id))

------------------------------------------------------------------------
-- Some lemmas related to equality-reflection

opaque

  -- A variant of equality-reflection.

  equality-reflection‚Ä≤ :
    Equality-reflection ‚Üí
    Œì ‚ä¢ v ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ t ‚â° u ‚à∑ A
  equality-reflection‚Ä≤ ok ‚ä¢v =
    equality-reflection ok (wf-‚ä¢‚à∑ ‚ä¢v) ‚ä¢v

opaque

  -- If equality reflection is allowed and the context is inconsistent
  -- (in a certain sense), then any two well-typed terms of the same
  -- type are "definitionally" equal to each other.

  ‚ä¢‚à∑Empty‚Üí‚ä¢‚â°‚à∑ :
    Equality-reflection ‚Üí
    Œì ‚ä¢ t ‚à∑ Empty ‚Üí
    Œì ‚ä¢ u ‚à∑ A ‚Üí
    Œì ‚ä¢ v ‚à∑ A ‚Üí
    Œì ‚ä¢ u ‚â° v ‚à∑ A
  ‚ä¢‚à∑Empty‚Üí‚ä¢‚â°‚à∑ ok ‚ä¢t ‚ä¢u ‚ä¢v =
    equality-reflection‚Ä≤ ok (emptyrec‚±º {p = œâ} (Id‚±º‚Ä≤ ‚ä¢u ‚ä¢v) ‚ä¢t)

opaque

  -- In the presence of equality reflection one can prove (one variant
  -- of) function extensionality.

  function-extensionality-‚àô :
    Equality-reflection ‚Üí
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ v ‚à∑ Id B (wk1 t ‚àò‚ü® p ‚ü© var x0) (wk1 u ‚àò‚ü® p ‚ü© var x0) ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id (Œ† p , q ‚ñ∑ A ‚ñπ B) t u
  function-extensionality-‚àô ok ‚ä¢t ‚ä¢u ‚ä¢v =
    rfl‚±º‚Ä≤ $ Œ∑-eq‚Ä≤ ‚ä¢t ‚ä¢u $ equality-reflection‚Ä≤ ok ‚ä¢v

opaque

  -- In the presence of equality reflection one can prove (another
  -- variant of) function extensionality.

  function-extensionality-Œ† :
    Equality-reflection ‚Üí
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ v ‚à∑
      Œ† p , q ‚ñ∑ A ‚ñπ Id B (wk1 t ‚àò‚ü® p ‚ü© var x0) (wk1 u ‚àò‚ü® p ‚ü© var x0) ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id (Œ† p , q ‚ñ∑ A ‚ñπ B) t u
  function-extensionality-Œ† ok ‚ä¢t ‚ä¢u ‚ä¢v =
    let ‚ä¢A , _ , _ = inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) in
    function-extensionality-‚àô ok ‚ä¢t ‚ä¢u $
    PE.subst (_‚ä¢_‚à∑_ _ _)
      (PE.cong‚ÇÉ Id
         (wkSingleSubstId _)
         (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wkSingleSubstId _) PE.refl PE.refl)
         (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wkSingleSubstId _) PE.refl PE.refl))
      (wkTerm‚ÇÅ ‚ä¢A ‚ä¢v ‚àò‚±º var‚ÇÄ ‚ä¢A)

opaque
  unfolding Has-function-extensionality

  -- In the presence of equality reflection
  -- Has-function-extensionality¬†p¬†q holds for every well-formed
  -- context (assuming that Œ†-allowed¬†p¬†q holds).

  has-function-extensionality :
    Equality-reflection ‚Üí
    Œ†-allowed p q ‚Üí
    ‚ä¢ Œì ‚Üí
    Has-function-extensionality p q l‚ÇÅ l‚ÇÇ Œì
  has-function-extensionality {p} ok Œ†-ok ‚ä¢Œì =
    let ‚ä¢Œ†3Id = ‚ä¢Œ†3Id Œ†-ok ‚ä¢Œì in
    lam p (lam p (lam p (lam p (lam p rfl)))) ,
    (lam‚±º‚Ä≤ Œ†-ok $ lam‚±º‚Ä≤ Œ†-ok $ lam‚±º‚Ä≤ Œ†-ok $ lam‚±º‚Ä≤ Œ†-ok $ lam‚±º‚Ä≤ Œ†-ok $
     function-extensionality-Œ† ok (var‚ÇÇ ‚ä¢Œ†3Id) (var‚ÇÅ ‚ä¢Œ†3Id)
       (var‚ÇÄ ‚ä¢Œ†3Id))

opaque

  -- In the presence of equality reflection one can prove a
  -- definitional variant of UIP.

  uip-with-equality-reflection-‚â° :
    Equality-reflection ‚Üí
    Œì ‚ä¢ eq‚ÇÅ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ eq‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ eq‚ÇÅ ‚â° eq‚ÇÇ ‚à∑ Id A t u
  uip-with-equality-reflection-‚â° ok ‚ä¢eq‚ÇÅ ‚ä¢eq‚ÇÇ =
    trans (lemma ‚ä¢eq‚ÇÅ) (sym‚Ä≤ (lemma ‚ä¢eq‚ÇÇ))
    where
    lemma : Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí Œì ‚ä¢ eq ‚â° rfl ‚à∑ Id A t u
    lemma ‚ä¢eq =
      let ‚ä¢A , ‚ä¢t , _ = inversion-Id (syntacticTerm ‚ä¢eq)
          ‚ä¢Id         = var‚ÇÄ $ Id‚±º‚Ä≤ (wkTerm‚ÇÅ ‚ä¢A ‚ä¢t) (var‚ÇÄ ‚ä¢A)
      in
      equality-reflection‚Ä≤ ok $
      PE.subst (_‚ä¢_‚à∑_ _ _)
        (PE.cong‚ÇÉ Id
           (PE.cong‚ÇÉ Id wk2-[,] wk2-[,] PE.refl) PE.refl PE.refl) $
      J‚±º‚Ä≤ {p = œâ} {q = œâ}
        (Id‚±º‚Ä≤ ‚ä¢Id (rfl‚±º‚Ä≤ (equality-reflection‚Ä≤ ok ‚ä¢Id)))
        (rfl‚±º $
         PE.subst (_‚ä¢_‚à∑_ _ _)
           (PE.sym $ PE.cong‚ÇÉ Id wk2-[,] wk2-[,] PE.refl) $
         rfl‚±º ‚ä¢t)
        ‚ä¢eq

opaque

  -- In the presence of equality reflection one can prove a variant of
  -- UIP.

  uip-with-equality-reflection-Id :
    Equality-reflection ‚Üí
    Œì ‚ä¢ eq‚ÇÅ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ eq‚ÇÇ ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id (Id A t u) eq‚ÇÅ eq‚ÇÇ
  uip-with-equality-reflection-Id ok ‚ä¢eq‚ÇÅ ‚ä¢eq‚ÇÇ =
    rfl‚±º‚Ä≤ (uip-with-equality-reflection-‚â° ok ‚ä¢eq‚ÇÅ ‚ä¢eq‚ÇÇ)

opaque

  -- In the presence of equality reflection one can define a variant
  -- of []-cong.

  []-cong-with-equality-reflection :
    let open Erased s in
    Equality-reflection ‚Üí
    Erased-allowed s ‚Üí
    Œì ‚ä¢ eq ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ rfl ‚à∑ Id (Erased A) [ t ] ([ u ])
  []-cong-with-equality-reflection ok‚ÇÅ ok‚ÇÇ ‚ä¢eq =
    let ‚ä¢A , _ = inversion-Id (syntacticTerm ‚ä¢eq) in
    rfl‚±º‚Ä≤ (EP.[]-cong‚Ä≤ ok‚ÇÇ ‚ä¢A (equality-reflection‚Ä≤ ok‚ÇÅ ‚ä¢eq))

------------------------------------------------------------------------
-- A preservation lemma

private opaque

  -- A variant of the J rule.

  J‚Ä≤ :
    ‚àÄ {a p} {A : Set a} {x y : A}
    (P : ‚àÄ y ‚Üí x PE.‚â° y ‚Üí Set p) ‚Üí
    P x PE.refl ‚Üí
    (x‚â°y : x PE.‚â° y) ‚Üí
    P y x‚â°y
  J‚Ä≤ _ p PE.refl = p

  -- The following code illustrates roughly how Œ†Œ£-cong-IdÀ° below is
  -- defined.

  Œ†-cong-IdÀ°‚Ä≤ :
    ‚àÄ {a b} ‚Üí
    Function-extensionality a (lsuc b) ‚Üí
    {A‚ÇÅ A‚ÇÇ : Set a} {B‚ÇÅ : A‚ÇÅ ‚Üí Set b} {B‚ÇÇ : A‚ÇÇ ‚Üí Set b} ‚Üí
    (A‚ÇÅ‚â°A‚ÇÇ : A‚ÇÅ PE.‚â° A‚ÇÇ) ‚Üí
    ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x PE.‚â° B‚ÇÇ (PE.subst (Œª A ‚Üí A) A‚ÇÅ‚â°A‚ÇÇ x)) ‚Üí
    ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x) PE.‚â° ((x : A‚ÇÇ) ‚Üí B‚ÇÇ x)
  Œ†-cong-IdÀ°‚Ä≤ {b} fe {A‚ÇÅ} {A‚ÇÇ} {B‚ÇÅ} {B‚ÇÇ} A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ =
    J‚Ä≤ (Œª A‚ÇÇ A‚ÇÅ‚â°A‚ÇÇ ‚Üí
          {B‚ÇÇ : A‚ÇÇ ‚Üí Set b} ‚Üí
          ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x PE.‚â° B‚ÇÇ (PE.subst (Œª A ‚Üí A) A‚ÇÅ‚â°A‚ÇÇ x)) ‚Üí
          ((x : A‚ÇÅ) ‚Üí B‚ÇÅ x) PE.‚â° ((x : A‚ÇÇ) ‚Üí B‚ÇÇ x))
       (Œª {B‚ÇÇ} B‚ÇÅ‚â°B‚ÇÇ ‚Üí
          PE.cong (Œª B ‚Üí (x : A‚ÇÅ) ‚Üí B x) {x = B‚ÇÅ} {y = B‚ÇÇ}
            (ext {A = A‚ÇÅ} {P = Œª _ ‚Üí Set b} {f = B‚ÇÅ} {g = B‚ÇÇ} fe B‚ÇÅ‚â°B‚ÇÇ))
       A‚ÇÅ‚â°A‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ

opaque
  unfolding Has-function-extensionality

  -- Allowed Œ†- and Œ£-types preserve propositional equality in a
  -- certain sense, assuming that a certain form of function
  -- extensionality can be proved (and that some Œ†-type is allowed).

  Œ†Œ£-cong-IdÀ° :
    {Œì : Con Term n} ‚Üí
    Œ†Œ£-allowed b p q ‚Üí
    Œ†-allowed p‚Ä≤ q‚Ä≤ ‚Üí
    Has-function-extensionality p‚Ä≤ q‚Ä≤ l‚ÇÅ (1+ l‚ÇÇ) Œì ‚Üí
    Œì ‚àô A‚ÇÇ ‚ä¢ B‚ÇÇ ‚à∑ U l‚ÇÇ ‚Üí
    Œì ‚ä¢ t ‚à∑ Id (U l‚ÇÅ) A‚ÇÅ A‚ÇÇ ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ u ‚à∑
      Id (U l‚ÇÇ) B‚ÇÅ
        (B‚ÇÇ [ cast l‚ÇÅ (wk1 A‚ÇÅ) (wk1 A‚ÇÇ) (wk1 t) (var x0) ]‚Üë) ‚Üí
    ‚àÉ Œª v ‚Üí
      Œì ‚ä¢ v ‚à∑
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ)
  Œ†Œ£-cong-IdÀ°
    {n} {b} {p} {q} {p‚Ä≤} {q‚Ä≤} {l‚ÇÅ} {l‚ÇÇ} {A‚ÇÇ} {B‚ÇÇ} {t} {A‚ÇÅ} {u} {B‚ÇÅ} {Œì}
    ok ok‚Ä≤ (ext , ‚ä¢ext) ‚ä¢B‚ÇÇ ‚ä¢t ‚ä¢u =
    J-app ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ B‚ÇÇ ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ u , ‚ä¢J‚àò‚àò
    where
    opaque
      ‚ä¢A‚ÇÅ : Œì ‚ä¢ A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚ä¢A‚ÇÅ = inversion-Id (wf-‚ä¢‚à∑ ‚ä¢t) .proj‚ÇÇ .proj‚ÇÅ

    opaque
      ‚ä¢A‚ÇÇ : Œì ‚ä¢ A‚ÇÇ ‚à∑ U l‚ÇÅ
      ‚ä¢A‚ÇÇ = inversion-Id (wf-‚ä¢‚à∑ ‚ä¢t) .proj‚ÇÇ .proj‚ÇÇ

    opaque
      ‚ä¢B‚ÇÅ : Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚à∑ U l‚ÇÇ
      ‚ä¢B‚ÇÅ = inversion-Id (wf-‚ä¢‚à∑ ‚ä¢u) .proj‚ÇÇ .proj‚ÇÅ

    opaque
      ‚àô‚ä¢Id : Œì ‚àô U l‚ÇÅ ‚ä¢ Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0)
      ‚àô‚ä¢Id = Id‚±º‚Ä≤ (wkTerm‚ÇÅ (wf-‚ä¢‚à∑ ‚ä¢A‚ÇÅ) ‚ä¢A‚ÇÅ) (var‚ÇÄ (wf-‚ä¢‚à∑ ‚ä¢A‚ÇÅ))

    opaque
      ‚àô¬≤‚ä¢Œ†U :
        Œì ‚àô U l‚ÇÅ ‚àô Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0) ‚ä¢
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ
      ‚àô¬≤‚ä¢Œ†U = Œ†Œ£‚±º (U‚±º (‚àô univ (var‚ÇÅ ‚àô‚ä¢Id))) ok‚Ä≤

    opaque
      ‚àô¬≥‚ä¢A‚ÇÅ :
        Œì ‚àô U l‚ÇÅ ‚àô Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0) ‚àô
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ ‚ä¢
        wk[ 3 ] A‚ÇÅ
      ‚àô¬≥‚ä¢A‚ÇÅ =
        PE.subst (_‚ä¢_ _) (PE.sym wk[]‚â°wk[]‚Ä≤) $
        _‚ä¢_.univ $ wkTerm ( ∑‚äá-drop (‚àô ‚àô¬≤‚ä¢Œ†U)) ‚ä¢A‚ÇÅ

    Œ†Id : ‚àÄ k ‚Üí (_ _ _ : Term (1+ (k N.+ n))) ‚Üí Term (k N.+ n)
    Œ†Id k C D t =
      Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ k ] A‚ÇÅ ‚ñπ
      Id (U l‚ÇÇ) (B‚ÇÅ [ 1+ k ][ var x0 ]‚Üë)
        (C ‚àò‚ü® p‚Ä≤ ‚ü© cast l‚ÇÅ (wk[ 1+ k ]‚Ä≤ A‚ÇÅ) D t (var x0))

    opaque
      ‚ä¢Œ†Id :
        {k : Nat} {Œî : Con Term (k N.+ n)}
        {C D t : Term (1+ (k N.+ n))} ‚Üí
        drop k Œî PE.‚â° Œì ‚Üí
        Œî ‚àô wk[ k ] A‚ÇÅ ‚ä¢ C ‚à∑ Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ D ‚ñπ U l‚ÇÇ ‚Üí
        Œî ‚àô wk[ k ] A‚ÇÅ ‚ä¢ t ‚à∑ Id (U l‚ÇÅ) (wk[ 1+ k ]‚Ä≤ A‚ÇÅ) D ‚Üí
        Œî ‚ä¢ Œ†Id k C D t
      ‚ä¢Œ†Id {k} {Œî} PE.refl ‚ä¢C ‚ä¢t =
        flip _‚ä¢_.Œ†Œ£‚±º ok‚Ä≤ $
        Id‚±º‚Ä≤ (subst-‚ä¢‚à∑ ‚ä¢B‚ÇÅ (‚ä¢À¢ ∑‚à∑-[][]‚Üë (var‚ÇÄ (univ ‚ä¢wk[k]A‚ÇÅ‚à∑))))
          (‚ä¢C ‚àò‚±º
           ‚ä¢cast ‚ä¢t
             (PE.subst (_‚ä¢_‚à∑_ _ _) wk[]‚â°wk[]‚Ä≤ $
              var‚ÇÄ (univ ‚ä¢wk[k]A‚ÇÅ‚à∑)))
        where
        ‚ä¢wk[k]A‚ÇÅ‚à∑ : Œî ‚ä¢ wk[ k ] A‚ÇÅ ‚à∑ U l‚ÇÅ
        ‚ä¢wk[k]A‚ÇÅ‚à∑ =
          PE.subst‚ÇÇ (_‚ä¢_‚à∑_ _) (PE.sym wk[]‚â°wk[]‚Ä≤) PE.refl $
          wkTerm ( ∑‚äá-drop (wf (‚ä¢‚àô‚Üí‚ä¢ (wf (wf-‚ä¢‚à∑ ‚ä¢C))))) ‚ä¢A‚ÇÅ

    Œ†Id-lam : Term n
    Œ†Id-lam = Œ†Id 0 (wk1 (lam p‚Ä≤ B‚ÇÇ)) (wk1 A‚ÇÇ) (wk1 t)

    opaque
      ‚ä¢Œ†Id-lam : Œì ‚ä¢ Œ†Id-lam
      ‚ä¢Œ†Id-lam =
        ‚ä¢Œ†Id PE.refl (wkTerm‚ÇÅ (univ ‚ä¢A‚ÇÅ) (lam‚±º‚Ä≤ ok‚Ä≤ ‚ä¢B‚ÇÇ))
          (wkTerm‚ÇÅ (univ ‚ä¢A‚ÇÅ) ‚ä¢t)

    opaque
      Œ†Id-lam‚ä¢A‚ÇÇ : Œì ‚àô Œ†Id-lam ‚ä¢ wk1 A‚ÇÇ ‚à∑ U l‚ÇÅ
      Œ†Id-lam‚ä¢A‚ÇÇ = wkTerm‚ÇÅ ‚ä¢Œ†Id-lam ‚ä¢A‚ÇÇ

    Œ†Id-1 : Term (3+ n)
    Œ†Id-1 = Œ†Id 3 (var x1) (var x3) (var x2)

    opaque
      ‚ä¢Œ†Id-1 :
        Œì ‚àô U l‚ÇÅ ‚àô Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0) ‚àô
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ ‚ä¢
        Œ†Id-1
      ‚ä¢Œ†Id-1 =
        ‚ä¢Œ†Id PE.refl (var‚ÇÅ ‚àô¬≥‚ä¢A‚ÇÅ)
          (PE.subst (_‚ä¢_‚à∑_ _ _)
             (PE.cong‚ÇÇ (Id _) wk[]‚â°wk[]‚Ä≤ PE.refl) $
           var‚ÇÇ ‚àô¬≥‚ä¢A‚ÇÅ)

    opaque
      ‚ä¢Œ†Id-1[] :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚ä¢
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ]
      ‚ä¢Œ†Id-1[] =
        subst-‚ä¢ ‚ä¢Œ†Id-1 $
        ‚ä¢À¢ ∑‚à∑-‚áë‚Ä≤ ‚àô¬≤‚ä¢Œ†U $
        ‚Üí‚ä¢À¢ ∑‚à∑‚àô (‚ä¢À¢ ∑‚à∑-sgSubst ‚ä¢A‚ÇÅ) $
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (PE.cong‚ÇÇ (Id _) (PE.sym $ wk1-sgSubst _ _) PE.refl) $
        rfl‚±º ‚ä¢A‚ÇÅ

    opaque
      ‚àô‚ä¢A‚ÇÅ : Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚ä¢ wk1 A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚àô‚ä¢A‚ÇÅ = wkTerm‚ÇÅ (Œ†Œ£‚±º (U‚±º (‚àô univ ‚ä¢A‚ÇÅ)) ok‚Ä≤) ‚ä¢A‚ÇÅ

    opaque
      ‚àô¬≤‚ä¢A‚ÇÅ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚ä¢
        wk[ 2 ]‚Ä≤ A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚àô¬≤‚ä¢A‚ÇÅ = wkTerm (step ∑ ‚äá-drop ‚ä¢Œ†Id-1[]) ‚ä¢A‚ÇÅ

    opaque
      ‚àô¬≥‚ä¢U‚ÇÇ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚àô wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ä¢
        U l‚ÇÇ ‚à∑ U (1+ l‚ÇÇ)
      ‚àô¬≥‚ä¢U‚ÇÇ = U‚±º (‚àô univ ‚àô¬≤‚ä¢A‚ÇÅ)

    opaque
      ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≤ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚àô wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ä¢
        wk[ 3 ]‚Ä≤ A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≤ = wkTerm (step ∑ ‚äá-drop (univ ‚àô¬≤‚ä¢A‚ÇÅ)) ‚ä¢A‚ÇÅ

    opaque
      ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≥ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚àô
        Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚ä¢
        wk[ 3 ]‚Ä≤ A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≥ = wkTerm (step ∑ ‚äá-drop (univ (Œ†Œ£‚±º ‚àô¬≤‚ä¢A‚ÇÅ ‚àô¬≥‚ä¢U‚ÇÇ ok‚Ä≤))) ‚ä¢A‚ÇÅ

    Motive : Term (2+ n)
    Motive =
      Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ) ‚ñπ
      Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ Œ†Id-1 ‚ñπ
      Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 4 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
        (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ var x3 ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))

    opaque
      ‚ä¢Œ†20 :
        Œì ‚àô U l‚ÇÅ ‚àô Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0) ‚àô
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ ‚àô Œ†Id-1 ‚ä¢
        Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ var x3 ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) ‚à∑
        wk[ 4 ]‚Ä≤ (U (l‚ÇÅ ‚äî·µò l‚ÇÇ))
      ‚ä¢Œ†20 =
        Œ†Œ£‚±º (var‚ÇÉ ‚ä¢Œ†Id-1)
          (var‚ÇÇ (univ (var‚ÇÉ ‚ä¢Œ†Id-1)) ‚àò‚±º var‚ÇÄ (univ (var‚ÇÉ ‚ä¢Œ†Id-1))) ok

    opaque
      ‚ä¢Œ†20‚Ä≤ :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚ä¢
        Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) ‚à∑
        U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
      ‚ä¢Œ†20‚Ä≤ =
        Œ†Œ£‚±º ‚àô¬≤‚ä¢A‚ÇÅ
          (var‚ÇÇ (univ ‚àô¬≤‚ä¢A‚ÇÅ) ‚àò‚±º
           PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ PE.cong wk1 wk[]‚â°wk[]‚Ä≤)
             (var‚ÇÄ (univ ‚àô¬≤‚ä¢A‚ÇÅ)))
          ok

    opaque
      ‚ä¢Œ†10 :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚àô
        wk[ 2 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ) ‚ä¢
        Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 3 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) ‚à∑
        U (l‚ÇÅ ‚äî·µò l‚ÇÇ)
      ‚ä¢Œ†10 =
        Œ†Œ£‚±º ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≥
          (var‚ÇÅ (univ ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≥) ‚àò‚±º
           PE.subst (_‚ä¢_‚à∑_ _ _) (PE.sym $ PE.cong wk1 $ wk-comp _ _ _)
             (var‚ÇÄ (univ ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≥)))
          ok

    opaque
      ‚ä¢Motive : Œì ‚àô U l‚ÇÅ ‚àô Id (U l‚ÇÅ) (wk1 A‚ÇÅ) (var x0) ‚ä¢ Motive
      ‚ä¢Motive =
        flip _‚ä¢_.Œ†Œ£‚±º ok‚Ä≤ $
        flip _‚ä¢_.Œ†Œ£‚±º ok‚Ä≤ $
        Id‚±º‚Ä≤ (wkTerm ( ∑‚äá-drop (‚àô ‚ä¢Œ†Id-1)) (Œ†Œ£‚±º ‚ä¢A‚ÇÅ ‚ä¢B‚ÇÅ ok)) ‚ä¢Œ†20

    opaque
      ‚ä¢U‚â°ŒªU0 : Œì ‚àô A‚ÇÅ ‚ä¢ U l‚ÇÇ ‚â° lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0 ‚à∑ U (1+ l‚ÇÇ)
      ‚ä¢U‚â°ŒªU0 =
        sym‚Ä≤ $
        Œ≤-red-‚â° (U‚±º (‚àô wk‚ÇÅ (univ ‚ä¢A‚ÇÅ) (univ ‚ä¢A‚ÇÅ))) (var‚ÇÄ (univ ‚ä¢A‚ÇÅ)) ok‚Ä≤

    opaque
      ‚ä¢10 :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô wk1 A‚ÇÅ ‚ä¢
        var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0 ‚à∑ U l‚ÇÇ
      ‚ä¢10 = var‚ÇÅ (univ ‚àô‚ä¢A‚ÇÅ) ‚àò‚±º var‚ÇÄ (univ ‚àô‚ä¢A‚ÇÅ)

    opaque
      ‚ä¢Œ†Id‚Ä≤ :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚ä¢
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
        Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë) (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
      ‚ä¢Œ†Id‚Ä≤ =
        flip Œ†Œ£‚±º ok‚Ä≤ $
        Id‚±º‚Ä≤ (subst-‚ä¢‚à∑ ‚ä¢B‚ÇÅ (‚ä¢À¢ ∑‚à∑-[][]‚Üë (var‚ÇÄ (univ ‚àô‚ä¢A‚ÇÅ)))) ‚ä¢10

    opaque
      ‚àô¬≤‚ä¢A‚ÇÅ‚Ä≤ :
        Œì ‚àô Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
          Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë) (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) ‚ä¢
        wk[ 2 ]‚Ä≤ A‚ÇÅ ‚à∑ U l‚ÇÅ
      ‚àô¬≤‚ä¢A‚ÇÅ‚Ä≤ = wkTerm (step ∑ ‚äá-drop ‚ä¢Œ†Id‚Ä≤) ‚ä¢A‚ÇÅ

    ext‚àò¬≥ : Term n
    ext‚àò¬≥ =
      ext ‚àò‚ü® p‚Ä≤ ‚ü© A‚ÇÅ ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ B‚ÇÅ

    opaque
      ‚ä¢ext‚àò¬≥ :
        Œì ‚ä¢
        ext‚àò¬≥ ‚à∑
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ) ‚ñπ
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
           Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë)
             (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
        Id (wk[ 2 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ))
          (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x1)
      ‚ä¢ext‚àò¬≥ =
        conv
          (((‚ä¢ext ‚àò‚±º ‚ä¢A‚ÇÅ) ‚àò‚±º
            lam‚±º‚Ä≤ ok‚Ä≤ (U‚±º (‚àô univ ‚ä¢A‚ÇÅ))) ‚àò‚±º
           (_‚ä¢_‚à∑_.conv (lam‚±º‚Ä≤ ok‚Ä≤ ‚ä¢B‚ÇÅ) $ univ
              (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ                    ‚â°‚ü® Œ†Œ£-cong
                                                             (PE.subst‚ÇÇ (_‚ä¢_‚â°_‚à∑_ _ _) (PE.sym $ wk1-sgSubst _ _) PE.refl $
                                                              refl ‚ä¢A‚ÇÅ)
                                                             ‚ä¢U‚â°ŒªU0 ok‚Ä≤ ‚ü©‚ä¢‚àé
               Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ [ lam p‚Ä≤ (U l‚ÇÇ) ]‚ÇÄ ‚ñπ
               (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)           ‚àé)))
          (_‚ä¢_‚â°_.univ $ sym‚Ä≤
             (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ) ‚ñπ
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
                 Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë)
                   (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Id (wk[ 2 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ))
                (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x1)                        ‚â°‚ü® Œ†Œ£-cong
                                                                            (Œ†Œ£-cong (refl ‚ä¢A‚ÇÅ) ‚ä¢U‚â°ŒªU0 ok‚Ä≤)
                                                                            (Œ†Œ£-cong
                                                                               (Œ†Œ£-cong
                                                                                  (refl ‚àô‚ä¢A‚ÇÅ)
                                                                                  (Id-cong
                                                                                     (wkEqTerm (lift ∑ ‚äá-drop (univ ‚àô‚ä¢A‚ÇÅ)) ‚ä¢U‚â°ŒªU0)
                                                                                     (PE.subst‚ÇÉ (_‚ä¢_‚â°_‚à∑_ _) (PE.sym $ [][]‚Üë‚â° B‚ÇÅ) PE.refl PE.refl $
                                                                                      sym‚Ä≤ $
                                                                                      Œ≤-red-‚â°
                                                                                        (PE.subst‚ÇÉ _‚ä¢_‚à∑_
                                                                                           (PE.cong (_‚àô_ _) (PE.sym wk[]‚â°wk[]‚Ä≤)) PE.refl PE.refl $
                                                                                         wkTerm
                                                                                           (lift ∑ ‚äá-drop $
                                                                                            univ (wkTerm (step ∑ ‚äá-drop (univ ‚àô‚ä¢A‚ÇÅ)) ‚ä¢A‚ÇÅ))
                                                                                           ‚ä¢B‚ÇÅ)
                                                                                        (var‚ÇÄ (univ ‚àô‚ä¢A‚ÇÅ)) ok‚Ä≤)
                                                                                     (refl ‚ä¢10))
                                                                                  ok‚Ä≤)
                                                                               (Id-cong
                                                                                  (Œ†Œ£-cong
                                                                                     (refl ‚àô¬≤‚ä¢A‚ÇÅ‚Ä≤)
                                                                                     (wkEqTerm (lift ∑ ‚äá-drop (univ ‚àô¬≤‚ä¢A‚ÇÅ‚Ä≤)) ‚ä¢U‚â°ŒªU0)
                                                                                     ok‚Ä≤)
                                                                                  (_‚ä¢_‚â°_‚à∑_.refl $
                                                                                   wkTerm (step ∑ ‚äá-drop ‚ä¢Œ†Id‚Ä≤) (lam‚±º‚Ä≤ ok‚Ä≤ ‚ä¢B‚ÇÅ))
                                                                                  (_‚ä¢_‚â°_‚à∑_.refl $
                                                                                   PE.subst (_‚ä¢_‚à∑_ _ _) wk[]‚â°wk[]‚Ä≤ $
                                                                                   var‚ÇÅ ‚ä¢Œ†Id‚Ä≤))
                                                                               ok‚Ä≤)
                                                                            ok‚Ä≤ ‚ü©‚ä¢‚àé‚â°
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ
                 (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
                 Id (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
                   (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
                   (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Id
                (wk[ 2 ]‚Ä≤
                   (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)))
                (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x1)                        ‚â°Àò‚ü® PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                             (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_) wk2-[,] PE.refl)
                                                                             (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                                (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                                   (PE.trans (PE.cong _[ _ ] $ wk[]‚â°wk[]‚Ä≤ {t = A‚ÇÅ})
                                                                                    wk[2+]‚Ä≤[,‚áë]‚â°)
                                                                                   (PE.cong‚ÇÇ (Id _)
                                                                                      (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wk-comp _ _ _) PE.refl PE.refl)
                                                                                      PE.refl))
                                                                                (PE.cong‚ÇÉ Id
                                                                                   (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                                      (PE.trans (PE.cong _[ _ ] $ wk[]‚â°wk[]‚Ä≤ {t = A‚ÇÅ})
                                                                                       wk[2+]‚Ä≤[,‚áë]‚â°)
                                                                                      PE.refl)
                                                                                   (wk-comp _ _ _)
                                                                                   PE.refl)) ‚ü©
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ] A‚ÇÅ ‚ñπ
                 (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 3 ] A‚ÇÅ ‚ñπ
                 Id (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
                   (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Id
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 4 ] A‚ÇÅ ‚ñπ
                 (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
                (var x2) (var x1)
              [ lam p‚Ä≤ (U l‚ÇÇ) , lam p‚Ä≤ B‚ÇÅ ]‚ÇÅ‚ÇÄ                          ‚â°Àò‚ü® singleSubstComp _ _
                                                                             (Œ† _ , _ ‚ñ∑ (Œ† _ , _ ‚ñ∑ wk[ _ ] A‚ÇÅ ‚ñπ (lam _ (U _) ‚àò‚ü® _ ‚ü© var x0)) ‚ñπ
                                                                              Œ† _ , _ ‚ñ∑
                                                                                (Œ† _ , _ ‚ñ∑ wk[ _ ] A‚ÇÅ ‚ñπ
                                                                                 Id (lam _ (U _) ‚àò‚ü® _ ‚ü© var x0) (var x2 ‚àò‚ü® _ ‚ü© var x0)
                                                                                   (var x1 ‚àò‚ü® _ ‚ü© var x0)) ‚ñπ
                                                                              Id (Œ† _ , _ ‚ñ∑ wk[ 4 ] A‚ÇÅ ‚ñπ (lam _ (U _) ‚àò‚ü® _ ‚ü© var x0)) (var x2)
                                                                                (var x1)) ‚ü©
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ] A‚ÇÅ ‚ñπ
                 (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 3 ] A‚ÇÅ ‚ñπ
                 Id (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
                   (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0) (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
              Id
                (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 4 ] A‚ÇÅ ‚ñπ
                 (lam p‚Ä≤ (U l‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
                (var x2) (var x1)
              [ sgSubst (lam p‚Ä≤ (U l‚ÇÇ)) ‚áë ] [ lam p‚Ä≤ B‚ÇÅ ]‚ÇÄ             ‚àé))

    opaque
      ‚ä¢ext‚àò‚Å¥ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚ä¢
        wk[ 2 ]‚Ä≤ ext‚àò¬≥ ‚àò‚ü® p‚Ä≤ ‚ü© var x1 ‚à∑
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ
           Id (U l‚ÇÇ) (B‚ÇÅ [ 3 ][ var x0 ]‚Üë)
             (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
        Id (wk[ 3 ]‚Ä≤ (Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ))
          (wk[ 3 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x2)
      ‚ä¢ext‚àò‚Å¥ =
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
             (U.wk (lift (stepn id 2)) $
              Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
              Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë) (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
           Id
             (U.wk (liftn (stepn id 2) 2)
                (wk[ 2 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ)))
             (U.wk (liftn (stepn id 2) 2) (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)))
             (var x1)
           [ var x1 ]‚ÇÄ                                                    ‚â°‚ü® PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                               (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                                  (PE.trans (PE.sym $ [][]‚Üë‚â° (wk1 A‚ÇÅ))
                                                                                   wk1-[][]‚Üë‚Ä≤)
                                                                                  (PE.cong‚ÇÇ (Id _)
                                                                                     (PE.trans (subst-wk (B‚ÇÅ [ 2 ][ _ ]‚Üë)) $
                                                                                      PE.trans (substCompEq B‚ÇÅ) $
                                                                                      flip substVar-to-subst B‚ÇÅ Œª where
                                                                                        x0     ‚Üí PE.refl
                                                                                        (_ +1) ‚Üí PE.refl)
                                                                                     PE.refl))
                                                                               (PE.cong‚ÇÉ Id
                                                                                  (PE.trans (subst-wk (wk[ 2 ]‚Ä≤ (Œ† _ , _ ‚ñ∑ A‚ÇÅ ‚ñπ U _))) $
                                                                                   PE.trans (subst-wk (Œ† _ , _ ‚ñ∑ A‚ÇÅ ‚ñπ U _)) $
                                                                                   PE.sym $ wk‚â°subst _ _)
                                                                                  (PE.trans (subst-wk (wk[ 2 ]‚Ä≤ (lam _ B‚ÇÅ))) $
                                                                                   PE.trans (subst-wk (lam _ B‚ÇÅ)) $
                                                                                   PE.sym $ wk‚â°subst _ _)
                                                                                  PE.refl) ‚ü©
          Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
            (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ
             Id (U l‚ÇÇ) (B‚ÇÅ [ 3 ][ var x0 ]‚Üë) (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)) ‚ñπ
          Id (wk[ 3 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ)) (wk[ 3 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ))
            (var x2)                                                      ‚àé) $
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_) (PE.sym wk[]‚â°wk[]‚Ä≤) PE.refl)
          (wkTerm (step ∑ ‚äá-drop ‚ä¢Œ†Id-1[]) ‚ä¢ext‚àò¬≥) ‚àò‚±º
        var‚ÇÅ ‚ä¢Œ†Id-1[]

    opaque
      ‚ä¢ext‚àò‚Åµ :
        Œì ‚àô Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ ‚àô
        Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ] ‚ä¢
        wk[ 2 ]‚Ä≤ ext‚àò¬≥ ‚àò‚ü® p‚Ä≤ ‚ü© var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0 ‚à∑
        Id (wk[ 2 ]‚Ä≤ (Œ†Œ£‚ü® BMŒ† ‚ü© p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ))
          (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x1)
      ‚ä¢ext‚àò‚Åµ =
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (PE.cong‚ÇÉ Id (step-sgSubst _ _) (step-sgSubst _ _) PE.refl) $
        ‚ä¢ext‚àò‚Å¥ ‚àò‚±º
        (_‚ä¢_‚à∑_.conv (var‚ÇÄ ‚ä¢Œ†Id-1[]) $ univ
           (wk1 (Œ†Id-1 [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë ])             ‚â°‚ü® PE.trans
                                                                          (PE.cong wk1 $
                                                                           PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                             (PE.trans
                                                                                (PE.cong _[ consSubst (sgSubst _) _ ‚áë ] $
                                                                                 wk[]‚â°wk[]‚Ä≤ {t = A‚ÇÅ})
                                                                              wk[2+]‚Ä≤[,‚áë]‚â°)
                                                                             (PE.cong‚ÇÇ (Id _)
                                                                                (PE.trans ([][]‚Üë-[,‚áë] 2 B‚ÇÅ) $
                                                                                 [1+][0]‚Üë {t = B‚ÇÅ})
                                                                                (PE.cong (var x1 ‚àò‚ü® _ ‚ü©_) $
                                                                                 PE.trans cast-[] $
                                                                                 PE.cong‚ÇÑ (cast _)
                                                                                   wk[2+]‚Ä≤[,‚áë]‚â° wk[]‚â°wk[]‚Ä≤ PE.refl PE.refl))) $
                                                                        PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                          wk[]‚â°wk[]‚Ä≤
                                                                          (PE.cong‚ÇÇ (Id _)
                                                                             (PE.trans (wk-comp _ _ _) $
                                                                              PE.sym [1+][0]‚Üë)
                                                                             (PE.cong (_ ‚àò‚ü® _ ‚ü©_) $
                                                                              PE.trans wk-cast $
                                                                              PE.cong‚ÇÑ (cast _)
                                                                                (wk-comp _ _ _) (wk-comp _ _ _) PE.refl PE.refl)) ‚ü©‚ä¢‚â°
            Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ
            Id (U l‚ÇÇ) (B‚ÇÅ [ 3 ][ var x0 ]‚Üë)
              (var x2 ‚àò‚ü® p‚Ä≤ ‚ü©
               cast l‚ÇÅ (wk[ 3 ]‚Ä≤ A‚ÇÅ) (wk[ 3 ]‚Ä≤ A‚ÇÅ) rfl (var x0))     ‚â°‚ü® Œ†Œ£-cong
                                                                          (refl ‚àô¬≤‚ä¢A‚ÇÅ)
                                                                          (Id-cong
                                                                             (refl ‚àô¬≥‚ä¢U‚ÇÇ)
                                                                             (_‚ä¢_‚â°_‚à∑_.refl $ subst-‚ä¢‚à∑ ‚ä¢B‚ÇÅ $ ‚ä¢À¢ ∑‚à∑-[][]‚Üë $
                                                                              PE.subst‚ÇÉ _‚ä¢_‚à∑_ (PE.cong (_‚àô_ _) wk[]‚â°wk[]‚Ä≤) PE.refl PE.refl $
                                                                              var‚ÇÄ (PE.subst (_‚ä¢_ _) (PE.sym wk[]‚â°wk[]‚Ä≤) (univ ‚àô¬≤‚ä¢A‚ÇÅ)))
                                                                             (app-cong
                                                                                (refl (var‚ÇÇ (univ ‚àô¬≤‚ä¢A‚ÇÅ)))
                                                                                (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) (PE.sym wk[]‚â°wk[]‚Ä≤) $
                                                                                 cast-‚â° ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≤ $
                                                                                 PE.subst (_‚ä¢_‚à∑_ _ _) (wk-comp _ _ _) $
                                                                                 var‚ÇÄ (univ ‚àô¬≤‚ä¢A‚ÇÅ))))
                                                                          ok‚Ä≤ ‚ü©‚ä¢‚àé‚â°
            Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ
            Id (U l‚ÇÇ) (B‚ÇÅ [ 3 ][ var x0 ]‚Üë) (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)  ‚àé))

    rfl-case : Term n
    rfl-case =
      lam p‚Ä≤ $ lam p‚Ä≤ $
      cong œâ (wk[ 2 ]‚Ä≤ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ U l‚ÇÇ))
        (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ)) (var x1) (U (l‚ÇÅ ‚äî·µò l‚ÇÇ))
        (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 3 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
        (wk[ 2 ]‚Ä≤ ext‚àò¬≥ ‚àò‚ü® p‚Ä≤ ‚ü© var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)

    opaque
      ‚ä¢rfl-case : Œì ‚ä¢ rfl-case ‚à∑ Motive [ A‚ÇÅ , rfl ]‚ÇÅ‚ÇÄ
      ‚ä¢rfl-case =
        lam‚±º‚Ä≤ ok‚Ä≤ $ lam‚±º‚Ä≤ ok‚Ä≤ $
        _‚ä¢_‚à∑_.conv (‚ä¢cong ‚ä¢Œ†10 ‚ä¢ext‚àò‚Åµ) $ univ
          (Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 3 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
              [ wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ) ]‚ÇÄ)
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 3 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x1 ‚àò‚ü® p‚Ä≤ ‚ü© var x0)
              [ var x1 ]‚ÇÄ)                                            ‚â°‚ü® PE.cong‚ÇÇ (Id _)
                                                                           (PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _)
                                                                              wk[1+]‚Ä≤-[]‚ÇÄ‚â°
                                                                              (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ (wk-comp _ _ _) PE.refl PE.refl))
                                                                           (PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _) wk[1+]‚Ä≤-[]‚ÇÄ‚â° PE.refl) ‚ü©‚ä¢‚â°
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ
              (wk[ 3 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÅ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))  ‚â°‚ü® Id-cong (refl (U‚±º (‚àô ‚ä¢Œ†Id-1[])))
                                                                           (Œ†Œ£-cong (refl ‚àô¬≤‚ä¢A‚ÇÅ)
                                                                              (PE.subst‚ÇÇ (_‚ä¢_‚â°_‚à∑_ _ _)
                                                                                 (PE.trans (PE.sym $ [][]‚Üë‚â° B‚ÇÅ) [1+][0]‚Üë)
                                                                                 PE.refl $
                                                                               Œ≤-red-‚â°
                                                                                 (PE.subst‚ÇÉ _‚ä¢_‚à∑_
                                                                                    (PE.cong (_‚àô_ _) $ PE.sym $ wk-comp _ _ _) PE.refl PE.refl $
                                                                                  wkTerm (lift ∑ ‚äá-drop (univ ‚àô¬≥‚ä¢A‚ÇÅ‚Ä≤)) ‚ä¢B‚ÇÅ)
                                                                                 (var‚ÇÄ (univ ‚àô¬≤‚ä¢A‚ÇÅ)) ok‚Ä≤)
                                                                              ok)
                                                                           (refl ‚ä¢Œ†20‚Ä≤) ‚ü©‚ä¢‚àé‚â°
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 2 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑  A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÅ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))  ‚â°Àò‚ü® PE.cong‚ÇÇ (Id _)
                                                                            wk[2+]‚Ä≤[,‚áë]‚â°
                                                                            (PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _) wk[]‚â°wk[]‚Ä≤ PE.refl) ‚ü©
           (Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 4 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑  A‚ÇÅ ‚ñπ B‚ÇÅ))
              (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ var x3 ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
            [ consSubst (sgSubst A‚ÇÅ) rfl ‚áë[ 2 ] ])                    ‚àé)

    J-app : Term n
    J-app = J œâ œâ (U l‚ÇÅ) A‚ÇÅ Motive rfl-case A‚ÇÇ t

    opaque
      ‚ä¢J :
        Œì ‚ä¢ J-app ‚à∑
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÇ ‚ñπ U l‚ÇÇ) ‚ñπ
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ Œ†Id 1 (var x1) (wk[ 2 ]‚Ä≤ A‚ÇÇ) (wk[ 2 ]‚Ä≤ t) ‚ñπ
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 2 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÇ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
      ‚ä¢J =
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ var x1 ‚ñπ U l‚ÇÇ) ‚ñπ
           Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
             (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk[ 3 ] A‚ÇÅ ‚ñπ
              Id (U l‚ÇÇ) (B‚ÇÅ [ 4 ][ var x0 ]‚Üë)
                (var x1 ‚àò‚ü® p‚Ä≤ ‚ü©
                 cast l‚ÇÅ (wk[ 4 ]‚Ä≤ A‚ÇÅ) (var x3) (var x2) (var x0))) ‚ñπ
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 4 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ var x3 ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
           [ A‚ÇÇ , t ]‚ÇÅ‚ÇÄ                                                ‚â°‚ü® PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_) PE.refl $
                                                                          PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                            (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                               (PE.trans
                                                                                  (PE.cong _[ _ ] $
                                                                                   wk[]‚â°wk[]‚Ä≤ {t = A‚ÇÅ}) $
                                                                                wk[2+]‚Ä≤[,‚áë]‚â°)
                                                                               (PE.cong‚ÇÇ (Id _)
                                                                                  ([][]‚Üë-[,‚áë] 2 B‚ÇÅ)
                                                                                  (PE.cong (_‚àò‚ü®_‚ü©_ _ _) $
                                                                                   PE.trans cast-[] $
                                                                                   PE.cong‚ÇÑ (cast _)
                                                                                     wk[2+]‚Ä≤[,‚áë]‚â° wk[]‚â°wk[]‚Ä≤ wk[]‚â°wk[]‚Ä≤ PE.refl)))
                                                                            (PE.cong‚ÇÇ (Id _)
                                                                               wk[2+]‚Ä≤[,‚áë]‚â°
                                                                               (PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _) wk[]‚â°wk[]‚Ä≤ PE.refl)) ‚ü©
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÇ ‚ñπ U l‚ÇÇ) ‚ñπ
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
           Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë)
             (var x1 ‚àò‚ü® p‚Ä≤ ‚ü©
              cast l‚ÇÅ (wk[ 2 ]‚Ä≤ A‚ÇÅ) (wk[ 2 ]‚Ä≤ A‚ÇÇ) (wk[ 2 ]‚Ä≤ t)
                (var x0))) ‚ñπ
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 2 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÇ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))      ‚àé) $
        J‚±º‚Ä≤ ‚ä¢Motive ‚ä¢rfl-case ‚ä¢t

    opaque
      ‚ä¢J‚àò :
        Œì ‚ä¢ J-app ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ B‚ÇÇ ‚à∑
        Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ
           Id (U l‚ÇÇ) (B‚ÇÅ [ 1 ][ var x0 ]‚Üë)
             (B‚ÇÇ [ 1 ][ cast l‚ÇÅ (wk1 A‚ÇÅ) (wk1 A‚ÇÇ) (wk1 t)
                          (var x0) ]‚Üë)) ‚ñπ
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk1 (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk1 A‚ÇÇ ‚ñπ (B‚ÇÇ [ 2 ][ var x0 ]‚Üë))
      ‚ä¢J‚àò =
        _‚ä¢_‚à∑_.conv (‚ä¢J ‚àò‚±º lam‚±º‚Ä≤ ok‚Ä≤ ‚ä¢B‚ÇÇ) $ univ
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
             (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ wk1 A‚ÇÅ ‚ñπ
              Id (U l‚ÇÇ) (B‚ÇÅ [ 2 ][ var x0 ]‚Üë)
                (var x1 ‚àò‚ü® p‚Ä≤ ‚ü©
                 cast l‚ÇÅ (wk[ 2 ]‚Ä≤ A‚ÇÅ) (wk[ 2 ]‚Ä≤ A‚ÇÇ) (wk[ 2 ]‚Ä≤ t)
                   (var x0))) ‚ñπ
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk[ 2 ]‚Ä≤ (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk[ 2 ]‚Ä≤ A‚ÇÇ ‚ñπ (var x2 ‚àò‚ü® p‚Ä≤ ‚ü© var x0))
           [ lam p‚Ä≤ B‚ÇÇ ]‚ÇÄ                                             ‚â°‚ü® PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                           (PE.cong‚ÇÇ (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑_‚ñπ_)
                                                                              (wk1-sgSubst _ _)
                                                                              (PE.cong‚ÇÇ (Id _)
                                                                                 ([][]‚Üë-[‚ÇÄ‚áë] 1 B‚ÇÅ)
                                                                                 (PE.cong (_‚àò‚ü®_‚ü©_ _ _) $
                                                                                  PE.trans cast-[] $
                                                                                  PE.cong‚ÇÑ (cast _)
                                                                                    wk[+1]‚Ä≤-[‚ÇÄ‚áë]‚â° wk[+1]‚Ä≤-[‚ÇÄ‚áë]‚â° wk[+1]‚Ä≤-[‚ÇÄ‚áë]‚â° PE.refl)))
                                                                           (PE.cong‚ÇÇ (Id _)
                                                                              wk[+1]‚Ä≤-[‚ÇÄ‚áë]‚â°
                                                                              (PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _)
                                                                                 wk[+1]‚Ä≤-[‚ÇÄ‚áë]‚â°
                                                                                 (PE.cong‚ÇÉ _‚àò‚ü®_‚ü©_ wk[]‚â°wk[]‚Ä≤ PE.refl PE.refl))) ‚ü©‚ä¢‚â°
          (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
             (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ
              Id (U l‚ÇÇ) (B‚ÇÅ [ 1 ][ var x0 ]‚Üë)
                (wk1 (lam p‚Ä≤ B‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü©
                 cast l‚ÇÅ (wk1 A‚ÇÅ) (wk1 A‚ÇÇ) (wk1 t) (var x0))) ‚ñπ
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk1 (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk1 A‚ÇÇ ‚ñπ
              (wk[ 2 ]‚Ä≤ (lam p‚Ä≤ B‚ÇÇ) ‚àò‚ü® p‚Ä≤ ‚ü© var x0)))                 ‚â°‚ü® Œ†Œ£-cong
                                                                           (Œ†Œ£-cong
                                                                              (refl ‚ä¢A‚ÇÅ)
                                                                              (Id-cong (refl (U‚±º (‚àô univ ‚ä¢A‚ÇÅ)))
                                                                                 (refl (subst-‚ä¢‚à∑ ‚ä¢B‚ÇÅ (‚ä¢À¢ ∑‚à∑-[][]‚Üë (var‚ÇÄ (univ ‚ä¢A‚ÇÅ)))))
                                                                                 (PE.subst‚ÇÇ (_‚ä¢_‚â°_‚à∑_ _ _) (PE.sym $ [][]‚Üë‚â° B‚ÇÇ) PE.refl $
                                                                                  Œ≤-red-‚â°
                                                                                    (wkTerm (lift ∑ ‚äá-drop (wk‚ÇÅ (univ ‚ä¢A‚ÇÅ) (univ ‚ä¢A‚ÇÇ))) ‚ä¢B‚ÇÇ)
                                                                                    (‚ä¢cast (wkTerm‚ÇÅ (univ ‚ä¢A‚ÇÅ) ‚ä¢t) (var‚ÇÄ (univ ‚ä¢A‚ÇÅ))) ok‚Ä≤))
                                                                              ok‚Ä≤)
                                                                           (Id-cong (refl (U‚±º (‚àô ‚ä¢Œ†Id-lam)))
                                                                              (refl (wkTerm‚ÇÅ ‚ä¢Œ†Id-lam (Œ†Œ£‚±º ‚ä¢A‚ÇÅ ‚ä¢B‚ÇÅ ok)))
                                                                              (Œ†Œ£-cong (refl Œ†Id-lam‚ä¢A‚ÇÇ)
                                                                                 (PE.subst‚ÇÇ (_‚ä¢_‚â°_‚à∑_ _ _) (PE.sym $ [][]‚Üë‚â° B‚ÇÇ) PE.refl $
                                                                                  Œ≤-red-‚â°
                                                                                    (wkTerm
                                                                                       (lift ∑ ‚äá-drop $ _‚ä¢_.univ $
                                                                                        wkTerm ( ∑‚äá-drop (‚àô univ Œ†Id-lam‚ä¢A‚ÇÇ)) ‚ä¢A‚ÇÇ)
                                                                                       ‚ä¢B‚ÇÇ)
                                                                                    (PE.subst (_‚ä¢_‚à∑_ _ _) wk[]‚â°wk[]‚Ä≤ $
                                                                                     var‚ÇÄ (univ Œ†Id-lam‚ä¢A‚ÇÇ)) ok‚Ä≤)
                                                                                 ok))
                                                                           ok‚Ä≤ ‚ü©‚ä¢‚àé
           Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑
             (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ
              Id (U l‚ÇÇ) (B‚ÇÅ [ 1 ][ var x0 ]‚Üë)
                (B‚ÇÇ [ 1 ][ cast l‚ÇÅ (wk1 A‚ÇÅ) (wk1 A‚ÇÇ) (wk1 t)
                             (var x0) ]‚Üë)) ‚ñπ
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk1 (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk1 A‚ÇÇ ‚ñπ (B‚ÇÇ [ 2 ][ var x0 ]‚Üë))         ‚àé)

    opaque
      ‚ä¢J‚àò‚àò :
        Œì ‚ä¢ J-app ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ B‚ÇÇ ‚àò‚ü® p‚Ä≤ ‚ü© lam p‚Ä≤ u ‚à∑
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ)
      ‚ä¢J‚àò‚àò =
        PE.subst (_‚ä¢_‚à∑_ _ _)
          (Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (wk1 (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ))
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ wk1 A‚ÇÇ ‚ñπ (B‚ÇÇ [ 2 ][ var x0 ]‚Üë))
           [ lam p‚Ä≤ u ]‚ÇÄ                                       ‚â°‚ü® PE.cong‚ÇÇ (Id _) (wk1-sgSubst _ _) $
                                                                  PE.cong‚ÇÇ (Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _)
                                                                    (wk1-sgSubst _ _)
                                                                    ([][]‚Üë-[‚ÇÄ‚áë] 1 B‚ÇÇ) ‚ü©
           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ (B‚ÇÇ [ var x0 ]‚Üë))           ‚â°‚ü® PE.cong (Id _ _ ‚àò‚Üí Œ†Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _ _) [0]‚Üë ‚ü©

           Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)
             (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ)                         ‚àé)
          (‚ä¢J‚àò ‚àò‚±º
           PE.subst (_‚ä¢_‚à∑_ _ _)
             (PE.cong (Œ† p‚Ä≤ , q‚Ä≤ ‚ñ∑ A‚ÇÅ ‚ñπ_) $
              PE.cong‚ÇÇ (Id _) (PE.sym [0]‚Üë) PE.refl)
             (lam‚±º‚Ä≤ ok‚Ä≤ ‚ä¢u))

opaque

  -- A variant of Œ†Œ£-cong-IdÀ°.

  Œ†Œ£-cong-Id ≥ :
    Œ†Œ£-allowed b p q ‚Üí
    Œ†-allowed p‚Ä≤ q‚Ä≤ ‚Üí
    Has-function-extensionality p‚Ä≤ q‚Ä≤ l‚ÇÅ (1+ l‚ÇÇ) Œì ‚Üí
    Œì ‚àô A‚ÇÅ ‚ä¢ B‚ÇÅ ‚à∑ U l‚ÇÇ ‚Üí
    Œì ‚ä¢ t ‚à∑ Id (U l‚ÇÅ) A‚ÇÇ A‚ÇÅ ‚Üí
    Œì ‚àô A‚ÇÇ ‚ä¢ u ‚à∑
      Id (U l‚ÇÇ) (B‚ÇÅ [ cast l‚ÇÅ (wk1 A‚ÇÇ) (wk1 A‚ÇÅ) (wk1 t) (var x0) ]‚Üë)
        B‚ÇÇ ‚Üí
    ‚àÉ Œª v ‚Üí
      Œì ‚ä¢ v ‚à∑
        Id (U (l‚ÇÅ ‚äî·µò l‚ÇÇ)) (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÅ ‚ñπ B‚ÇÅ)
          (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A‚ÇÇ ‚ñπ B‚ÇÇ)
  Œ†Œ£-cong-Id ≥ ok ok‚Ä≤ ext ‚ä¢B‚ÇÅ ‚ä¢t ‚ä¢u =
    _ , ‚ä¢symmetry (Œ†Œ£-cong-IdÀ° ok ok‚Ä≤ ext ‚ä¢B‚ÇÅ ‚ä¢t (‚ä¢symmetry ‚ä¢u) .proj‚ÇÇ)
