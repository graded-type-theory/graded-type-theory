------------------------------------------------------------------------
-- Typing, equality and reduction rules related to Bool
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
import Definition.Untyped.Bool
open import Graded.Modality

module Definition.Typed.Properties.Admissible.Bool
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (open Definition.Untyped.Bool ùïÑ)
  (open Modality ùïÑ)
  (R : Type-restrictions ùïÑ)
  (open Type-restrictions R)
  -- It is assumed that the modality has an nr function.
  ‚¶É has-nr : Has-nr M semiring-with-meet ‚¶Ñ
  -- It is assumed that certain Œ£-types are allowed.
  (Œ£-ok : Œ£ ∑-allowed œâ Bool·µç)
  -- It is assumed that weak unit types are allowed.
  (Unit ∑-ok : Unit ∑-allowed)
  where

open import Definition.Typed R
open import Definition.Typed.Properties.Admissible.Bool.OK
  R Unit ∑-ok
open import Definition.Typed.Properties.Admissible.Empty R
open import Definition.Typed.Properties.Admissible.Nat R
open import Definition.Typed.Properties.Admissible.Pi R
open import Definition.Typed.Properties.Admissible.Sigma R
open import Definition.Typed.Properties.Admissible.Unit R
open import Definition.Typed.Properties.Admissible.Var R
open import Definition.Typed.Properties.Reduction R
open import Definition.Typed.Properties.Well-formed R
open import Definition.Typed.Reasoning.Reduction R
open import Definition.Typed.Reasoning.Type R
open import Definition.Typed.Substitution.Primitive R
open import Definition.Typed.Syntactic R
open import Definition.Typed.Weakening R

open import Definition.Untyped M
open import Definition.Untyped.Empty ùïÑ
open import Definition.Untyped.Nat ùïÑ
open import Definition.Untyped.Properties M

open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (Nat; 1+; 2+; 3+)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality

private variable
  k                                 : Nat
  Œì Œî                               : Con Term _
  A A‚ÇÅ A‚ÇÇ B t t‚ÇÅ t‚ÇÇ u u‚ÇÅ u‚ÇÇ v v‚ÇÅ v‚ÇÇ : Term _
  p                                 : M

------------------------------------------------------------------------
-- Typing rules for Bool, true and false

opaque
  unfolding Bool

  -- A typing rule for Bool.

  ‚ä¢Bool‚à∑U :
    ‚ä¢ Œì ‚Üí
    Œì ‚ä¢ Bool ‚à∑ U 0
  ‚ä¢Bool‚à∑U ‚ä¢Œì = Œ†Œ£‚±º (‚Ñï‚±º ‚ä¢Œì) (‚ä¢OK‚à∑U (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì))) Œ£-ok

opaque

  -- A typing rule for Bool.

  ‚ä¢Bool :
    ‚ä¢ Œì ‚Üí
    Œì ‚ä¢ Bool
  ‚ä¢Bool = univ ‚àò‚Üí ‚ä¢Bool‚à∑U

opaque
  unfolding Bool true

  -- A typing rule for true.

  ‚ä¢true :
    ‚ä¢ Œì ‚Üí
    Œì ‚ä¢ true ‚à∑ Bool
  ‚ä¢true ‚ä¢Œì =
    prod‚±º (‚ä¢OK (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì))) (suc‚±º (zero‚±º ‚ä¢Œì))
      (conv (star‚±º ‚ä¢Œì Unit ∑-ok)
         (Unit ∑ 0                    ‚â°Àò‚ü® OK-1‚â° ‚ä¢Œì ‚ü©‚ä¢‚àé‚â°
          OK (suc zero)              ‚â°Àò‚ü® OK-[] ‚ü©
          OK (var x0) [ suc zero ]‚ÇÄ  ‚àé))
      Œ£-ok

opaque
  unfolding Bool false

  -- A typing rule for false.

  ‚ä¢false :
    ‚ä¢ Œì ‚Üí
    Œì ‚ä¢ false ‚à∑ Bool
  ‚ä¢false ‚ä¢Œì =
    prod‚±º (‚ä¢OK (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì))) (zero‚±º ‚ä¢Œì)
      (conv (star‚±º ‚ä¢Œì Unit ∑-ok)
         (Unit ∑ 0                ‚â°Àò‚ü® OK-0‚â° ‚ä¢Œì ‚ü©‚ä¢‚àé‚â°
          OK zero                ‚â°Àò‚ü® OK-[] ‚ü©
          OK (var x0) [ zero ]‚ÇÄ  ‚àé))
      Œ£-ok

------------------------------------------------------------------------
-- Typing rules for Target

opaque
  unfolding Bool Target

  -- An equality rule for Target.

  Target-cong :
    drop k Œì ‚àô Bool ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ OK t‚ÇÅ ‚Üí
    Œì ‚ä¢ Target k A‚ÇÅ t‚ÇÅ u‚ÇÅ ‚â° Target k A‚ÇÇ t‚ÇÇ u‚ÇÇ
  Target-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ =
    [][]‚Üë-cong A‚ÇÅ‚â°A‚ÇÇ $
    PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
      (PE.cong (Œ£‚ü®_‚ü©_,_‚ñ∑_‚ñπ_ _ _ _ _) $ PE.sym OK-[]) $
    prod-cong (‚ä¢OK (var‚ÇÄ (‚Ñï‚±º (wfEqTerm t‚ÇÅ‚â°t‚ÇÇ)))) t‚ÇÅ‚â°t‚ÇÇ
      (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _) (PE.sym OK-[]) u‚ÇÅ‚â°u‚ÇÇ)
      Œ£-ok

private opaque

  -- A variant of Target-cong.

  Target-cong‚Ä≤ :
    drop k Œì ‚àô Bool ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä¢ u ‚à∑ OK t ‚Üí
    Œì ‚ä¢ Target k A‚ÇÅ t u ‚â° Target k A‚ÇÇ t u
  Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ ‚ä¢t ‚ä¢u =
    Target-cong A‚ÇÅ‚â°A‚ÇÇ (refl ‚ä¢t) (refl ‚ä¢u)

opaque

  -- A typing rule for Target.

  ‚ä¢Target :
    drop k Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ ‚Ñï ‚Üí
    Œì ‚ä¢ u ‚à∑ OK t ‚Üí
    Œì ‚ä¢ Target k A t u
  ‚ä¢Target ‚ä¢A ‚ä¢t ‚ä¢u =
    syntacticEq (Target-cong‚Ä≤ (refl ‚ä¢A) ‚ä¢t ‚ä¢u) .proj‚ÇÅ

------------------------------------------------------------------------
-- Typing rules for boolrec

-- Some lemmas used below.

private
  module Boolrec
    (Œ†-ok : Œ†-allowed boolrec·µç-Œ† p)
    (Œ†-ùüô-ùüò-ok : Œ†-allowed ùüô ùüò)
    (UnitÀ¢-ok : UnitÀ¢-allowed)
    (A‚ÇÅ‚â°A‚ÇÇ : Œì ‚àô Bool ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ)
    (t‚ÇÅ‚â°t‚ÇÇ : Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ [ true ]‚ÇÄ)
    (u‚ÇÅ‚â°u‚ÇÇ : Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ false ]‚ÇÄ)
    where

    opaque

      ‚ä¢Œì : ‚ä¢ Œì
      ‚ä¢Œì = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ

    opaque

      ‚ä¢Unit : Œì ‚ä¢ Unit ∑ 0
      ‚ä¢Unit = Unit‚±º ‚ä¢Œì Unit ∑-ok

    opaque

      Œ†-lemma :
        drop k Œî PE.‚â° Œì ‚Üí
        Œî ‚àô ‚Ñï ‚ä¢ t ‚à∑ ‚Ñï ‚Üí
        Œî ‚àô ‚Ñï ‚ä¢
          Œ† boolrec·µç-Œ† , p ‚ñ∑ OK t ‚ñπ Target (2+ k) A‚ÇÅ (wk1 t) (var x0) ‚â°
          Œ† boolrec·µç-Œ† , p ‚ñ∑ OK t ‚ñπ Target (2+ k) A‚ÇÇ (wk1 t) (var x0)
      Œ†-lemma PE.refl ‚ä¢t =
        let ‚ä¢OK = ‚ä¢OK ‚ä¢t in
        Œ†Œ£-cong (refl ‚ä¢OK)
          (Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (wkTerm‚ÇÅ ‚ä¢OK ‚ä¢t) $
           (PE.subst (_‚ä¢_‚à∑_ _ _) wk-OK $
            var‚ÇÄ ‚ä¢OK))
          Œ†-ok

    opaque

      Œ†-[]‚ÇÄ-lemma :
        Œì ‚ä¢ t [ u ]‚ÇÄ ‚à∑ ‚Ñï ‚Üí
        Œì ‚ä¢ OK (t [ u ]‚ÇÄ) ‚â° Unit ∑ 0 ‚Üí
        Œì ‚ä¢
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK t ‚ñπ Target 2 A‚ÇÅ (wk1 t) (var x0))
            [ u ]‚ÇÄ ‚â°
          Œ† boolrec·µç-Œ† , p ‚ñ∑ Unit ∑ 0 ‚ñπ
            Target 1 A‚ÇÇ (wk1 (t [ u ]‚ÇÄ)) (var x0)
      Œ†-[]‚ÇÄ-lemma {t} ‚ä¢t[u]‚ÇÄ OK-t[u]‚ÇÄ‚â°Unit =
        let ‚ä¢OK = ‚ä¢OK ‚ä¢t[u]‚ÇÄ in
        PE.subst (flip (_‚ä¢_‚â°_ _) _)
          (PE.sym $
           PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _) OK-[]
             (PE.trans (Target-[‚ÇÄ‚áë] 1) $
              PE.cong (flip (Target _ _) _) $
              wk1-liftSubst t)) $
        flip (Œ†Œ£-cong OK-t[u]‚ÇÄ‚â°Unit) Œ†-ok $
        Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (wkTerm‚ÇÅ ‚ä¢OK ‚ä¢t[u]‚ÇÄ) $
        PE.subst (_‚ä¢_‚à∑_ _ _) wk-OK $
        var‚ÇÄ ‚ä¢OK

    opaque

      Target-lemma-0 :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚àô Unit ∑ 0 ‚ä¢
          Target (1+ k) A‚ÇÅ zero (var x0) ‚â°
          Target (1+ k) A‚ÇÇ zero (var x0)
      Target-lemma-0 PE.refl ‚ä¢Œî =
        let ‚ä¢Unit = Unit‚±º ‚ä¢Œî Unit ∑-ok in
        Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (zero‚±º (‚àô ‚ä¢Unit))
          (conv (var‚ÇÄ ‚ä¢Unit) (sym (OK-0‚â° (‚àô ‚ä¢Unit))))

    opaque

      Target-lemma-1 :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚àô Unit ∑ 0 ‚ä¢
          Target (1+ k) A‚ÇÅ (suc zero) (var x0) ‚â°
          Target (1+ k) A‚ÇÇ (suc zero) (var x0)
      Target-lemma-1 PE.refl ‚ä¢Œî =
        let ‚ä¢Unit = Unit‚±º ‚ä¢Œî Unit ∑-ok in
        Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (suc‚±º (zero‚±º (‚àô ‚ä¢Unit)))
          (conv (var‚ÇÄ ‚ä¢Unit) (sym (OK-1‚â° (‚àô ‚ä¢Unit))))

    opaque
      unfolding true

      wk-t‚ÇÅ‚â°wk-t‚ÇÇ :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚ä¢ wk[ k ]‚Ä≤ t‚ÇÅ ‚â° wk[ k ]‚Ä≤ t‚ÇÇ ‚à∑
          Target (1+ k) A‚ÇÅ (suc zero) (var x0) [ star ∑ 0 ]‚ÇÄ
      wk-t‚ÇÅ‚â°wk-t‚ÇÇ PE.refl ‚ä¢Œî =
        PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
          (PE.sym $ PE.trans (Target-[‚ÇÄ‚áë] 0) Target-wk[]‚Ä≤) $
        wkEqTerm ( ∑‚äá-drop ‚ä¢Œî) t‚ÇÅ‚â°t‚ÇÇ

    opaque
      unfolding false

      wk-u‚ÇÅ‚â°wk-u‚ÇÇ :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚ä¢ wk[ k ]‚Ä≤ u‚ÇÅ ‚â° wk[ k ]‚Ä≤ u‚ÇÇ ‚à∑
          Target (1+ k) A‚ÇÅ zero (var x0) [ star ∑ 0 ]‚ÇÄ
      wk-u‚ÇÅ‚â°wk-u‚ÇÇ PE.refl ‚ä¢Œî =
        PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
          (PE.sym $ PE.trans (Target-[‚ÇÄ‚áë] 0) Target-wk[]‚Ä≤) $
        wkEqTerm ( ∑‚äá-drop ‚ä¢Œî) u‚ÇÅ‚â°u‚ÇÇ

    opaque

      unitrec-lemma-0 :
        drop k Œî PE.‚â° Œì ‚Üí
        Œî ‚ä¢ B ‚â° Unit ∑ 0 ‚Üí
        Œî ‚àô B ‚ä¢
          unitrec 0 boolrec·µç-Œ† p (Target (2+ k) A‚ÇÅ zero (var x0))
            (var x0) (wk[ 1+ k ]‚Ä≤ u‚ÇÅ) ‚â°
          unitrec 0 boolrec·µç-Œ† p (Target (2+ k) A‚ÇÇ zero (var x0))
            (var x0) (wk[ 1+ k ]‚Ä≤ u‚ÇÇ) ‚à∑
          Target (2+ k) A‚ÇÅ zero (var x0) [ var x0 ]‚ÇÄ
      unitrec-lemma-0 ‚â°Œì B‚â°Unit =
        let ‚ä¢B , _ = syntacticEq B‚â°Unit in
        unitrec-cong‚Ä≤
          (Target-lemma-0 ‚â°Œì (‚àô ‚ä¢B))
          (refl (conv (var‚ÇÄ ‚ä¢B) (wkEq‚ÇÅ ‚ä¢B B‚â°Unit)))
          (wk-u‚ÇÅ‚â°wk-u‚ÇÇ ‚â°Œì (‚àô ‚ä¢B))

    opaque

      unitrec-lemma-1 :
        drop k Œî PE.‚â° Œì ‚Üí
        Œî ‚ä¢ B ‚â° Unit ∑ 0 ‚Üí
        Œî ‚àô B ‚ä¢
          unitrec 0 boolrec·µç-Œ† p
            (Target (2+ k) A‚ÇÅ (suc zero) (var x0)) (var x0)
            (wk[ 1+ k ]‚Ä≤ t‚ÇÅ) ‚â°
          unitrec 0 boolrec·µç-Œ† p
            (Target (2+ k) A‚ÇÇ (suc zero) (var x0)) (var x0)
            (wk[ 1+ k ]‚Ä≤ t‚ÇÇ) ‚à∑
          Target (2+ k) A‚ÇÅ (suc zero) (var x0) [ var x0 ]‚ÇÄ
      unitrec-lemma-1 ‚â°Œì B‚â°Unit =
        let ‚ä¢B , _ = syntacticEq B‚â°Unit in
        unitrec-cong‚Ä≤
          (Target-lemma-1 ‚â°Œì (‚àô ‚ä¢B))
          (refl (conv (var‚ÇÄ ‚ä¢B) (wkEq‚ÇÅ ‚ä¢B B‚â°Unit)))
          (wk-t‚ÇÅ‚â°wk-t‚ÇÇ ‚â°Œì (‚àô ‚ä¢B))

    opaque

      lam-lemma-0 :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚ä¢
          lam boolrec·µç-Œ†
            (unitrec 0 boolrec·µç-Œ† p
               (Target (2+ k) A‚ÇÅ zero (var x0)) (var x0)
               (wk[ 1+ k ]‚Ä≤ u‚ÇÅ)) ‚â°
          lam boolrec·µç-Œ†
            (unitrec 0 boolrec·µç-Œ† p
               (Target (2+ k) A‚ÇÇ zero (var x0)) (var x0)
               (wk[ 1+ k ]‚Ä≤ u‚ÇÇ)) ‚à∑
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ
           Target (2+ k) A‚ÇÅ (var x1) (var x0))
            [ zero ]‚ÇÄ
      lam-lemma-0 ‚â°Œì ‚ä¢Œî =
        flip lam-cong Œ†-ok $
        PE.subst‚ÇÑ _‚ä¢_‚â°_‚à∑_
          (PE.cong (_‚àô_ _) $ PE.sym OK-[]) PE.refl PE.refl
          (PE.trans (Target-[‚ÇÄ‚áë] 0) $ PE.sym $ Target-[‚ÇÄ‚áë] 1) $
        unitrec-lemma-0 ‚â°Œì (OK-0‚â° ‚ä¢Œî)

    opaque

      lam-lemma-1 :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚ä¢
          lam boolrec·µç-Œ†
            (unitrec 0 boolrec·µç-Œ† p
               (Target (2+ k) A‚ÇÅ (suc zero) (var x0)) (var x0)
               (wk[ 1+ k ]‚Ä≤ t‚ÇÅ)) ‚â°
          lam boolrec·µç-Œ†
            (unitrec 0 boolrec·µç-Œ† p
               (Target (2+ k) A‚ÇÇ (suc zero) (var x0)) (var x0)
               (wk[ 1+ k ]‚Ä≤ t‚ÇÇ)) ‚à∑
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
           Target (2+ k) A‚ÇÅ (suc (var x1)) (var x0))
            [ zero ]‚ÇÄ
      lam-lemma-1 ‚â°Œì ‚ä¢Œî =
        flip lam-cong Œ†-ok $
        PE.subst‚ÇÑ _‚ä¢_‚â°_‚à∑_
          (PE.cong (_‚àô_ _) (PE.sym OK-[])) PE.refl PE.refl
          (PE.trans (Target-[‚ÇÄ‚áë] 0) $ PE.sym $ Target-[‚ÇÄ‚áë] 1) $
        unitrec-lemma-1 ‚â°Œì (OK-1‚â° ‚ä¢Œî)

    opaque

      lam-lemma-2+ :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚àô ‚Ñï ‚ä¢
          lam boolrec·µç-Œ†
            (emptyrec-sink
               (Target (2+ k) A‚ÇÅ (suc (suc (var x1))) (var x0))
               (var x0)) ‚â°
          lam boolrec·µç-Œ†
            (emptyrec-sink
               (Target (2+ k) A‚ÇÇ (suc (suc (var x1))) (var x0))
               (var x0)) ‚à∑
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
           Target (2+ k) A‚ÇÅ (suc (var x1)) (var x0))
            [ suc (var x0) ]‚Üë
      lam-lemma-2+ PE.refl ‚ä¢Œî =
        let ‚ä¢OK = ‚ä¢OK (suc‚±º (suc‚±º (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œî)))) in
        flip lam-cong Œ†-ok $
        PE.subst‚ÇÑ _‚ä¢_‚â°_‚à∑_
          (PE.cong (_‚àô_ _) $ PE.sym OK-[]) PE.refl PE.refl
          (PE.sym $ Target-[‚Üë‚áë] 1) $
        emptyrec-sink-cong UnitÀ¢-ok Œ†-ùüô-ùüò-ok
          (Target-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ (suc‚±º (suc‚±º (var‚ÇÅ ‚ä¢OK)))
             (PE.subst (_‚ä¢_‚à∑_ _ _) wk-OK $
              var‚ÇÄ ‚ä¢OK))
          (_‚ä¢_‚â°_‚à∑_.refl $
           _‚ä¢_‚à∑_.conv (var‚ÇÄ ‚ä¢OK) $
           PE.subst (flip (_‚ä¢_‚â°_ _) _) (PE.sym wk-OK) $
           OK-2+‚â° (var‚ÇÅ ‚ä¢OK))

    opaque

      natcase-lemma :
        drop k Œî PE.‚â° Œì ‚Üí
        ‚ä¢ Œî ‚Üí
        Œî ‚àô ‚Ñï ‚ä¢
          natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
             Target (3+ k) A‚ÇÅ (suc (var x1)) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p
               (Target (3+ k) A‚ÇÅ (suc zero) (var x0)) (var x0)
               (wk[ 2+ k ]‚Ä≤ t‚ÇÅ))
            (lam boolrec·µç-Œ† $
             emptyrec-sink
               (Target (3+ k) A‚ÇÅ (suc (suc (var x1))) (var x0))
               (var x0))
            (var x0) ‚â°
          natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
             Target (3+ k) A‚ÇÇ (suc (var x1)) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p
               (Target (3+ k) A‚ÇÇ (suc zero) (var x0)) (var x0)
               (wk[ 2+ k ]‚Ä≤ t‚ÇÇ))
            (lam boolrec·µç-Œ† $
             emptyrec-sink
               (Target (3+ k) A‚ÇÇ (suc (suc (var x1))) (var x0))
               (var x0))
            (var x0) ‚à∑
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ
           Target (2+ k) A‚ÇÅ (var x1) (var x0))
            [ suc (var x0) ]‚Üë
      natcase-lemma ‚â°Œì ‚ä¢Œî =
        let ‚ä¢‚Ñï   = ‚Ñï‚±º ‚ä¢Œî
            ‚ä¢Œî‚àô‚Ñï = ‚àô ‚ä¢‚Ñï
        in
        PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
          (PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _)
             (PE.trans OK-[] $ PE.sym OK-[])
             (PE.trans (Target-[‚ÇÄ‚áë] 1) $
              PE.sym $ Target-[‚Üë‚áë] 1)) $
        natcase-cong
          (Œ†-lemma ‚â°Œì (suc‚±º (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œî‚àô‚Ñï))))
          (lam-lemma-1 ‚â°Œì ‚ä¢Œî‚àô‚Ñï)
          (lam-lemma-2+ ‚â°Œì ‚ä¢Œî‚àô‚Ñï)
          (refl (var‚ÇÄ ‚ä¢‚Ñï))

    opaque
      unfolding boolrec

      natcase-natcase-lemma :
        Œì ‚àô ‚Ñï ‚àô OK (var x0) ‚ä¢
          natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ
             Target 4 A‚ÇÅ (var x1) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p (Target 4 A‚ÇÅ zero (var x0))
               (var x0) (wk[ 3 ]‚Ä≤ u‚ÇÅ))
            (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
               (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
                Target 5 A‚ÇÅ (suc (var x1)) (var x0))
               (lam boolrec·µç-Œ† $
                unitrec 0 boolrec·µç-Œ† p
                  (Target 5 A‚ÇÅ (suc zero) (var x0)) (var x0)
                  (wk[ 4 ]‚Ä≤ t‚ÇÅ))
               (lam boolrec·µç-Œ† $
                emptyrec-sink
                  (Target 5 A‚ÇÅ (suc (suc (var x1))) (var x0)) (var x0))
               (var x0))
            (var x1) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
          (var x0) ‚â°
          natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ
             Target 4 A‚ÇÇ (var x1) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p (Target 4 A‚ÇÇ zero (var x0))
               (var x0) (wk[ 3 ]‚Ä≤ u‚ÇÇ))
            (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
               (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
                Target 5 A‚ÇÇ (suc (var x1)) (var x0))
               (lam boolrec·µç-Œ† $
                unitrec 0 boolrec·µç-Œ† p
                  (Target 5 A‚ÇÇ (suc zero) (var x0)) (var x0)
                  (wk[ 4 ]‚Ä≤ t‚ÇÇ))
               (lam boolrec·µç-Œ† $
                emptyrec-sink
                  (Target 5 A‚ÇÇ (suc (suc (var x1))) (var x0)) (var x0))
               (var x0))
            (var x1) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
          (var x0) ‚à∑
          A‚ÇÅ [ prod ∑ œâ (var x1) (var x0) ]‚Üë¬≤
      natcase-natcase-lemma =
        let ‚ä¢OK = ‚ä¢OK (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì)) in
        PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
          (PE.trans (PE.cong _[ _ ]‚ÇÄ $ Target-[‚ÇÄ‚áë] 1) $
           PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
        app-cong
          (PE.subst (_‚ä¢_‚â°_‚à∑_ _ _ _)
             (PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _)
                (PE.trans OK-[] $ PE.sym wk-OK) PE.refl) $
           natcase-cong
             (Œ†-lemma PE.refl (var‚ÇÄ (‚Ñï‚±º (‚àô ‚ä¢OK))))
             (lam-lemma-0 PE.refl (‚àô ‚ä¢OK))
             (natcase-lemma PE.refl (‚àô ‚ä¢OK))
             (refl (var‚ÇÅ ‚ä¢OK)))
          (refl (var‚ÇÄ ‚ä¢OK))

private opaque

  -- A lemma used below.

  natcase-natcase-[,]‚ÇÅ‚ÇÄ :
    (natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
       (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 4 A (var x1) (var x0))
       (lam boolrec·µç-Œ† $
        unitrec 0 boolrec·µç-Œ† p (Target 4 A zero (var x0)) (var x0)
          (wk[ 3 ]‚Ä≤ u))
       (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
           Target 5 A (suc (var x1)) (var x0))
          (lam boolrec·µç-Œ† $
           unitrec 0 boolrec·µç-Œ† p (Target 5 A (suc zero) (var x0))
             (var x0) (wk[ 4 ]‚Ä≤ t))
          (lam boolrec·µç-Œ† $
           emptyrec-sink (Target 5 A (suc (suc (var x1))) (var x0))
             (var x0))
          (var x0))
       (var x1)
       [ v , star ∑ 0 ]‚ÇÅ‚ÇÄ) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0 PE.‚â°
    natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
      (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 2 A (var x1) (var x0))
      (lam boolrec·µç-Œ† $
       unitrec 0 boolrec·µç-Œ† p (Target 2 A zero (var x0)) (var x0)
         (wk[ 1 ]‚Ä≤ u))
      (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
         (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
          Target 3 A (suc (var x1)) (var x0))
         (lam boolrec·µç-Œ† $
          unitrec 0 boolrec·µç-Œ† p (Target 3 A (suc zero) (var x0))
            (var x0) (wk[ 2 ]‚Ä≤ t))
         (lam boolrec·µç-Œ† $
          emptyrec-sink (Target 3 A (suc (suc (var x1))) (var x0))
            (var x0))
         (var x0))
      v ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0
  natcase-natcase-[,]‚ÇÅ‚ÇÄ =
    PE.cong (flip _‚àò‚ü® boolrec·µç-Œ† ‚ü©_ _) $
    PE.trans natcase-[] $
    PE.cong‚ÇÑ (natcase _ _)
      (PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _) OK-[] (Target-[,‚áë] 2))
      (PE.cong (lam _) $
       PE.cong‚ÇÉ (unitrec _ _ _)
         (Target-[,‚áë] 2) PE.refl wk[2+]‚Ä≤[,‚áë]‚â°)
      (PE.trans natcase-[] $
       PE.cong‚ÇÑ (natcase _ _)
         (PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _) OK-[] (Target-[,‚áë] 3))
         (PE.cong (lam _) $
          PE.cong‚ÇÉ (unitrec _ _ _)
            (Target-[,‚áë] 3) PE.refl wk[2+]‚Ä≤[,‚áë]‚â°)
         (PE.cong (lam _) $
          PE.trans emptyrec-sink-[] $
          PE.cong‚ÇÇ emptyrec-sink (Target-[,‚áë] 3) PE.refl)
         PE.refl)
      PE.refl

opaque
  unfolding Bool boolrec

  -- An equality rule for boolrec.

  boolrec-cong :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A‚ÇÅ ‚â° A‚ÇÇ ‚Üí
    Œì ‚ä¢ t‚ÇÅ ‚â° t‚ÇÇ ‚à∑ A‚ÇÅ [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u‚ÇÅ ‚â° u‚ÇÇ ‚à∑ A‚ÇÅ [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ v‚ÇÅ ‚â° v‚ÇÇ ‚à∑ Bool ‚Üí
    Œì ‚ä¢ boolrec p A‚ÇÅ t‚ÇÅ u‚ÇÅ v‚ÇÅ ‚â° boolrec p A‚ÇÇ t‚ÇÇ u‚ÇÇ v‚ÇÇ ‚à∑ A‚ÇÅ [ v‚ÇÅ ]‚ÇÄ
  boolrec-cong Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ =
    prodrec-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ $
    Boolrec.natcase-natcase-lemma Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ
      u‚ÇÅ‚â°u‚ÇÇ

opaque

  -- A typing rule for boolrec.

  ‚ä¢boolrec :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u ‚à∑ A [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ v ‚à∑ Bool ‚Üí
    Œì ‚ä¢ boolrec p A t u v ‚à∑ A [ v ]‚ÇÄ
  ‚ä¢boolrec Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u ‚ä¢v =
    syntacticEqTerm
      (boolrec-cong Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢u)
         (refl ‚ä¢v))
      .proj‚ÇÇ .proj‚ÇÅ

opaque
  unfolding Bool true boolrec

  -- A reduction rule for boolrec.

  boolrec-true-‚áí :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u ‚à∑ A [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ boolrec p A t u true ‚áí* t ‚à∑ A [ true ]‚ÇÄ
  boolrec-true-‚áí {p} {Œì} {A} {t} {u} Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u =
    prodrec boolrec·µç-pr œâ p A
      (prod ∑ œâ (suc zero) (star ∑ 0))
      (natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
         (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 4 A (var x1) (var x0))
         (lam boolrec·µç-Œ† $
          unitrec 0 boolrec·µç-Œ† p (Target 4 A zero (var x0))
            (var x0) (wk[ 3 ]‚Ä≤ u))
         (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
             Target 5 A (suc (var x1)) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p
               (Target 5 A (suc zero) (var x0)) (var x0) (wk[ 4 ]‚Ä≤ t))
            (lam boolrec·µç-Œ† $
             emptyrec-sink (Target 5 A (suc (suc (var x1))) (var x0))
               (var x0))
            (var x0))
         (var x1) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
       var x0)                                                            ‚áí‚ü® prodrec-Œ≤-‚áí ‚ä¢A (suc‚±º (zero‚±º ‚ä¢Œì))
                                                                               (_‚ä¢_‚à∑_.conv (star‚±º ‚ä¢Œì Unit ∑-ok) $
                                                                                PE.subst (_‚ä¢_‚â°_ _ _) (PE.sym OK-[]) $
                                                                                sym $ OK-1‚â° ‚ä¢Œì)
                                                                               (syntacticEqTerm natcase-natcase-lemma .proj‚ÇÇ .proj‚ÇÅ) ‚ü©
    (natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
       (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 4 A (var x1) (var x0))
       (lam boolrec·µç-Œ† $
        unitrec 0 boolrec·µç-Œ† p (Target 4 A zero (var x0)) (var x0)
          (wk[ 3 ]‚Ä≤ u))
       (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
           Target 5 A (suc (var x1)) (var x0))
          (lam boolrec·µç-Œ† $
           unitrec 0 boolrec·µç-Œ† p (Target 5 A (suc zero) (var x0))
             (var x0) (wk[ 4 ]‚Ä≤ t))
          (lam boolrec·µç-Œ† $
           emptyrec-sink (Target 5 A (suc (suc (var x1))) (var x0))
             (var x0))
          (var x0))
       (var x1)
       [ suc zero , star ∑ 0 ]‚ÇÅ‚ÇÄ) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚â°‚ü® natcase-natcase-[,]‚ÇÅ‚ÇÄ ‚ü©‚áí

    natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
      (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 2 A (var x1) (var x0))
      (lam boolrec·µç-Œ† $
       unitrec 0 boolrec·µç-Œ† p (Target 2 A zero (var x0)) (var x0)
         (wk[ 1 ]‚Ä≤ u))
      (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
         (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
          Target 3 A (suc (var x1)) (var x0))
         (lam boolrec·µç-Œ† $
          unitrec 0 boolrec·µç-Œ† p (Target 3 A (suc zero) (var x0))
            (var x0) (wk[ 2 ]‚Ä≤ t))
         (lam boolrec·µç-Œ† $
          emptyrec-sink (Target 3 A (suc (suc (var x1))) (var x0))
            (var x0))
         (var x0))
      (suc zero) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             app-subst
                                                                               (conv
                                                                                  (natcase-suc-‚áí
                                                                                     (syntacticEq (Œ†-lemma PE.refl (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì))) .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (lam-lemma-0 PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (natcase-lemma PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ)
                                                                                     (zero‚±º ‚ä¢Œì))
                                                                                  (Œ†-[]‚ÇÄ-lemma (suc‚±º (zero‚±º ‚ä¢Œì)) (OK-1‚â° ‚ä¢Œì)))
                                                                               (star‚±º ‚ä¢Œì Unit ∑-ok) ‚ü©
    (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
       (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
        Target 3 A (suc (var x1)) (var x0))
       (lam boolrec·µç-Œ† $
        unitrec 0 boolrec·µç-Œ† p (Target 3 A (suc zero) (var x0))
          (var x0) (wk[ 2 ]‚Ä≤ t))
       (lam boolrec·µç-Œ† $
        emptyrec-sink (Target 3 A (suc (suc (var x1))) (var x0))
          (var x0))
       (var x0)
       [ zero ]‚ÇÄ) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚â°‚ü® PE.cong (_‚àò‚ü® boolrec·µç-Œ† ‚ü© _) $
                                                                             PE.trans natcase-[] $
                                                                             PE.cong‚ÇÑ (natcase _ _)
                                                                               (PE.cong‚ÇÇ (Œ†_,_‚ñ∑_‚ñπ_ _ _) OK-[] (Target-[‚ÇÄ‚áë] 2))
                                                                               (PE.cong (lam boolrec·µç-Œ†) $
                                                                                PE.cong‚ÇÉ (unitrec _ _ _) (Target-[‚ÇÄ‚áë] 2) PE.refl
                                                                                  (PE.trans (PE.cong _[ _ ] $ PE.sym $ wk[]‚â°wk[]‚Ä≤ {t = t}) $
                                                                                   PE.trans (wk1-liftSubst (wk1 t)) $
                                                                                   PE.cong wk1 $ wk1-sgSubst _ _))
                                                                               (PE.cong (lam boolrec·µç-Œ†) $
                                                                                PE.trans emptyrec-sink-[] $
                                                                                PE.cong‚ÇÇ emptyrec-sink (Target-[‚ÇÄ‚áë] 2) PE.refl)
                                                                               PE.refl ‚ü©‚áí
    natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
      (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
       Target 2 A (suc (var x1)) (var x0))
      (lam boolrec·µç-Œ† $
       unitrec 0 boolrec·µç-Œ† p (Target 2 A (suc zero) (var x0))
         (var x0) (wk1 t))
      (lam boolrec·µç-Œ† $
       emptyrec-sink (Target 2 A (suc (suc (var x1))) (var x0))
         (var x0))
      zero ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             app-subst
                                                                               (conv
                                                                                  (natcase-zero-‚áí
                                                                                     (syntacticEq (Œ†-lemma PE.refl (suc‚±º (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì)))) .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (lam-lemma-1 PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (lam-lemma-2+ PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ))
                                                                                  (Œ†-[]‚ÇÄ-lemma (suc‚±º (zero‚±º ‚ä¢Œì)) (OK-1‚â° ‚ä¢Œì)))
                                                                               (star‚±º ‚ä¢Œì Unit ∑-ok) ‚ü©
    lam boolrec·µç-Œ†
      (unitrec 0 boolrec·µç-Œ† p (Target 2 A (suc zero) (var x0))
         (var x0) (wk1 t))
      ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _)
                                                                               (PE.trans (PE.cong _[ _ ]‚ÇÄ $ Target-[‚ÇÄ‚áë] 0) $
                                                                                PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             Œ≤-red-‚áí
                                                                               (syntacticEqTerm (unitrec-lemma-1 PE.refl (refl ‚ä¢Unit))
                                                                                  .proj‚ÇÇ .proj‚ÇÅ)
                                                                               (star‚±º ‚ä¢Œì Unit ∑-ok) Œ†-ok ‚ü©
    unitrec 0 boolrec·µç-Œ† p (Target 2 A (suc zero) (var x0)) (var x0)
      (wk1 t)
      [ star ∑ 0 ]‚ÇÄ                                                        ‚â°‚ü® PE.cong‚ÇÉ (unitrec _ _ _)
                                                                               (Target-[‚ÇÄ‚áë] 1) PE.refl (wk1-sgSubst _ _) ‚ü©‚áí

    unitrec 0 boolrec·µç-Œ† p (Target 1 A (suc zero) (var x0)) (star ∑ 0) t   ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             unitrec-Œ≤-‚áí
                                                                               (syntacticEq (Target-lemma-1 PE.refl ‚ä¢Œì) .proj‚ÇÅ)
                                                                               (PE.subst (flip (_‚ä¢_‚à∑_ _) _) (wk-id _) $
                                                                                syntacticEqTerm (wk-t‚ÇÅ‚â°wk-t‚ÇÇ PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ) ‚ü©‚àé
    t                                                                     ‚àé
    where
    open Boolrec Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢u)

opaque

  -- An equality rule for boolrec.

  boolrec-true-‚â° :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u ‚à∑ A [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ boolrec p A t u true ‚â° t ‚à∑ A [ true ]‚ÇÄ
  boolrec-true-‚â° Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u =
    subset*Term (boolrec-true-‚áí Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u)

opaque
  unfolding Bool false boolrec

  -- A reduction rule for boolrec.

  boolrec-false-‚áí :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u ‚à∑ A [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ boolrec p A t u false ‚áí* u ‚à∑ A [ false ]‚ÇÄ
  boolrec-false-‚áí {p} {Œì} {A} {t} {u} Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u =
    prodrec boolrec·µç-pr œâ p A (prod ∑ œâ zero (star ∑ 0))
      (natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
         (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 4 A (var x1) (var x0))
         (lam boolrec·µç-Œ† $
          unitrec 0 boolrec·µç-Œ† p (Target 4 A zero (var x0))
            (var x0) (wk[ 3 ]‚Ä≤ u))
         (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
            (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
             Target 5 A (suc (var x1)) (var x0))
            (lam boolrec·µç-Œ† $
             unitrec 0 boolrec·µç-Œ† p
               (Target 5 A (suc zero) (var x0)) (var x0) (wk[ 4 ]‚Ä≤ t))
            (lam boolrec·µç-Œ† $
             emptyrec-sink (Target 5 A (suc (suc (var x1))) (var x0))
               (var x0))
            (var x0))
         (var x1) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
       var x0)                                                            ‚áí‚ü® prodrec-Œ≤-‚áí ‚ä¢A (zero‚±º ‚ä¢Œì)
                                                                               (_‚ä¢_‚à∑_.conv (star‚±º ‚ä¢Œì Unit ∑-ok) $
                                                                                PE.subst (_‚ä¢_‚â°_ _ _) (PE.sym OK-[]) $
                                                                                sym $ OK-0‚â° ‚ä¢Œì)
                                                                               (syntacticEqTerm natcase-natcase-lemma .proj‚ÇÇ .proj‚ÇÅ) ‚ü©
    (natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
       (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 4 A (var x1) (var x0))
       (lam boolrec·µç-Œ† $
        unitrec 0 boolrec·µç-Œ† p (Target 4 A zero (var x0)) (var x0)
          (wk[ 3 ]‚Ä≤ u))
       (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
          (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
           Target 5 A (suc (var x1)) (var x0))
          (lam boolrec·µç-Œ† $
           unitrec 0 boolrec·µç-Œ† p (Target 5 A (suc zero) (var x0))
             (var x0) (wk[ 4 ]‚Ä≤ t))
          (lam boolrec·µç-Œ† $
           emptyrec-sink (Target 5 A (suc (suc (var x1))) (var x0))
             (var x0))
          (var x0))
       (var x1)
       [ zero , star ∑ 0 ]‚ÇÅ‚ÇÄ) ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚â°‚ü® natcase-natcase-[,]‚ÇÅ‚ÇÄ ‚ü©‚áí

    natcase boolrec·µç-nc‚ÇÇ (boolrec·µç-nc‚ÇÉ p)
      (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (var x0) ‚ñπ Target 2 A (var x1) (var x0))
      (lam boolrec·µç-Œ† $
       unitrec 0 boolrec·µç-Œ† p (Target 2 A zero (var x0)) (var x0)
         (wk[ 1 ]‚Ä≤ u))
      (natcase boolrec·µç-nc‚ÇÅ (boolrec·µç-nc‚ÇÉ p)
         (Œ† boolrec·µç-Œ† , p ‚ñ∑ OK (suc (var x0)) ‚ñπ
          Target 3 A (suc (var x1)) (var x0))
         (lam boolrec·µç-Œ† $
          unitrec 0 boolrec·µç-Œ† p (Target 3 A (suc zero) (var x0))
            (var x0) (wk[ 2 ]‚Ä≤ t))
         (lam boolrec·µç-Œ† $
          emptyrec-sink (Target 3 A (suc (suc (var x1))) (var x0))
            (var x0))
         (var x0))
      zero ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             app-subst
                                                                               (conv
                                                                                  (natcase-zero-‚áí
                                                                                     (syntacticEq (Œ†-lemma PE.refl (var‚ÇÄ (‚Ñï‚±º ‚ä¢Œì))) .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (lam-lemma-0 PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ)
                                                                                     (syntacticEqTerm (natcase-lemma PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ))
                                                                                  (Œ†-[]‚ÇÄ-lemma (zero‚±º ‚ä¢Œì) (OK-0‚â° ‚ä¢Œì)))
                                                                               (star‚±º ‚ä¢Œì Unit ∑-ok) ‚ü©
    lam boolrec·µç-Œ†
      (unitrec 0 boolrec·µç-Œ† p (Target 2 A zero (var x0)) (var x0)
         (wk1 u))
      ‚àò‚ü® boolrec·µç-Œ† ‚ü©
    star ∑ 0                                                               ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _)
                                                                               (PE.trans (PE.cong _[ _ ]‚ÇÄ $ Target-[‚ÇÄ‚áë] 0) $
                                                                                PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             Œ≤-red-‚áí
                                                                               (syntacticEqTerm (unitrec-lemma-0 PE.refl (refl ‚ä¢Unit)) .proj‚ÇÇ .proj‚ÇÅ)
                                                                               (star‚±º ‚ä¢Œì Unit ∑-ok) Œ†-ok ‚ü©
    unitrec 0 boolrec·µç-Œ† p (Target 2 A zero (var x0)) (var x0) (wk1 u)
      [ star ∑ 0 ]‚ÇÄ                                                        ‚â°‚ü® PE.cong‚ÇÉ (unitrec _ _ _)
                                                                               (Target-[‚ÇÄ‚áë] 1) PE.refl (wk1-sgSubst _ _) ‚ü©‚áí

    unitrec 0 boolrec·µç-Œ† p (Target 1 A zero (var x0)) (star ∑ 0) u         ‚áí‚ü® PE.subst (_‚ä¢_‚áí_‚à∑_ _ _ _) (PE.trans (Target-[‚ÇÄ‚áë] 0) Target‚â°) $
                                                                             unitrec-Œ≤-‚áí
                                                                               (syntacticEq (Target-lemma-0 PE.refl ‚ä¢Œì) .proj‚ÇÅ)
                                                                               (PE.subst (flip (_‚ä¢_‚à∑_ _) _) (wk-id _) $
                                                                                syntacticEqTerm (wk-u‚ÇÅ‚â°wk-u‚ÇÇ PE.refl ‚ä¢Œì) .proj‚ÇÇ .proj‚ÇÅ) ‚ü©‚àé
    u                                                                     ‚àé
    where
    open Boolrec Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢u)

opaque

  -- An equality rule for boolrec.

  boolrec-false-‚â° :
    Œ†-allowed boolrec·µç-Œ† p ‚Üí
    Œ†-allowed ùüô ùüò ‚Üí
    UnitÀ¢-allowed ‚Üí
    Œì ‚àô Bool ‚ä¢ A ‚Üí
    Œì ‚ä¢ t ‚à∑ A [ true ]‚ÇÄ ‚Üí
    Œì ‚ä¢ u ‚à∑ A [ false ]‚ÇÄ ‚Üí
    Œì ‚ä¢ boolrec p A t u false ‚â° u ‚à∑ A [ false ]‚ÇÄ
  boolrec-false-‚â° Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u =
    subset*Term (boolrec-false-‚áí Œ†-ok Œ†-ùüô-ùüò-ok UnitÀ¢-ok ‚ä¢A ‚ä¢t ‚ä¢u)
