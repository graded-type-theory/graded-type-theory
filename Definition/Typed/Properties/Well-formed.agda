------------------------------------------------------------------------
-- Some lemmas that are re-exported from Definition.Typed.Properties
------------------------------------------------------------------------

-- This module is imported from Graded.Derived.Erased.Typed.Primitive,
-- which is imported from Definition.Typed.Properties.

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Properties.Well-formed
  {‚Ñì} {M : Set ‚Ñì}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M
open import Definition.Typed R
open import Definition.Typed.Size R

open import Tools.Function
open import Tools.Nat
open import Tools.Product as Œ£
import Tools.PropositionalEquality as PE
open import Tools.Size

private variable
  Œì           : Con Term _
  A B C D t u : Term _
  l           : Nat
  s s‚ÇÅ s‚ÇÇ     : Size

------------------------------------------------------------------------
-- Context well-formedness lemmas

private opaque

  -- A lemma used below.

  fix :
    s‚ÇÅ ‚â§À¢ s‚ÇÇ ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ s‚ÇÅ) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ s‚ÇÇ)
  fix s‚ÇÅ‚â§À¢s‚ÇÇ = Œ£.map id·∂† (flip <À¢-trans-‚â§À¢ ≥ s‚ÇÅ‚â§À¢s‚ÇÇ)

private

  -- Below several properties are proved simultaneously using
  -- well-founded induction. The properties are collected in the
  -- record type¬†P.

  record P (s : Size) : Set ‚Ñì where
    no-eta-equality
    field
      wf-<À¢ :
        (‚ä¢A : Œì ‚ä¢ A) ‚Üí
        size-‚ä¢ ‚ä¢A PE.‚â° s ‚Üí
        ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢A
      wfTerm-<À¢ :
        (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí
        size-‚ä¢‚à∑ ‚ä¢t PE.‚â° s ‚Üí
        ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t

-- Variants of the fields of¬†P, along with some lemmas.

private module Variants (hyp : ‚àÄ {s‚ÇÅ} ‚Üí s‚ÇÅ <À¢ s‚ÇÇ ‚Üí P s‚ÇÅ) where

  opaque

    -- Variants of the fields of¬†P.

    wf-<À¢‚Ä≤ :
      (‚ä¢A : Œì ‚ä¢ A) ‚Üí
      size-‚ä¢ ‚ä¢A <À¢ s‚ÇÇ ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢A
    wf-<À¢‚Ä≤ ‚ä¢A <s‚ÇÇ = P.wf-<À¢ (hyp <s‚ÇÇ) ‚ä¢A PE.refl

    wfTerm-<À¢‚Ä≤ :
      (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí
      size-‚ä¢‚à∑ ‚ä¢t <À¢ s‚ÇÇ ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t
    wfTerm-<À¢‚Ä≤ ‚ä¢t <s‚ÇÇ = P.wfTerm-<À¢ (hyp <s‚ÇÇ) ‚ä¢t PE.refl

  opaque
    unfolding size-‚ä¢‚Ä≤

    -- If there is a proof of ‚ä¢¬†Œì¬†‚àô¬†A, then there are strictly smaller
    -- proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

    ‚ä¢‚àô‚Üí‚ä¢-<À¢ :
      (‚ä¢Œì‚àôA : ‚ä¢ Œì ‚àô A) ‚Üí
      size-‚ä¢‚Ä≤ ‚ä¢Œì‚àôA ‚â§À¢ s‚ÇÇ ‚Üí
      (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚Ä≤ ‚ä¢Œì‚àôA) √ó
      (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚Ä≤ ‚ä¢Œì‚àôA)
    ‚ä¢‚àô‚Üí‚ä¢-<À¢ (‚àô ‚ä¢A) ‚â§s‚ÇÇ =
      let ‚ä¢Œì , Œì< = wf-<À¢‚Ä≤ ‚ä¢A (‚äï‚â§À¢‚Üí<À¢À° ‚â§s‚ÇÇ) in
      (‚ä¢Œì , ‚Üô <À¢‚Üí‚â§À¢ Œì<) , (‚ä¢A , ‚Üô ‚óª)

  opaque

    -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†B, then there are strictly
    -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

    ‚àô‚ä¢‚Üí‚ä¢-<À¢ :
      (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí
      size-‚ä¢ ‚ä¢B <À¢ s‚ÇÇ ‚Üí
      (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢B) √ó
      (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢ ‚ä¢B)
    ‚àô‚ä¢‚Üí‚ä¢-<À¢ ‚ä¢B B< =
      let ‚ä¢Œì‚àôA , Œì‚àôA<           = wf-<À¢‚Ä≤ ‚ä¢B B<
          (‚ä¢Œì , Œì<) , (‚ä¢A , A<) = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA $
                                  <À¢‚Üí‚â§À¢ (<À¢-trans Œì‚àôA< B<)
      in
      (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<)

  opaque

    -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†t¬†‚à∑¬†B, then there are strictly
    -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

    ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ :
      (‚ä¢t : Œì ‚àô A ‚ä¢ t ‚à∑ B) ‚Üí
      size-‚ä¢‚à∑ ‚ä¢t <À¢ s‚ÇÇ ‚Üí
      (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t) √ó
      (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚à∑ ‚ä¢t)
    ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ ‚ä¢t t< =
      let ‚ä¢Œì‚àôA , Œì‚àôA<           = wfTerm-<À¢‚Ä≤ ‚ä¢t t<
          (‚ä¢Œì , Œì<) , (‚ä¢A , A<) = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA $
                                  <À¢‚Üí‚â§À¢ (<À¢-trans Œì‚àôA< t<)
      in
      (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<)

-- The type P¬†s is inhabited for every¬†s.

private module Lemmas where

  opaque
    unfolding size-‚ä¢

    -- If there is a proof of type Œì¬†‚ä¢¬†A, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wf-<À¢ :
      (‚àÄ {s‚ÇÅ} ‚Üí s‚ÇÅ <À¢ s‚ÇÇ ‚Üí P s‚ÇÅ) ‚Üí
      (‚ä¢A : Œì ‚ä¢ A) ‚Üí
      size-‚ä¢ ‚ä¢A PE.‚â° s‚ÇÇ ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢A
    wf-<À¢ hyp = Œª where
        (U‚±º ‚ä¢Œì)      _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (univ A)     PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ A (‚Üô ‚óª))
        (Œ†Œ£‚±º ‚ä¢B _)   PE.refl ‚Üí fix (‚Üô ‚óª) (‚àô‚ä¢‚Üí‚ä¢-<À¢ ‚ä¢B (‚Üô ‚óª) .proj‚ÇÅ)
        (Empty‚±º ‚ä¢Œì)  _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (Unit‚±º ‚ä¢Œì _) _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (‚Ñï‚±º ‚ä¢Œì)      _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (Id‚±º ‚ä¢t _)   PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
      where
      open Variants hyp

  opaque
    unfolding size-‚ä¢‚à∑

    -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚à∑¬†A, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wfTerm-<À¢ :
      (‚àÄ {s‚ÇÅ} ‚Üí s‚ÇÅ <À¢ s‚ÇÇ ‚Üí P s‚ÇÅ) ‚Üí
      (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí
      size-‚ä¢‚à∑ ‚ä¢t PE.‚â° s‚ÇÇ ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t
    wfTerm-<À¢ hyp = Œª where
        (conv ‚ä¢t _)          PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
        (var ‚ä¢Œì _)           _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (U‚±º ‚ä¢Œì)              _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (Œ†Œ£‚±º ‚ä¢A _ _)         PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢A (‚Üô ‚óª))
        (lam‚±º ‚ä¢t _)          PE.refl ‚Üí fix (‚Üô ‚óª) $
                                       ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ ‚ä¢t (‚Üô ‚óª) .proj‚ÇÅ
        (‚ä¢t ‚àò‚±º _)            PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
        (prod‚±º _ ‚ä¢t _ _)     PE.refl ‚Üí fix (‚Üò ‚Üô ‚óª) $
                                       wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üò ‚Üô ‚óª)
        (fst‚±º _ ‚ä¢t)          PE.refl ‚Üí fix (‚Üò ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üò ‚óª))
        (snd‚±º _ ‚ä¢t)          PE.refl ‚Üí fix (‚Üò ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üò ‚óª))
        (prodrec‚±º _ ‚ä¢t _ _)  PE.refl ‚Üí fix (‚Üò ‚Üô ‚óª) $
                                       wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üò ‚Üô ‚óª)
        (Empty‚±º ‚ä¢Œì)          _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (emptyrec‚±º ‚ä¢A _)     PE.refl ‚Üí fix (‚Üô ‚óª) (wf-<À¢‚Ä≤ ‚ä¢A (‚Üô ‚óª))
        (Unit‚±º ‚ä¢Œì _)         _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (star‚±º ‚ä¢Œì _)         _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (unitrec‚±º ‚ä¢A ‚ä¢t _ _) PE.refl ‚Üí fix (‚Üò ‚Üô ‚óª) $
                                       wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üò ‚Üô ‚óª)
        (‚Ñï‚±º ‚ä¢Œì)              _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (zero‚±º ‚ä¢Œì)           _       ‚Üí ‚ä¢Œì , ‚Üô ‚óª
        (suc‚±º n)             PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ n (‚Üô ‚óª))
        (natrec‚±º ‚ä¢t _ _)     PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
        (Id‚±º ‚ä¢A _ _)         PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢A (‚Üô ‚óª))
        (rfl‚±º ‚ä¢t)            PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
        (J‚±º ‚ä¢t _ _ _ _)      PE.refl ‚Üí fix (‚Üô ‚Üô ‚óª) $
                                       wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚Üô ‚óª)
        (K‚±º ‚ä¢t _ _ _ _)      PE.refl ‚Üí fix (‚Üô ‚Üô ‚óª) $
                                       wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚Üô ‚óª)
        ([]-cong‚±º ‚ä¢t _ _ _)  PE.refl ‚Üí fix (‚Üô ‚óª) (wfTerm-<À¢‚Ä≤ ‚ä¢t (‚Üô ‚óª))
      where
      open Variants hyp

  opaque

    -- The type P¬†s is inhabited for every¬†s.

    P-inhabited : P s
    P-inhabited =
      well-founded-induction P
        (Œª _ hyp ‚Üí
           record
             { wf-<À¢     = wf-<À¢     hyp
             ; wfTerm-<À¢ = wfTerm-<À¢ hyp
             })
        _

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†A, then there is a strictly
  -- smaller proof of type ‚ä¢¬†Œì.

  wf-<À¢ : (‚ä¢A : Œì ‚ä¢ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢A
  wf-<À¢ ‚ä¢A = P.wf-<À¢ Lemmas.P-inhabited ‚ä¢A PE.refl

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚à∑¬†A, then there is a strictly
  -- smaller proof of type ‚ä¢¬†Œì.

  wfTerm-<À¢ :
    (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t
  wfTerm-<À¢ ‚ä¢t = P.wfTerm-<À¢ Lemmas.P-inhabited ‚ä¢t PE.refl

opaque
  unfolding size-‚ä¢‚Ä≤

  mutual

    -- If there is a proof of type Œì¬†‚ä¢¬†A¬†‚â°¬†B, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wfEq-<À¢ :
      (A‚â°B : Œì ‚ä¢ A ‚â° B) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â° A‚â°B
    wfEq-<À¢ (univ A‚â°B)          = fix (‚Üô ‚óª) (wfEqTerm-<À¢ A‚â°B)
    wfEq-<À¢ (refl ‚ä¢A)           = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEq-<À¢ (sym B‚â°A)           = fix (‚Üô ‚óª) (wfEq-<À¢ B‚â°A)
    wfEq-<À¢ (trans A‚â°B B‚â°C)     = fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEq-<À¢ (Œ†Œ£-cong A‚ÇÅ‚â°B‚ÇÅ _ _) = fix (‚Üô ‚óª) (wfEq-<À¢ A‚ÇÅ‚â°B‚ÇÅ)
    wfEq-<À¢ (Id-cong A‚â°B _ _)   = fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)

    -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†A, then there is a
    -- strictly smaller proof of type ‚ä¢¬†Œì.

    wfEqTerm-<À¢ :
      (t‚â°u : Œì ‚ä¢ t ‚â° u ‚à∑ A) ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â°‚à∑ t‚â°u
    wfEqTerm-<À¢ (refl ‚ä¢t) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (sym u‚â°t) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ u‚â°t)
    wfEqTerm-<À¢ (trans t‚â°u _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (conv t‚â°u _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (Œ†Œ£-cong A‚â°B _ _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ A‚â°B)
    wfEqTerm-<À¢ (app-cong t‚ÇÅ‚â°u‚ÇÅ _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (Œ≤-red _ _ ‚ä¢u _ _) =
      fix (‚Üò ‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢u)
    wfEqTerm-<À¢ (Œ∑-eq ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (fst-cong _ t‚â°u) =
      fix (‚Üò ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (snd-cong _ t‚â°u) =
      fix (‚Üò ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (Œ£-Œ≤‚ÇÅ _ ‚ä¢t _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Œ£-Œ≤‚ÇÇ _ ‚ä¢t _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Œ£-Œ∑ _ ‚ä¢t _ _ _) =
      fix (‚Üô ‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (prod-cong _ t‚ÇÅ‚â°u‚ÇÅ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (prodrec-cong _ t‚ÇÅ‚â°u‚ÇÅ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (prodrec-Œ≤ _ ‚ä¢t _ _ _ _) =
      fix (‚Üô ‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (emptyrec-cong A‚â°B _) =
      fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEqTerm-<À¢ (unitrec-cong _ t‚ÇÅ‚â°u‚ÇÅ _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (unitrec-Œ≤ _ ‚ä¢t _ _) =
      fix (‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (unitrec-Œ≤-Œ∑ _ ‚ä¢t _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Œ∑-unit ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (suc-cong t‚â°u) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (natrec-cong _ t‚ÇÅ‚â°u‚ÇÅ _ _) =
      fix (‚Üô ‚Üò ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (natrec-zero ‚ä¢t _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (natrec-suc ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Id-cong A‚â°B _ _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ A‚â°B)
    wfEqTerm-<À¢ (J-cong _ ‚ä¢t‚ÇÅ _ _ _ _ _) =
      fix (‚Üô ‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t‚ÇÅ)
    wfEqTerm-<À¢ (K-cong A‚ÇÅ‚â°A‚ÇÇ _ _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wfEq-<À¢ A‚ÇÅ‚â°A‚ÇÇ)
    wfEqTerm-<À¢ ([]-cong-cong A‚â°B _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEqTerm-<À¢ (J-Œ≤ ‚ä¢t _ _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (K-Œ≤ ‚ä¢t _ _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ ([]-cong-Œ≤ ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†A, then there is a proof of type
  -- ‚ä¢¬†Œì that is no larger than the first proof.

  wf-‚â§À¢ : (‚ä¢A : Œì ‚ä¢ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢ ‚ä¢A
  wf-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wf-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚à∑¬†A, then there is a proof of
  -- type ‚ä¢¬†Œì that is no larger than the first proof.

  wfTerm-‚â§À¢ :
    (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚à∑ ‚ä¢t
  wfTerm-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfTerm-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†A¬†‚â°¬†B, then there is a proof of
  -- type ‚ä¢¬†Œì that is no larger than the first proof.

  wfEq-‚â§À¢ :
    (A‚â°B : Œì ‚ä¢ A ‚â° B) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚â° A‚â°B
  wfEq-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfEq-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†A, then there is a proof
  -- of type ‚ä¢¬†Œì that is no larger than the first proof.

  wfEqTerm-‚â§À¢ :
    (t‚â°u : Œì ‚ä¢ t ‚â° u ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚â°‚à∑ t‚â°u
  wfEqTerm-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfEqTerm-<À¢

opaque

  -- If a type is well-typed with respect to¬†Œì, then Œì is well-formed.

  wf : Œì ‚ä¢ A ‚Üí ‚ä¢ Œì
  wf = proj‚ÇÅ ‚àò‚Üí wf-<À¢

opaque

  -- If a term is well-typed with respect to¬†Œì, then Œì is well-formed.

  wfTerm : Œì ‚ä¢ t ‚à∑ A ‚Üí ‚ä¢ Œì
  wfTerm = proj‚ÇÅ ‚àò‚Üí wfTerm-<À¢

opaque

  -- If a type equality is well-formed with respect to¬†Œì, then Œì is
  -- well-formed.

  wfEq : Œì ‚ä¢ A ‚â° B ‚Üí ‚ä¢ Œì
  wfEq = proj‚ÇÅ ‚àò‚Üí wfEq-<À¢

opaque

  -- If a term equality is well-formed with respect to¬†Œì, then Œì is
  -- well-formed.

  wfEqTerm : Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí ‚ä¢ Œì
  wfEqTerm = proj‚ÇÅ ‚àò‚Üí wfEqTerm-<À¢

opaque

  -- If there is a proof of ‚ä¢¬†Œì¬†‚àô¬†A, then there are strictly smaller
  -- proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

  ‚ä¢‚àô‚Üí‚ä¢-<À¢ :
    (‚ä¢Œì‚àôA : ‚ä¢ Œì ‚àô A) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚Ä≤ ‚ä¢Œì‚àôA) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚Ä≤ ‚ä¢Œì‚àôA)
  ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA = Variants.‚ä¢‚àô‚Üí‚ä¢-<À¢ (Œª _ ‚Üí Lemmas.P-inhabited) ‚ä¢Œì‚àôA ‚óª

opaque

  -- If ‚ä¢¬†Œì¬†‚àô¬†A holds, then Œì¬†‚ä¢¬†A also holds.

  ‚ä¢‚àô‚Üí‚ä¢ : ‚ä¢ Œì ‚àô A ‚Üí Œì ‚ä¢ A
  ‚ä¢‚àô‚Üí‚ä¢ = proj‚ÇÅ ‚àò‚Üí proj‚ÇÇ ‚àò‚Üí ‚ä¢‚àô‚Üí‚ä¢-<À¢

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†B, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

  ‚àô‚ä¢‚Üí‚ä¢-<À¢ :
    (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢B) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢ ‚ä¢B)
  ‚àô‚ä¢‚Üí‚ä¢-<À¢ ‚ä¢B =
    Variants.‚àô‚ä¢‚Üí‚ä¢-<À¢ {s‚ÇÇ = node _} (Œª _ ‚Üí Lemmas.P-inhabited) ‚ä¢B (‚Üô ‚óª)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†t¬†‚à∑¬†B, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

  ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ :
    (‚ä¢t : Œì ‚àô A ‚ä¢ t ‚à∑ B) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚à∑ ‚ä¢t)
  ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ ‚ä¢t =
    Variants.‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ {s‚ÇÇ = node _} (Œª _ ‚Üí Lemmas.P-inhabited) ‚ä¢t (‚Üô ‚óª)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†B¬†‚â°¬†C, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

  ‚àô‚ä¢‚â°‚Üí‚ä¢-<À¢ :
    (B‚â°C : Œì ‚àô A ‚ä¢ B ‚â° C) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â° B‚â°C) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚â° B‚â°C)
  ‚àô‚ä¢‚â°‚Üí‚ä¢-<À¢ B‚â°C =
    let ‚ä¢Œì‚àôA , p            = wfEq-<À¢ B‚â°C
        (‚ä¢Œì , q) , (‚ä¢A , r) = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans q p) , (‚ä¢A , <À¢-trans r p)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†B, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì and Œì¬†‚ä¢¬†A.

  ‚àô‚ä¢‚â°‚à∑‚Üí‚ä¢-<À¢ :
    (t‚â°u : Œì ‚àô A ‚ä¢ t ‚â° u ‚à∑ B) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â°‚à∑ t‚â°u) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚â°‚à∑ t‚â°u)
  ‚àô‚ä¢‚â°‚à∑‚Üí‚ä¢-<À¢ t‚â°u =
    let ‚ä¢Œì‚àôA , p            = wfEqTerm-<À¢ t‚â°u
        (‚ä¢Œì , q) , (‚ä¢A , r) = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans q p) , (‚ä¢A , <À¢-trans r p)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚àô¬†B¬†‚ä¢¬†C, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì, Œì¬†‚ä¢¬†A and Œì¬†‚àô¬†A¬†‚ä¢¬†B.

  ‚àô‚àô‚ä¢‚Üí‚ä¢-<À¢ :
    (‚ä¢C : Œì ‚àô A ‚àô B ‚ä¢ C) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢C) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢ ‚ä¢C) √ó
    (‚àÉ Œª (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí size-‚ä¢ ‚ä¢B <À¢ size-‚ä¢ ‚ä¢C)
  ‚àô‚àô‚ä¢‚Üí‚ä¢-<À¢ ‚ä¢C =
    let (‚ä¢Œì‚àôA , Œì‚àôA<) , (‚ä¢B , B<) = ‚àô‚ä¢‚Üí‚ä¢-<À¢ ‚ä¢C
        (‚ä¢Œì , Œì<) , (‚ä¢A , A<)     = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<) , (‚ä¢B , B<)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚àô¬†B¬†‚ä¢¬†t¬†‚à∑¬†C, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì, Œì¬†‚ä¢¬†A and Œì¬†‚àô¬†A¬†‚ä¢¬†B.

  ‚àô‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ :
    (‚ä¢t : Œì ‚àô A ‚àô B ‚ä¢ t ‚à∑ C) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚à∑ ‚ä¢t) √ó
    (‚àÉ Œª (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí size-‚ä¢ ‚ä¢B <À¢ size-‚ä¢‚à∑ ‚ä¢t)
  ‚àô‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ ‚ä¢t =
    let (‚ä¢Œì‚àôA , Œì‚àôA<) , (‚ä¢B , B<) = ‚àô‚ä¢‚à∑‚Üí‚ä¢-<À¢ ‚ä¢t
        (‚ä¢Œì , Œì<) , (‚ä¢A , A<)     = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<) , (‚ä¢B , B<)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚àô¬†B¬†‚ä¢¬†C¬†‚â°¬†D, then there are strictly
  -- smaller proofs of ‚ä¢¬†Œì, Œì¬†‚ä¢¬†A and Œì¬†‚àô¬†A¬†‚ä¢¬†B.

  ‚àô‚àô‚ä¢‚â°‚Üí‚ä¢-<À¢ :
    (C‚â°D : Œì ‚àô A ‚àô B ‚ä¢ C ‚â° D) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â° C‚â°D) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚â° C‚â°D) √ó
    (‚àÉ Œª (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí size-‚ä¢ ‚ä¢B <À¢ size-‚ä¢‚â° C‚â°D)
  ‚àô‚àô‚ä¢‚â°‚Üí‚ä¢-<À¢ C‚â°D =
    let (‚ä¢Œì‚àôA , Œì‚àôA<) , (‚ä¢B , B<) = ‚àô‚ä¢‚â°‚Üí‚ä¢-<À¢ C‚â°D
        (‚ä¢Œì , Œì<) , (‚ä¢A , A<)     = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<) , (‚ä¢B , B<)

opaque

  -- If there is a proof of Œì¬†‚àô¬†A¬†‚àô¬†B¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†C, then there are
  -- strictly smaller proofs of ‚ä¢¬†Œì, Œì¬†‚ä¢¬†A and Œì¬†‚àô¬†A¬†‚ä¢¬†B.

  ‚àô‚àô‚ä¢‚â°‚à∑‚Üí‚ä¢-<À¢ :
    (t‚â°u : Œì ‚àô A ‚àô B ‚ä¢ t ‚â° u ‚à∑ C) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â°‚à∑ t‚â°u) √ó
    (‚àÉ Œª (‚ä¢A : Œì ‚ä¢ A) ‚Üí size-‚ä¢ ‚ä¢A <À¢ size-‚ä¢‚â°‚à∑ t‚â°u) √ó
    (‚àÉ Œª (‚ä¢B : Œì ‚àô A ‚ä¢ B) ‚Üí size-‚ä¢ ‚ä¢B <À¢ size-‚ä¢‚â°‚à∑ t‚â°u)
  ‚àô‚àô‚ä¢‚â°‚à∑‚Üí‚ä¢-<À¢ t‚â°u =
    let (‚ä¢Œì‚àôA , Œì‚àôA<) , (‚ä¢B , B<) = ‚àô‚ä¢‚â°‚à∑‚Üí‚ä¢-<À¢ t‚â°u
        (‚ä¢Œì , Œì<) , (‚ä¢A , A<)     = ‚ä¢‚àô‚Üí‚ä¢-<À¢ ‚ä¢Œì‚àôA
    in
    (‚ä¢Œì , <À¢-trans Œì< Œì‚àôA<) , (‚ä¢A , <À¢-trans A< Œì‚àôA<) , (‚ä¢B , B<)

opaque

  -- A lemma which could perhaps be used to make certain proofs more
  -- readable.

  infixl 24 _‚àô[_]

  _‚àô[_] : ‚ä¢ Œì ‚Üí (‚ä¢ Œì ‚Üí Œì ‚ä¢ A) ‚Üí ‚ä¢ Œì ‚àô A
  ‚ä¢Œì ‚àô[ f ] = ‚àô f ‚ä¢Œì

-- An example of how _‚àô[_] can be used.

_ : ‚ä¢ Œµ ‚àô ‚Ñï ‚àô U l ‚àô Empty
_ = Œµ ‚àô[ ‚Ñï‚±º ] ‚àô[ U‚±º ] ‚àô[ Empty‚±º ]
