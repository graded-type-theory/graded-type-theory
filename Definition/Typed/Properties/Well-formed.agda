------------------------------------------------------------------------
-- Some lemmas that are re-exported from Definition.Typed.Properties
------------------------------------------------------------------------

-- This module is imported from Graded.Derived.Erased.Typed.Primitive,
-- which is imported from Definition.Typed.Properties.

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Properties.Well-formed
  {‚Ñì} {M : Set ‚Ñì}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M
open import Definition.Typed R
open import Definition.Typed.Size R

open import Tools.Function
open import Tools.Nat
open import Tools.Product as Œ£
open import Tools.Size

private variable
  Œì       : Con Term _
  A B t u : Term _
  l       : Nat
  s‚ÇÅ s‚ÇÇ   : Size

------------------------------------------------------------------------
-- Context well-formedness lemmas

private opaque

  -- A lemma used below.

  fix :
    s‚ÇÅ ‚â§À¢ s‚ÇÇ ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ s‚ÇÅ) ‚Üí
    (‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ s‚ÇÇ)
  fix s‚ÇÅ‚â§À¢s‚ÇÇ = Œ£.map id·∂† (flip <À¢-trans-‚â§À¢ ≥ s‚ÇÅ‚â§À¢s‚ÇÇ)

opaque
  unfolding size-‚ä¢‚Ä≤

  mutual

    -- If there is a proof of type Œì¬†‚ä¢¬†A, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wf-<À¢ : (‚ä¢A : Œì ‚ä¢ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢ ‚ä¢A
    wf-<À¢ (U‚±º ‚ä¢Œì)      = ‚ä¢Œì , ‚Üô ‚óª
    wf-<À¢ (univ A)     = fix (‚Üô ‚óª) (wfTerm-<À¢ A)
    wf-<À¢ (Œ†Œ£‚±º ‚ä¢A _ _) = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wf-<À¢ (Empty‚±º ‚ä¢Œì)  = ‚ä¢Œì , ‚Üô ‚óª
    wf-<À¢ (Unit‚±º ‚ä¢Œì _) = ‚ä¢Œì , ‚Üô ‚óª
    wf-<À¢ (‚Ñï‚±º ‚ä¢Œì)      = ‚ä¢Œì , ‚Üô ‚óª
    wf-<À¢ (Id‚±º ‚ä¢t _)   = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)

    -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚à∑¬†A, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wfTerm-<À¢ :
      (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚à∑ ‚ä¢t
    wfTerm-<À¢ (conv ‚ä¢t _)             = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ (var ‚ä¢Œì _)              = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (U‚±º ‚ä¢Œì)                 = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (Œ†Œ£‚±º ‚ä¢A _ _)            = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢A)
    wfTerm-<À¢ (lam‚±º ‚ä¢A _ _)           = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (‚ä¢t ‚àò‚±º _)               = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ (prod‚±º ‚ä¢A _ _ _ _)      = fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (fst‚±º ‚ä¢A _ _)           = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (snd‚±º ‚ä¢A _ _)           = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (prodrec‚±º ‚ä¢A _ _ _ _ _) = fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (Empty‚±º ‚ä¢Œì)             = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (emptyrec‚±º ‚ä¢A _)        = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (Unit‚±º ‚ä¢Œì _)            = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (star‚±º ‚ä¢Œì _)            = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (unitrec‚±º ‚ä¢A ‚ä¢t _ _)    = fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ (‚Ñï‚±º ‚ä¢Œì)                 = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (zero‚±º ‚ä¢Œì)              = ‚ä¢Œì , ‚Üô ‚óª
    wfTerm-<À¢ (suc‚±º n)                = fix (‚Üô ‚óª) (wfTerm-<À¢ n)
    wfTerm-<À¢ (natrec‚±º ‚ä¢A ‚ä¢t _ _)     = fix (‚Üô ‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ (Id‚±º ‚ä¢A _ _)            = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢A)
    wfTerm-<À¢ (rfl‚±º ‚ä¢t)               = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ (J‚±º ‚ä¢A _ _ _ _ _)       = fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfTerm-<À¢ (K‚±º ‚ä¢t _ _ _ _)         = fix (‚Üô ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfTerm-<À¢ ([]-cong‚±º ‚ä¢t _ _ _)     = fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)

opaque
  unfolding size-‚ä¢‚Ä≤

  mutual

    -- If there is a proof of type Œì¬†‚ä¢¬†A¬†‚â°¬†B, then there is a strictly
    -- smaller proof of type ‚ä¢¬†Œì.

    wfEq-<À¢ :
      (A‚â°B : Œì ‚ä¢ A ‚â° B) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â° A‚â°B
    wfEq-<À¢ (univ A‚â°B)         = fix (‚Üô ‚óª) (wfEqTerm-<À¢ A‚â°B)
    wfEq-<À¢ (refl ‚ä¢A)          = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEq-<À¢ (sym B‚â°A)          = fix (‚Üô ‚óª) (wfEq-<À¢ B‚â°A)
    wfEq-<À¢ (trans A‚â°B B‚â°C)    = fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEq-<À¢ (Œ†Œ£-cong ‚ä¢A _ _ _) = fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEq-<À¢ (Id-cong A‚â°B _ _)  = fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)

    -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†A, then there is a
    -- strictly smaller proof of type ‚ä¢¬†Œì.

    wfEqTerm-<À¢ :
      (t‚â°u : Œì ‚ä¢ t ‚â° u ‚à∑ A) ‚Üí
      ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì <À¢ size-‚ä¢‚â°‚à∑ t‚â°u
    wfEqTerm-<À¢ (refl ‚ä¢t) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (sym u‚â°t) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ u‚â°t)
    wfEqTerm-<À¢ (trans t‚â°u _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (conv t‚â°u _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (Œ†Œ£-cong ‚ä¢A _ _ _) =
      fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (app-cong t‚ÇÅ‚â°u‚ÇÅ _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (Œ≤-red ‚ä¢A _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (Œ∑-eq ‚ä¢A _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (fst-cong ‚ä¢A _ _) =
      fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (snd-cong ‚ä¢A _ _) =
      fix (‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (Œ£-Œ≤‚ÇÅ ‚ä¢A _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (Œ£-Œ≤‚ÇÇ ‚ä¢A _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (Œ£-Œ∑ ‚ä¢A _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (prod-cong ‚ä¢A _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (prodrec-cong ‚ä¢A _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (prodrec-Œ≤ ‚ä¢A _ _ _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (emptyrec-cong A‚â°B _) =
      fix (‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEqTerm-<À¢ (unitrec-cong _ t‚ÇÅ‚â°u‚ÇÅ _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (unitrec-Œ≤ _ ‚ä¢t _ _) =
      fix (‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (unitrec-Œ≤-Œ∑ _ ‚ä¢t _ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Œ∑-unit ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (suc-cong t‚â°u) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ t‚â°u)
    wfEqTerm-<À¢ (natrec-cong _ _ t‚ÇÅ‚â°u‚ÇÅ _ _) =
      fix (‚Üò ‚Üô ‚óª) (wfEqTerm-<À¢ t‚ÇÅ‚â°u‚ÇÅ)
    wfEqTerm-<À¢ (natrec-zero _ ‚ä¢t _) =
      fix (‚Üò ‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (natrec-suc _ ‚ä¢t _ _) =
      fix (‚Üô ‚Üò ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ (Id-cong A‚â°B _ _) =
      fix (‚Üô ‚óª) (wfEqTerm-<À¢ A‚â°B)
    wfEqTerm-<À¢ (J-cong ‚ä¢A‚ÇÅ _ _ _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A‚ÇÅ)
    wfEqTerm-<À¢ (K-cong A‚ÇÅ‚â°A‚ÇÇ _ _ _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wfEq-<À¢ A‚ÇÅ‚â°A‚ÇÇ)
    wfEqTerm-<À¢ ([]-cong-cong A‚â°B _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wfEq-<À¢ A‚â°B)
    wfEqTerm-<À¢ (J-Œ≤ ‚ä¢A _ _ _ _) =
      fix (‚Üô ‚Üô ‚óª) (wf-<À¢ ‚ä¢A)
    wfEqTerm-<À¢ (K-Œ≤ ‚ä¢t _ _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)
    wfEqTerm-<À¢ ([]-cong-Œ≤ ‚ä¢t _ _) =
      fix (‚Üô ‚óª) (wfTerm-<À¢ ‚ä¢t)

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†A, then there is a proof of type
  -- ‚ä¢¬†Œì that is no larger than the first proof.

  wf-‚â§À¢ : (‚ä¢A : Œì ‚ä¢ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢ ‚ä¢A
  wf-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wf-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚à∑¬†A, then there is a proof of
  -- type ‚ä¢¬†Œì that is no larger than the first proof.

  wfTerm-‚â§À¢ :
    (‚ä¢t : Œì ‚ä¢ t ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚à∑ ‚ä¢t
  wfTerm-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfTerm-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†A¬†‚â°¬†B, then there is a proof of
  -- type ‚ä¢¬†Œì that is no larger than the first proof.

  wfEq-‚â§À¢ :
    (A‚â°B : Œì ‚ä¢ A ‚â° B) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚â° A‚â°B
  wfEq-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfEq-<À¢

opaque

  -- If there is a proof of type Œì¬†‚ä¢¬†t¬†‚â°¬†u¬†‚à∑¬†A, then there is a proof
  -- of type ‚ä¢¬†Œì that is no larger than the first proof.

  wfEqTerm-‚â§À¢ :
    (t‚â°u : Œì ‚ä¢ t ‚â° u ‚à∑ A) ‚Üí ‚àÉ Œª (‚ä¢Œì : ‚ä¢ Œì) ‚Üí size-‚ä¢‚Ä≤ ‚ä¢Œì ‚â§À¢ size-‚ä¢‚â°‚à∑ t‚â°u
  wfEqTerm-‚â§À¢ = Œ£.map id·∂† <À¢‚Üí‚â§À¢ ‚àò‚Üí wfEqTerm-<À¢

opaque

  -- If a type is well-typed with respect to¬†Œì, then Œì is well-formed.

  wf : Œì ‚ä¢ A ‚Üí ‚ä¢ Œì
  wf = proj‚ÇÅ ‚àò‚Üí wf-<À¢

opaque

  -- If a term is well-typed with respect to¬†Œì, then Œì is well-formed.

  wfTerm : Œì ‚ä¢ t ‚à∑ A ‚Üí ‚ä¢ Œì
  wfTerm = proj‚ÇÅ ‚àò‚Üí wfTerm-<À¢

opaque

  -- If a type equality is well-formed with respect to¬†Œì, then Œì is
  -- well-formed.

  wfEq : Œì ‚ä¢ A ‚â° B ‚Üí ‚ä¢ Œì
  wfEq = proj‚ÇÅ ‚àò‚Üí wfEq-<À¢

opaque

  -- If a term equality is well-formed with respect to¬†Œì, then Œì is
  -- well-formed.

  wfEqTerm : Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí ‚ä¢ Œì
  wfEqTerm = proj‚ÇÅ ‚àò‚Üí wfEqTerm-<À¢

opaque

  -- If Œì¬†‚ä¢¬†A holds, then ‚ä¢¬†Œì¬†‚àô¬†A also holds.

  ‚ä¢‚Üí‚ä¢‚àô : Œì ‚ä¢ A ‚Üí ‚ä¢ Œì ‚àô A
  ‚ä¢‚Üí‚ä¢‚àô ‚ä¢A = wf ‚ä¢A ‚àô ‚ä¢A

opaque

  -- If ‚ä¢¬†Œì¬†‚àô¬†A holds, then Œì¬†‚ä¢¬†A also holds.

  ‚ä¢‚àô‚Üí‚ä¢ : ‚ä¢ Œì ‚àô A ‚Üí Œì ‚ä¢ A
  ‚ä¢‚àô‚Üí‚ä¢ (_ ‚àô ‚ä¢A) = ‚ä¢A

opaque

  -- A lemma which could perhaps be used to make certain proofs more
  -- readable.

  infixl 24 _‚àô[_]

  _‚àô[_] : ‚ä¢ Œì ‚Üí (‚ä¢ Œì ‚Üí Œì ‚ä¢ A) ‚Üí ‚ä¢ Œì ‚àô A
  ‚ä¢Œì ‚àô[ f ] = ‚ä¢‚Üí‚ä¢‚àô (f ‚ä¢Œì)

-- An example of how _‚àô[_] can be used.

_ : ‚ä¢ Œµ ‚àô ‚Ñï ‚àô U l ‚àô Empty
_ = Œµ ‚àô[ ‚Ñï‚±º ] ‚àô[ U‚±º ] ‚àô[ Empty‚±º ]
