------------------------------------------------------------------------
-- Some lemmas that are re-exported from Definition.Typed.Properties
------------------------------------------------------------------------

-- This module is imported from Graded.Derived.Erased.Typed.Primitive,
-- which is imported from Definition.Typed.Properties.

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Properties.Well-formed
  {‚Ñì} {M : Set ‚Ñì}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open import Definition.Untyped M hiding (_‚à∑_)
open import Definition.Typed R

open import Tools.Nat

private variable
  Œì       : Con Term _
  A B t u : Term _

-- If a term is well-typed with respect to¬†Œì, then Œì is well-formed.

wfTerm : Œì ‚ä¢ t ‚à∑ A ‚Üí ‚ä¢ Œì
wfTerm (‚Ñï‚±º ‚ä¢Œì) = ‚ä¢Œì
wfTerm (Empty‚±º ‚ä¢Œì) = ‚ä¢Œì
wfTerm (Unit‚±º ‚ä¢Œì _) = ‚ä¢Œì
wfTerm (Œ†Œ£‚±º F _ _) = wfTerm F
wfTerm (var ‚ä¢Œì x‚ÇÅ) = ‚ä¢Œì
wfTerm (lam‚±º _ t _) with wfTerm t
wfTerm (lam‚±º _ t _) | ‚ä¢Œì ‚àô _ = ‚ä¢Œì
wfTerm (g ‚àò‚±º a) = wfTerm a
wfTerm (zero‚±º ‚ä¢Œì) = ‚ä¢Œì
wfTerm (suc‚±º n) = wfTerm n
wfTerm (natrec‚±º F z s n) = wfTerm z
wfTerm (prodrec‚±º _ _ _ t _ _) = wfTerm t
wfTerm (emptyrec‚±º A e) = wfTerm e
wfTerm (star‚±º ‚ä¢Œì _) = ‚ä¢Œì
wfTerm (conv t A‚â°B) = wfTerm t
wfTerm (prod‚±º _ _ a _ _) = wfTerm a
wfTerm (fst‚±º _ _ a) = wfTerm a
wfTerm (snd‚±º _ _ a) = wfTerm a
wfTerm (Id‚±º _ ‚ä¢t _) = wfTerm ‚ä¢t
wfTerm (rfl‚±º ‚ä¢t) = wfTerm ‚ä¢t
wfTerm (J‚±º _ ‚ä¢t _ _ _ _) = wfTerm ‚ä¢t
wfTerm (K‚±º ‚ä¢t _ _ _ _) = wfTerm ‚ä¢t
wfTerm ([]-cong‚±º ‚ä¢t _ _ _) = wfTerm ‚ä¢t
wfTerm (unitrec‚±º _ ‚ä¢t _ _) = wfTerm ‚ä¢t

-- If a type is well-typed with respect to¬†Œì, then Œì is well-formed.

wf : Œì ‚ä¢ A ‚Üí ‚ä¢ Œì
wf (‚Ñï‚±º ‚ä¢Œì) = ‚ä¢Œì
wf (Empty‚±º ‚ä¢Œì) = ‚ä¢Œì
wf (Unit‚±º ‚ä¢Œì _) = ‚ä¢Œì
wf (U‚±º ‚ä¢Œì) = ‚ä¢Œì
wf (Œ†Œ£‚±º F _ _) = wf F
wf (Id‚±º ‚ä¢t _) = wfTerm ‚ä¢t
wf (univ A) = wfTerm A

-- If a term equality is well-formed with respect to¬†Œì, then Œì is
-- well-formed.

wfEqTerm : Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí ‚ä¢ Œì
wfEqTerm (refl t) = wfTerm t
wfEqTerm (sym t‚â°u) = wfEqTerm t‚â°u
wfEqTerm (trans t‚â°u u‚â°r) = wfEqTerm t‚â°u
wfEqTerm (conv t‚â°u A‚â°B) = wfEqTerm t‚â°u
wfEqTerm (Œ†Œ£-cong _ F‚â°H _ _) = wfEqTerm F‚â°H
wfEqTerm (app-cong f‚â°g a‚â°b) = wfEqTerm f‚â°g
wfEqTerm (Œ≤-red _ _ _ a _ _) = wfTerm a
wfEqTerm (Œ∑-eq F f g f0‚â°g0) = wfTerm f
wfEqTerm (suc-cong n) = wfEqTerm n
wfEqTerm (natrec-cong _ F‚â°F‚Ä≤ z‚â°z‚Ä≤ s‚â°s‚Ä≤ n‚â°n‚Ä≤) = wfEqTerm z‚â°z‚Ä≤
wfEqTerm (natrec-zero F z s) = wfTerm z
wfEqTerm (natrec-suc _ _ _ n) = wfTerm n
wfEqTerm (emptyrec-cong A‚â°A' e‚â°e') = wfEqTerm e‚â°e'
wfEqTerm (Œ∑-unit e e') = wfTerm e
wfEqTerm (prod-cong F _ _ _ _) = wf F
wfEqTerm (fst-cong _ _ a) = wfEqTerm a
wfEqTerm (snd-cong _ _ a) = wfEqTerm a
wfEqTerm (prodrec-cong F _ _ _ _ _) = wf F
wfEqTerm (prodrec-Œ≤ F _ _ _ _ _ _ _) = wf F
wfEqTerm (Œ£-Œ∑ _ _ x _ _ _) = wfTerm x
wfEqTerm (Œ£-Œ≤‚ÇÅ _ _ x _ _ _) = wfTerm x
wfEqTerm (Œ£-Œ≤‚ÇÇ _ _ x _ _ _) = wfTerm x
wfEqTerm (Id-cong _ t‚ÇÅ‚â°t‚ÇÇ _) = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ
wfEqTerm (J-cong _ _ _ t‚ÇÅ‚â°t‚ÇÇ _ _ _ _) = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ
wfEqTerm (J-Œ≤ _ ‚ä¢t _ _ _) = wfTerm ‚ä¢t
wfEqTerm (K-cong _ _ t‚ÇÅ‚â°t‚ÇÇ _ _ _ _) = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ
wfEqTerm (K-Œ≤ ‚ä¢t _ _ _) = wfTerm ‚ä¢t
wfEqTerm ([]-cong-cong _ t‚ÇÅ‚â°t‚ÇÇ _ _ _) = wfEqTerm t‚ÇÅ‚â°t‚ÇÇ
wfEqTerm ([]-cong-Œ≤ ‚ä¢t _ _) = wfTerm ‚ä¢t
wfEqTerm (unitrec-cong _ t‚â°t‚Ä≤ _ _) = wfEqTerm t‚â°t‚Ä≤
wfEqTerm (unitrec-Œ≤ _ ‚ä¢u _) = wfTerm ‚ä¢u

-- If a type equality is well-formed with respect to¬†Œì, then Œì is
-- well-formed.

wfEq : Œì ‚ä¢ A ‚â° B ‚Üí ‚ä¢ Œì
wfEq (univ A‚â°B) = wfEqTerm A‚â°B
wfEq (refl A) = wf A
wfEq (sym A‚â°B) = wfEq A‚â°B
wfEq (trans A‚â°B B‚â°C) = wfEq A‚â°B
wfEq (Œ†Œ£-cong F _ _ _) = wf F
wfEq (Id-cong A‚ÇÅ‚â°A‚ÇÇ _ _) = wfEq A‚ÇÅ‚â°A‚ÇÇ
