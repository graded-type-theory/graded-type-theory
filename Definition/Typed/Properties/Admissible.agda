------------------------------------------------------------------------
-- Some admissible typing and equality rules
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Typed.Properties.Admissible
  {‚Ñì} {M : Set ‚Ñì}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Untyped M

open import Definition.Typed R
open import Definition.Typed.Inversion.Primitive R
open import Definition.Typed.Well-formed R

import Graded.Derived.Erased.Untyped ùïÑ as Erased

open import Tools.Fin
open import Tools.Product

open import Definition.Typed.Properties.Admissible.Primitive R public

private variable
  Œì         : Con Term _
  A B t u v : Term _
  s         : Strength
  p q       : M

opaque

  -- A variant of Id‚±º.

  Id‚±º‚Ä≤ : Œì ‚ä¢ t ‚à∑ A ‚Üí Œì ‚ä¢ u ‚à∑ A ‚Üí Œì ‚ä¢ Id A t u
  Id‚±º‚Ä≤ ‚ä¢t = Id‚±º (wf-‚ä¢‚à∑ ‚ä¢t) ‚ä¢t

opaque

  -- A variant of lam‚±º.

  lam‚±º‚Ä≤ :
    Œ†-allowed p q ‚Üí
    Œì ‚àô A ‚ä¢ t ‚à∑ B ‚Üí
    Œì ‚ä¢ lam p t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  lam‚±º‚Ä≤ ok ‚ä¢t = lam‚±º (wf-‚ä¢‚à∑ ‚ä¢t) ‚ä¢t ok

opaque

  -- A variant of []-cong‚±º.

  []-cong‚±º‚Ä≤ :
    let open Erased s in
    []-cong-allowed s ‚Üí
    Œì ‚ä¢ v ‚à∑ Id A t u ‚Üí
    Œì ‚ä¢ []-cong s A t u v ‚à∑ Id (Erased A) ([ t ]) ([ u ])
  []-cong‚±º‚Ä≤ ok ‚ä¢v =
    let _ , (‚ä¢t , _) , (‚ä¢u , _) = inversion-Id-‚ä¢ (wf-‚ä¢‚à∑ ‚ä¢v) in
    []-cong‚±º (wf-‚ä¢‚à∑ ‚ä¢t) ‚ä¢t ‚ä¢u ‚ä¢v ok

opaque

  -- A variant of sym.

  sym‚Ä≤ : Œì ‚ä¢ t ‚â° u ‚à∑ A ‚Üí Œì ‚ä¢ u ‚â° t ‚à∑ A
  sym‚Ä≤ t‚â°u = sym (wf-‚ä¢‚â°‚à∑ t‚â°u .proj‚ÇÅ) t‚â°u

opaque

  -- A variant of Œ∑-eq.

  Œ∑-eq‚Ä≤ :
    Œì ‚ä¢ t ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚àô A ‚ä¢ wk1 t ‚àò‚ü® p ‚ü© var x0 ‚â° wk1 u ‚àò‚ü® p ‚ü© var x0 ‚à∑ B ‚Üí
    Œì ‚ä¢ t ‚â° u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B
  Œ∑-eq‚Ä≤ ‚ä¢t ‚ä¢u t0‚â°u0 =
    let _ , ‚ä¢B , ok = inversion-Œ†Œ£ (wf-‚ä¢‚à∑ ‚ä¢t) in
    Œ∑-eq ‚ä¢B ‚ä¢t ‚ä¢u t0‚â°u0 ok

opaque

  -- A variant of Œ£-Œ∑.

  Œ£-Œ∑‚Ä≤ :
    Œì ‚ä¢ t ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B ‚Üí
    Œì ‚ä¢ fst p t ‚â° fst p u ‚à∑ A ‚Üí
    Œì ‚ä¢ snd p t ‚â° snd p u ‚à∑ B [ fst p t ]‚ÇÄ ‚Üí
    Œì ‚ä¢ t ‚â° u ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B
  Œ£-Œ∑‚Ä≤ ‚ä¢t ‚ä¢u t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ =
    let _ , ‚ä¢B , ok = inversion-Œ†Œ£ (wf-‚ä¢‚à∑ ‚ä¢t) in
    Œ£-Œ∑ ‚ä¢B ‚ä¢t ‚ä¢u t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ ok
