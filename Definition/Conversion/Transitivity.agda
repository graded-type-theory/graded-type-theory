------------------------------------------------------------------------
-- The algorithmic equality is transitive (in the absence of equality
-- reflection)
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Conversion.Transitivity
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  (open Type-restrictions R)
  ‚¶É no-equality-reflection : No-equality-reflection ‚¶Ñ
  where

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Untyped.Properties.Neutral M type-variant
open import Definition.Typed R
open import Definition.Typed.EqRelInstance R
open import Definition.Typed.EqualityRelation.Instance R
open import Definition.Typed.Inversion R
open import Definition.Typed.Properties R
open import Definition.Typed.Stability R
open import Definition.Typed.Substitution R
open import Definition.Typed.Syntactic R
open import Definition.Conversion R
open import Definition.Conversion.Inversion R
open import Definition.Conversion.Soundness R
open import Definition.Conversion.Stability R
open import Definition.Conversion.Whnf R
open import Definition.Conversion.Conversion R
open import Definition.Typed.Consequences.Injectivity R
import Definition.Typed.Consequences.Inequality R as WF
open import Definition.Typed.Consequences.NeTypeEq R

open import Tools.Function
open import Tools.Nat
open import Tools.Product
open import Tools.Empty
import Tools.PropositionalEquality as PE
open import Tools.Sum using (inj‚ÇÅ; inj‚ÇÇ)


private
  variable
    n : Nat
    Œì Œî : Con Term n
    A t u v : Term _

mutual
  -- Transitivity of algorithmic equality of neutrals.
  trans~‚Üë : ‚àÄ {t u v A B}
         ‚Üí Œì ‚ä¢ t ~ u ‚Üë A
         ‚Üí Œì ‚ä¢ u ~ v ‚Üë B
         ‚Üí Œì ‚ä¢ t ~ v ‚Üë A
         √ó Œì ‚ä¢ A ‚â° B
  trans~‚Üë (var-refl x‚ÇÅ x‚â°y) (var-refl x‚ÇÇ x‚â°y‚ÇÅ) =
    var-refl x‚ÇÅ (PE.trans x‚â°y x‚â°y‚ÇÅ)
    , neTypeEq (var _) x‚ÇÅ
               (PE.subst (Œª x ‚Üí _ ‚ä¢ var x ‚à∑ _) (PE.sym x‚â°y)
                         x‚ÇÇ)
  trans~‚Üë (app-cong t~u a<>b) (app-cong u~v b<>c) =
    let t~v , Œ†FG‚â°Œ†F‚Ä≤G‚Ä≤ = trans~‚Üì t~u u~v
        F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , p‚â°p‚ÇÑ , _ = Œ†Œ£-injectivity Œ†FG‚â°Œ†F‚Ä≤G‚Ä≤
        a<>c = transConv‚ÜëTerm F‚â°F‚ÇÅ a<>b b<>c
    in  app-cong t~v a<>c , G‚â°G‚ÇÅ (soundnessConv‚ÜëTerm a<>b)
  trans~‚Üë (fst-cong t~u) (fst-cong u~v) =
    let t~v , Œ£FG‚â°Œ£F‚Ä≤G‚Ä≤ = trans~‚Üì t~u u~v
        F‚â°F‚Ä≤ , _ , _ = Œ†Œ£-injectivity Œ£FG‚â°Œ£F‚Ä≤G‚Ä≤
    in  fst-cong t~v , F‚â°F‚Ä≤
  trans~‚Üë (snd-cong t~u) (snd-cong u~v) =
    let t~v , Œ£FG‚â°Œ£F‚Ä≤G‚Ä≤ = trans~‚Üì t~u u~v
        F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _ = Œ†Œ£-injectivity Œ£FG‚â°Œ£F‚Ä≤G‚Ä≤
    in  snd-cong t~v , G‚â°G‚Ä≤ (soundness~‚Üë (fst-cong t~u))
  trans~‚Üë (natrec-cong A<>B a‚ÇÄ<>b‚ÇÄ a‚Çõ<>b‚Çõ t~u)
          (natrec-cong B<>C b‚ÇÄ<>c‚ÇÄ b‚Çõ<>c‚Çõ u~v) =
    let ‚ä¢Œì = wf (proj‚ÇÅ (syntacticEqTerm (soundness~‚Üì t~u)))
        A‚â°B = soundnessConv‚Üë A<>B
        F[0]‚â°F‚ÇÅ[0] = substTypeEq A‚â°B (refl (zero‚±º ‚ä¢Œì))
        F‚ÜëÃÇ¬≤‚â°F‚ÇÅ‚Üë¬≤ = sucCong A‚â°B
        A<>C = transConv‚Üë A<>B B<>C
        a‚ÇÄ<>c‚ÇÄ = transConv‚ÜëTerm F[0]‚â°F‚ÇÅ[0] a‚ÇÄ<>b‚ÇÄ b‚ÇÄ<>c‚ÇÄ
        a‚Çõ<>c‚Çõ = transConv‚ÜëTerm F‚ÜëÃÇ¬≤‚â°F‚ÇÅ‚Üë¬≤ a‚Çõ<>b‚Çõ
                   (stabilityConv‚ÜëTerm (refl-‚àô (sym A‚â°B)) b‚Çõ<>c‚Çõ)
        t~v , _ = trans~‚Üì t~u u~v
    in  natrec-cong A<>C a‚ÇÄ<>c‚ÇÄ a‚Çõ<>c‚Çõ t~v
    ,   substTypeEq A‚â°B (soundness~‚Üì t~u)
  trans~‚Üë {Œì = Œì} (prodrec-cong {F = F} {G} A<>B a~b t<>u)
                  (prodrec-cong B<>C b~c u<>v) =
    let a~c , Œ£‚â°Œ£‚Ä≤ = trans~‚Üì a~b b~c
        ‚ä¢Œì = wfEq Œ£‚â°Œ£‚Ä≤
        F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _ =
          Œ†Œ£-injectivity-no-equality-reflection (sym Œ£‚â°Œ£‚Ä≤)
        _ , ‚ä¢F = syntacticEq F‚â°F‚Ä≤
        _ , ‚ä¢G = syntacticEq G‚â°G‚Ä≤
        ‚ä¢G = stability (refl-‚àô F‚â°F‚Ä≤) ‚ä¢G
        B<>C‚Ä≤ = stabilityConv‚Üë (refl-‚àô (sym Œ£‚â°Œ£‚Ä≤)) B<>C
        A<>C = transConv‚Üë A<>B B<>C‚Ä≤
        u<>v‚Ä≤ = stabilityConv‚ÜëTerm (refl-‚àô F‚â°F‚Ä≤ ‚àô G‚â°G‚Ä≤) u<>v
        _ , ‚ä¢ŒìFG , _ = contextConvSubst (refl-‚àô F‚â°F‚Ä≤ ‚àô G‚â°G‚Ä≤)
        A‚â°B = soundnessConv‚Üë A<>B
        A‚Çä‚â°B‚Çä = subst‚Üë¬≤TypeEq-prod A‚â°B
        t<>v = transConv‚ÜëTerm A‚Çä‚â°B‚Çä t<>u u<>v‚Ä≤
        a‚â°b = soundness~‚Üì a~b
        Aa‚â°Bb = substTypeEq A‚â°B a‚â°b
    in  prodrec-cong A<>C a~c t<>v , Aa‚â°Bb
  trans~‚Üë (emptyrec-cong A<>B t~u) (emptyrec-cong B<>C u~v) =
    let A‚â°B = soundnessConv‚Üë A<>B
        A<>C = transConv‚Üë A<>B B<>C
        t~v , _ = trans~‚Üì  t~u u~v
    in  emptyrec-cong A<>C t~v , A‚â°B
  trans~‚Üë (unitrec-cong A<>B k~l u<>v no-Œ∑)
    (unitrec-cong B<>C l~m v<>w _) =
    let A<>C = transConv‚Üë A<>B B<>C
        k~m , ‚ä¢Unit‚â°Unit = trans~‚Üì k~l l~m
        ‚ä¢Unit = proj‚ÇÅ (syntacticEq ‚ä¢Unit‚â°Unit)
        ok = inversion-Unit ‚ä¢Unit
        ‚ä¢Œì = wf ‚ä¢Unit
        A‚â°B = soundnessConv‚Üë A<>B
        A‚Çä‚â°B‚Çä = substTypeEq A‚â°B (refl (star‚±º ‚ä¢Œì ok))
        Ak‚â°Bl = substTypeEq A‚â°B (soundness~‚Üì k~l)
        u<>w = transConv‚ÜëTerm A‚Çä‚â°B‚Çä u<>v v<>w
    in  unitrec-cong A<>C k~m u<>w no-Œ∑ , Ak‚â°Bl
  trans~‚Üë (J-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ~w‚ÇÇ C‚ÇÅ‚â°Id-t‚ÇÅ-v‚ÇÅ)
    (J-cong A‚ÇÇ‚â°A‚ÇÉ t‚ÇÇ‚â°t‚ÇÉ B‚ÇÇ‚â°B‚ÇÉ u‚ÇÇ‚â°u‚ÇÉ v‚ÇÇ‚â°v‚ÇÉ w‚ÇÇ~w‚ÇÉ _) =
    case soundnessConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
      ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case soundnessConv‚Üë B‚ÇÅ‚â°B‚ÇÇ of Œª {
      ‚ä¢B‚ÇÅ‚â°B‚ÇÇ ‚Üí
    case soundnessConv‚ÜëTerm t‚ÇÅ‚â°t‚ÇÇ of Œª {
      ‚ä¢t‚ÇÅ‚â°t‚ÇÇ ‚Üí
      J-cong (transConv‚Üë A‚ÇÅ‚â°A‚ÇÇ A‚ÇÇ‚â°A‚ÇÉ)
        (transConv‚ÜëTerm ‚ä¢A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÇ‚â°t‚ÇÉ)
        (transConv‚Üë B‚ÇÅ‚â°B‚ÇÇ
           (stabilityConv‚Üë
              (symConEq (J-motive-context-cong‚Ä≤ ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚ä¢t‚ÇÅ‚â°t‚ÇÇ)) B‚ÇÇ‚â°B‚ÇÉ))
        (transConv‚ÜëTerm (J-motive-rfl-cong ‚ä¢B‚ÇÅ‚â°B‚ÇÇ ‚ä¢t‚ÇÅ‚â°t‚ÇÇ) u‚ÇÅ‚â°u‚ÇÇ u‚ÇÇ‚â°u‚ÇÉ)
        (transConv‚ÜëTerm ‚ä¢A‚ÇÅ‚â°A‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ v‚ÇÇ‚â°v‚ÇÉ) (trans~‚Üì w‚ÇÅ~w‚ÇÇ w‚ÇÇ~w‚ÇÉ .proj‚ÇÅ)
        C‚ÇÅ‚â°Id-t‚ÇÅ-v‚ÇÅ
    , J-result-cong ‚ä¢B‚ÇÅ‚â°B‚ÇÇ (soundnessConv‚ÜëTerm v‚ÇÅ‚â°v‚ÇÇ)
        (conv (soundness~‚Üì w‚ÇÅ~w‚ÇÇ) C‚ÇÅ‚â°Id-t‚ÇÅ-v‚ÇÅ) }}}
  trans~‚Üë (K-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ~v‚ÇÇ C‚ÇÅ‚â°Id-t‚ÇÅ-t‚ÇÅ ok)
    (K-cong A‚ÇÇ‚â°A‚ÇÉ t‚ÇÇ‚â°t‚ÇÉ B‚ÇÇ‚â°B‚ÇÉ u‚ÇÇ‚â°u‚ÇÉ v‚ÇÇ~v‚ÇÉ _ _) =
    case soundnessConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
      ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case soundnessConv‚Üë B‚ÇÅ‚â°B‚ÇÇ of Œª {
      ‚ä¢B‚ÇÅ‚â°B‚ÇÇ ‚Üí
      K-cong (transConv‚Üë A‚ÇÅ‚â°A‚ÇÇ A‚ÇÇ‚â°A‚ÇÉ)
        (transConv‚ÜëTerm ‚ä¢A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÇ‚â°t‚ÇÉ)
        (transConv‚Üë B‚ÇÅ‚â°B‚ÇÇ
           (stabilityConv‚Üë
              (symConEq $
               K-motive-context-cong‚Ä≤ ‚ä¢A‚ÇÅ‚â°A‚ÇÇ (soundnessConv‚ÜëTerm t‚ÇÅ‚â°t‚ÇÇ))
              B‚ÇÇ‚â°B‚ÇÉ))
        (transConv‚ÜëTerm (K-motive-rfl-cong ‚ä¢B‚ÇÅ‚â°B‚ÇÇ) u‚ÇÅ‚â°u‚ÇÇ u‚ÇÇ‚â°u‚ÇÉ)
        (trans~‚Üì v‚ÇÅ~v‚ÇÇ v‚ÇÇ~v‚ÇÉ .proj‚ÇÅ) C‚ÇÅ‚â°Id-t‚ÇÅ-t‚ÇÅ ok
    , substTypeEq ‚ä¢B‚ÇÅ‚â°B‚ÇÇ (conv (soundness~‚Üì v‚ÇÅ~v‚ÇÇ) C‚ÇÅ‚â°Id-t‚ÇÅ-t‚ÇÅ) }}
  trans~‚Üë ([]-cong-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ~v‚ÇÇ B‚ÇÅ‚â°Id-t‚ÇÅ-u‚ÇÅ ok)
    ([]-cong-cong A‚ÇÇ‚â°A‚ÇÉ t‚ÇÇ‚â°t‚ÇÉ u‚ÇÇ‚â°u‚ÇÉ v‚ÇÇ~v‚ÇÉ _ _) =
    case soundnessConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
      ‚ä¢A‚ÇÅ‚â°A‚ÇÇ ‚Üí
    case []-cong‚ÜíErased ok of Œª {
      Erased-ok ‚Üí
      []-cong-cong (transConv‚Üë A‚ÇÅ‚â°A‚ÇÇ A‚ÇÇ‚â°A‚ÇÉ)
        (transConv‚ÜëTerm ‚ä¢A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ t‚ÇÇ‚â°t‚ÇÉ)
        (transConv‚ÜëTerm ‚ä¢A‚ÇÅ‚â°A‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ u‚ÇÇ‚â°u‚ÇÉ)
        (trans~‚Üì v‚ÇÅ~v‚ÇÇ v‚ÇÇ~v‚ÇÉ .proj‚ÇÅ) B‚ÇÅ‚â°Id-t‚ÇÅ-u‚ÇÅ ok
    , Id-cong (Erased-cong Erased-ok ‚ä¢A‚ÇÅ‚â°A‚ÇÇ)
        ([]-cong‚Ä≤ Erased-ok (soundnessConv‚ÜëTerm t‚ÇÅ‚â°t‚ÇÇ))
        ([]-cong‚Ä≤ Erased-ok (soundnessConv‚ÜëTerm u‚ÇÅ‚â°u‚ÇÇ)) }}

  -- Transitivity of algorithmic equality of neutrals with types in WHNF.
  trans~‚Üì : ‚àÄ {t u v A B}
          ‚Üí Œì ‚ä¢ t ~ u ‚Üì A
          ‚Üí Œì ‚ä¢ u ~ v ‚Üì B
          ‚Üí Œì ‚ä¢ t ~ v ‚Üì A
          √ó Œì ‚ä¢ A ‚â° B
  trans~‚Üì ([~] A‚ÇÅ D‚Ä≤@(D , _) k~l) ([~] A‚ÇÇ (D‚ÇÅ , _) k~l‚ÇÅ) =
    let t~v , A‚â°B = trans~‚Üë k~l k~l‚ÇÅ
    in  [~] A‚ÇÅ D‚Ä≤ t~v
    ,   trans (sym (subset* D))
              (trans A‚â°B
                     (subset* D‚ÇÅ))

  -- Transitivity of algorithmic equality of types.
  transConv‚Üë : ‚àÄ {A B C}
            ‚Üí Œì ‚ä¢ A [conv‚Üë] B
            ‚Üí Œì ‚ä¢ B [conv‚Üë] C
            ‚Üí Œì ‚ä¢ A [conv‚Üë] C
  transConv‚Üë ([‚Üë] A‚Ä≤ B‚Ä≤ D D‚Ä≤ A‚Ä≤<>B‚Ä≤)
             ([‚Üë] A‚Ä≥ B‚Ä≥ D‚ÇÅ D‚Ä≥ A‚Ä≤<>B‚Ä≥) =
    [‚Üë] A‚Ä≤ B‚Ä≥ D D‚Ä≥
        (transConv‚Üì A‚Ä≤<>B‚Ä≤
                    (PE.subst (Œª x ‚Üí _ ‚ä¢ x [conv‚Üì] B‚Ä≥)
                       (whrDet* D‚ÇÅ D‚Ä≤) A‚Ä≤<>B‚Ä≥))
  transConv‚Üë‚Ä≤ : ‚àÄ {A B C}
              ‚Üí ‚ä¢ Œì ‚â° Œî
              ‚Üí Œì ‚ä¢ A [conv‚Üë] B
              ‚Üí Œî ‚ä¢ B [conv‚Üë] C
              ‚Üí Œì ‚ä¢ A [conv‚Üë] C
  transConv‚Üë‚Ä≤ Œì‚â°Œî aConvB bConvC =
    transConv‚Üë aConvB (stabilityConv‚Üë (symConEq Œì‚â°Œî) bConvC)

  -- Transitivity of algorithmic equality of types in WHNF.
  transConv‚Üì : ‚àÄ {A B C}
            ‚Üí Œì ‚ä¢ A [conv‚Üì] B
            ‚Üí Œì ‚ä¢ B [conv‚Üì] C
            ‚Üí Œì ‚ä¢ A [conv‚Üì] C
  transConv‚Üì (ne A~B) B‚â°C =
    case inv-[conv‚Üì]-ne‚Ä≤ B‚â°C of Œª where
      (inj‚ÇÅ (_ , B~C))    ‚Üí ne (trans~‚Üì A~B B~C .proj‚ÇÅ)
      (inj‚ÇÇ (¬¨-B-ne , _)) ‚Üí
        let _ , _ , B-ne = ne~‚Üì A~B in
        ‚ä•-elim (¬¨-B-ne B-ne)
  transConv‚Üì U‚â°U@(U-refl _) U‚â°C =
    case inv-[conv‚Üì]-U‚Ä≤ U‚â°C of Œª where
      (inj‚ÇÅ (_ , PE.refl , PE.refl)) ‚Üí U‚â°U
      (inj‚ÇÇ (U‚â¢U , _))               ‚Üí ‚ä•-elim (U‚â¢U (_ , PE.refl))
  transConv‚Üì (Œ†Œ£-cong A‚ÇÅ‚â°B‚ÇÅ A‚ÇÇ‚â°B‚ÇÇ ok) Œ†Œ£‚â°C =
    case inv-[conv‚Üì]-Œ†Œ£‚Ä≤ Œ†Œ£‚â°C of Œª where
      (inj‚ÇÅ
         (_ , _ , _ , _ , _ , _ , _ ,
          PE.refl , PE.refl , B‚ÇÅ‚â°C‚ÇÅ , B‚ÇÇ‚â°C‚ÇÇ)) ‚Üí
        Œ†Œ£-cong (transConv‚Üë A‚ÇÅ‚â°B‚ÇÅ B‚ÇÅ‚â°C‚ÇÅ)
          (transConv‚Üë‚Ä≤ (refl-‚àô (soundnessConv‚Üë A‚ÇÅ‚â°B‚ÇÅ)) A‚ÇÇ‚â°B‚ÇÇ B‚ÇÇ‚â°C‚ÇÇ) ok
      (inj‚ÇÇ (Œ†Œ£‚â¢Œ†Œ£ , _)) ‚Üí
        ‚ä•-elim (Œ†Œ£‚â¢Œ†Œ£ (_ , _ , _ , _ , _ , PE.refl))
  transConv‚Üì Empty‚â°Empty@(Empty-refl _) Empty‚â°C =
    case inv-[conv‚Üì]-Empty‚Ä≤ Empty‚â°C of Œª where
      (inj‚ÇÅ (PE.refl , PE.refl)) ‚Üí Empty‚â°Empty
      (inj‚ÇÇ (Empty‚â¢Empty , _))   ‚Üí ‚ä•-elim (Empty‚â¢Empty PE.refl)
  transConv‚Üì Unit‚â°Unit@(Unit-refl _ _) Unit‚â°C =
    case inv-[conv‚Üì]-Unit‚Ä≤ Unit‚â°C of Œª where
      (inj‚ÇÅ (_ , _ , PE.refl , PE.refl)) ‚Üí Unit‚â°Unit
      (inj‚ÇÇ (Unit‚â¢Unit , _))             ‚Üí
        ‚ä•-elim (Unit‚â¢Unit (_ , _ , PE.refl))
  transConv‚Üì ‚Ñï‚â°‚Ñï@(‚Ñï-refl _) ‚Ñï‚â°C =
    case inv-[conv‚Üì]-‚Ñï‚Ä≤ ‚Ñï‚â°C of Œª where
      (inj‚ÇÅ (PE.refl , PE.refl)) ‚Üí ‚Ñï‚â°‚Ñï
      (inj‚ÇÇ (‚Ñï‚â¢‚Ñï , _))           ‚Üí ‚ä•-elim (‚Ñï‚â¢‚Ñï PE.refl)
  transConv‚Üì (Id-cong A‚â°B t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ) Id‚â°C =
    case inv-[conv‚Üì]-Id‚Ä≤ Id‚â°C of Œª where
      (inj‚ÇÅ
         (_ , _ , _ , _ , _ , _ ,
          PE.refl , PE.refl , B‚â°C , u‚ÇÅ‚â°v‚ÇÅ , u‚ÇÇ‚â°v‚ÇÇ)) ‚Üí
        let ‚ä¢A‚â°B = soundnessConv‚Üë A‚â°B in
        Id-cong (transConv‚Üë A‚â°B B‚â°C) (transConv‚ÜëTerm ‚ä¢A‚â°B t‚ÇÅ‚â°u‚ÇÅ u‚ÇÅ‚â°v‚ÇÅ)
          (transConv‚ÜëTerm ‚ä¢A‚â°B t‚ÇÇ‚â°u‚ÇÇ u‚ÇÇ‚â°v‚ÇÇ)
      (inj‚ÇÇ (Id‚â¢Id , _)) ‚Üí
        ‚ä•-elim (Id‚â¢Id (_ , _ , _ , PE.refl))

  -- Transitivity of algorithmic equality of terms.
  transConv‚ÜëTerm : ‚àÄ {t u v A B}
                ‚Üí Œì ‚ä¢ A ‚â° B
                ‚Üí Œì ‚ä¢ t [conv‚Üë] u ‚à∑ A
                ‚Üí Œì ‚ä¢ u [conv‚Üë] v ‚à∑ B
                ‚Üí Œì ‚ä¢ t [conv‚Üë] v ‚à∑ A
  transConv‚ÜëTerm A‚â°B ([‚Üë]‚Çú B‚ÇÅ t‚Ä≤ u‚Ä≤ D d d‚Ä≤ t<>u)
                 ([‚Üë]‚Çú B‚ÇÇ t‚Ä≥ u‚Ä≥ D‚ÇÅ d‚ÇÅ d‚Ä≥ t<>u‚ÇÅ) =
    let B‚ÇÅ‚â°B‚ÇÇ = trans (sym (subset* (D .proj‚ÇÅ)))
                      (trans A‚â°B
                             (subset* (D‚ÇÅ .proj‚ÇÅ)))
        d‚ÇÅ‚Ä≥ = conv‚Üò‚à∑ d‚Ä≥ (sym B‚ÇÅ‚â°B‚ÇÇ)
        d‚ÇÅ‚Ä≤  = conv‚Üò‚à∑ d‚Ä≤ B‚ÇÅ‚â°B‚ÇÇ
    in  [‚Üë]‚Çú B‚ÇÅ t‚Ä≤ u‚Ä≥ D d d‚ÇÅ‚Ä≥
          (transConv‚ÜìTerm t<>u
             (convConv‚ÜìTerm (sym B‚ÇÅ‚â°B‚ÇÇ) (whnfConv‚ÜìTerm t<>u .proj‚ÇÅ) $
              PE.subst (_ ‚ä¢_[conv‚Üì] _ ‚à∑ _) (whrDet*Term d‚ÇÅ d‚ÇÅ‚Ä≤) t<>u‚ÇÅ))

  -- Transitivity for _‚ä¢_[conv‚Üì]_‚à∑_.
  transConv‚ÜìTerm :
    Œì ‚ä¢ t [conv‚Üì] u ‚à∑ A ‚Üí
    Œì ‚ä¢ u [conv‚Üì] v ‚à∑ A ‚Üí
    Œì ‚ä¢ t [conv‚Üì] v ‚à∑ A
  transConv‚ÜìTerm (ne-ins ‚ä¢t _ A-ne t~u) u‚â°v =
    let _ , u~v    = inv-[conv‚Üì]‚à∑-ne A-ne u‚â°v
        _ , _ , ‚ä¢v = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v)
    in
    ne-ins ‚ä¢t ‚ä¢v A-ne (trans~‚Üì t~u u~v .proj‚ÇÅ)
  transConv‚ÜìTerm (univ ‚ä¢A ‚ä¢B A‚â°B) B‚â°C =
    let _ , _ , ‚ä¢C = syntacticEqTerm (soundnessConv‚ÜìTerm B‚â°C) in
    univ ‚ä¢A ‚ä¢C (transConv‚Üì A‚â°B (inv-[conv‚Üì]‚à∑-U B‚â°C))
  transConv‚ÜìTerm (Œ∑-eq ‚ä¢t ‚ä¢u t-fun u-fun t0‚â°u0) u‚â°v =
    let _ , v-fun , u0‚â°v0 = inv-[conv‚Üì]‚à∑-Œ† u‚â°v
        _ , _ , ‚ä¢v        = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v)
    in
    Œ∑-eq ‚ä¢t ‚ä¢v t-fun v-fun (transConvTerm t0‚â°u0 u0‚â°v0)
  transConv‚ÜìTerm (Œ£-Œ∑ ‚ä¢t _ t-prod _ fst-t‚â°fst-u snd-t‚â°snd-u) u‚â°v =
    let _ , v-prod , fst-u‚â°fst-v , snd-u‚â°snd-v = inv-[conv‚Üì]‚à∑-Œ£À¢ u‚â°v
        ‚ä¢Œ£ , _ , ‚ä¢v = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v)
        _ , ‚ä¢B , _ = inversion-Œ†Œ£ ‚ä¢Œ£
    in
    Œ£-Œ∑ ‚ä¢t ‚ä¢v t-prod v-prod (transConvTerm fst-t‚â°fst-u fst-u‚â°fst-v)
      (transConv‚ÜëTerm
         (substTypeEq (refl ‚ä¢B) (soundnessConv‚ÜëTerm fst-t‚â°fst-u))
         snd-t‚â°snd-u snd-u‚â°snd-v)
  transConv‚ÜìTerm (Œ£ ∑-ins ‚ä¢t _ t~u) u‚â°v =
    let _ , _ , ‚ä¢v = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v) in
    case inv-[conv‚Üì]‚à∑-Œ£ ∑ u‚â°v of Œª where
      (inj‚ÇÅ (_ , _ , _ , _ , u~v)) ‚Üí
        Œ£ ∑-ins ‚ä¢t ‚ä¢v (trans~‚Üì t~u u~v .proj‚ÇÅ)
      (inj‚ÇÇ (_ , _ , _ , _ , PE.refl , _)) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-prod $ ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÇ
  transConv‚ÜìTerm (prod-cong ‚ä¢B t‚ÇÅ‚â°u‚ÇÅ t‚ÇÇ‚â°u‚ÇÇ ok) u‚â°v =
    let _ , _ , ‚ä¢v = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v) in
    case inv-[conv‚Üì]‚à∑-Œ£ ∑ u‚â°v of Œª where
      (inj‚ÇÅ (_ , _ , _ , _ , u~v)) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-prod $ ne~‚Üì u~v .proj‚ÇÇ .proj‚ÇÅ
      (inj‚ÇÇ (_ , _ , _ , _ , u‚â°prod , PE.refl , u‚ÇÅ‚â°v‚ÇÅ , u‚ÇÇ‚â°v‚ÇÇ)) ‚Üí
        case prod-PE-injectivity u‚â°prod of Œª {
          (_ , _ , PE.refl , PE.refl) ‚Üí
        prod-cong ‚ä¢B (transConvTerm t‚ÇÅ‚â°u‚ÇÅ u‚ÇÅ‚â°v‚ÇÅ)
          (transConv‚ÜëTerm
             (substTypeEq (refl ‚ä¢B) (soundnessConv‚ÜëTerm t‚ÇÅ‚â°u‚ÇÅ))
             t‚ÇÇ‚â°u‚ÇÇ u‚ÇÇ‚â°v‚ÇÇ)
          ok }
  transConv‚ÜìTerm (Empty-ins t~u) u‚â°v =
    Empty-ins (trans~‚Üì t~u (inv-[conv‚Üì]‚à∑-Empty u‚â°v) .proj‚ÇÅ)
  transConv‚ÜìTerm (Œ∑-unit ‚ä¢t _ t-whnf _ Œ∑) u‚â°v =
    let _ , _ , ‚ä¢v = syntacticEqTerm (soundnessConv‚ÜìTerm u‚â°v) in
    case inv-[conv‚Üì]‚à∑-Unit u‚â°v of Œª where
      (inj‚ÇÅ (_ , _ , v-whnf)) ‚Üí Œ∑-unit ‚ä¢t ‚ä¢v t-whnf v-whnf Œ∑
      (inj‚ÇÇ (no-Œ∑ , _))       ‚Üí ‚ä•-elim (no-Œ∑ Œ∑)
  transConv‚ÜìTerm (Unit ∑-ins no-Œ∑ t~u) u‚â°v =
    case inv-[conv‚Üì]‚à∑-Unit ∑ u‚â°v of Œª where
      (inj‚ÇÅ (_ , inj‚ÇÅ u~v)) ‚Üí
        Unit ∑-ins no-Œ∑ (trans~‚Üì t~u u~v .proj‚ÇÅ)
      (inj‚ÇÅ (_ , inj‚ÇÇ (PE.refl , _))) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-star $ ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÇ
      (inj‚ÇÇ (Œ∑ , _)) ‚Üí
        ‚ä•-elim (no-Œ∑ Œ∑)
  transConv‚ÜìTerm (star ∑-refl _ _ no-Œ∑) u‚â°v =
    case inv-[conv‚Üì]‚à∑-Unit ∑ u‚â°v of Œª where
      (inj‚ÇÅ (_ , inj‚ÇÅ u~v)) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-star $ ne~‚Üì u~v .proj‚ÇÇ .proj‚ÇÅ
      (inj‚ÇÅ (_ , inj‚ÇÇ (_ , PE.refl))) ‚Üí
        u‚â°v
      (inj‚ÇÇ (Œ∑ , _)) ‚Üí
        ‚ä•-elim (no-Œ∑ Œ∑)
  transConv‚ÜìTerm (‚Ñï-ins t~u) u‚â°v =
    case inv-[conv‚Üì]‚à∑-‚Ñï u‚â°v of Œª where
      (inj‚ÇÅ u~v) ‚Üí
        ‚Ñï-ins (trans~‚Üì t~u u~v .proj‚ÇÅ)
      (inj‚ÇÇ (inj‚ÇÅ (PE.refl , _))) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-zero $ ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÇ
      (inj‚ÇÇ (inj‚ÇÇ (_ , _ , PE.refl , _))) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-suc $ ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÇ
  transConv‚ÜìTerm (zero-refl _) u‚â°v =
    case inv-[conv‚Üì]‚à∑-‚Ñï u‚â°v of Œª where
      (inj‚ÇÅ u~v) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-zero $ ne~‚Üì u~v .proj‚ÇÇ .proj‚ÇÅ
      (inj‚ÇÇ (inj‚ÇÅ (_ , PE.refl))) ‚Üí
        u‚â°v
      (inj‚ÇÇ (inj‚ÇÇ (_ , _ , () , _)))
  transConv‚ÜìTerm (suc-cong t‚â°u) u‚â°v =
    case inv-[conv‚Üì]‚à∑-‚Ñï u‚â°v of Œª where
      (inj‚ÇÅ u~v) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-suc $ ne~‚Üì u~v .proj‚ÇÇ .proj‚ÇÅ
      (inj‚ÇÇ (inj‚ÇÅ (() , _)))
      (inj‚ÇÇ (inj‚ÇÇ (_ , _ , PE.refl , PE.refl , u‚â°v))) ‚Üí
        suc-cong (transConvTerm t‚â°u u‚â°v)
  transConv‚ÜìTerm (Id-ins ‚ä¢t t~u) u‚â°v =
    case inv-[conv‚Üì]‚à∑-Id u‚â°v of Œª where
      (inj‚ÇÅ (_ , _ , _ , u~v)) ‚Üí
        Id-ins ‚ä¢t (trans~‚Üì t~u u~v .proj‚ÇÅ)
      (inj‚ÇÇ (PE.refl , _)) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-rfl $ ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÇ
  transConv‚ÜìTerm t‚â°u@(rfl-refl _) u‚â°v =
    case inv-[conv‚Üì]‚à∑-Id u‚â°v of Œª where
      (inj‚ÇÅ (_ , _ , _ , u~v)) ‚Üí
        ‚ä•-elim $ ¬¨-Neutral-rfl $ ne~‚Üì u~v .proj‚ÇÇ .proj‚ÇÅ
      (inj‚ÇÇ (_ , PE.refl , _)) ‚Üí
        t‚â°u

  -- Transitivity of _‚ä¢_[conv‚Üë]_‚à∑_.
  transConvTerm :
    Œì ‚ä¢ t [conv‚Üë] u ‚à∑ A ‚Üí
    Œì ‚ä¢ u [conv‚Üë] v ‚à∑ A ‚Üí
    Œì ‚ä¢ t [conv‚Üë] v ‚à∑ A
  transConvTerm t<>u u<>v =
    let t‚â°u = soundnessConv‚ÜëTerm t<>u
        ‚ä¢A , _ , _ = syntacticEqTerm t‚â°u
    in  transConv‚ÜëTerm (refl ‚ä¢A) t<>u u<>v

-- Transitivity of algorithmic equality of types of the same context.
transConv : ‚àÄ {A B C}
          ‚Üí Œì ‚ä¢ A [conv‚Üë] B
          ‚Üí Œì ‚ä¢ B [conv‚Üë] C
          ‚Üí Œì ‚ä¢ A [conv‚Üë] C
transConv A<>B B<>C = transConv‚Üë A<>B B<>C
