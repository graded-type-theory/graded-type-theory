------------------------------------------------------------------------
-- Every well-typed term has an Œ∑-long normal form
------------------------------------------------------------------------

open import Definition.Typed.Restrictions
open import Graded.Modality

module Definition.Conversion.FullReduction
  {a} {M : Set a}
  {ùïÑ : Modality M}
  (R : Type-restrictions ùïÑ)
  where

open Type-restrictions R

open import Definition.Conversion R
open import Definition.Conversion.Consequences.Completeness R
open import Definition.Conversion.Soundness R
open import Definition.Conversion.Whnf R
open import Definition.Typed R
open import Definition.Typed.Consequences.DerivedRules R
open import Definition.Typed.Consequences.InverseUniv R
open import Definition.Typed.Consequences.Inversion R
open import Definition.Typed.Consequences.NeTypeEq R
open import Definition.Typed.Consequences.Stability R
open import Definition.Typed.Consequences.Substitution R
open import Definition.Typed.Consequences.Syntactic R
open import Definition.Typed.Eta-long-normal-form R
open import Definition.Typed.Properties R
open import Definition.Untyped M

open import Graded.Derived.Erased.Typed R

open import Tools.Fin
open import Tools.Function
open import Tools.Product
import Tools.PropositionalEquality as PE

private variable
  Œì    : Con Term _
  A A‚Ä≤ : Term _
  t t‚Ä≤ : Term _

mutual

  -- Some lemmas used to prove the main theorems below.

  fullRedNe :
    Œì ‚ä¢ t ~ t‚Ä≤ ‚Üë A ‚Üí
    ‚àÉ Œª u ‚Üí Œì ‚ä¢ne u ‚à∑ A √ó Œì ‚ä¢ t ‚â° u ‚à∑ A
  fullRedNe {Œì = Œì} = Œª where
    (var-refl {x = x} ‚ä¢x _) ‚Üí
      case inversion-var ‚ä¢x of Œª {
        (_ , x‚àà , A‚â°B) ‚Üí
        var x
      , conv‚Çô (var‚Çô (wfEq A‚â°B) x‚àà) (sym A‚â°B)
      , refl ‚ä¢x }
    (app-cong {G = B} {t = u} t~ u‚Üë) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (t‚Ä≤ , t‚Ä≤-ne , t‚â°t‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚Üë of Œª {
        (u‚Ä≤ , u‚Ä≤-nf , u‚â°u‚Ä≤) ‚Üí
      case inversion-Œ†Œ£ (syntacticEqTerm t‚â°t‚Ä≤ .proj‚ÇÅ) of Œª {
        (_ , ‚ä¢B , _) ‚Üí
        t‚Ä≤ ‚àò u‚Ä≤
      , (                           $‚ü® ‚àò‚Çô t‚Ä≤-ne u‚Ä≤-nf ‚ü©
         Œì ‚ä¢ne t‚Ä≤ ‚àò u‚Ä≤ ‚à∑ B [ u‚Ä≤ ]‚ÇÄ  ‚Üí‚ü® flip conv‚Çô $
                                      substTypeEq (refl ‚ä¢B) (sym u‚â°u‚Ä≤) ‚ü©
         Œì ‚ä¢ne t‚Ä≤ ‚àò u‚Ä≤ ‚à∑ B [ u ]‚ÇÄ   ‚ñ°)
      , app-cong t‚â°t‚Ä≤ u‚â°u‚Ä≤ }}}
    (fst-cong {p = p} t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (t‚Ä≤ , t‚Ä≤-ne , t‚â°t‚Ä≤) ‚Üí
      case inversion-Œ†Œ£ (syntacticEqTerm t‚â°t‚Ä≤ .proj‚ÇÅ) of Œª {
        (‚ä¢A , ‚ä¢B , _) ‚Üí
        fst p t‚Ä≤
      , fst‚Çô ‚ä¢A ‚ä¢B t‚Ä≤-ne
      , fst-cong ‚ä¢A ‚ä¢B t‚â°t‚Ä≤ }}
    (snd-cong {k = t} {p = p} {G = B} t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (t‚Ä≤ , t‚Ä≤-ne , t‚â°t‚Ä≤) ‚Üí
      case inversion-Œ†Œ£ (syntacticEqTerm t‚â°t‚Ä≤ .proj‚ÇÅ) of Œª {
        (‚ä¢A , ‚ä¢B , _) ‚Üí
        snd p t‚Ä≤
      , (                                  $‚ü® snd‚Çô ‚ä¢A ‚ä¢B t‚Ä≤-ne ‚ü©
         Œì ‚ä¢ne snd p t‚Ä≤ ‚à∑ B [ fst p t‚Ä≤ ]‚ÇÄ  ‚Üí‚ü® flip _‚ä¢ne_‚à∑_.conv‚Çô $
                                             substTypeEq (refl ‚ä¢B) (fst-cong ‚ä¢A ‚ä¢B (sym t‚â°t‚Ä≤)) ‚ü©
         Œì ‚ä¢ne snd p t‚Ä≤ ‚à∑ B [ fst p t ]‚ÇÄ   ‚ñ°)
      , snd-cong ‚ä¢A ‚ä¢B t‚â°t‚Ä≤ }}
    (natrec-cong {F = A} {k = v} {p = p} {q = q} {r = r} A‚Üë t‚Üë u‚Üë v~) ‚Üí
      case fullRedConv‚Üë A‚Üë of Œª {
        (A‚Ä≤ , A‚Ä≤-nf , A‚â°A‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë t‚Üë of Œª {
        (t‚Ä≤ , t‚Ä≤-nf , t‚â°t‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚Üë of Œª {
        (u‚Ä≤ , u‚Ä≤-nf , u‚â°u‚Ä≤) ‚Üí
      case fullRedNe~‚Üì v~ of Œª {
        (v‚Ä≤ , v‚Ä≤-ne , v‚â°v‚Ä≤) ‚Üí
      case syntacticEq A‚â°A‚Ä≤ of Œª {
        (‚ä¢A , ‚ä¢A‚Ä≤) ‚Üí
      case wfEqTerm v‚â°v‚Ä≤ of Œª {
        ‚ä¢Œì ‚Üí
        natrec p q r A‚Ä≤ t‚Ä≤ u‚Ä≤ v‚Ä≤
      , (                                             $‚ü® u‚Ä≤-nf ‚ü©
         Œì ‚àô ‚Ñï ‚àô A ‚ä¢nf u‚Ä≤ ‚à∑ A [ suc (var x1) ]‚Üë¬≤      ‚Üí‚ü® ‚ä¢nf‚à∑-stable (reflConEq (‚ä¢Œì ‚àô ‚Ñï‚±º ‚ä¢Œì) ‚àô A‚â°A‚Ä≤) ‚ü©
         Œì ‚àô ‚Ñï ‚àô A‚Ä≤ ‚ä¢nf u‚Ä≤ ‚à∑ A [ suc (var x1) ]‚Üë¬≤     ‚Üí‚ü® flip _‚ä¢nf_‚à∑_.conv‚Çô $
                                                         subst‚Üë¬≤TypeEq (‚Ñï‚±º ‚ä¢Œì) ‚ä¢A‚Ä≤ A‚â°A‚Ä≤ (refl (suc‚±º (var‚ÇÅ ‚ä¢A‚Ä≤))) ‚ü©
         Œì ‚àô ‚Ñï ‚àô A‚Ä≤ ‚ä¢nf u‚Ä≤ ‚à∑ A‚Ä≤ [ suc (var x1) ]‚Üë¬≤    ‚Üí‚ü® (Œª hyp ‚Üí natrec‚Çô
                                                            A‚Ä≤-nf
                                                            (conv‚Çô t‚Ä≤-nf (substTypeEq A‚â°A‚Ä≤ (refl (zero‚±º ‚ä¢Œì))))
                                                            hyp
                                                            v‚Ä≤-ne) ‚ü©
         Œì ‚ä¢ne natrec p q r A‚Ä≤ t‚Ä≤ u‚Ä≤ v‚Ä≤ ‚à∑ A‚Ä≤ [ v‚Ä≤ ]‚ÇÄ  ‚Üí‚ü® flip _‚ä¢ne_‚à∑_.conv‚Çô $ _‚ä¢_‚â°_.sym $
                                                         substTypeEq A‚â°A‚Ä≤ v‚â°v‚Ä≤ ‚ü©
         Œì ‚ä¢ne natrec p q r A‚Ä≤ t‚Ä≤ u‚Ä≤ v‚Ä≤ ‚à∑ A [ v ]‚ÇÄ    ‚ñ°)
      , natrec-cong ‚ä¢A A‚â°A‚Ä≤ t‚â°t‚Ä≤ u‚â°u‚Ä≤ v‚â°v‚Ä≤ }}}}}}
    (prodrec-cong
       {p = p} {F = A} {G = B} {C = C} {g = u} {r = r} {q‚Ä≤ = q}
       C‚Üë u~ v‚Üë) ‚Üí
      case fullRedConv‚Üë C‚Üë of Œª {
        (C‚Ä≤ , C‚Ä≤-nf , C‚â°C‚Ä≤) ‚Üí
      case fullRedNe~‚Üì u~ of Œª {
        (u‚Ä≤ , u‚Ä≤-ne , u‚â°u‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë v‚Üë of Œª {
        (v‚Ä≤ , v‚Ä≤-nf , v‚â°v‚Ä≤) ‚Üí
      case inversion-Œ†Œ£ (syntacticEqTerm u‚â°u‚Ä≤ .proj‚ÇÅ) of Œª {
        (‚ä¢A , ‚ä¢B , ok) ‚Üí
        prodrec r p q C‚Ä≤ u‚Ä≤ v‚Ä≤
      , (                                                       $‚ü® v‚Ä≤-nf ‚ü©
         Œì ‚àô A ‚àô B ‚ä¢nf v‚Ä≤ ‚à∑ C [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤   ‚Üí‚ü® flip _‚ä¢nf_‚à∑_.conv‚Çô $
                                                                   subst‚Üë¬≤TypeEq-prod C‚â°C‚Ä≤ ok ‚ü©
         Œì ‚àô A ‚àô B ‚ä¢nf v‚Ä≤ ‚à∑ C‚Ä≤ [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤  ‚Üí‚ü® flip (prodrec‚Çô ‚ä¢A ‚ä¢B C‚Ä≤-nf u‚Ä≤-ne) ok ‚ü©
         Œì ‚ä¢ne prodrec r p q C‚Ä≤ u‚Ä≤ v‚Ä≤ ‚à∑ C‚Ä≤ [ u‚Ä≤ ]‚ÇÄ              ‚Üí‚ü® flip _‚ä¢ne_‚à∑_.conv‚Çô $ _‚ä¢_‚â°_.sym $
                                                                   substTypeEq C‚â°C‚Ä≤ u‚â°u‚Ä≤ ‚ü©
         Œì ‚ä¢ne prodrec r p q C‚Ä≤ u‚Ä≤ v‚Ä≤ ‚à∑ C [ u ]‚ÇÄ                ‚ñ°)
      , prodrec-cong ‚ä¢A ‚ä¢B C‚â°C‚Ä≤ u‚â°u‚Ä≤ v‚â°v‚Ä≤ ok }}}}
    (emptyrec-cong {F = A} {p = p} A‚Üë t~) ‚Üí
      case fullRedConv‚Üë A‚Üë of Œª {
        (A‚Ä≤ , A‚Ä≤-nf , A‚â°A‚Ä≤) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (t‚Ä≤ , t‚Ä≤-ne , t‚â°t‚Ä≤) ‚Üí
        emptyrec p A‚Ä≤ t‚Ä≤
      , (                             $‚ü® emptyrec‚Çô A‚Ä≤-nf t‚Ä≤-ne ‚ü©
         Œì ‚ä¢ne emptyrec p A‚Ä≤ t‚Ä≤ ‚à∑ A‚Ä≤  ‚Üí‚ü® flip _‚ä¢ne_‚à∑_.conv‚Çô (sym A‚â°A‚Ä≤) ‚ü©
         Œì ‚ä¢ne emptyrec p A‚Ä≤ t‚Ä≤ ‚à∑ A   ‚ñ°)
      , emptyrec-cong A‚â°A‚Ä≤ t‚â°t‚Ä≤ }}
    (unitrec-cong {F = A} {k = t} A‚Üë t~ u‚Üë) ‚Üí
      case fullRedConv‚Üë A‚Üë of Œª {
        (A‚Ä≤ , A‚Ä≤-nf , A‚â°A‚Ä≤) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (t‚Ä≤ , t‚Ä≤-ne , t‚â°t‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚Üë of Œª {
        (u‚Ä≤ , u‚Ä≤-nf , u‚â°u‚Ä≤) ‚Üí
      case inversion-Unit (syntacticEqTerm t‚â°t‚Ä≤ .proj‚ÇÅ) of Œª {
        ok ‚Üí
        unitrec _ _ A‚Ä≤ t‚Ä≤ u‚Ä≤
      , ( $‚ü® u‚Ä≤-nf ‚ü©
         Œì ‚ä¢nf u‚Ä≤ ‚à∑ A [ star ∑ ]‚ÇÄ                  ‚Üí‚ü® flip _‚ä¢nf_‚à∑_.conv‚Çô $
                                                 substTypeEq A‚â°A‚Ä≤ (refl (star‚±º (wfEqTerm t‚â°t‚Ä≤) ok)) ‚ü©
         Œì ‚ä¢nf u‚Ä≤ ‚à∑ A‚Ä≤ [ star ∑ ]‚ÇÄ                 ‚Üí‚ü® flip (unitrec‚Çô A‚Ä≤-nf t‚Ä≤-ne) ok ‚ü©
         Œì ‚ä¢ne unitrec _ _ A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚à∑ A‚Ä≤ [ t‚Ä≤ ]‚ÇÄ  ‚Üí‚ü® flip _‚ä¢ne_‚à∑_.conv‚Çô $ _‚ä¢_‚â°_.sym $
                                                 substTypeEq A‚â°A‚Ä≤ t‚â°t‚Ä≤ ‚ü©
         Œì ‚ä¢ne unitrec _ _ A‚Ä≤ t‚Ä≤ u‚Ä≤ ‚à∑ A [ t ]‚ÇÄ    ‚ñ°)
      , unitrec-cong A‚â°A‚Ä≤ t‚â°t‚Ä≤ u‚â°u‚Ä≤ ok  }}}}
    (J-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ‚â°v‚ÇÇ w‚ÇÅ~w‚ÇÇ C‚â°Id-t‚ÇÅ-v‚ÇÅ) ‚Üí
      case fullRedConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
        (A‚ÇÅ‚Ä≤ , ‚ä¢A‚ÇÅ‚Ä≤ , A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë t‚ÇÅ‚â°t‚ÇÇ of Œª {
        (t‚ÇÅ‚Ä≤ , ‚ä¢t‚ÇÅ‚Ä≤ , t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚Üí
      case fullRedConv‚Üë B‚ÇÅ‚â°B‚ÇÇ of Œª {
        (B‚ÇÅ‚Ä≤ , ‚ä¢B‚ÇÅ‚Ä≤ , B‚ÇÅ‚â°B‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚ÇÅ‚â°u‚ÇÇ of Œª {
        (u‚ÇÅ‚Ä≤ , ‚ä¢u‚ÇÅ‚Ä≤ , u‚ÇÅ‚â°u‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë v‚ÇÅ‚â°v‚ÇÇ of Œª {
        (v‚ÇÅ‚Ä≤ , ‚ä¢v‚ÇÅ‚Ä≤ , v‚ÇÅ‚â°v‚ÇÅ‚Ä≤) ‚Üí
      case fullRedNe~‚Üì w‚ÇÅ~w‚ÇÇ of Œª {
        (w‚ÇÅ‚Ä≤ , ‚ä¢w‚ÇÅ‚Ä≤ , w‚ÇÅ‚â°w‚ÇÅ‚Ä≤) ‚Üí
      case conv w‚ÇÅ‚â°w‚ÇÅ‚Ä≤ C‚â°Id-t‚ÇÅ-v‚ÇÅ of Œª {
        w‚ÇÅ‚â°w‚ÇÅ‚Ä≤ ‚Üí
        J _ _ A‚ÇÅ‚Ä≤ t‚ÇÅ‚Ä≤ B‚ÇÅ‚Ä≤ u‚ÇÅ‚Ä≤ v‚ÇÅ‚Ä≤ w‚ÇÅ‚Ä≤
      , conv‚Çô
          (J‚Çô ‚ä¢A‚ÇÅ‚Ä≤ (conv‚Çô ‚ä¢t‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
             (‚ä¢nf-stable (J-motive-context-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚ä¢B‚ÇÅ‚Ä≤)
             (conv‚Çô ‚ä¢u‚ÇÅ‚Ä≤ (J-motive-rfl-cong B‚ÇÅ‚â°B‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤))
             (conv‚Çô ‚ä¢v‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
             (conv‚Çô ‚ä¢w‚ÇÅ‚Ä≤
                (trans C‚â°Id-t‚ÇÅ-v‚ÇÅ (Id-cong A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤))))
          (sym (J-result-cong B‚ÇÅ‚â°B‚ÇÅ‚Ä≤ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ w‚ÇÅ‚â°w‚ÇÅ‚Ä≤))
      , J-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ B‚ÇÅ‚â°B‚ÇÅ‚Ä≤ u‚ÇÅ‚â°u‚ÇÅ‚Ä≤ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ w‚ÇÅ‚â°w‚ÇÅ‚Ä≤ }}}}}}}
    (K-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ B‚ÇÅ‚â°B‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ~v‚ÇÇ C‚â°Id-t‚ÇÅ-t‚ÇÅ ok) ‚Üí
      case fullRedConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
        (A‚ÇÅ‚Ä≤ , ‚ä¢A‚ÇÅ‚Ä≤ , A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë t‚ÇÅ‚â°t‚ÇÇ of Œª {
        (t‚ÇÅ‚Ä≤ , ‚ä¢t‚ÇÅ‚Ä≤ , t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚Üí
      case fullRedConv‚Üë B‚ÇÅ‚â°B‚ÇÇ of Œª {
        (B‚ÇÅ‚Ä≤ , ‚ä¢B‚ÇÅ‚Ä≤ , B‚ÇÅ‚â°B‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚ÇÅ‚â°u‚ÇÇ of Œª {
        (u‚ÇÅ‚Ä≤ , ‚ä¢u‚ÇÅ‚Ä≤ , u‚ÇÅ‚â°u‚ÇÅ‚Ä≤) ‚Üí
      case fullRedNe~‚Üì v‚ÇÅ~v‚ÇÇ of Œª {
        (v‚ÇÅ‚Ä≤ , ‚ä¢v‚ÇÅ‚Ä≤ , v‚ÇÅ‚â°v‚ÇÅ‚Ä≤) ‚Üí
      case conv v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ C‚â°Id-t‚ÇÅ-t‚ÇÅ of Œª {
        v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ ‚Üí
        K _ A‚ÇÅ‚Ä≤ t‚ÇÅ‚Ä≤ B‚ÇÅ‚Ä≤ u‚ÇÅ‚Ä≤ v‚ÇÅ‚Ä≤
      , conv‚Çô
          (K‚Çô ‚ä¢A‚ÇÅ‚Ä≤ (conv‚Çô ‚ä¢t‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
             (‚ä¢nf-stable (K-motive-context-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚ä¢B‚ÇÅ‚Ä≤)
             (conv‚Çô ‚ä¢u‚ÇÅ‚Ä≤ (K-motive-rfl-cong B‚ÇÅ‚â°B‚ÇÅ‚Ä≤))
             (conv‚Çô ‚ä¢v‚ÇÅ‚Ä≤
                (trans C‚â°Id-t‚ÇÅ-t‚ÇÅ (Id-cong A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤)))
             ok)
          (sym (substTypeEq B‚ÇÅ‚â°B‚ÇÅ‚Ä≤ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤))
      , K-cong‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ B‚ÇÅ‚â°B‚ÇÅ‚Ä≤ u‚ÇÅ‚â°u‚ÇÅ‚Ä≤ v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ ok }}}}}}
    ([]-cong-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ v‚ÇÅ~v‚ÇÇ B‚â°Id-t‚ÇÅ-u‚ÇÅ ok) ‚Üí
      case fullRedConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
        (A‚ÇÅ‚Ä≤ , ‚ä¢A‚ÇÅ‚Ä≤ , A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë t‚ÇÅ‚â°t‚ÇÇ of Œª {
        (t‚ÇÅ‚Ä≤ , ‚ä¢t‚ÇÅ‚Ä≤ , t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚ÇÅ‚â°u‚ÇÇ of Œª {
        (u‚ÇÅ‚Ä≤ , ‚ä¢u‚ÇÅ‚Ä≤ , u‚ÇÅ‚â°u‚ÇÅ‚Ä≤) ‚Üí
      case fullRedNe~‚Üì v‚ÇÅ~v‚ÇÇ of Œª {
        (v‚ÇÅ‚Ä≤ , ‚ä¢v‚ÇÅ‚Ä≤ , v‚ÇÅ‚â°v‚ÇÅ‚Ä≤) ‚Üí
      case []-cong‚ÜíErased ok of Œª {
        Erased-ok ‚Üí
        []-cong _ A‚ÇÅ‚Ä≤ t‚ÇÅ‚Ä≤ u‚ÇÅ‚Ä≤ v‚ÇÅ‚Ä≤
      , conv‚Çô
          ([]-cong‚Çô ‚ä¢A‚ÇÅ‚Ä≤ (conv‚Çô ‚ä¢t‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) (conv‚Çô ‚ä¢u‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
             (conv‚Çô ‚ä¢v‚ÇÅ‚Ä≤
                (trans B‚â°Id-t‚ÇÅ-u‚ÇÅ (Id-cong A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ u‚ÇÅ‚â°u‚ÇÅ‚Ä≤)))
             ok)
          (_‚ä¢_‚â°_.sym $
           Id-cong (Erased-cong Erased-ok A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
             ([]-cong‚Ä≤ Erased-ok t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ([]-cong‚Ä≤ Erased-ok u‚ÇÅ‚â°u‚ÇÅ‚Ä≤))
      , []-cong-cong A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ u‚ÇÅ‚â°u‚ÇÅ‚Ä≤ (conv v‚ÇÅ‚â°v‚ÇÅ‚Ä≤ B‚â°Id-t‚ÇÅ-u‚ÇÅ)
          ok }}}}}

  fullRedNe~‚Üì :
    Œì ‚ä¢ t ~ t‚Ä≤ ‚Üì A ‚Üí
    ‚àÉ Œª u ‚Üí Œì ‚ä¢ne u ‚à∑ A √ó Œì ‚ä¢ t ‚â° u ‚à∑ A
  fullRedNe~‚Üì ([~] A D whnfB k~l) =
    let u , A-ne , t‚â°u = fullRedNe k~l
    in  u , conv‚Çô A-ne A‚â° , conv t‚â°u A‚â°
    where
    A‚â° = subset* D

  fullRedConv‚Üë :
    Œì ‚ä¢ A [conv‚Üë] A‚Ä≤ ‚Üí
    ‚àÉ Œª B ‚Üí Œì ‚ä¢nf B √ó Œì ‚ä¢ A ‚â° B
  fullRedConv‚Üë ([‚Üë] A‚Ä≤ B‚Ä≤ D D‚Ä≤ whnfA‚Ä≤ whnfB‚Ä≤ A‚Ä≤<>B‚Ä≤) =
    let B‚Ä≥ , nf , B‚Ä≤‚â°B‚Ä≥ = fullRedConv‚Üì A‚Ä≤<>B‚Ä≤
    in  B‚Ä≥ , nf , trans (subset* D) B‚Ä≤‚â°B‚Ä≥

  fullRedConv‚Üì :
    Œì ‚ä¢ A [conv‚Üì] A‚Ä≤ ‚Üí
    ‚àÉ Œª B ‚Üí Œì ‚ä¢nf B √ó Œì ‚ä¢ A ‚â° B
  fullRedConv‚Üì = Œª where
    (U-refl     ‚ä¢Œì)    ‚Üí U     , U‚Çô     ‚ä¢Œì , refl (U‚±º     ‚ä¢Œì)
    (‚Ñï-refl     ‚ä¢Œì)    ‚Üí ‚Ñï     , ‚Ñï‚Çô     ‚ä¢Œì , refl (‚Ñï‚±º     ‚ä¢Œì)
    (Empty-refl ‚ä¢Œì)    ‚Üí Empty , Empty‚Çô ‚ä¢Œì , refl (Empty‚±º ‚ä¢Œì)
    (Unit-refl  ‚ä¢Œì ok) ‚Üí
      Unit! , Unit‚Çô ‚ä¢Œì ok , refl (Unit‚±º ‚ä¢Œì ok)
    (ne A~) ‚Üí
      case fullRedNe~‚Üì A~ of Œª {
        (B , B-ne , A‚â°B) ‚Üí
      B , univ‚Çô (ne‚Çô U‚Çô B-ne) , univ A‚â°B }
    (Œ†Œ£-cong ‚ä¢A A‚Üë B‚Üë ok) ‚Üí
      case fullRedConv‚Üë A‚Üë of Œª {
        (A‚Ä≤ , A‚Ä≤-nf , A‚â°A‚Ä≤) ‚Üí
      case fullRedConv‚Üë B‚Üë of Œª {
        (B‚Ä≤ , B‚Ä≤-nf , B‚â°B‚Ä≤) ‚Üí
      Œ†Œ£‚ü® _ ‚ü© _ , _ ‚ñ∑ A‚Ä≤ ‚ñπ B‚Ä≤ ,
      Œ†Œ£‚Çô A‚Ä≤-nf (‚ä¢nf-stable (reflConEq (wfEq A‚â°A‚Ä≤) ‚àô A‚â°A‚Ä≤) B‚Ä≤-nf) ok ,
      Œ†Œ£-cong ‚ä¢A A‚â°A‚Ä≤ B‚â°B‚Ä≤ ok }}
    (Id-cong A‚ÇÅ‚â°A‚ÇÇ t‚ÇÅ‚â°t‚ÇÇ u‚ÇÅ‚â°u‚ÇÇ) ‚Üí
      case fullRedConv‚Üë A‚ÇÅ‚â°A‚ÇÇ of Œª {
        (A‚ÇÅ‚Ä≤ , ‚ä¢A‚ÇÅ‚Ä≤ , A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë t‚ÇÅ‚â°t‚ÇÇ of Œª {
        (t‚ÇÅ‚Ä≤ , ‚ä¢t‚ÇÅ‚Ä≤ , t‚ÇÅ‚â°t‚ÇÅ‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚ÇÅ‚â°u‚ÇÇ of Œª {
        (u‚ÇÅ‚Ä≤ , ‚ä¢u‚ÇÅ‚Ä≤ , u‚ÇÅ‚â°u‚ÇÅ‚Ä≤) ‚Üí
        Id A‚ÇÅ‚Ä≤ t‚ÇÅ‚Ä≤ u‚ÇÅ‚Ä≤
      , Id‚Çô ‚ä¢A‚ÇÅ‚Ä≤ (conv‚Çô ‚ä¢t‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤) (conv‚Çô ‚ä¢u‚ÇÅ‚Ä≤ A‚ÇÅ‚â°A‚ÇÅ‚Ä≤)
      , Id-cong A‚ÇÅ‚â°A‚ÇÅ‚Ä≤ t‚ÇÅ‚â°t‚ÇÅ‚Ä≤ u‚ÇÅ‚â°u‚ÇÅ‚Ä≤ }}}

  fullRedTermConv‚Üë :
    Œì ‚ä¢ t [conv‚Üë] t‚Ä≤ ‚à∑ A ‚Üí
    ‚àÉ Œª u ‚Üí Œì ‚ä¢nf u ‚à∑ A √ó Œì ‚ä¢ t ‚â° u ‚à∑ A
  fullRedTermConv‚Üë
    ([‚Üë]‚Çú B t‚Ä≤ u‚Ä≤ D d d‚Ä≤ whnfB whnft‚Ä≤ whnfu‚Ä≤ t<>u) =
    case fullRedTermConv‚Üì t<>u of Œª {
      (u‚Ä≥ , nf , u‚Ä≤‚â°u‚Ä≥) ‚Üí
    u‚Ä≥ ,
    conv‚Çô nf B‚â°A ,
    conv (trans (subset*Term d) u‚Ä≤‚â°u‚Ä≥) B‚â°A }
    where
    B‚â°A = sym (subset* D)

  fullRedTermConv‚Üì :
    Œì ‚ä¢ t [conv‚Üì] t‚Ä≤ ‚à∑ A ‚Üí
    ‚àÉ Œª u ‚Üí Œì ‚ä¢nf u ‚à∑ A √ó Œì ‚ä¢ t ‚â° u ‚à∑ A
  fullRedTermConv‚Üì {Œì = Œì} {t = t} = Œª where
    (‚Ñï-ins t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (u , u-nf , t‚â°u) ‚Üí
      u , ne‚Çô ‚Ñï‚Çô u-nf , t‚â°u }
    (Empty-ins t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (u , u-nf , t‚â°u) ‚Üí
      u , ne‚Çô Empty‚Çô u-nf , t‚â°u }
    (Unit-ins {s = ùï§} t~) ‚Üí
      case syntacticEqTerm (soundness~‚Üì t~) of Œª {
        (Œì‚ä¢ , ‚ä¢t , _) ‚Üí
      case wf Œì‚ä¢ of Œª {
        ‚ä¢Œì ‚Üí
      case ‚ä¢‚à∑Unit‚ÜíUnit-allowed ‚ä¢t of Œª {
        ok ‚Üí
        starÀ¢
      , star‚Çô ‚ä¢Œì ok
      , Œ∑-unit ‚ä¢t (star‚±º ‚ä¢Œì ok) }}}
    (Unit-ins {s = ùï®} t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (u , u-nf , t‚â°u) ‚Üí
      u , ne‚Çô Unit ∑‚Çô u-nf , t‚â°u }
    (Œ£ ∑-ins ‚ä¢t‚à∑Œ£AB _ t~) ‚Üí
      case fullRedNe~‚Üì t~ of Œª {
        (v , v-ne , t‚â°v) ‚Üí
      case syntacticEqTerm t‚â°v of Œª {
        (_ , ‚ä¢t‚à∑Œ£CD , _) ‚Üí
      case ne~‚Üì t~ of Œª {
        (_ , t-ne , _) ‚Üí
      case neTypeEq t-ne ‚ä¢t‚à∑Œ£CD ‚ä¢t‚à∑Œ£AB of Œª {
        Œ£CD‚â°Œ£AB ‚Üí
      case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t‚à∑Œ£AB) of Œª {
        (‚ä¢A , ‚ä¢B) ‚Üí
        v
      , ne‚Çô Œ£ ∑‚Çô (conv‚Çô v-ne Œ£CD‚â°Œ£AB)
      , conv t‚â°v Œ£CD‚â°Œ£AB }}}}}
    (ne-ins ‚ä¢t‚à∑A _ A-ne t~‚ÜìB) ‚Üí
      case fullRedNe~‚Üì t~‚ÜìB of Œª {
        (u , u-ne , t‚â°u‚à∑B) ‚Üí
      case syntacticEqTerm t‚â°u‚à∑B of Œª {
        (_ , ‚ä¢t‚à∑B , _) ‚Üí
      case ne~‚Üì t~‚ÜìB of Œª {
        (_ , t-ne , _) ‚Üí
      case neTypeEq t-ne ‚ä¢t‚à∑B ‚ä¢t‚à∑A of Œª {
        B‚â°A ‚Üí
        u
      , ne‚Çô (ne‚Çô A-ne) (conv‚Çô u-ne B‚â°A)
      , conv t‚â°u‚à∑B B‚â°A }}}}
    (univ {A = A} ‚ä¢A _ A‚Üì) ‚Üí
      case fullRedConv‚Üì A‚Üì of Œª {
        (B , B-nf , A‚â°B) ‚Üí
        B
      , (               $‚ü® A‚â°B ‚ü©
         (Œì ‚ä¢ A ‚â° B)    ‚Üí‚ü® inverseUnivEq ‚ä¢A ‚ü©
         Œì ‚ä¢ A ‚â° B ‚à∑ U  ‚Üí‚ü® (Œª hyp ‚Üí syntacticEqTerm hyp .proj‚ÇÇ .proj‚ÇÇ) ‚ü©
         Œì ‚ä¢ B ‚à∑ U      ‚Üí‚ü® ‚ä¢nf‚à∑U‚Üí‚ä¢nf‚à∑U B-nf ‚ü©
         Œì ‚ä¢nf B ‚à∑ U    ‚ñ°)
      , inverseUnivEq ‚ä¢A A‚â°B }
    (zero-refl ‚ä¢Œì) ‚Üí
      zero , zero‚Çô ‚ä¢Œì , refl (zero‚±º ‚ä¢Œì)
    (star ∑-refl ‚ä¢Œì ok) ‚Üí
      star ∑ , star‚Çô ‚ä¢Œì ok , refl (star‚±º ‚ä¢Œì ok)
    (suc-cong t‚Üë) ‚Üí
      case fullRedTermConv‚Üë t‚Üë of Œª {
        (u , u-nf , t‚â°u) ‚Üí
      suc u , suc‚Çô u-nf , suc-cong t‚â°u }
    (prod-cong {p = p} {q = q} {F = A} {G = B} {t = t} ‚ä¢A ‚ä¢B t‚Üë u‚Üë ok) ‚Üí
      case fullRedTermConv‚Üë t‚Üë of Œª {
        (t‚Ä≤ , t‚Ä≤-nf , t‚â°t‚Ä≤) ‚Üí
      case fullRedTermConv‚Üë u‚Üë of Œª {
        (u‚Ä≤ , u‚Ä≤-nf , u‚â°u‚Ä≤) ‚Üí
        prod! t‚Ä≤ u‚Ä≤
      , (                                      $‚ü® u‚Ä≤-nf ‚ü©
         Œì ‚ä¢nf u‚Ä≤ ‚à∑ B [ t ]‚ÇÄ                   ‚Üí‚ü® flip _‚ä¢nf_‚à∑_.conv‚Çô $
                                                  substTypeEq (refl ‚ä¢B) t‚â°t‚Ä≤ ‚ü©
         Œì ‚ä¢nf u‚Ä≤ ‚à∑ B [ t‚Ä≤ ]‚ÇÄ                  ‚Üí‚ü® flip (_‚ä¢nf_‚à∑_.prod‚Çô ‚ä¢A ‚ä¢B t‚Ä≤-nf) ok ‚ü©
         Œì ‚ä¢nf prod! t‚Ä≤ u‚Ä≤ ‚à∑ Œ£ ∑ p , q ‚ñ∑ A ‚ñπ B  ‚ñ°)
      , prod-cong ‚ä¢A ‚ä¢B t‚â°t‚Ä≤ u‚â°u‚Ä≤ ok }}
    (Œ∑-eq {p = p} {q = q} {f = t} {F = A} {G = B} ‚ä¢t _ _ _ t0‚â°u0) ‚Üí
      case fullRedTermConv‚Üë t0‚â°u0 of Œª {
        (u , u-nf , t0‚â°u) ‚Üí
      case ‚ä¢‚à∑Œ†Œ£‚ÜíŒ†Œ£-allowed ‚ä¢t of Œª {
        ok ‚Üí
        lam p u
      , lam‚Çô (inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) .proj‚ÇÅ) u-nf ok
      , (                                                       $‚ü® sym (Œ†-Œ∑ ‚ä¢t) ‚ü©
         Œì ‚ä¢ t ‚â° lam p (wk1 t ‚àò‚ü® p ‚ü© var x0) ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B  ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.trans (lam-cong t0‚â°u ok) ‚ü©
         Œì ‚ä¢ t ‚â° lam p u ‚à∑ Œ† p , q ‚ñ∑ A ‚ñπ B                      ‚ñ°) }}
    (Œ£-Œ∑ {p = p} {q = q} {F = A} {G = B} ‚ä¢t _ _ _ fst-t‚Üë snd-t‚Üë) ‚Üí
      case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª {
        (‚ä¢A , ‚ä¢B , ok) ‚Üí
      case fullRedTermConv‚Üë fst-t‚Üë of Œª {
        (u‚ÇÅ , u‚ÇÅ-nf , fst-t‚â°u‚ÇÅ) ‚Üí
      case fullRedTermConv‚Üë snd-t‚Üë of Œª {
        (u‚ÇÇ , u‚ÇÇ-nf , snd-t‚â°u‚ÇÇ) ‚Üí
        prodÀ¢ p u‚ÇÅ u‚ÇÇ
      , (                                        $‚ü® u‚ÇÇ-nf ‚ü©
         Œì ‚ä¢nf u‚ÇÇ ‚à∑ B [ fst p t ]‚ÇÄ               ‚Üí‚ü® flip _‚ä¢nf_‚à∑_.conv‚Çô $
                                                    substTypeEq (refl ‚ä¢B) fst-t‚â°u‚ÇÅ ‚ü©
         Œì ‚ä¢nf u‚ÇÇ ‚à∑ B [ u‚ÇÅ ]‚ÇÄ                    ‚Üí‚ü® flip (prod‚Çô ‚ä¢A ‚ä¢B u‚ÇÅ-nf) ok ‚ü©
         Œì ‚ä¢nf prodÀ¢ p u‚ÇÅ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B  ‚ñ°)
      , (                                                        $‚ü® sym (Œ£-Œ∑-prod-fst-snd ‚ä¢t) ‚ü©
         Œì ‚ä¢ t ‚â° prodÀ¢ p (fst p t) (snd p t) ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B  ‚Üí‚ü® flip _‚ä¢_‚â°_‚à∑_.trans $
                                                                    prod-cong ‚ä¢A ‚ä¢B fst-t‚â°u‚ÇÅ snd-t‚â°u‚ÇÇ ok ‚ü©
         Œì ‚ä¢ t ‚â° prodÀ¢ p u‚ÇÅ u‚ÇÇ ‚à∑ Œ£À¢ p , q ‚ñ∑ A ‚ñπ B                ‚ñ°) }}}
    (Œ∑-unit ‚ä¢t _ _ _) ‚Üí
      case wfTerm ‚ä¢t of Œª {
        ‚ä¢Œì ‚Üí
      case ‚ä¢‚à∑Unit‚ÜíUnit-allowed ‚ä¢t of Œª {
        ok ‚Üí
        star!
      , star‚Çô ‚ä¢Œì ok
      , Œ∑-unit ‚ä¢t (star‚±º ‚ä¢Œì ok) }}
    (Id-ins ‚ä¢t t~u) ‚Üí
      case fullRedNe~‚Üì t~u of Œª {
        (v , ‚ä¢v , t‚â°v) ‚Üí
      case neTypeEq (ne~‚Üì t~u .proj‚ÇÇ .proj‚ÇÅ)
             (syntacticEqTerm t‚â°v .proj‚ÇÇ .proj‚ÇÅ) ‚ä¢t of Œª {
        Id‚â°Id ‚Üí
        v
      , ne‚Çô Id‚Çô (conv‚Çô ‚ä¢v Id‚â°Id)
      , conv t‚â°v Id‚â°Id }}
    (rfl-refl t‚â°u) ‚Üí
      case syntacticEqTerm t‚â°u of Œª {
        (‚ä¢A , ‚ä¢t , _) ‚Üí
        rfl
      , conv‚Çô (rfl‚Çô ‚ä¢t) (Id-cong (refl ‚ä¢A) (refl ‚ä¢t) t‚â°u)
      , refl (rfl‚±º‚Ä≤ t‚â°u) }

-- If A is a well-formed type, then A is definitionally equal to a
-- type in Œ∑-long normal form.

fullRed : Œì ‚ä¢ A ‚Üí ‚àÉ Œª B ‚Üí Œì ‚ä¢nf B √ó Œì ‚ä¢ A ‚â° B
fullRed ‚ä¢A = fullRedConv‚Üë (completeEq (refl ‚ä¢A))

-- If t is a well-typed term, then t is definitionally equal to a term
-- in Œ∑-long normal form.

fullRedTerm : Œì ‚ä¢ t ‚à∑ A ‚Üí ‚àÉ Œª u ‚Üí Œì ‚ä¢nf u ‚à∑ A √ó Œì ‚ä¢ t ‚â° u ‚à∑ A
fullRedTerm ‚ä¢t = fullRedTermConv‚Üë (completeEqTerm (refl ‚ä¢t))
