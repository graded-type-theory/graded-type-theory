{-# OPTIONS --without-K --safe #-}
open import Definition.Modality.Erasure

open import Definition.Typed.EqualityRelation


module Erasure.LogicalRelation.Irrelevance {{eqrel : EqRelSet Erasure‚Ä≤}} where
open EqRelSet {{...}}

open import Erasure.LogicalRelation

open import Definition.LogicalRelation Erasure‚Ä≤
open import Definition.LogicalRelation.ShapeView Erasure‚Ä≤
import Definition.LogicalRelation.Irrelevance Erasure‚Ä≤ as I
open import Definition.LogicalRelation.Substitution Erasure‚Ä≤
import Definition.LogicalRelation.Substitution.Irrelevance Erasure‚Ä≤ as IS

open import Definition.Untyped Erasure
open import Definition.Untyped.Properties Erasure
import Definition.Untyped.BindingType Erasure‚Ä≤ as BT

open import Definition.Typed Erasure‚Ä≤
open import Definition.Typed.Weakening Erasure‚Ä≤
open import Definition.Typed.Properties Erasure‚Ä≤

open import Definition.Modality.Context ErasureModality

open import Tools.Empty
open import Tools.Level
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Unit

private
  variable
    n : Nat
    Œì : Con Term n
    A A‚Ä≤ t : Term n
    Œ≥ : Con‚Çò n
    p : Erasure

-- Irrelevance of logical relation for erasure using a ShapreView

irrelevanceTermSV : ‚àÄ {l l‚Ä≤ t v A}
                  ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
                    ([A]‚Ä≤ : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                  ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A / [A]
                  ‚Üí ShapeView Œµ l l‚Ä≤ A A [A] [A]‚Ä≤
                  ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ A / [A]‚Ä≤
irrelevanceTermSV .(U·µ£ UA) .(U·µ£ UB) t¬Æv (U·µ• UA UB) = t¬Æv
irrelevanceTermSV .(‚Ñï·µ£ ‚ÑïA) .(‚Ñï·µ£ ‚ÑïB) t¬Æv (‚Ñï·µ• ‚ÑïA ‚ÑïB) = t¬Æv
irrelevanceTermSV .(Unit·µ£ UnitA) .(Unit·µ£ UnitB) t¬Æv (Unit·µ• UnitA UnitB) = t¬Æv
irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv (B·µ• (BŒ† ùüò q) BŒ†! (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                               (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ†‚âãŒ† PE.refl PE.refl)) [a]‚Ä≤
                               with whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , Œ†‚Çô)
... | Œ†‚â°Œ†‚Ä≤ with B-PE-injectivity (BŒ† ùüò q) (BŒ† ùüò q) Œ†‚â°Œ†‚Ä≤
... | PE.refl , PE.refl , _ =
  let [a] = I.irrelevanceTerm ([F]‚ÇÅ id Œµ) ([F] id Œµ) [a]‚Ä≤
      t¬Æv‚Ä≤ = t¬Æv [a]
      SV‚Ä≤ = goodCasesRefl ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤)
  in  irrelevanceTermSV ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) t¬Æv‚Ä≤ SV‚Ä≤
irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv (B·µ• (BŒ† œâ q) BŒ†! (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                               (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ†‚âãŒ† PE.refl PE.refl)) [a]‚Ä≤ a¬Æw‚Ä≤
                               with whrDet* (red D , Œ†‚Çô) (red D‚ÇÅ , Œ†‚Çô)
... | Œ†‚â°Œ†‚Ä≤ with B-PE-injectivity (BŒ† œâ q) (BŒ† œâ q) Œ†‚â°Œ†‚Ä≤
... | PE.refl , PE.refl , _ =
  let [a] = I.irrelevanceTerm ([F]‚ÇÅ id Œµ) ([F] id Œµ) [a]‚Ä≤
      SV = goodCasesRefl ([F]‚ÇÅ id Œµ) ([F] id Œµ)
      a¬Æw = irrelevanceTermSV ([F]‚ÇÅ id Œµ) ([F] id Œµ) a¬Æw‚Ä≤ SV
      t¬Æv‚Ä≤ = t¬Æv [a] a¬Æw
      SV‚Ä≤ = goodCasesRefl ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤)
      in  irrelevanceTermSV ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) t¬Æv‚Ä≤ SV‚Ä≤
irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv (B·µ• (BŒ£ q Œ£‚Çö) BŒ£! (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                  (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ£‚âãŒ£ PE.refl)) [t‚ÇÅ]‚Ä≤
                           with whrDet* (red D , Œ£‚Çô) (red D‚ÇÅ , Œ£‚Çô)
... | Œ£‚â°Œ£‚Ä≤ with B-PE-injectivity (BŒ£ q Œ£‚Çö) (BŒ£ q Œ£‚Çö) Œ£‚â°Œ£‚Ä≤
... | PE.refl , PE.refl , _ =
    let [F]‚Ä≤ = [F] id Œµ
        [F]‚ÇÅ‚Ä≤ = [F]‚ÇÅ id Œµ
        [t‚ÇÅ] = I.irrelevanceTerm [F]‚ÇÅ‚Ä≤ [F]‚Ä≤ [t‚ÇÅ]‚Ä≤
        [Gt‚ÇÅ] = [G] id Œµ [t‚ÇÅ]
        [Gt‚ÇÅ]‚ÇÅ = [G]‚ÇÅ id Œµ [t‚ÇÅ]‚Ä≤
        t‚ÇÅ¬Æv‚ÇÅ , t‚ÇÇ¬Æv‚ÇÇ = t¬Æv [t‚ÇÅ]
        t‚ÇÅ¬Æv‚ÇÅ‚Ä≤ = irrelevanceTermSV [F]‚Ä≤ [F]‚ÇÅ‚Ä≤ t‚ÇÅ¬Æv‚ÇÅ (goodCasesRefl [F]‚Ä≤ [F]‚ÇÅ‚Ä≤)
        t‚ÇÇ¬Æv‚ÇÇ‚Ä≤ = irrelevanceTermSV [Gt‚ÇÅ] [Gt‚ÇÅ]‚ÇÅ t‚ÇÇ¬Æv‚ÇÇ (goodCasesRefl [Gt‚ÇÅ] [Gt‚ÇÅ]‚ÇÅ)
    in  t‚ÇÅ¬Æv‚ÇÅ‚Ä≤  , t‚ÇÇ¬Æv‚ÇÇ‚Ä≤
irrelevanceTermSV [A] [A]‚Ä≤ (t‚ÇÅ , t‚ÇÇ , v‚ÇÅ , v‚ÇÇ , t‚áít‚Ä≤ , v‚áív‚Ä≤ , [t‚ÇÅ] , t‚ÇÅ¬Æv‚ÇÅ , t‚ÇÇ¬Æv‚ÇÇ)
                  (B·µ• (BŒ£ q Œ£·µ£) BŒ£! (B·µ£ F G D ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
                      (B·µ£ F‚ÇÅ G‚ÇÅ D‚ÇÅ ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ£‚âãŒ£ PE.refl))
                  with whrDet* (red D , Œ£‚Çô) (red D‚ÇÅ , Œ£‚Çô)
... | Œ£‚â°Œ£‚Ä≤ with B-PE-injectivity (BŒ£ q Œ£·µ£) (BŒ£ q Œ£·µ£) Œ£‚â°Œ£‚Ä≤
... | PE.refl , PE.refl , _ =
  let [F]‚Ä≤ = [F] id Œµ
      [F]‚ÇÅ‚Ä≤ = [F]‚ÇÅ id Œµ
      [t‚ÇÅ]‚Ä≤ = I.irrelevanceTerm [F]‚Ä≤ [F]‚ÇÅ‚Ä≤ [t‚ÇÅ]
      [Gt‚ÇÅ] = [G] id Œµ [t‚ÇÅ]
      [Gt‚ÇÅ]‚ÇÅ = [G]‚ÇÅ id Œµ [t‚ÇÅ]‚Ä≤
      t‚ÇÅ¬Æv‚ÇÅ‚Ä≤ = irrelevanceTermSV [F]‚Ä≤ [F]‚ÇÅ‚Ä≤ t‚ÇÅ¬Æv‚ÇÅ (goodCasesRefl [F]‚Ä≤ [F]‚ÇÅ‚Ä≤)
      t‚ÇÇ¬Æv‚ÇÇ‚Ä≤ = irrelevanceTermSV [Gt‚ÇÅ] [Gt‚ÇÅ]‚ÇÅ t‚ÇÇ¬Æv‚ÇÇ (goodCasesRefl [Gt‚ÇÅ] [Gt‚ÇÅ]‚ÇÅ)
  in  t‚ÇÅ , t‚ÇÇ , v‚ÇÅ , v‚ÇÇ , t‚áít‚Ä≤ , v‚áív‚Ä≤ , [t‚ÇÅ]‚Ä≤ , t‚ÇÅ¬Æv‚ÇÅ‚Ä≤ , t‚ÇÇ¬Æv‚ÇÇ‚Ä≤
irrelevanceTermSV (emb 0<1 [A]) [A]‚Ä≤ t¬Æv (emb‚Å∞¬π SV) = irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv SV
irrelevanceTermSV [A] (emb 0<1 [A]‚Ä≤) t¬Æv (emb¬π‚Å∞ SV) = irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv SV

-- Irrelevance of logical relation for erasure

irrelevanceTerm : ‚àÄ {l l‚Ä≤ t v A}
                ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
                  ([A]‚Ä≤ : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A / [A]
                ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ A / [A]‚Ä≤
irrelevanceTerm [A] [A]‚Ä≤ t¬Æv = irrelevanceTermSV [A] [A]‚Ä≤ t¬Æv (goodCasesRefl [A] [A]‚Ä≤)

-- Irrelevance of logical relation for erasure with propositionally equal types

irrelevanceTerm‚Ä≤ : ‚àÄ {l l‚Ä≤ t v A}
                 ‚Üí A PE.‚â° A‚Ä≤
                 ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
                 ‚Üí ([A]‚Ä≤ : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© A‚Ä≤)
                 ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A / [A]
                 ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ A‚Ä≤ / [A]‚Ä≤
irrelevanceTerm‚Ä≤ PE.refl [A] [A]‚Ä≤ t¬Æv = irrelevanceTerm [A] [A]‚Ä≤ t¬Æv

-- Irrelevance of quantified logical relation for erasure

irrelevanceQuant : ‚àÄ {l l‚Ä≤ t v A}
                 ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
                 ‚Üí ([A]‚Ä≤ : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© A)
                 ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A ‚óÇ p / [A]
                 ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ A ‚óÇ p / [A]‚Ä≤
irrelevanceQuant {ùüò} [A] [A]‚Ä≤ t¬Æv = tt
irrelevanceQuant {œâ} [A] [A]‚Ä≤ t¬Æv = irrelevanceTerm [A] [A]‚Ä≤ t¬Æv

-- Irrelevance of related substitutions

irrelevanceSubst : ‚àÄ {œÉ œÉ‚Ä≤ l}
                 ‚Üí ([Œì] [Œì]‚Ä≤ : ‚ä©·µõ Œì)
                   ([œÉ] : Œµ ‚ä©À¢ œÉ ‚à∑ Œì / [Œì] / Œµ)
                   ([œÉ]‚Ä≤ : Œµ ‚ä©À¢ œÉ ‚à∑ Œì / [Œì]‚Ä≤ / Œµ)
                   (œÉ¬ÆœÉ‚Ä≤ : œÉ ¬Æ‚ü® l ‚ü© œÉ‚Ä≤ ‚à∑ Œì ‚óÇ Œ≥ / [Œì] / [œÉ])
                 ‚Üí (œÉ ¬Æ‚ü® l ‚ü© œÉ‚Ä≤ ‚à∑ Œì ‚óÇ Œ≥ / [Œì]‚Ä≤ / [œÉ]‚Ä≤)
irrelevanceSubst {Œì = Œµ} {Œ≥ = Œµ} Œµ Œµ (lift tt) (lift tt) tt = tt
irrelevanceSubst {Œì = Œì ‚àô A} {Œ≥ = Œ≥ ‚àô p} {l = l}
                 ([Œì] ‚àô [A]) ([Œì]‚Ä≤ ‚àô [A]‚Ä≤) ([tailœÉ] , b) ([tailœÉ]‚Ä≤ , d) (œÉ¬ÆœÉ , t¬Æv) =
  let œÉ¬ÆœÉ‚Ä≤ = irrelevanceSubst {l = l} [Œì] [Œì]‚Ä≤ [tailœÉ] [tailœÉ]‚Ä≤ œÉ¬ÆœÉ
      [œÉA] = proj‚ÇÅ ([A] Œµ [tailœÉ])
      t¬Æv‚Ä≤ = irrelevanceQuant {p = p} (proj‚ÇÅ ([A] Œµ [tailœÉ])) (proj‚ÇÅ ([A]‚Ä≤ Œµ [tailœÉ]‚Ä≤)) t¬Æv
  in  œÉ¬ÆœÉ‚Ä≤ , t¬Æv‚Ä≤

-- Irrelevance of erasure validity

irrelevance : ‚àÄ {l l‚Ä≤}
            ‚Üí ([Œì] [Œì]‚Ä≤ : ‚ä©·µõ Œì)
              ([A] : Œì ‚ä©·µõ‚ü® l ‚ü© A / [Œì])
              ([A]‚Ä≤ : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© A / [Œì]‚Ä≤)
              (‚ä© ≥t : Œ≥ ‚ñ∏ Œì ‚ä© ≥‚ü® l ‚ü© t ‚à∑ A / [Œì] / [A])
            ‚Üí (Œ≥ ‚ñ∏ Œì ‚ä© ≥‚ü® l‚Ä≤ ‚ü© t ‚à∑ A / [Œì]‚Ä≤ / [A]‚Ä≤)
irrelevance {l = l} [Œì] [Œì]‚Ä≤ [A] [A]‚Ä≤ ‚ä© ≥t [œÉ]‚Ä≤ œÉ¬ÆœÉ‚Ä≤ =
  let [œÉ] = IS.irrelevanceSubst [Œì]‚Ä≤ [Œì] Œµ Œµ [œÉ]‚Ä≤
      œÉ¬ÆœÉ = irrelevanceSubst {l = l} [Œì]‚Ä≤ [Œì] [œÉ]‚Ä≤ [œÉ] œÉ¬ÆœÉ‚Ä≤
      t¬Æv = ‚ä© ≥t [œÉ] œÉ¬ÆœÉ
  in  irrelevanceTerm (proj‚ÇÅ ([A] Œµ [œÉ])) (proj‚ÇÅ ([A]‚Ä≤ Œµ [œÉ]‚Ä≤)) t¬Æv
