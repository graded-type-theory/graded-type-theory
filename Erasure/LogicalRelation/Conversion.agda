{-# OPTIONS --without-K --safe #-}
open import Definition.Modality.Erasure

open import Definition.Typed.EqualityRelation


module Erasure.LogicalRelation.Conversion {{eqrel : EqRelSet Erasure‚Ä≤}} where
open EqRelSet {{...}}

open import Erasure.LogicalRelation
import Erasure.Target as T

open import Definition.LogicalRelation Erasure‚Ä≤
open import Definition.LogicalRelation.Irrelevance Erasure‚Ä≤
open import Definition.LogicalRelation.Fundamental.Reducibility Erasure‚Ä≤
open import Definition.LogicalRelation.ShapeView Erasure‚Ä≤
open import Definition.LogicalRelation.Properties.Conversion Erasure‚Ä≤
open import Definition.LogicalRelation.Properties.Escape Erasure‚Ä≤
open import Definition.LogicalRelation.Properties.Symmetry Erasure‚Ä≤
open import Definition.LogicalRelation.Substitution Erasure‚Ä≤
open import Definition.LogicalRelation.Substitution.Properties Erasure‚Ä≤
import Definition.LogicalRelation.Substitution.Irrelevance Erasure‚Ä≤ as IS

open import Definition.Untyped Erasure
open import Definition.Untyped.Properties Erasure
import Definition.Untyped.BindingType Erasure‚Ä≤ as BT

open import Definition.Typed Erasure‚Ä≤
open import Definition.Typed.Consequences.Injectivity Erasure‚Ä≤
open import Definition.Typed.Consequences.Substitution Erasure‚Ä≤
open import Definition.Typed.Reduction Erasure‚Ä≤
open import Definition.Typed.RedSteps Erasure‚Ä≤
open import Definition.Typed.Weakening Erasure‚Ä≤

open import Tools.Empty
open import Tools.Nat
open import Tools.Product
import Tools.PropositionalEquality as PE

private
  variable
    n : Nat
    Œì : Con Term n
    A B t : Term n
    v : T.Term n

-- Conversion of logical relation for erasure using ShapeView
-- If t ¬Æ v ‚à∑ A and Œµ¬†‚ä© A ‚â° B then t ¬Æ v ‚à∑ B

convTerm ≥‚Ä≤ : ‚àÄ {l l‚Ä≤}
           ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
             ([B] : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© B)
           ‚Üí Œµ ‚ä¢ A ‚â° B
           ‚Üí ShapeView Œµ l l‚Ä≤ A B [A] [B]
           ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A / [A]
           ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ B / [B]
convTerm ≥‚Ä≤ _ _ A‚â°B (U·µ• UA UB) t¬Æv = t¬Æv
convTerm ≥‚Ä≤ _ _ A‚â°B (‚Ñï·µ• ‚ÑïA ‚ÑïB) t¬Æv = t¬Æv
convTerm ≥‚Ä≤ _ _ A‚â°B (Unit·µ• UnitA UnitB) t¬Æv = t¬Æv
convTerm ≥‚Ä≤ [A] [B] A‚â°B (B·µ• (BŒ† ùüò q) BŒ†! (B·µ£ F G [ _ , _ , A‚áíŒ† ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
           (B·µ£ F‚ÇÅ G‚ÇÅ [ _ , _ , B‚áíŒ†‚ÇÅ ] ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ†‚âãŒ† PE.refl PE.refl)) t¬Æv [a]‚Ä≤ =
  let Œ†‚â°Œ†‚ÇÅ = reduction‚Ä≤ A‚áíŒ† B‚áíŒ†‚ÇÅ Œ†‚Çô Œ†‚Çô A‚â°B
      F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ , _ = injectivity Œ†‚â°Œ†‚ÇÅ
      [F‚ÇÅ]‚Ä≤ , [F]‚Ä≤ , [F‚ÇÅ‚â°F]‚Ä≤ = reducibleEq (sym F‚â°F‚ÇÅ)
      [F‚ÇÅ‚â°F] = irrelevanceEq‚Ä≥ (PE.sym (wk-id F‚ÇÅ)) (PE.sym (wk-id F))
                              [F‚ÇÅ]‚Ä≤ ([F]‚ÇÅ id Œµ) [F‚ÇÅ‚â°F]‚Ä≤
      [a] = convTerm‚ÇÅ ([F]‚ÇÅ id Œµ) ([F] id Œµ) [F‚ÇÅ‚â°F] [a]‚Ä≤
      G‚â°G‚ÇÅ‚Ä≤ = wkEq (lift id) (Œµ ‚àô escape ([F] id Œµ)) G‚â°G‚ÇÅ
      G[a]‚â°G‚ÇÅ[a] = substTypeEq G‚â°G‚ÇÅ‚Ä≤ (refl (escapeTerm ([F] id Œµ) [a]))
      [Ga]‚Ä≤ , [G‚ÇÅa]‚Ä≤ , [Ga‚â°G‚ÇÅa]‚Ä≤ = reducibleEq G[a]‚â°G‚ÇÅ[a]
      [Ga‚â°G‚ÇÅa] = irrelevanceEq [Ga]‚Ä≤ ([G] id Œµ [a]) [Ga‚â°G‚ÇÅa]‚Ä≤
      t¬Æv‚Ä≤ = t¬Æv [a]
      SV = goodCases ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) [Ga‚â°G‚ÇÅa]
  in  convTerm ≥‚Ä≤ ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) G[a]‚â°G‚ÇÅ[a] SV t¬Æv‚Ä≤
convTerm ≥‚Ä≤ [A] [B] A‚â°B (B·µ• (BŒ† œâ q) BŒ†! (B·µ£ F G [ _ , _ , A‚áíŒ† ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
           (B·µ£ F‚ÇÅ G‚ÇÅ [ _ , _ , B‚áíŒ†‚ÇÅ ] ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ†‚âãŒ† PE.refl PE.refl)) t¬Æv [a]‚Ä≤ a¬Æw‚Ä≤ =
  let Œ†‚â°Œ†‚ÇÅ = reduction‚Ä≤ A‚áíŒ† B‚áíŒ†‚ÇÅ Œ†‚Çô Œ†‚Çô A‚â°B
      F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ , _ = injectivity Œ†‚â°Œ†‚ÇÅ
      [F‚ÇÅ]‚Ä≤ , [F]‚Ä≤ , [F‚ÇÅ‚â°F]‚Ä≤ = reducibleEq (sym F‚â°F‚ÇÅ)
      [F‚ÇÅ‚â°F] = irrelevanceEq‚Ä≥ (PE.sym (wk-id F‚ÇÅ)) (PE.sym (wk-id F))
                              [F‚ÇÅ]‚Ä≤ ([F]‚ÇÅ id Œµ) [F‚ÇÅ‚â°F]‚Ä≤
      [a] = convTerm‚ÇÅ ([F]‚ÇÅ id Œµ) ([F] id Œµ) [F‚ÇÅ‚â°F] [a]‚Ä≤
      G‚â°G‚ÇÅ‚Ä≤ = wkEq (lift id) (Œµ ‚àô escape ([F] id Œµ)) G‚â°G‚ÇÅ
      G[a]‚â°G‚ÇÅ[a] = substTypeEq G‚â°G‚ÇÅ‚Ä≤ (refl (escapeTerm ([F] id Œµ) [a]))
      [Ga]‚Ä≤ , [G‚ÇÅa]‚Ä≤ , [Ga‚â°G‚ÇÅa]‚Ä≤ = reducibleEq G[a]‚â°G‚ÇÅ[a]
      [Ga‚â°G‚ÇÅa] = irrelevanceEq [Ga]‚Ä≤ ([G] id Œµ [a]) [Ga‚â°G‚ÇÅa]‚Ä≤
      SV = goodCases ([F]‚ÇÅ id Œµ) ([F] id Œµ) [F‚ÇÅ‚â°F]
      F‚ÇÅ‚â°F = PE.subst‚ÇÇ (Œµ ‚ä¢_‚â°_) (PE.sym (wk-id F‚ÇÅ)) (PE.sym (wk-id F)) (sym F‚â°F‚ÇÅ)
      a¬Æw = convTerm ≥‚Ä≤ ([F]‚ÇÅ id Œµ) ([F] id Œµ) F‚ÇÅ‚â°F SV a¬Æw‚Ä≤
      t¬Æv‚Ä≤ = t¬Æv [a] a¬Æw
      SV‚Ä≤ = goodCases ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) [Ga‚â°G‚ÇÅa]
  in  convTerm ≥‚Ä≤ ([G] id Œµ [a]) ([G]‚ÇÅ id Œµ [a]‚Ä≤) G[a]‚â°G‚ÇÅ[a] SV‚Ä≤ t¬Æv‚Ä≤
convTerm ≥‚Ä≤ [A] [B] A‚â°B (B·µ• (BŒ£ q m) BŒ£! (B·µ£ F G [ _ , _ , A‚áíŒ£ ] ‚ä¢F ‚ä¢G A‚â°A [F] [G] G-ext)
           (B·µ£ F‚ÇÅ G‚ÇÅ [ _ , _ , B‚áíŒ£‚ÇÅ ] ‚ä¢F‚ÇÅ ‚ä¢G‚ÇÅ A‚â°A‚ÇÅ [F]‚ÇÅ [G]‚ÇÅ G-ext‚ÇÅ) (BT.Œ£‚âãŒ£ PE.refl))
           (t‚ÇÅ , t‚ÇÇ , v‚ÇÅ , v‚ÇÇ , t‚áít‚Ä≤ , v‚áív‚Ä≤ , [t‚ÇÅ] , t‚ÇÅ¬Æv‚ÇÅ , t‚ÇÇ¬Æv‚ÇÇ) =
  let Œ£‚â°Œ£‚ÇÅ = reduction‚Ä≤ A‚áíŒ£ B‚áíŒ£‚ÇÅ Œ£‚Çô Œ£‚Çô A‚â°B
      F‚â°F‚ÇÅ , G‚â°G‚ÇÅ , _ = Œ£-injectivity Œ£‚â°Œ£‚ÇÅ
      [F]‚Ä≤ , [F‚ÇÅ]‚Ä≤ , [F‚â°F‚ÇÅ]‚Ä≤ = reducibleEq F‚â°F‚ÇÅ
      [F‚â°F‚ÇÅ] = irrelevanceEq‚Ä≥ (PE.sym (wk-id F)) (PE.sym (wk-id F‚ÇÅ))
                              [F]‚Ä≤ ([F] id Œµ) [F‚â°F‚ÇÅ]‚Ä≤
      F‚â°F‚ÇÅ‚Ä≤ = PE.subst‚ÇÇ (Œµ ‚ä¢_‚â°_) (PE.sym (wk-id F)) (PE.sym (wk-id F‚ÇÅ)) F‚â°F‚ÇÅ
      [t‚ÇÅ]‚Ä≤ = convTerm‚ÇÅ ([F] id Œµ) ([F]‚ÇÅ id Œµ) [F‚â°F‚ÇÅ] [t‚ÇÅ]
      G‚â°G‚ÇÅ‚Ä≤ = wkEq (lift id) (Œµ ‚àô escape ([F] id Œµ)) G‚â°G‚ÇÅ
      G[t‚ÇÅ]‚â°G‚ÇÅ[t‚ÇÅ] = substTypeEq G‚â°G‚ÇÅ‚Ä≤ (refl (escapeTerm ([F] id Œµ) [t‚ÇÅ]))
      [Gt‚ÇÅ]‚Ä≤ , [G‚ÇÅt‚ÇÅ]‚Ä≤ , [Gt‚ÇÅ‚â°G‚ÇÅt‚ÇÅ]‚Ä≤ = reducibleEq G[t‚ÇÅ]‚â°G‚ÇÅ[t‚ÇÅ]
      [Gt‚ÇÅ‚â°G‚ÇÅt‚ÇÅ] = irrelevanceEq [Gt‚ÇÅ]‚Ä≤ ([G] id Œµ [t‚ÇÅ]) [Gt‚ÇÅ‚â°G‚ÇÅt‚ÇÅ]‚Ä≤
      t‚áít‚Ä≥ = conv* t‚áít‚Ä≤ Œ£‚â°Œ£‚ÇÅ
      SV‚ÇÅ = goodCases ([F] id Œµ) ([F]‚ÇÅ id Œµ) [F‚â°F‚ÇÅ]
      SV‚ÇÇ = goodCases ([G] id Œµ [t‚ÇÅ]) ([G]‚ÇÅ id Œµ [t‚ÇÅ]‚Ä≤) [Gt‚ÇÅ‚â°G‚ÇÅt‚ÇÅ]
      t‚ÇÅ¬Æv‚ÇÅ‚Ä≤ = convTerm ≥‚Ä≤ ([F] id Œµ) ([F]‚ÇÅ id Œµ) F‚â°F‚ÇÅ‚Ä≤ SV‚ÇÅ t‚ÇÅ¬Æv‚ÇÅ
      t‚ÇÇ¬Æv‚ÇÇ‚Ä≤ = convTerm ≥‚Ä≤ ([G] id Œµ [t‚ÇÅ]) ([G]‚ÇÅ id Œµ [t‚ÇÅ]‚Ä≤) G[t‚ÇÅ]‚â°G‚ÇÅ[t‚ÇÅ] SV‚ÇÇ t‚ÇÇ¬Æv‚ÇÇ
  in  t‚ÇÅ , t‚ÇÇ , v‚ÇÅ , v‚ÇÇ , t‚áít‚Ä≥ , v‚áív‚Ä≤ , [t‚ÇÅ]‚Ä≤ , t‚ÇÅ¬Æv‚ÇÅ‚Ä≤ , t‚ÇÇ¬Æv‚ÇÇ‚Ä≤
convTerm ≥‚Ä≤ (emb 0<1 [A]) [B] A‚â°B (emb‚Å∞¬π SV) t¬Æv = convTerm ≥‚Ä≤ [A] [B] A‚â°B SV t¬Æv
convTerm ≥‚Ä≤ [A] (emb 0<1 [B]) A‚â°B (emb¬π‚Å∞ SV) t¬Æv = convTerm ≥‚Ä≤ [A] [B] A‚â°B SV t¬Æv

-- Conversion of logical relation for erasure
-- If t ¬Æ v ‚à∑ A and Œµ ‚ä¢ A ‚â° B then t ¬Æ v ‚à∑ B

convTerm ≥ : ‚àÄ {l l‚Ä≤ A B t v}
          ‚Üí ([A] : Œµ ‚ä©‚ü® l ‚ü© A)
            ([B] : Œµ ‚ä©‚ü® l‚Ä≤ ‚ü© B)
          ‚Üí Œµ ‚ä¢ A ‚â° B
          ‚Üí t ¬Æ‚ü® l ‚ü© v ‚à∑ A / [A]
          ‚Üí t ¬Æ‚ü® l‚Ä≤ ‚ü© v ‚à∑ B / [B]
convTerm ≥ [A] [B] A‚â°B t¬Æv =
  let [A]‚Ä≤ , [B]‚Ä≤ , [A‚â°B]‚Ä≤ = reducibleEq A‚â°B
      [A‚â°B] = irrelevanceEq [A]‚Ä≤ [A] [A‚â°B]‚Ä≤
  in convTerm ≥‚Ä≤ [A] [B] A‚â°B (goodCases [A] [B] [A‚â°B]) t¬Æv

-- Conversion of erasure validity
-- If Œ≥ ‚ñ∏ Œì ‚ä© ≥ t ‚à∑ A and Œì ‚ä©·µõ A ‚â° B then Œ≥ ‚ñ∏ Œì ‚ä© ≥ t ‚à∑ B

conv ≥ : ‚àÄ {l l‚Ä≤ A B t Œ≥}
      ‚Üí ([Œì] : ‚ä©·µõ Œì)
        ([A] : Œì ‚ä©·µõ‚ü® l ‚ü© A / [Œì])
        ([B] : Œì ‚ä©·µõ‚ü® l‚Ä≤ ‚ü© B / [Œì])
        (A‚â°B : Œì ‚ä¢ A ‚â° B)
        (‚ä© ≥t : Œ≥ ‚ñ∏ Œì ‚ä© ≥‚ü® l ‚ü© t ‚à∑ A / [Œì] / [A])
      ‚Üí (Œ≥ ‚ñ∏ Œì ‚ä© ≥‚ü® l‚Ä≤ ‚ü© t ‚à∑ B / [Œì] / [B])
conv ≥ {A = A} {B = B} [Œì] [A] [B] A‚â°B ‚ä© ≥t [œÉ] œÉ¬ÆœÉ‚Ä≤ =
  let t¬Æv = ‚ä© ≥t [œÉ] œÉ¬ÆœÉ‚Ä≤
      [œÉA] = proj‚ÇÅ ([A] Œµ [œÉ])
      [œÉB] = proj‚ÇÅ ([B] Œµ [œÉ])
      œÉA‚â°œÉB = substitutionEq A‚â°B (wellformedSubstEq [Œì] Œµ [œÉ] (reflSubst [Œì] Œµ [œÉ])) Œµ
  in  convTerm ≥ [œÉA] [œÉB] œÉA‚â°œÉB t¬Æv
