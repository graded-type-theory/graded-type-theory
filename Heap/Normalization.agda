open import Graded.Modality
open import Definition.Typed.Variant

module Heap.Normalization
  {a} {M : Set a} (ùïÑ : Modality M)
  (type-variant : Type-variant)
  (open Modality ùïÑ)
  ‚¶É _ : Has-nr M semiring-with-meet ‚¶Ñ
  ‚¶É _ : Has-factoring-nr M semiring-with-meet ‚¶Ñ
  where

open Type-variant type-variant

open import Tools.Bool
open import Tools.Fin
open import Tools.Function
open import Tools.Nat
open import Tools.Product
open import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality
open import Tools.Relation
open import Tools.Sum hiding (id)

open import Heap.Options

private
  opts : Options
  opts = not-tracking-and-‚Ñï-fullred-if false

open import Heap.Reduction ùïÑ type-variant opts
open import Heap.Reduction.Properties ùïÑ type-variant opts
open import Heap.Untyped ùïÑ type-variant
open import Heap.Untyped.Properties ùïÑ type-variant

open import Definition.Untyped M hiding (head)
open import Definition.Untyped.Properties M

private variable
  m n n‚Ä≤ : Nat

opaque mutual

  normalize-var : (H : Heap m) (x : Fin m)
                ‚Üí ‚àÉ‚ÇÑ Œª n t (E‚Ä≤ : Env m n) S ‚Üí Normal t
                  √ó ‚ü® H , var x , id , Œµ ‚ü© ‚áí‚Çô* ‚ü® H , t , E‚Ä≤ , S ‚ü©
  normalize-var (H ‚àô (p , t , E)) y0 =
    case normalize H t E Œµ of Œª
      (_ , t‚Ä≤ , E‚Ä≤ , S , n , d) ‚Üí
    _ , t‚Ä≤ , step E‚Ä≤ , wk1À¢ S , n
      , var‚Çï‚Ä≤ here ‚á® wk1-‚áí‚Çô* d

  normalize-var (H ‚àô c) (y +1) =
    case normalize-var H y of Œª
      (_ , t , E , S , n , d) ‚Üí
    _ , t , step E , wk1À¢ S , n
      , var-env-‚áí‚Çô* (wk1-‚áí‚Çô* d) refl n

  normalize : (H : Heap m) (t : Term n) (E : Env m n) (S : Stack m)
            ‚Üí ‚àÉ‚ÇÑ Œª n‚Ä≤ t‚Ä≤ (E‚Ä≤ : Env m n‚Ä≤) (S‚Ä≤ : Stack m) ‚Üí Normal t‚Ä≤ √ó
              ‚ü® H , t , E , S ‚ü© ‚áí‚Çô* ‚ü® H , t‚Ä≤ , E‚Ä≤ , S‚Ä≤ ‚ü©
  normalize H (var x) E S =
    case normalize-var H (wkVar E x) of Œª
      (_ , t , E‚Ä≤ , S‚Ä≤ , n , d) ‚Üí
    _ , t , E‚Ä≤ , S‚Ä≤ ++ S , n
      , ++-‚áí‚Çô* S (var-env-‚áí‚Çô* d refl n)
  normalize H (lam p t) E S =
    _ , lam p t , E , S , val lam·µ• , id
  normalize H (t ‚àò‚ü® p ‚ü© u) E S =
    case normalize H t E (‚àò‚Çë p u E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , app‚Çï ‚á® d
  normalize H (prod s p t u) E S =
    _ , prod s p t u , E , S , val prod·µ• , id
  normalize H (fst p t) E S =
    case normalize H t E (fst‚Çë p ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , fst‚Çï ‚á® d
  normalize H (snd p t) E S =
    case normalize H t E (snd‚Çë p ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , snd‚Çï ‚á® d
  normalize H (prodrec r p q A t u) E S =
    case normalize H t E (prodrec‚Çë r p q A u E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , prodrec‚Çï ‚á® d
  normalize H (star s) E S =
    _ , star s , E , S , val star·µ• , id
  normalize H (unitrec p q A t u) E S =
    case Unit ∑-Œ∑? of Œª where
      (yes Œ∑) ‚Üí
        _ , unitrec p q A t u , E , S , unitrec-Œ∑‚Çô Œ∑ , id
      (no no-Œ∑) ‚Üí
        case normalize H t E (unitrec‚Çë p q A u E ‚àô S) of Œª
          (_ , _ , _ , _ , n , d) ‚Üí
        _ , _ , _ , _ , n , unitrec‚Çï no-Œ∑ ‚á® d
  normalize H zero E S =
    _ , zero , E , S , val zero·µ• , id
  normalize H (suc t) E S =
    _ , suc t , E , S , val suc·µ• , id
  normalize H (natrec p q r A z s n) E S =
    case normalize H n E (natrec‚Çë p q r A z s E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , (natrec‚Çï ‚á® d)
  normalize H (emptyrec p A t) E S =
    _ , _ , _ , _ , emptyrec‚Çô , id
  normalize H rfl E S =
    _ , rfl , E , S , val rfl·µ• , id
  normalize H (J p q A t B u v w) E S =
    case normalize H w E (J‚Çë p q A t B u v E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , J‚Çï ‚á® d
  normalize H (K p A t B u v) E S =
    case normalize H v E (K‚Çë p A t B u E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , K‚Çï ‚á® d
  normalize H ([]-cong s A t u v) E S =
    case normalize H v E ([]-cong‚Çë s A t u E ‚àô S) of Œª
      (_ , _ , _ , _ , n , d) ‚Üí
    _ , _ , _ , _ , n , []-cong‚Çï ‚á® d
  normalize H U E S =
    _ , U , E , S , val U·µ• , id
  normalize H ‚Ñï E S =
    _ , ‚Ñï , E , S , val ‚Ñï·µ• , id
  normalize H Empty E S =
    _ , Empty , E , S , val Empty·µ• , id
  normalize H (Unit s) E S =
    _ , Unit s , E , S , val Unit·µ• , id
  normalize H (Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B) E S =
    _ , Œ†Œ£‚ü® b ‚ü© p , q ‚ñ∑ A ‚ñπ B , E , S , val Œ†Œ£·µ• , id
  normalize H (Id A t u) E S =
    _ , Id A t u , E , S , val Id·µ• , id
