------------------------------------------------------------------------
-- Type preservation/subject reduction for the heap semantics
------------------------------------------------------------------------

open import Graded.Modality
open import Definition.Typed.Restrictions
open import Heap.Options

module Heap.Typed.Reduction
  {a} {M : Set a} {ùïÑ : Modality M}
  (TR : Type-restrictions ùïÑ)
  (opts : Options)
  (open Modality ùïÑ)
  ‚¶É _ : Has-nr M semiring-with-meet ‚¶Ñ
  ‚¶É _ : Has-factoring-nr M semiring-with-meet ‚¶Ñ
  where

open Type-restrictions TR
open Options opts

open import Definition.Untyped M
open import Definition.Untyped.Properties M
open import Definition.Typed TR as T
open import Definition.Typed.Properties TR
open import Definition.Typed.Reasoning.Term TR
open import Definition.Typed.Weakening TR using (id; step; _‚à∑_‚äá_)
import Definition.Typed.Weakening TR as W
open import Definition.Typed.Consequences.DerivedRules TR
open import Definition.Typed.Consequences.Inequality TR
open import Definition.Typed.Consequences.Injectivity TR
open import Definition.Typed.Consequences.Inversion TR
open import Definition.Typed.Consequences.Stability TR
open import Definition.Typed.Consequences.Substitution TR
open import Definition.Typed.Consequences.Syntactic TR
import Graded.Derived.Erased.Typed TR as ET

open import Heap.Reduction ùïÑ type-variant opts
open import Heap.Reduction.Properties ùïÑ type-variant opts
open import Heap.Typed TR ‚Ñï-fullred
open import Heap.Typed.Inversion TR ‚Ñï-fullred
open import Heap.Typed.Properties TR ‚Ñï-fullred
open import Heap.Typed.Substitution TR ‚Ñï-fullred
open import Heap.Typed.Weakening TR ‚Ñï-fullred
open import Heap.Untyped ùïÑ type-variant
open import Heap.Untyped.Properties ùïÑ type-variant

open import Tools.Bool
open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Nat hiding (_+_)
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Reasoning.PropositionalEquality
open import Tools.Relation
open import Tools.Sum hiding (id; sym)

private variable
  n : Nat
  Œì : Con Term _
  H H‚Ä≤ : Heap _
  e : Elim _
  t t‚Ä≤ u A B C : Term _
  y : Ptr _
  c : Closure _ _
  S S‚Ä≤ : Stack _
  s s‚Ä≤ : State _ _
  E E‚Ä≤ : Env _ _
  p q q‚Ä≤ r : M

------------------------------------------------------------------------
-- Typing is preserved by heap lookups

opaque

  -- Eliminator typing is preserved by heap lookups/updates

  heapUpdate-‚ä¢·µâ : H ‚ä¢·µâ e ‚à∑ t ‚à∑ A ‚Üù B ‚Üí H ‚ä¢ y ‚Ü¶[ q ] c ‚®æ H‚Ä≤ ‚Üí H‚Ä≤ ‚ä¢·µâ e ‚à∑ t ‚à∑ A ‚Üù B
  heapUpdate-‚ä¢·µâ {H} {H‚Ä≤} (‚àò‚Çë {E} {u} {A} {B} {p} {q} ‚ä¢u ‚ä¢B) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚ä¢ wk E u [ x ] ‚à∑ A) H‚â°H‚Ä≤ ‚ä¢u of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ ‚àò‚Çë p u E ‚à∑ _ ‚à∑ _ ‚Üù (B [ wk E u [ x ] ]‚ÇÄ))
      (PE.sym H‚â°H‚Ä≤) (‚àò‚Çë ‚ä¢u‚Ä≤ ‚ä¢B)
  heapUpdate-‚ä¢·µâ (fst‚Çë ‚ä¢A ‚ä¢B) d =
    fst‚Çë ‚ä¢A ‚ä¢B
  heapUpdate-‚ä¢·µâ {t} {H‚Ä≤} (snd‚Çë {B} ‚ä¢A ‚ä¢B) d =
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ _ ‚à∑ t ‚à∑ _ ‚Üù B [ fst _ t [ x ] ]‚ÇÄ)
      (PE.sym (heapUpdateSubst d))
      (snd‚Çë ‚ä¢A ‚ä¢B)
  heapUpdate-‚ä¢·µâ {H} {t} {H‚Ä≤} (prodrec‚Çë {E} {u} {A} ‚ä¢u ‚ä¢A) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí _ ‚ä¢ wk (liftn E 2) u [ liftSubstn x 2 ] ‚à∑ wk (lift E) A [ liftSubst x ] [ _ ]‚Üë¬≤)
           H‚â°H‚Ä≤ ‚ä¢u of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí _ ‚ä¢ wk (lift E) A [ liftSubst x ]) H‚â°H‚Ä≤ ‚ä¢A of Œª
      ‚ä¢A‚Ä≤ ‚Üí
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ _ ‚à∑ _ ‚à∑ _ ‚Üù wk (lift E) A [ liftSubst x ] [ t [ x ] ]‚ÇÄ)
      (PE.sym H‚â°H‚Ä≤) (prodrec‚Çë ‚ä¢u‚Ä≤ ‚ä¢A‚Ä≤)
  heapUpdate-‚ä¢·µâ {H} {t} {H‚Ä≤} (natrec‚Çë {E} {z} {A} {s} ‚ä¢z ‚ä¢s ‚ä¢A) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚ä¢ wk E z [ x ] ‚à∑ wk (lift E) A [ liftSubst x ] [ zero ]‚ÇÄ)
           H‚â°H‚Ä≤ ‚ä¢z of Œª
      ‚ä¢z‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚àô ‚Ñï ‚àô wk (lift E) A [ liftSubst x ] ‚ä¢
                         wk (liftn E 2) s [ liftSubstn x 2 ] ‚à∑
                         wk (lift E) A [ liftSubst x ] [ suc (var x1) ]‚Üë¬≤)
           H‚â°H‚Ä≤ ‚ä¢s of Œª
      ‚ä¢s‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚àô ‚Ñï ‚ä¢ wk (lift E) A [ liftSubst x ]) H‚â°H‚Ä≤ ‚ä¢A of Œª
      ‚ä¢A‚Ä≤ ‚Üí
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ _ ‚à∑ _ ‚à∑ ‚Ñï ‚Üù wk (lift E) A [ liftSubst x ] [ t [ x ] ]‚ÇÄ)
      (PE.sym H‚â°H‚Ä≤) (natrec‚Çë ‚ä¢z‚Ä≤ ‚ä¢s‚Ä≤ ‚ä¢A‚Ä≤)
  heapUpdate-‚ä¢·µâ {H} {t} {H‚Ä≤} (unitrec‚Çë {E} {u} {A} ‚ä¢u ‚ä¢A no-Œ∑) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚ä¢ wk E u [ x ] ‚à∑ (wk (lift E)) A [ liftSubst x ] [ star ∑ ]‚ÇÄ)
            H‚â°H‚Ä≤ ‚ä¢u of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    case PE.subst (Œª x ‚Üí Œµ ‚àô Unit ∑ ‚ä¢ wk (lift E) A [ liftSubst x ])
           H‚â°H‚Ä≤ ‚ä¢A of Œª
      ‚ä¢A‚Ä≤ ‚Üí
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ _ ‚à∑ _ ‚à∑ Unit ∑ ‚Üù wk (lift E) A [ liftSubst x ] [ t [ x ] ]‚ÇÄ)
      (PE.sym H‚â°H‚Ä≤) (unitrec‚Çë ‚ä¢u‚Ä≤ ‚ä¢A‚Ä≤ no-Œ∑)
  heapUpdate-‚ä¢·µâ {t = w} {H‚Ä≤} (J‚Çë {E} {A} {B} {t} {u} {v} {p} {q} ‚ä¢u ‚ä¢B) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst
           (Œª x ‚Üí Œµ ‚ä¢ wk E u [ x ] ‚à∑ wk (liftn E 2) B [ liftSubstn x 2 ] [ wk E t [ x ] , rfl ]‚ÇÅ‚ÇÄ)
           H‚â°H‚Ä≤ ‚ä¢u of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    case PE.subst
           (Œª x ‚Üí Œµ ‚àô wk E A [ x ] ‚àô Id (wk1 (wk E A [ x ])) (wk1 (wk E t [ x ])) (var x0) ‚ä¢ wk (liftn E 2) B [ liftSubstn x 2 ])
           H‚â°H‚Ä≤ ‚ä¢B  of Œª
      ‚ä¢B‚Ä≤ ‚Üí
    PE.subst
      (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ _ ‚à∑ w ‚à∑ wk E (Id A t v) [ x ] ‚Üù ((wk (liftn E 2) B [ liftSubstn x 2 ]) [ wk E v [ x ] , w [ x ] ]‚ÇÅ‚ÇÄ))
      (PE.sym H‚â°H‚Ä≤) (J‚Çë ‚ä¢u‚Ä≤ ‚ä¢B‚Ä≤)
  heapUpdate-‚ä¢·µâ {t = v} {H‚Ä≤} (K‚Çë {E} {u} {B} {A} {t} {p} ‚ä¢u ‚ä¢B ok) d =
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst
           (Œª x ‚Üí Œµ ‚ä¢ wk E u [ x ] ‚à∑ wk (lift E) B [ liftSubst x ] [ rfl ]‚ÇÄ)
           H‚â°H‚Ä≤ ‚ä¢u of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    case PE.subst
           (Œª x ‚Üí Œµ ‚àô wk E (Id A t t) [ x ] ‚ä¢ wk (lift E) B [ liftSubst x ])
           H‚â°H‚Ä≤ ‚ä¢B of Œª
      ‚ä¢B‚Ä≤ ‚Üí
    PE.subst
      (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ K‚Çë p A t B u E ‚à∑ v ‚à∑ wk E (Id A t t) [ x ] ‚Üù wk (lift E) B [ liftSubst x ] [ v [ x ] ]‚ÇÄ)
      (PE.sym H‚â°H‚Ä≤) (K‚Çë ‚ä¢u‚Ä≤ ‚ä¢B‚Ä≤ ok)
  heapUpdate-‚ä¢·µâ {t = v} {H‚Ä≤} ([]-cong‚Çë {s‚Ä≤ = s} {A} {t} {u} {E} ok) d =
    PE.subst (Œª x ‚Üí H‚Ä≤ ‚ä¢·µâ []-cong‚Çë s A t u E ‚à∑ v ‚à∑ wk E (Id A t u) [ x ] ‚Üù wk E (Id (E.Erased A) E.[ t ] E.[ u ]) [ x ])
      (PE.sym (heapUpdateSubst d)) ([]-cong‚Çë ok)
    where
    import Graded.Derived.Erased.Untyped ùïÑ s as E
  heapUpdate-‚ä¢·µâ suc‚Çë d = suc‚Çë
  heapUpdate-‚ä¢·µâ (conv ‚ä¢e x) d =
    conv (heapUpdate-‚ä¢·µâ ‚ä¢e d) x

opaque

  -- Stack typing is preserved by heap lookups/updates

  heapUpdate-‚ä¢À¢ : H ‚ä¢ S ‚à∑ t ‚à∑ A ‚Üù B ‚Üí H ‚ä¢ y ‚Ü¶[ q ] c ‚®æ H‚Ä≤ ‚Üí H‚Ä≤ ‚ä¢ S ‚à∑ t ‚à∑ A ‚Üù B
  heapUpdate-‚ä¢À¢ Œµ d = Œµ
  heapUpdate-‚ä¢À¢ {H} {S = e ‚àô S} {t} (‚ä¢e ‚àô ‚ä¢S) d =
      heapUpdate-‚ä¢·µâ ‚ä¢e d ‚àô heapUpdate-‚ä¢À¢ ‚ä¢S d

opaque

  -- Heap typing is preserved by heap lookups/updates

  heapUpdate-‚ä¢ ∞ : Œì ‚ä¢ ∞ H ‚Üí H ‚ä¢ y ‚Ü¶[ q ] c ‚®æ H‚Ä≤ ‚Üí Œì ‚ä¢ ∞ H‚Ä≤
  heapUpdate-‚ä¢ ∞ (‚ä¢H ‚àô ‚ä¢t) (here _) = ‚ä¢H ‚àô ‚ä¢t
  heapUpdate-‚ä¢ ∞ {c = u , _} (_‚àô_ {E = E} {t} {A = A} ‚ä¢H ‚ä¢t) (there d) =
    case heapUpdate-‚ä¢ ∞ ‚ä¢H d of Œª
      ‚ä¢H‚Ä≤ ‚Üí
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    ‚ä¢H‚Ä≤ ‚àô PE.subst‚ÇÇ (Œµ ‚ä¢_‚à∑_) (PE.cong (wk E t [_]) H‚â°H‚Ä≤)
            (PE.cong (A [_]) H‚â°H‚Ä≤) ‚ä¢t

------------------------------------------------------------------------
-- State typing is preserved by reduction


opaque

  ‚ä¢‚Çõ-‚áí·µ• : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí·µ• s‚Ä≤
        ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢Œªt , ‚ä¢e ‚àô ‚ä¢S) (lam‚Çï {H} {p} {t} {E} {u} {E‚Ä≤}) =
    case inversion-‚àò‚Çë ‚ä¢e of Œª {
      (F , G , q , ‚ä¢u , PE.refl , B‚â°Gu) ‚Üí
    case inversion-lam ‚ä¢Œªt of Œª
      (F‚Ä≤ , G‚Ä≤ , q‚Ä≤ , ‚ä¢F‚Ä≤ , ‚ä¢t , A‚â°Œ†‚Ä≤ , ok) ‚Üí
    case injectivity A‚â°Œ†‚Ä≤ of Œª
      (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _ , q‚â°q‚Ä≤) ‚Üí
    case substTypeEq G‚â°G‚Ä≤ (refl ‚ä¢u) of Œª
      Gu‚â°G‚Ä≤u ‚Üí
    case substTerm ‚ä¢t (conv ‚ä¢u F‚â°F‚Ä≤) of Œª
      ‚ä¢t‚Ä≤ ‚Üí
    case stabilityTerm (Œµ ‚àô sym F‚â°F‚Ä≤) ‚ä¢t of Œª
      ‚ä¢t‚Ä≥ ‚Üí
    case singleSubstComp (wk E‚Ä≤ u [ H ]‚Çï)
           (toSubst‚Çï H) (wk (lift E) t) of Œª
      t‚â°t‚Ä≤ ‚Üí
    case sym (trans B‚â°Gu Gu‚â°G‚Ä≤u) of Œª
      G‚Ä≤u‚â°B ‚Üí
    _ , _ , step {A = wk wk‚ÇÄ F} id , _
      , ‚ä¢H ‚àô PE.subst (Œµ ‚ä¢ _ ‚à∑_) (PE.sym (wk‚ÇÄ-subst F)) ‚ä¢u
      , conv (PE.subst (Œµ ‚ä¢_‚à∑ _) t‚â°t‚Ä≤ ‚ä¢t‚Ä≤) G‚Ä≤u‚â°B
      , ‚ä¢À¢-conv‚Çú (wk-‚ä¢À¢ (step id) ‚ä¢S)
         (wk1 (lam p (wk (lift E) t) ‚àò wk E‚Ä≤ u) [ H ‚àô (p , u , E‚Ä≤) ]‚Çï
           ‚â°‚ü® wk1-tail (lam p (wk (lift E) t) ‚àò wk E‚Ä≤ u) ‚ü©‚ä¢‚â°
         (lam p (wk (lift E) t) ‚àò‚ü® p ‚ü© wk E‚Ä≤ u) [ H ]‚Çï
           ‚â°‚ü®‚ü©‚ä¢
         (wk E (lam p t) [ H ]‚Çï) ‚àò‚ü® p ‚ü© (wk E‚Ä≤ u [ H ]‚Çï)
           ‚â°‚ü® conv (Œ≤-red-‚â° ‚ä¢t‚Ä≥ ‚ä¢u ok) G‚Ä≤u‚â°B ‚ü©‚ä¢‚àé‚â°
         (wk (lift E) t [ H ]‚áë‚Çï) [ wk E‚Ä≤ u [ H ]‚Çï ]‚ÇÄ
           ‚â°‚ü® singleSubstComp (wk E‚Ä≤ u [ H ]‚Çï) (toSubst‚Çï H) (wk (lift E) t) ‚ü©
         wk (lift E) t [ H ‚àô (p , u , E‚Ä≤) ]‚Çï ‚àé) }
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) prodÀ¢‚Çï‚ÇÅ =
    case inversion-fst‚Çë ‚ä¢e of Œª {
      (F , G , q , ‚ä¢F , ‚ä¢G , PE.refl , B‚â°F) ‚Üí
    case inversion-prod ‚ä¢t of Œª
      (F‚Ä≤ , G‚Ä≤ , q‚Ä≤ , ‚ä¢F‚Ä≤ , ‚ä¢G‚Ä≤ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ , A‚â°Œ£‚Ä≤ , ok) ‚Üí
    case Œ£-injectivity A‚â°Œ£‚Ä≤ of Œª
      (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _) ‚Üí
    case (sym (trans B‚â°F F‚â°F‚Ä≤)) of Œª
      F‚Ä≤‚â°B ‚Üí
    _ , _ , id , _ , ‚ä¢H , conv ‚ä¢t‚ÇÅ F‚Ä≤‚â°B
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv (Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢G‚Ä≤ ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok) F‚Ä≤‚â°B) }
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) prodÀ¢‚Çï‚ÇÇ =
    case inversion-snd‚Çë ‚ä¢e of Œª {
      (F , G , q , ‚ä¢F , ‚ä¢G , PE.refl , B‚â°G‚Çä) ‚Üí
    case inversion-prod ‚ä¢t of Œª
      (F‚Ä≤ , G‚Ä≤ , q‚Ä≤ , ‚ä¢F‚Ä≤ , ‚ä¢G‚Ä≤ , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ , A‚â°Œ£‚Ä≤ , ok) ‚Üí
    case Œ£-injectivity A‚â°Œ£‚Ä≤ of Œª
      (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _) ‚Üí
    case Œ£-Œ≤‚ÇÅ-‚â° ‚ä¢G‚Ä≤ ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok of Œª
      fstt‚â°t‚ÇÅ ‚Üí
    case substTypeEq G‚â°G‚Ä≤ (refl (fst‚±º‚Ä≤ ‚ä¢t)) of Œª
      G‚Çä‚â°G‚Ä≤‚Çä ‚Üí
    case sym (trans (B‚â°G‚Çä ‚ä¢t) G‚Çä‚â°G‚Ä≤‚Çä) of Œª
      G‚Ä≤‚Çä‚â°B ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv ‚ä¢t‚ÇÇ (trans (substTypeEq (refl ‚ä¢G‚Ä≤) (sym fstt‚â°t‚ÇÅ)) G‚Ä≤‚Çä‚â°B)
      , ‚ä¢À¢-conv‚Çú ‚ä¢S
         (conv (Œ£-Œ≤‚ÇÇ-‚â° ‚ä¢G‚Ä≤ ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok) G‚Ä≤‚Çä‚â°B) }
  ‚ä¢‚Çõ-‚áí·µ• {(m)} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) (prod ∑‚Çï {H} {p} {t‚ÇÅ} {t‚ÇÇ} {E} {r} {q} {A} {u} {E‚Ä≤} {S}) =
    case inversion-prod ‚ä¢t of Œª
      (F , G , _ , ‚ä¢F , ‚ä¢G , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ , A‚â°Œ£ , ok) ‚Üí
    case inversion-prodrec‚Çë ‚ä¢e of Œª {
      (F‚Ä≤ , G‚Ä≤ , _ , ‚ä¢u , ‚ä¢A , PE.refl , B‚â°A‚Çä) ‚Üí
    case Œ£-injectivity A‚â°Œ£ of Œª {
      (F‚Ä≤‚â°F , G‚Ä≤‚â°G , _ , PE.refl , _) ‚Üí
    case conv ‚ä¢t‚ÇÅ (sym F‚Ä≤‚â°F) of Œª
      ‚ä¢t‚ÇÅ‚Ä≤ ‚Üí
    case conv ‚ä¢t‚ÇÇ (substTypeEq (sym G‚Ä≤‚â°G) (refl ‚ä¢t‚ÇÅ‚Ä≤)) of Œª
      ‚ä¢t‚ÇÇ‚Ä≤ ‚Üí
    case begin
          (wk (liftn E‚Ä≤ 2) u) [ liftSubstn (toSubst‚Çï H) 2 ] [ wk E t‚ÇÅ [ H ]‚Çï , wk E t‚ÇÇ [ H ]‚Çï ]‚ÇÅ‚ÇÄ
            ‚â°‚ü® doubleSubstComp (wk (liftn E‚Ä≤ 2) u) _ _ _ ‚ü©
          wk (liftn E‚Ä≤ 2) u [ consSubst (consSubst (toSubst‚Çï H) (wk E t‚ÇÅ [ H ]‚Çï)) (wk E t‚ÇÇ [ H ]‚Çï) ]
            ‚â°Àò‚ü® PE.cong (Œª x ‚Üí wk (liftn E‚Ä≤ 2) u [ consSubst (toSubst‚Çï H‚ÇÅ) x ]) (step-consSubst t‚ÇÇ) ‚ü©
          wk (liftn E‚Ä≤ 2) u [ H‚ÇÇ ]‚Çï ‚àé of Œª
      u‚â°u‚Ä≤ ‚Üí
    case substitutionTerm {œÉ = consSubst (sgSubst (wk E t‚ÇÅ [ H ]‚Çï)) (wk E t‚ÇÇ [ H ]‚Çï)}
           ‚ä¢u ((id , PE.subst (Œµ ‚ä¢ _ ‚à∑_) (PE.sym (subst-id F‚Ä≤)) ‚ä¢t‚ÇÅ‚Ä≤) , ‚ä¢t‚ÇÇ‚Ä≤) Œµ of Œª
      ‚ä¢u‚Ä≤ ‚Üí
    case begin
           wk (lift E‚Ä≤) A [ H ]‚áë‚Çï [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤ [ wk E t‚ÇÅ [ H ]‚Çï , wk E t‚ÇÇ [ H ]‚Çï ]‚ÇÅ‚ÇÄ
             ‚â°Àò‚ü® substCompProdrec (wk (lift E‚Ä≤) A [ H ]‚áë‚Çï) _ _ idSubst ‚ü©
           wk (lift E‚Ä≤) A [ H ]‚áë‚Çï [ liftSubst idSubst ] [ wk E (prod ∑ p t‚ÇÅ t‚ÇÇ) [ H ]‚Çï ]‚ÇÄ
             ‚â°‚ü® PE.cong (_[ prod ∑ p (wk E t‚ÇÅ [ H ]‚Çï) (wk E t‚ÇÇ [ H ]‚Çï) ]‚ÇÄ) (substVar-to-subst subst-lift-id (wk (lift E‚Ä≤) A [ H ]‚áë‚Çï)) ‚ü©
           wk (lift E‚Ä≤) A [ H ]‚áë‚Çï [ idSubst ] [ wk E (prod ∑ p t‚ÇÅ t‚ÇÇ) [ H ]‚Çï ]‚ÇÄ
             ‚â°‚ü® PE.cong (_[ prod ∑ p (wk E t‚ÇÅ [ H ]‚Çï) (wk E t‚ÇÇ [ H ]‚Çï) ]‚ÇÄ) (subst-id (wk (lift E‚Ä≤) A [ H ]‚áë‚Çï)) ‚ü©
           wk (lift E‚Ä≤) A [ H ]‚áë‚Çï [ wk E (prod ∑ p t‚ÇÅ t‚ÇÇ) [ H ]‚Çï ]‚ÇÄ ‚àé of Œª
      A‚Çä‚â° ‚Üí
    case PE.subst‚ÇÇ (Œµ ‚ä¢_‚à∑_) u‚â°u‚Ä≤ A‚Çä‚â° ‚ä¢u‚Ä≤ of Œª
      ‚ä¢u‚Ä≥ ‚Üí
    case begin
        G [ wk E t‚ÇÅ [ H ]‚Çï ]‚ÇÄ ‚â°‚ü® substVar-to-subst (Œª { x0 ‚Üí PE.refl}) G ‚ü©
        G [ toSubst‚Çï H‚ÇÅ ‚Çõ‚Ä¢ lift wk‚ÇÄ ] ‚â°Àò‚ü® subst-wk G ‚ü©
        wk (lift wk‚ÇÄ) G [ H‚ÇÅ ]‚Çï ‚àé of Œª
      G‚â° ‚Üí
    _ , _ , step {A = wk (lift wk‚ÇÄ) G} (step {A = wk wk‚ÇÄ F} id) , _
      , ‚ä¢H ‚àô PE.subst (Œµ ‚ä¢ _ ‚à∑_) (PE.sym (wk‚ÇÄ-subst F)) ‚ä¢t‚ÇÅ
           ‚àô PE.subst‚ÇÇ (Œµ ‚ä¢_‚à∑_) (PE.sym (step-consSubst t‚ÇÇ)) G‚â° ‚ä¢t‚ÇÇ
      , conv ‚ä¢u‚Ä≥ (sym (B‚â°A‚Çä ‚ä¢t))
      , ‚ä¢À¢-conv‚Çú (wk-‚ä¢À¢ (step (step id)) ‚ä¢S)
          (wk (step (step id)) (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u)) [ H‚ÇÇ ]‚Çï
            ‚â°‚ü® step-consSubst (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u)) ‚ü©‚ä¢‚â°
          wk (step id) (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u)) [ H‚ÇÅ ]‚Çï
            ‚â°‚ü® step-consSubst (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u)) ‚ü©‚ä¢‚â°
          wk id (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u)) [ H ]‚Çï
            ‚â°‚ü® PE.cong (_[ H ]‚Çï) (wk-id (prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u))) ‚ü©‚ä¢‚â°
          prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u) [ H ]‚Çï
            ‚â°‚ü® conv (prodrec-Œ≤-‚â° ‚ä¢A ‚ä¢t‚ÇÅ‚Ä≤ ‚ä¢t‚ÇÇ‚Ä≤ ‚ä¢u ok) (sym (B‚â°A‚Çä ‚ä¢t)) ‚ü©‚ä¢‚àé‚â°
          (wk (liftn E‚Ä≤ 2) u) [ liftSubstn (toSubst‚Çï H) 2 ] [ wk E t‚ÇÅ [ H ]‚Çï , wk E t‚ÇÇ [ H ]‚Çï ]‚ÇÅ‚ÇÄ
            ‚â°‚ü® u‚â°u‚Ä≤ ‚ü©
          wk (liftn E‚Ä≤ 2) u [ H‚ÇÇ ]‚Çï ‚àé )}}
    where
    H‚ÇÅ : Heap (1+ m)
    H‚ÇÅ = H ‚àô (‚à£ S ‚à£ ¬∑ r ¬∑ p , t‚ÇÅ , E)
    H‚ÇÇ : Heap (2+ m)
    H‚ÇÇ = H ‚àô (‚à£ S ‚à£ ¬∑ r ¬∑ p , t‚ÇÅ , E) ‚àô (‚à£ S ‚à£ ¬∑ r , t‚ÇÇ , step E)
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) zero‚Çï =
    case inversion-natrec‚Çë ‚ä¢e of Œª {
      (‚ä¢z , ‚ä¢s , ‚ä¢A , PE.refl , B‚â°) ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv ‚ä¢z (sym (B‚â° ‚ä¢t))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv (natrec-zero ‚ä¢A ‚ä¢z ‚ä¢s) (sym (B‚â° ‚ä¢t))) }
  ‚ä¢‚Çõ-‚áí·µ• (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) (suc‚Çï {H} {t} {E} {p} {q} {r} {(n)} {A} {z} {s} {E‚Ä≤}) =
    case inversion-natrec‚Çë ‚ä¢e of Œª {
      (‚ä¢z , ‚ä¢s , ‚ä¢A , PE.refl , B‚â°) ‚Üí
    case inversion-suc ‚ä¢t of Œª
      (‚ä¢t‚Ä≤ , _) ‚Üí
    case natrec‚±º ‚ä¢A ‚ä¢z ‚ä¢s ‚ä¢t‚Ä≤ of Œª
      ‚ä¢natrec ‚Üí
    case PE.subst‚ÇÇ (Œµ ‚ä¢_‚à∑_) (lift-step-natrec A z s _)
          (singleSubstComp (wk E t [ H ]‚Çï) (toSubst‚Çï H) (wk (lift E‚Ä≤) A))
          ‚ä¢natrec of Œª
      ‚ä¢natrec‚Ä≤ ‚Üí
    case PE.subst‚ÇÇ (Œµ ‚ä¢_‚â°_‚à∑ wk (lift E‚Ä≤) A [ H ]‚áë‚Çï [ suc (wk E t [ H ]‚Çï) ]‚ÇÄ)
           (lift-step-natrec‚Ä≤ {œÉ = toSubst‚Çï H} {œÅ = E‚Ä≤} A z s (suc (wk E t)))
           (PE.trans (substCompEq (wk (liftn E‚Ä≤ 2) s))
             (substVar-to-subst (Œª { x0 ‚Üí lift-step-natrec A z s _
                                   ; (x0 +1) ‚Üí PE.refl
                                   ; (x +2) ‚Üí PE.trans (wk1-tail (wk1 (toSubst‚Çï H x))) (wk1-sgSubst (toSubst‚Çï H x) _)})
               (wk (liftn E‚Ä≤ 2) s)))
           (natrec-suc ‚ä¢A ‚ä¢z ‚ä¢s ‚ä¢t‚Ä≤) of Œª
      nr-Œ≤-‚â° ‚Üí
    case syntacticEqTerm nr-Œ≤-‚â° of Œª
      (_ , _ , ‚ä¢s‚Çä) ‚Üí
    _ , _ , step {A = wk (lift E‚Ä≤) A} (step {A = ‚Ñï} id) , _
      , ‚ä¢H ‚àô ‚ä¢t‚Ä≤ ‚àô ‚ä¢natrec‚Ä≤
      , conv ‚ä¢s‚Çä (sym (B‚â° ‚ä¢t))
      , ‚ä¢À¢-conv‚Çú (wk-‚ä¢À¢ (step (step id)) ‚ä¢S)
          (conv nr-Œ≤-‚â° (sym (B‚â° ‚ä¢t)))}
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) star ∑‚Çï =
    case inversion-unitrec‚Çë ‚ä¢e of Œª {
      (‚ä¢u , ‚ä¢A , no-Œ∑ , PE.refl , B‚â°) ‚Üí
    case ‚ä¢‚à∑Unit‚ÜíUnit-allowed ‚ä¢t of Œª
      ok ‚Üí
    _ , _ , id , _
      , ‚ä¢H , conv ‚ä¢u (sym (B‚â° ‚ä¢t))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv (unitrec-Œ≤-‚â° ‚ä¢A ‚ä¢u) (sym (B‚â° ‚ä¢t))) }
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) (unitrec-Œ∑‚Çï Œ∑) =
    case inversion-unitrec ‚ä¢t of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u , A‚â°) ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv ‚ä¢u (trans (substTypeEq (refl ‚ä¢A) (Unit-Œ∑-‚â° (inj‚ÇÇ Œ∑) ‚ä¢t)) (sym A‚â°))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv (unitrec-Œ≤-Œ∑-‚â° ‚ä¢A ‚ä¢t ‚ä¢u Œ∑) (sym A‚â°))
  ‚ä¢‚Çõ-‚áí·µ• (_ , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S) (rfl‚Çï‚±º {H} {p} {q} {A} {t} {B} {u} {v} {E‚Ä≤}) =
    case inversion-J‚Çë ‚ä¢e of Œª {
      (‚ä¢u , ‚ä¢B , PE.refl , B‚Ä≤‚â°) ‚Üí
    case inversion-rfl-Id ‚ä¢rfl of Œª
      t‚â°v ‚Üí
    case syntacticEqTerm t‚â°v of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢v) ‚Üí
    case J-motive-rfl-cong (refl ‚ä¢B) t‚â°v of Œª
      Bt‚â°Bv ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv ‚ä¢u (trans Bt‚â°Bv (sym (B‚Ä≤‚â° ‚ä¢rfl)))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv
        (‚¶Ö J‚Çë p q A t B u v E‚Ä≤ ‚¶Ü·µâ rfl [ H ]‚Çï
          ‚â°‚ü® J-cong‚Ä≤ (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢B) (refl ‚ä¢u) (sym t‚â°v) (refl (rfl‚±º‚Ä≤ t‚â°v)) ‚ü©‚ä¢
        ‚¶Ö J‚Çë p q A t B u t E‚Ä≤ ‚¶Ü·µâ rfl [ H ]‚Çï
          ‚â°‚ü® conv (J-Œ≤-‚â° ‚ä¢t ‚ä¢B ‚ä¢u) (J-motive-rfl-cong (refl ‚ä¢B) t‚â°v) ‚ü©‚ä¢‚àé
        wk E‚Ä≤ u [ H ]‚Çï ‚àé)
        (sym (B‚Ä≤‚â° ‚ä¢rfl))) }
  ‚ä¢‚Çõ-‚áí·µ• (_ , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S)  (rfl‚Çï‚Çñ {H} {p} {A} {t} {B} {u} {E‚Ä≤}) =
    case inversion-K‚Çë ‚ä¢e of Œª {
      (‚ä¢u , ‚ä¢B , ok , PE.refl , B‚Ä≤‚â°) ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv ‚ä¢u (sym (B‚Ä≤‚â° ‚ä¢rfl))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv (K-Œ≤-‚â° ‚ä¢B ‚ä¢u ok) (sym (B‚Ä≤‚â° ‚ä¢rfl))) }
  ‚ä¢‚Çõ-‚áí·µ• (A , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S) rfl‚Çï‚Çë =
    case inversion-[]-cong‚Çë ‚ä¢e of Œª {
      (ok , PE.refl , B‚â°) ‚Üí
    case inversion-rfl-Id ‚ä¢rfl of Œª
      t‚â°u ‚Üí
    case syntacticEqTerm t‚â°u of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv (rfl‚±º‚Ä≤ (ET.[]-cong‚Ä≤ ([]-cong‚ÜíErased ok) t‚â°u)) (sym (B‚â° ‚ä¢t ‚ä¢u))
      , ‚ä¢À¢-conv‚Çú ‚ä¢S (conv ([]-cong-Œ≤-‚â° t‚â°u ok) (sym (B‚â° ‚ä¢t ‚ä¢u))) }

opaque

  ‚ä¢‚Çõ-‚áí‚Çô : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí‚Çô s‚Ä≤
        ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) (var‚Çï {t} d) =
    case heapUpdate-‚ä¢ ∞ ‚ä¢H d of Œª
      ‚ä¢H‚Ä≤ ‚Üí
    case heapUpdateSubst d of Œª
      H‚â°H‚Ä≤ ‚Üí
    case PE.subst (Œµ ‚ä¢ _ ‚â°_‚à∑ A)
           (heapSubstVar d) (refl ‚ä¢t) of Œª
      x[H]‚â°t[H] ‚Üí
    _ , _ , id , _
      , ‚ä¢H‚Ä≤
      , PE.subst (Œµ ‚ä¢_‚à∑ A)
          (PE.trans (heapSubstVar d)
            (PE.cong (wk _ t [_]) H‚â°H‚Ä≤)) ‚ä¢t
      , heapUpdate-‚ä¢À¢ (‚ä¢À¢-conv‚Çú ‚ä¢S x[H]‚â°t[H]) d
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) (var‚Çï‚Ä≤ d) =
    case PE.subst (Œµ ‚ä¢ _ ‚â°_‚à∑ A)
           (heapSubstVar‚Ä≤ d) (refl ‚ä¢t) of Œª
      x[H]‚â°t[H] ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , PE.subst (Œµ ‚ä¢_‚à∑ A) (heapSubstVar‚Ä≤ d) ‚ä¢t
      , ‚ä¢À¢-conv‚Çú ‚ä¢S x[H]‚â°t[H]
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) app‚Çï =
    case inversion-app ‚ä¢t of Œª
      (F , G , q , ‚ä¢t , ‚ä¢u , Gu‚â°A) ‚Üí
    case inversion-Œ†Œ£ (syntacticTerm ‚ä¢t) of Œª
      (‚ä¢F , ‚ä¢G , ok) ‚Üí
    _ , _ , id , _
      , ‚ä¢H , ‚ä¢t
      , conv (‚àò‚Çë ‚ä¢u ‚ä¢G) (sym Gu‚â°A) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) fst‚Çï =
    case inversion-fst ‚ä¢t of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t , A‚â°F) ‚Üí
    _ , _ , id , _ , ‚ä¢H , ‚ä¢t
      , conv (fst‚Çë ‚ä¢F ‚ä¢G) (sym A‚â°F) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) snd‚Çï =
    case inversion-snd ‚ä¢t of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t , A‚â°Gt) ‚Üí
    _ , _ , id , _ , ‚ä¢H , ‚ä¢t
      , conv (snd‚Çë ‚ä¢F ‚ä¢G) (sym A‚â°Gt) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) prodrec‚Çï =
    case inversion-prodrec ‚ä¢t of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢B , ‚ä¢t , ‚ä¢u , A‚â°Bt) ‚Üí
    _ , _ , id , _
      , ‚ä¢H , ‚ä¢t , conv (prodrec‚Çë ‚ä¢u ‚ä¢B) (sym A‚â°Bt) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) natrec‚Çï =
    case inversion-natrec ‚ä¢t of Œª
      (‚ä¢A , ‚ä¢z , ‚ä¢s , ‚ä¢n , C‚â°) ‚Üí
    _ , _ , id , _ , ‚ä¢H , ‚ä¢n
      , conv (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) (sym C‚â°) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) (unitrec‚Çï no-Œ∑) =
    case inversion-unitrec ‚ä¢t of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u , B‚â°At) ‚Üí
    _ , _ , id , _ , ‚ä¢H , ‚ä¢t
      , conv (unitrec‚Çë ‚ä¢u ‚ä¢A no-Œ∑) (sym B‚â°At) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) J‚Çï =
    case inversion-J ‚ä¢t of Œª
      (_ , ‚ä¢t , ‚ä¢B , ‚ä¢u , ‚ä¢v , ‚ä¢w , A‚â°B‚Çä) ‚Üí
    _ , _ , id , _
      , ‚ä¢H , ‚ä¢w , conv (J‚Çë ‚ä¢u ‚ä¢B) (sym A‚â°B‚Çä) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) K‚Çï =
    case inversion-K ‚ä¢t of Œª
      (_ , ‚ä¢t , ‚ä¢B , ‚ä¢u , ‚ä¢v , ok , A‚â°B‚Çä) ‚Üí
    _ , _ , id , _
      , ‚ä¢H , ‚ä¢v , conv (K‚Çë ‚ä¢u ‚ä¢B ok) (sym A‚â°B‚Çä) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çô (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) []-cong‚Çï =
    case inversion-[]-cong ‚ä¢t of Œª
      (_ , ‚ä¢t , ‚ä¢u , ‚ä¢v , ok , A‚â°Id) ‚Üí
    _ , _ , id , _
      , ‚ä¢H , ‚ä¢v , conv ([]-cong‚Çë ok) (sym A‚â°Id) ‚àô ‚ä¢S

opaque

  ‚ä¢‚Çõ-‚áí‚Çô* : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí‚Çô* s‚Ä≤
         ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí‚Çô* ‚ä¢s id = _ , _ , id , ‚ä¢s
  ‚ä¢‚Çõ-‚áí‚Çô* ‚ä¢s (d ‚á® d‚Ä≤) =
    case ‚ä¢‚Çõ-‚áí‚Çô ‚ä¢s d of Œª
      (_ , _ , œÅ , ‚ä¢s‚Ä≤) ‚Üí
    case ‚ä¢‚Çõ-‚áí‚Çô* ‚ä¢s‚Ä≤ d‚Ä≤ of Œª
      (_ , _ , œÅ‚Ä≤ , ‚ä¢s‚Ä≥) ‚Üí
    _ , _ , (œÅ‚Ä≤ W.‚Ä¢‚Çú œÅ) , ‚ä¢s‚Ä≥

opaque

  ‚ä¢‚Çõ-‚áí‚Çõ : ‚¶É ‚Ñï-Fullred ‚¶Ñ
        ‚Üí Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí‚Çõ s‚Ä≤
        ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí‚Çõ (A , ‚ä¢H , ‚ä¢t , ‚ä¢S) (suc‚Çï x) =
    case inversion-suc ‚ä¢t of Œª
      (‚ä¢t , A‚â°‚Ñï) ‚Üí
    _ , _ , id , _ , ‚ä¢H , ‚ä¢t
      , conv suc‚Çë (sym A‚â°‚Ñï) ‚àô ‚ä¢S
  ‚ä¢‚Çõ-‚áí‚Çõ (A , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) (num‚Çï x) =
    case inversion-suc‚Çë ‚ä¢e of Œª {
      (ok , PE.refl , B‚â°‚Ñï) ‚Üí
    _ , _ , id , _ , ‚ä¢H
      , conv (suc‚±º ‚ä¢t) (sym B‚â°‚Ñï)
      , ‚ä¢S }

opaque

  ‚ä¢‚Çõ-‚áí : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí s‚Ä≤
       ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí ‚ä¢s (‚áí‚Çô d) = ‚ä¢‚Çõ-‚áí‚Çô ‚ä¢s d
  ‚ä¢‚Çõ-‚áí ‚ä¢s (‚áí·µ• d) = ‚ä¢‚Çõ-‚áí·µ• ‚ä¢s d
  ‚ä¢‚Çõ-‚áí ‚ä¢s (‚áí‚Çõ d) = ‚ä¢‚Çõ-‚áí‚Çõ ‚ä¢s d


opaque

  ‚ä¢‚Çõ-‚áí* : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí* s‚Ä≤
        ‚Üí ‚àÉ‚ÇÇ Œª œÅ Œî ‚Üí (œÅ ‚à∑ Œî ‚äá Œì) √ó Œî ‚ä¢‚Çõ s‚Ä≤ ‚à∑ A
  ‚ä¢‚Çõ-‚áí* ‚ä¢s id = _ , _ , id , ‚ä¢s
  ‚ä¢‚Çõ-‚áí* ‚ä¢s (d ‚á® d‚Ä≤) =
    case ‚ä¢‚Çõ-‚áí ‚ä¢s d of Œª
      (_ , _ , œÅ , ‚ä¢s‚Ä≤) ‚Üí
    case ‚ä¢‚Çõ-‚áí* ‚ä¢s‚Ä≤ d‚Ä≤ of Œª
      (_ , _ , œÅ‚Ä≤ , ‚ä¢s‚Ä≥) ‚Üí
    _ , _ , (œÅ‚Ä≤ W.‚Ä¢‚Çú œÅ) , ‚ä¢s‚Ä≥

private

  opaque

    -- A relation which is either definitional equality or reduction
    -- depending on a boolean.
    -- Used to reduce code duplication between ‚áí·µ•‚Üí‚áí and ‚áí·µ•‚Üí‚â° below.

    _‚ä¢‚ü®_‚ü©_‚áí/‚â°_‚à∑_ : (Œì : Con Term n) (b : Bool) (t u A : Term n) ‚Üí Set a
    Œì ‚ä¢‚ü® true ‚ü© t ‚áí/‚â° u ‚à∑ A = _‚ä¢_‚áí_‚à∑_ Œì t u A
    Œì ‚ä¢‚ü® false ‚ü© t ‚áí/‚â° u ‚à∑ A = Œì ‚ä¢ t ‚â° u ‚à∑ A

  opaque
    unfolding _‚ä¢‚ü®_‚ü©_‚áí/‚â°_‚à∑_

    ‚ä¢‚¶Ö‚¶Ü-subst/cong : (b : Bool) ‚Üí (T b ‚Üí ¬¨‚Ñï-Fullred)
                  ‚Üí H ‚ä¢ S ‚à∑ t ‚à∑ A ‚Üù B
                  ‚Üí _‚ä¢_‚áí_‚à∑_ Œµ (t [ H ]‚Çï) (u [ H ]‚Çï) A
                  ‚Üí Œµ ‚ä¢‚ü® b ‚ü© ‚¶Ö S ‚¶Ü t [ H ]‚Çï ‚áí/‚â° ‚¶Ö S ‚¶Ü u [ H ]‚Çï ‚à∑ B
    ‚ä¢‚¶Ö‚¶Ü-subst/cong true prop ‚ä¢S t‚áíu = ‚ä¢‚¶Ö‚¶Ü-subst ‚¶É prop _ ‚¶Ñ ‚ä¢S t‚áíu
    ‚ä¢‚¶Ö‚¶Ü-subst/cong false _ ‚ä¢S t‚â°u = ‚ä¢‚¶Ö‚¶Ü-cong ‚ä¢S (subsetTerm t‚â°u)

  opaque

    ‚áí·µ•‚Üí‚áí/‚â° : (b : Bool) ‚Üí (T b ‚Üí ¬¨‚Ñï-Fullred)
           ‚Üí Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí·µ• s‚Ä≤
           ‚Üí Œµ ‚ä¢‚ü® b ‚ü© norm s ‚áí/‚â° norm s‚Ä≤ ‚à∑ A
    ‚áí·µ•‚Üí‚áí/‚â° {A} b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S)
           (lam‚Çï {H} {p} {t} {E} {u} {E‚Ä≤} {S}) =
      case inversion-‚àò‚Çë ‚ä¢e of Œª {
        (F , G , q , ‚ä¢u , PE.refl , C‚â°Gu) ‚Üí
      case PE.subst (Œµ ‚ä¢ (wk E (lam p t) ‚àò‚ü® p ‚ü© wk E‚Ä≤ u) [ H ]‚Çï ‚áí_‚à∑ _)
             (PE.trans (singleSubstComp (wk E‚Ä≤ u [ H ]‚Çï) (toSubst‚Çï H) (wk (lift E) t))
               (substConsId {t = wk E‚Ä≤ u} (wk (lift E) t)))
             (Œ≤-red-‚áí‚ÇÅ ‚ä¢t ‚ä¢u) of Œª
        Œ≤-‚áí ‚Üí
      PE.subst (Œµ ‚ä¢‚ü® b ‚ü© ‚¶Ö S ‚¶Ü (wk E (lam p t) ‚àò wk E‚Ä≤ u) [ H ]‚Çï ‚áí/‚â°_‚à∑ A) lemma
        (‚ä¢‚¶Ö‚¶Ü-subst/cong {u = wk (lift E) t [ wk E‚Ä≤ u ]‚ÇÄ} b prop ‚ä¢S (conv Œ≤-‚áí (sym C‚â°Gu)))}
      where
      lemma : ‚¶Ö S ‚¶Ü (wk (lift E) t [ wk E‚Ä≤ u ]‚ÇÄ) [ H ]‚Çï
            PE.‚â° ‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t) [ H ‚àô (p , u , E‚Ä≤) ]‚Çï
      lemma = begin
        ‚¶Ö S ‚¶Ü (wk (lift E) t [ wk E‚Ä≤ u ]‚ÇÄ) [ H ]‚Çï
          ‚â°‚ü® PE.cong (_[ H ]‚Çï) (‚¶Ö‚¶Ü-sgSubst S) ‚ü©
        ‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t) [ wk E‚Ä≤ u ]‚ÇÄ [ H ]‚Çï
          ‚â°‚ü® singleSubstLift (‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t)) (wk E‚Ä≤ u) ‚ü©
        ‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t) [ liftSubst (toSubst‚Çï H) ] [ wk E‚Ä≤ u [ H ]‚Çï ]‚ÇÄ
          ‚â°‚ü® singleSubstComp _ (toSubst‚Çï H) (‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t)) ‚ü©
        ‚¶Ö wk1À¢ S ‚¶Ü (wk (lift E) t) [ H ‚àô (p , u , E‚Ä≤) ]‚Çï ‚àé

    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) prodÀ¢‚Çï‚ÇÅ =
      case inversion-fst‚Çë ‚ä¢e of Œª {
      (F‚Ä≤ , G‚Ä≤ , q‚Ä≤ , ‚ä¢F‚Ä≤ , ‚ä¢G‚Ä≤ , PE.refl , C‚â°F‚Ä≤) ‚Üí
      case inversion-prod ‚ä¢t of Œª
        (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ , B‚â°Œ£ , ok) ‚Üí
      case Œ£-injectivity (sym B‚â°Œ£) of Œª
        (F‚â°F‚Ä≤ , _) ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (Œ£-Œ≤‚ÇÅ-‚áí ‚ä¢G ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok)
        (trans F‚â°F‚Ä≤ (sym C‚â°F‚Ä≤))) }

    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) prodÀ¢‚Çï‚ÇÇ =
      case inversion-snd‚Çë ‚ä¢e of Œª {
        (F‚Ä≤ , G‚Ä≤ , q‚Ä≤ , ‚ä¢F‚Ä≤ , ‚ä¢G‚Ä≤ , PE.refl , C‚â°G‚Ä≤‚Çä) ‚Üí
      case inversion-prod ‚ä¢t of Œª
        (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t‚ÇÅ , ‚ä¢t‚ÇÇ , B‚â°Œ£ , ok) ‚Üí
      case Œ£-injectivity (sym B‚â°Œ£) of Œª
        (F‚â°F‚Ä≤ , G‚â°G‚Ä≤ , _) ‚Üí
      case substTypeEq G‚â°G‚Ä≤ (refl (conv (fst‚±º‚Ä≤ ‚ä¢t) (sym F‚â°F‚Ä≤))) of Œª
        G‚Çä‚â°G‚Ä≤‚Çä ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (Œ£-Œ≤‚ÇÇ-‚áí ‚ä¢G ‚ä¢t‚ÇÅ ‚ä¢t‚ÇÇ ok)
        (trans G‚Çä‚â°G‚Ä≤‚Çä (sym (C‚â°G‚Ä≤‚Çä ‚ä¢t)))) }

    ‚áí·µ•‚Üí‚áí/‚â° {(m)} b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S)
           (prod ∑‚Çï {H} {p} {t‚ÇÅ} {t‚ÇÇ} {E} {r} {q} {A} {u} {E‚Ä≤} {S}) =
      case inversion-prodrec‚Çë ‚ä¢e of Œª {
        (F , G , q‚Ä≤ , ‚ä¢u , ‚ä¢A , PE.refl , C‚â°) ‚Üí
      case PE.subst (Œµ ‚ä¢ prodrec r p q (wk (lift E‚Ä≤) A) (wk E (prod ∑ p t‚ÇÅ t‚ÇÇ)) (wk (liftn E‚Ä≤ 2) u) [ H ]‚Çï ‚áí_‚à∑ _)
             (PE.sym ([,]-[]-commute {u = wk E t‚ÇÅ} {v = wk E t‚ÇÇ} (wk (liftn E‚Ä≤ 2) u)))
             (prodrec-Œ≤-‚áí‚ÇÅ ‚ä¢A ‚ä¢t ‚ä¢u) of Œª
        Œ≤-‚áí ‚Üí
      PE.subst (Œµ ‚ä¢‚ü® b ‚ü© ‚¶Ö S ‚¶Ü (prodrec r p q _ _ _) [ H ]‚Çï ‚áí/‚â°_‚à∑ _) lemma
        (‚ä¢‚¶Ö‚¶Ü-subst/cong {u = wk (liftn E‚Ä≤ 2) u [ wk E t‚ÇÅ , wk E t‚ÇÇ ]‚ÇÅ‚ÇÄ}
                       b prop ‚ä¢S (conv Œ≤-‚áí (sym (C‚â° ‚ä¢t))))}
      where
      H‚ÇÇ : Heap (2+ m)
      H‚ÇÇ = H ‚àô (‚à£ S ‚à£ ¬∑ r ¬∑ p , t‚ÇÅ , E) ‚àô (‚à£ S ‚à£ ¬∑ r , t‚ÇÇ , step E)
      lemma : ‚¶Ö S ‚¶Ü ((wk (liftn E‚Ä≤ 2) u) [ wk E t‚ÇÅ , wk E t‚ÇÇ ]‚ÇÅ‚ÇÄ) [ H ]‚Çï
            PE.‚â° ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u) [ H‚ÇÇ ]‚Çï
      lemma = begin
        ‚¶Ö S ‚¶Ü ((wk (liftn E‚Ä≤ 2) u) [ wk E t‚ÇÅ , wk E t‚ÇÇ ]‚ÇÅ‚ÇÄ) [ H ]‚Çï
          ‚â°‚ü® PE.cong (_[ H ]‚Çï) (‚¶Ö‚¶Ü-[,] S) ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u) [ wk E t‚ÇÅ , wk E t‚ÇÇ ]‚ÇÅ‚ÇÄ [ H ]‚Çï
          ‚â°‚ü® [,]-[]-fusion (‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u)) ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u) [ consSubst (consSubst (toSubst‚Çï H) (wk E t‚ÇÅ [ H ]‚Çï)) (wk E t‚ÇÇ [ H ]‚Çï) ]
          ‚â°‚ü® PE.cong (Œª x ‚Üí ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u) [ consSubst _ x ]) (PE.sym (step-consSubst t‚ÇÇ)) ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) u) [ H‚ÇÇ ]‚Çï ‚àé


    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) zero‚Çï =
      case inversion-natrec‚Çë ‚ä¢e of Œª {
        (‚ä¢z , ‚ä¢s , ‚ä¢A , PE.refl , B‚â°) ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (natrec-zero ‚ä¢A ‚ä¢z ‚ä¢s)
        (sym (B‚â° ‚ä¢t))) }

    ‚áí·µ•‚Üí‚áí/‚â° {(m)} b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S)
      (suc‚Çï {H} {t} {E} {p} {q} {r} {(n)} {A} {z} {s} {E‚Ä≤} {S}) =
      case inversion-natrec‚Çë ‚ä¢e of Œª {
        (‚ä¢z , ‚ä¢s , ‚ä¢A , PE.refl , B‚â°) ‚Üí
      case PE.subst (Œµ ‚ä¢ nr (wk E (suc t)) [ H ]‚Çï ‚áí_‚à∑ _)
             (PE.sym ([,]-[]-commute (wk (liftn E‚Ä≤ 2) s)))
             (natrec-suc ‚ä¢A ‚ä¢z ‚ä¢s (inversion-suc ‚ä¢t .proj‚ÇÅ)) of Œª
        Œ≤-‚áí ‚Üí
      case ‚ä¢‚¶Ö‚¶Ü-subst/cong {u = wk (liftn E‚Ä≤ 2) s [ wk E t , nr (wk E t) ]‚ÇÅ‚ÇÄ}
             b prop ‚ä¢S (conv Œ≤-‚áí (sym (B‚â° ‚ä¢t))) of Œª
        d ‚Üí
      PE.subst (Œµ ‚ä¢‚ü® b ‚ü© ‚¶Ö S ‚¶Ü (nr (wk E (suc t))) [ H ]‚Çï ‚áí/‚â°_‚à∑ _)
        lemma d }
      where
      nr : Term m ‚Üí Term m
      nr = natrec p q r (wk (lift E‚Ä≤) A) (wk E‚Ä≤ z) (wk (liftn E‚Ä≤ 2) s)
      nr‚Ä≤ : Term (1+ n)
      nr‚Ä≤ = natrec p q r (wk (lift (step id)) A) (wk1 z) (wk (liftn (step id) 2) s) (var x0)
      H‚ÇÇ : Heap (2+ m)
      H‚ÇÇ = H ‚àô (p + r , t , E) ‚àô (r , nr‚Ä≤ , lift E‚Ä≤)
      lemma‚Ä≤ : nr (wk E t) [ H ]‚Çï PE.‚â° wk (lift E‚Ä≤) nr‚Ä≤ [ H ‚àô (p + r , t , E) ]‚Çï
      lemma‚Ä≤ = begin
        nr (wk E t) [ H ]‚Çï ‚â°‚ü® lift-step-natrec A z s _ ‚ü©
        wk (lift E‚Ä≤) nr‚Ä≤ [ H ‚àô (p + r , t , E) ]‚Çï ‚àé
      lemma : ‚¶Ö S ‚¶Ü ((wk (liftn E‚Ä≤ 2) s) [ wk E t , nr (wk E t) ]‚ÇÅ‚ÇÄ) [ H ]‚Çï
            PE.‚â° ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s) [ H‚ÇÇ ]‚Çï
      lemma = begin
        ‚¶Ö S ‚¶Ü ((wk (liftn E‚Ä≤ 2) s) [ wk E t , nr (wk E t) ]‚ÇÅ‚ÇÄ) [ H ]‚Çï
          ‚â°‚ü® PE.cong (_[ H ]‚Çï) (‚¶Ö‚¶Ü-[,] S) ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s) [ wk E t , nr (wk E t) ]‚ÇÅ‚ÇÄ [ H ]‚Çï
              ‚â°‚ü® [,]-[]-fusion (‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s)) ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s) [ consSubst (consSubst (toSubst‚Çï H) (wk E t [ H ]‚Çï)) (nr (wk E t) [ H ]‚Çï) ]
          ‚â°‚ü® PE.cong (Œª x ‚Üí ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s) [ consSubst (consSubst (toSubst‚Çï H) (wk E t [ H ]‚Çï)) x ]) lemma‚Ä≤ ‚ü©
        ‚¶Ö wk2À¢ S ‚¶Ü (wk (liftn E‚Ä≤ 2) s) [ H‚ÇÇ ]‚Çï ‚àé

    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) star ∑‚Çï =
      case inversion-unitrec‚Çë ‚ä¢e of Œª {
        (‚ä¢u , ‚ä¢A , no-Œ∑ , PE.refl , C‚â°A‚Çä) ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (unitrec-Œ≤-‚áí ‚ä¢A ‚ä¢u) (sym (C‚â°A‚Çä ‚ä¢t)))}
    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢t , ‚ä¢S) (unitrec-Œ∑‚Çï Œ∑) =
      case inversion-unitrec ‚ä¢t of Œª
        (‚ä¢A , ‚ä¢t , ‚ä¢u , A‚â°) ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S
        (conv (unitrec-Œ≤-Œ∑-‚áí ‚ä¢A ‚ä¢t ‚ä¢u Œ∑) (sym A‚â°))

    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S) rfl‚Çï‚±º =
      case inversion-J‚Çë ‚ä¢e of Œª {
        (‚ä¢w , ‚ä¢B , PE.refl , ‚â°B) ‚Üí
      case inversion-rfl-Id ‚ä¢rfl of Œª
        t‚â°v ‚Üí
      case trans (J-motive-rfl-cong (refl ‚ä¢B) t‚â°v) (sym (‚â°B ‚ä¢rfl)) of Œª
        ‚â°B‚Ä≤ ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (J-Œ≤-‚áí t‚â°v ‚ä¢B ‚ä¢w) ‚â°B‚Ä≤)}
    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S) rfl‚Çï‚Çñ =
      case inversion-K‚Çë ‚ä¢e of Œª {
        (‚ä¢v , ‚ä¢B , ok , PE.refl , B‚Ä≤‚â°)  ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv (K-Œ≤-‚áí ‚ä¢B ‚ä¢v ok) (sym (B‚Ä≤‚â° ‚ä¢rfl)))}
    ‚áí·µ•‚Üí‚áí/‚â° b prop (B , ‚ä¢H , ‚ä¢rfl , ‚ä¢e ‚àô ‚ä¢S) rfl‚Çï‚Çë =
      case inversion-[]-cong‚Çë ‚ä¢e of Œª {
        (ok , PE.refl , B‚Ä≤‚â°) ‚Üí
      case inversion-rfl-Id ‚ä¢rfl of Œª
        t‚â°u ‚Üí
      case syntacticEqTerm t‚â°u of Œª
        (_ , ‚ä¢t , ‚ä¢u) ‚Üí
      ‚ä¢‚¶Ö‚¶Ü-subst/cong b prop ‚ä¢S (conv ([]-cong-Œ≤-‚áí t‚â°u ok) (sym (B‚Ä≤‚â° ‚ä¢t ‚ä¢u))) }

opaque
  unfolding _‚ä¢‚ü®_‚ü©_‚áí/‚â°_‚à∑_

  -- Reduction of values correspond to one step in the wh cbn reduction

  ‚áí·µ•‚Üí‚áí : ‚¶É ¬¨fr : ¬¨‚Ñï-Fullred ‚¶Ñ
       ‚Üí Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí·µ• s‚Ä≤ ‚Üí _‚ä¢_‚áí_‚à∑_ Œµ (norm s) (norm s‚Ä≤) A
  ‚áí·µ•‚Üí‚áí ‚¶É ¬¨fr ‚¶Ñ = ‚áí·µ•‚Üí‚áí/‚â° true (Œª _ ‚Üí ¬¨fr)

opaque
  unfolding _‚ä¢‚ü®_‚ü©_‚áí/‚â°_‚à∑_

  -- Reduction of values preserves definitional equality

  ‚áí·µ•‚Üí‚â° : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí·µ• s‚Ä≤ ‚Üí _‚ä¢_‚â°_‚à∑_ Œµ (norm s) (norm s‚Ä≤) A
  ‚áí·µ•‚Üí‚â° = ‚áí·µ•‚Üí‚áí/‚â° false (Œª ())

opaque

  -- Reduction preserves definitional equality

  ‚áí‚Üí‚â° : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí s‚Ä≤ ‚Üí _‚ä¢_‚â°_‚à∑_ Œµ (norm s) (norm s‚Ä≤) A
  ‚áí‚Üí‚â° (_ , _ , ‚ä¢t , ‚ä¢S) (‚áí‚Çô d) =
    PE.subst (Œµ ‚ä¢ _ ‚â°_‚à∑ _) (‚áí‚Çô-norm-‚â° d) (refl (‚ä¢‚¶Ö‚¶Ü ‚ä¢S ‚ä¢t))
  ‚áí‚Üí‚â° ‚ä¢s (‚áí·µ• d) =
    ‚áí·µ•‚Üí‚â° ‚ä¢s d
  ‚áí‚Üí‚â° (_ , _ , ‚ä¢t , ‚ä¢S) (‚áí‚Çõ d) =
    PE.subst (Œµ ‚ä¢ _ ‚â°_‚à∑ _) (‚áí‚Çõ-norm-‚â° d) (refl (‚ä¢‚¶Ö‚¶Ü ‚ä¢S ‚ä¢t))

opaque

  -- Reduction preserves definitional equality

  ‚áí*‚Üí‚â° : Œì ‚ä¢‚Çõ s ‚à∑ A ‚Üí s ‚áí* s‚Ä≤ ‚Üí _‚ä¢_‚â°_‚à∑_ Œµ (norm s) (norm s‚Ä≤) A
  ‚áí*‚Üí‚â° (_ , _ , ‚ä¢t , ‚ä¢S) id = refl (‚ä¢‚¶Ö‚¶Ü ‚ä¢S ‚ä¢t)
  ‚áí*‚Üí‚â° ‚ä¢s (x ‚á® d) =
    trans (‚áí‚Üí‚â° ‚ä¢s x) (‚áí*‚Üí‚â° (‚ä¢‚Çõ-‚áí ‚ä¢s x .proj‚ÇÇ .proj‚ÇÇ .proj‚ÇÇ) d)

opaque

  -- Values in non-empty stacks always reduce

  ‚ä¢Val-‚áí·µ• : ‚¶É ¬¨fr : ¬¨‚Ñï-Fullred ‚¶Ñ
          ‚Üí Œì ‚ä¢‚Çõ ‚ü® H , t , E , e ‚àô S ‚ü© ‚à∑ A ‚Üí Val t
          ‚Üí ‚àÉ‚ÇÉ Œª m n (s : State m n) ‚Üí ‚ü® H , t , E , e ‚àô S ‚ü© ‚áí·µ• s
  ‚ä¢Val-‚áí·µ• {e = ‚àò‚Çë p u E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-‚àò‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam-Œ† ‚ä¢t of Œª {
          (_ , PE.refl , _) ‚Üí
        _ , _ , _ , lam‚Çï}
      zero·µ•  ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ† (sym (inversion-zero ‚ä¢t)))
      suc·µ•   ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ† (sym (inversion-suc ‚ä¢t .proj‚ÇÇ)))
      star·µ•  ‚Üí ‚ä•-elim (Unit‚â¢Œ†‚±º (sym (inversion-star ‚ä¢t .proj‚ÇÅ)))
      prod·µ•  ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , Œ†‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (Œ†‚â¢Œ£‚±º Œ†‚â°Œ£)
      rfl·µ•   ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , Œ†‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢Œ† (sym Œ†‚â°Id))
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Œ†‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢Œ† (sym Œ†‚â°U))
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (U‚â¢Œ† (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ•  ‚Üí ‚ä•-elim (U‚â¢Œ† (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢Œ† (sym (inversion-Empty ‚ä¢t)))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Œ†‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢Œ† (sym Œ†‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = fst‚Çë x} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-fst‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Œ£‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Œ†‚â¢Œ£‚±º (sym Œ£‚â°Œ†))
      zero·µ•  ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-zero ‚ä¢t)))
      suc·µ•   ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-suc ‚ä¢t .proj‚ÇÇ)))
      star·µ•  ‚Üí ‚ä•-elim (Unit‚â¢Œ£‚±º (sym (inversion-star ‚ä¢t .proj‚ÇÅ)))
      prod·µ•  ‚Üí
        case inversion-prod-Œ£ ‚ä¢t of Œª {
          (_ , _ , PE.refl , PE.refl , _) ‚Üí
        _ , _ , _ , prodÀ¢‚Çï‚ÇÅ}
      rfl·µ•   ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , Œ£‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ (sym Œ£‚â°Id))
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Œ£‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ•  ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Empty ‚ä¢t)))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Œ£‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = snd‚Çë x} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-snd‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Œ£‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Œ†‚â¢Œ£‚±º (sym Œ£‚â°Œ†))
      zero·µ•  ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-zero ‚ä¢t)))
      suc·µ•   ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-suc ‚ä¢t .proj‚ÇÇ)))
      star·µ•  ‚Üí ‚ä•-elim (Unit‚â¢Œ£‚±º (sym (inversion-star ‚ä¢t .proj‚ÇÅ)))
      prod·µ•  ‚Üí
        case inversion-prod-Œ£ ‚ä¢t of Œª {
          (_ , _ , PE.refl , PE.refl , _) ‚Üí
        _ , _ , _ , prodÀ¢‚Çï‚ÇÇ}
      rfl·µ•   ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , Œ£‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ (sym Œ£‚â°Id))
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Œ£‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ•  ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Empty ‚ä¢t)))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Œ£‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = prodrec‚Çë r p q A u E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-prodrec‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Œ£‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Œ†‚â¢Œ£‚±º (sym Œ£‚â°Œ†))
      zero·µ•  ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-zero ‚ä¢t)))
      suc·µ•   ‚Üí ‚ä•-elim (‚Ñï‚â¢Œ£ (sym (inversion-suc ‚ä¢t .proj‚ÇÇ)))
      star·µ•  ‚Üí ‚ä•-elim (Unit‚â¢Œ£‚±º (sym (inversion-star ‚ä¢t .proj‚ÇÅ)))
      prod·µ•  ‚Üí
        case inversion-prod-Œ£ ‚ä¢t of Œª {
          (_ , _ , PE.refl , PE.refl , _) ‚Üí
        _ , _ , _ , prod ∑‚Çï}
      rfl·µ•   ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , Œ£‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ (sym Œ£‚â°Id))
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Œ£‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ•  ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢Œ£ (sym (inversion-Empty ‚ä¢t)))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Œ£‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢Œ£ (sym Œ£‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = natrec‚Çë p q r A z s E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-natrec‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ• ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , ‚Ñï‚â°Œ† , _) ‚Üí
        ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º ‚Ñï‚â°Œ†)
      zero·µ• ‚Üí _ , _ , _ , zero‚Çï
      suc·µ• ‚Üí _ , _ , _ , suc‚Çï
      star·µ• ‚Üí ‚ä•-elim (‚Ñï‚â¢Unit‚±º (inversion-star ‚ä¢t .proj‚ÇÅ))
      prod·µ• ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , ‚Ñï‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (‚Ñï‚â¢Œ†Œ£‚±º ‚Ñï‚â°Œ£)
      rfl·µ• ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , ‚Ñï‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢‚Ñï (sym ‚Ñï‚â°Id))
      U·µ• ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ• ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , ‚Ñï‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))
      ‚Ñï·µ• ‚Üí ‚ä•-elim (U‚â¢‚Ñï (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ• ‚Üí ‚ä•-elim (U‚â¢‚Ñï (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢‚Ñï (sym (inversion-Empty ‚ä¢t)))
      Id·µ• ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , ‚Ñï‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢‚Ñï (sym ‚Ñï‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = unitrec‚Çë p q A u E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-unitrec‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Unit‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Unit‚â¢Œ†‚±º Unit‚â°Œ†)
      zero·µ•  ‚Üí ‚ä•-elim (‚Ñï‚â¢Unit‚±º (sym (inversion-zero ‚ä¢t)))
      suc·µ•   ‚Üí ‚ä•-elim (‚Ñï‚â¢Unit‚±º (sym (inversion-suc ‚ä¢t .proj‚ÇÇ)))
      star·µ•  ‚Üí
        case inversion-star-Unit ‚ä¢t of Œª {
          (PE.refl , _) ‚Üí
        _ , _ , _ , star ∑‚Çï}
      prod·µ•  ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , Unit‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (Unit‚â¢Œ£‚±º Unit‚â°Œ£)
      rfl·µ•   ‚Üí
        case inversion-rfl ‚ä¢t of Œª
          (_ , _ , _ , _ , Unit‚â°Id) ‚Üí
        ‚ä•-elim (Id‚â¢Unit (sym Unit‚â°Id))
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Unit‚â°U , _) ‚Üí
        ‚ä•-elim (U‚â¢Unit‚±º (sym Unit‚â°U))
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (U‚â¢Unit‚±º (sym (inversion-‚Ñï ‚ä¢t)))
      Unit·µ•  ‚Üí ‚ä•-elim (U‚â¢Unit‚±º (sym (inversion-Unit-U ‚ä¢t .proj‚ÇÅ)))
      Empty·µ• ‚Üí ‚ä•-elim (U‚â¢Unit‚±º (sym (inversion-Empty ‚ä¢t)))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Unit‚â°U) ‚Üí
        ‚ä•-elim (U‚â¢Unit‚±º (sym Unit‚â°U))}
  ‚ä¢Val-‚áí·µ• {e = J‚Çë p q A t B u w E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-J‚Çë ‚ä¢e of Œª {
      (_ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Id‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ† Id‚â°Œ†)
      zero·µ•  ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-zero ‚ä¢t))
      suc·µ•   ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-suc ‚ä¢t .proj‚ÇÇ))
      star·µ•  ‚Üí ‚ä•-elim (Id‚â¢Unit (inversion-star ‚ä¢t .proj‚ÇÅ))
      prod·µ•  ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , Id‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ Id‚â°Œ£)
      rfl·µ•   ‚Üí _ , _ , _ , rfl‚Çï‚±º
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Id‚â°U , _) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (Id‚â¢U (inversion-‚Ñï ‚ä¢t))
      Unit·µ•  ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Unit-U ‚ä¢t .proj‚ÇÅ))
      Empty·µ• ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Empty ‚ä¢t))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Id‚â°U) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)}
  ‚ä¢Val-‚áí·µ• {e = K‚Çë p A t B u E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-K‚Çë ‚ä¢e of Œª {
      (_ , _ , _ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Id‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ† Id‚â°Œ†)
      zero·µ•  ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-zero ‚ä¢t))
      suc·µ•   ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-suc ‚ä¢t .proj‚ÇÇ))
      star·µ•  ‚Üí ‚ä•-elim (Id‚â¢Unit (inversion-star ‚ä¢t .proj‚ÇÅ))
      prod·µ•  ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , Id‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ Id‚â°Œ£)
      rfl·µ•   ‚Üí _ , _ , _ , rfl‚Çï‚Çñ
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Id‚â°U , _) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (Id‚â¢U (inversion-‚Ñï ‚ä¢t))
      Unit·µ•  ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Unit-U ‚ä¢t .proj‚ÇÅ))
      Empty·µ• ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Empty ‚ä¢t))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Id‚â°U) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)}
  ‚ä¢Val-‚áí·µ• {e = []-cong‚Çë s A t u E} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-[]-cong‚Çë ‚ä¢e of Œª {
      (_ , PE.refl , _) ‚Üí
    case v of Œª where
      lam·µ•   ‚Üí
        case inversion-lam ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , Id‚â°Œ† , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ† Id‚â°Œ†)
      zero·µ•  ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-zero ‚ä¢t))
      suc·µ•   ‚Üí ‚ä•-elim (Id‚â¢‚Ñï (inversion-suc ‚ä¢t .proj‚ÇÇ))
      star·µ•  ‚Üí ‚ä•-elim (Id‚â¢Unit (inversion-star ‚ä¢t .proj‚ÇÅ))
      prod·µ•  ‚Üí
        case inversion-prod ‚ä¢t of Œª
          (_ , _ , _ , _ , _ , _ , _ , Id‚â°Œ£ , _) ‚Üí
        ‚ä•-elim (Id‚â¢Œ£ Id‚â°Œ£)
      rfl·µ•   ‚Üí _ , _ , _ , rfl‚Çï‚Çë
      U·µ•     ‚Üí ‚ä•-elim (inversion-U ‚ä¢t)
      Œ†Œ£·µ•    ‚Üí
        case inversion-Œ†Œ£-U ‚ä¢t of Œª
          (_ , _ , Id‚â°U , _) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)
      ‚Ñï·µ•     ‚Üí ‚ä•-elim (Id‚â¢U (inversion-‚Ñï ‚ä¢t))
      Unit·µ•  ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Unit-U ‚ä¢t .proj‚ÇÅ))
      Empty·µ• ‚Üí ‚ä•-elim (Id‚â¢U (inversion-Empty ‚ä¢t))
      Id·µ•    ‚Üí
        case inversion-Id-U ‚ä¢t of Œª
          (_ , _ , _ , Id‚â°U) ‚Üí
        ‚ä•-elim (Id‚â¢U Id‚â°U)}
  ‚ä¢Val-‚áí·µ• {e = suc‚Çë} (_ , ‚ä¢H , ‚ä¢t , ‚ä¢e ‚àô ‚ä¢S) v =
    case inversion-suc‚Çë ‚ä¢e of Œª
      (fr , _ , _) ‚Üí
    ‚ä•-elim (not-‚Ñï-Fullred-and-¬¨‚Ñï-Fullred ‚¶É fr ‚¶Ñ)
