------------------------------------------------------------------------
-- Properties of stack and eliminator typing
------------------------------------------------------------------------

{-# OPTIONS --hidden-argument-puns #-}

open import Graded.Modality
open import Definition.Typed.Restrictions
open import Tools.Bool

module Heap.Typed.Properties
  {a} {M : Set a} {ùïÑ : Modality M}
  (TR : Type-restrictions ùïÑ)
  (‚Ñï-fullred : Bool)
  where

open Type-restrictions TR

open import Definition.Untyped M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties M
open import Definition.Typed TR
open import Definition.Typed.Properties TR
open import Definition.Typed.Consequences.DerivedRules TR
open import Definition.Typed.Consequences.Inversion TR
open import Definition.Typed.Consequences.Substitution TR
open import Definition.Typed.Consequences.Syntactic TR

open import Heap.Typed TR ‚Ñï-fullred
open import Heap.Untyped ùïÑ type-variant
open import Heap.Untyped.Properties ùïÑ type-variant

open import Tools.Empty
open import Tools.Fin
open import Tools.Function
open import Tools.Nat using (1+)
open import Tools.Product
open import Tools.Relation
import Tools.PropositionalEquality as PE

private variable
  H : Heap _ _
  Œì Œî : Con Term _
  t u A B : Term _
  e : Elim _
  S : Stack _
  s : State _ _ _
  x : Fin _

opaque

  -- Typing of erased heaps

  ‚ä¢erasedHeap : ‚àÄ {n} {Œî : Con Term n} ‚Üí ‚ä¢ Œî ‚Üí Œî ‚ä¢ ∞ erasedHeap n ‚à∑ Œî
  ‚ä¢erasedHeap {0} {(Œµ)} ‚ä¢Œî = Œµ
  ‚ä¢erasedHeap {1+ n} {(Œî ‚àô A)} (‚ä¢Œî ‚àô ‚ä¢A) =
    PE.subst (Œª x ‚Üí Œî ‚àô x ‚ä¢ ∞ _ ‚à∑ Œî ‚àô A)
      (erasedHeap-subst A)
      (‚ä¢erasedHeap ‚ä¢Œî ‚àô‚óè ‚ä¢A)

opaque

 -- Typing of the initial state

  ‚ä¢initial : Œî ‚ä¢ t ‚à∑ A ‚Üí Œî ‚®æ Œî ‚ä¢ initial t ‚à∑ A
  ‚ä¢initial {Œî} {t} {A} ‚ä¢t =
    A , ‚ä¢erasedHeap (wfTerm ‚ä¢t)
      , PE.subst (Œî ‚ä¢_‚à∑ _) (lemma t) ‚ä¢t
      , Œµ
    where
    lemma : ‚àÄ {n} (t : Term n) ‚Üí t PE.‚â° wk id t [ erasedHeap _ ]‚Çï
    lemma t = PE.sym (PE.trans (erasedHeap-subst (wk id t)) (wk-id t))

opaque

  -- Well-typed terms applied to well-typed eliminators are
  -- well-typed under a heap substitution.

  ‚ä¢‚¶Ö‚¶Ü·µâ : Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B
      ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A
      ‚Üí Œî ‚ä¢ ‚¶Ö e ‚¶Ü·µâ t [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·µâ (‚àò‚Çë ‚ä¢u _) ‚ä¢t =
    ‚ä¢t ‚àò‚±º ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·µâ (fst‚Çë _ _) ‚ä¢t =
    fst‚±º‚Ä≤ ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ (snd‚Çë _ _) ‚ä¢t =
    snd‚±º‚Ä≤ ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ (prodrec‚Çë ‚ä¢u ‚ä¢A) ‚ä¢t =
    prodrec‚±º‚Ä≤ ‚ä¢A ‚ä¢t ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·µâ (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) ‚ä¢t =
    natrec‚±º ‚ä¢A ‚ä¢z ‚ä¢s ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ (unitrec‚Çë ‚ä¢u ‚ä¢A no-Œ∑) ‚ä¢t =
    unitrec‚±º‚Ä≤ ‚ä¢A ‚ä¢t ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·µâ (J‚Çë ‚ä¢u ‚ä¢B) ‚ä¢t =
    J‚±º‚Ä≤ ‚ä¢B ‚ä¢u ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ (K‚Çë ‚ä¢u ‚ä¢B ok) ‚ä¢t =
    K‚±º‚Ä≤ ‚ä¢B ‚ä¢u ‚ä¢t ok
  ‚ä¢‚¶Ö‚¶Ü·µâ ([]-cong‚Çë ok) ‚ä¢t =
    []-cong‚±º‚Ä≤ ok ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ suc‚Çë ‚ä¢t =
    suc‚±º ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü·µâ (conv ‚ä¢e B‚â°B‚Ä≤) ‚ä¢t =
    conv (‚ä¢‚¶Ö‚¶Ü·µâ ‚ä¢e ‚ä¢t) B‚â°B‚Ä≤

-- opaque

--   -- An inverse of the above property

--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π : ‚¶É T ‚Ñï-fullred ‚¶Ñ
--          ‚Üí Œî ‚ä¢ ‚¶Ö e ‚¶Ü·µâ t [ H ]‚Çï ‚à∑ B
--          ‚Üí ‚àÉ Œª A ‚Üí Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B √ó Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = ‚àò‚Çë p u E} ‚ä¢et =
--     case inversion-app ‚ä¢et of Œª
--       (F , G , q , ‚ä¢t , ‚ä¢u , B‚â°Gu) ‚Üí
--     case syntacticŒ† (syntacticTerm ‚ä¢t) of Œª
--       (‚ä¢F , ‚ä¢G) ‚Üí
--     _ , conv (‚àò‚Çë ‚ä¢u ‚ä¢G) (sym B‚â°Gu) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = fst‚Çë p} ‚ä¢et =
--     case inversion-fst ‚ä¢et of Œª
--       (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t , B‚â°F) ‚Üí
--     _ , conv (fst‚Çë ‚ä¢F ‚ä¢G) (sym B‚â°F) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = snd‚Çë p} ‚ä¢et =
--     case inversion-snd ‚ä¢et of Œª
--       (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢t , B‚â°Gt) ‚Üí
--     _ , conv (snd‚Çë ‚ä¢F ‚ä¢G) (sym B‚â°Gt) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = prodrec‚Çë r p q A u E} ‚ä¢et =
--     case inversion-prodrec ‚ä¢et of Œª
--       (F , G , q , ‚ä¢F , ‚ä¢G , ‚ä¢A , ‚ä¢t , ‚ä¢u , B‚â°At) ‚Üí
--     _ , conv (prodrec‚Çë ‚ä¢u ‚ä¢A) (sym B‚â°At) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = natrec‚Çë p q r A z s E} ‚ä¢et =
--     case inversion-natrec ‚ä¢et of Œª
--       (‚ä¢A , ‚ä¢z , ‚ä¢s , ‚ä¢t , B‚â°) ‚Üí
--     _ , conv (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) (sym B‚â°) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = unitrec‚Çë p q A u E} ‚ä¢et =
--     case inversion-unitrec ‚ä¢et of Œª
--       (‚ä¢A , ‚ä¢t , ‚ä¢u , B‚â°At) ‚Üí
--     _ , conv (unitrec‚Çë ‚ä¢u ‚ä¢A {!!}) (sym B‚â°At) , ‚ä¢t
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = J‚Çë p q A t B u v E} ‚ä¢et =
--     case inversion-J ‚ä¢et of Œª
--       (_ , _ , ‚ä¢B , ‚ä¢u , _ , ‚ä¢w , C‚â°B‚Çä) ‚Üí
--     _ , conv (J‚Çë ‚ä¢u ‚ä¢B) (sym C‚â°B‚Çä) , ‚ä¢w
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = K‚Çë p A t B u E} ‚ä¢et =
--     case inversion-K ‚ä¢et of Œª
--       (_ , _ , ‚ä¢B , ‚ä¢u , ‚ä¢v , ok , C‚â°B‚Çä) ‚Üí
--     _ , conv (K‚Çë ‚ä¢u ‚ä¢B ok) (sym C‚â°B‚Çä) , ‚ä¢v
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = []-cong‚Çë s A t u E} ‚ä¢et =
--     case inversion-[]-cong ‚ä¢et of Œª
--       (_ , _ , _ , ‚ä¢v , ok , B‚â°Id) ‚Üí
--     _ , conv ([]-cong‚Çë ok) (sym B‚â°Id) , ‚ä¢v
--   ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π {e = suc‚Çë} ‚ä¢et =
--     case inversion-suc ‚ä¢et of Œª
--       (‚ä¢t , B‚â°‚Ñï) ‚Üí
--     _ , conv suc‚Çë (sym B‚â°‚Ñï) , ‚ä¢t

opaque

  -- Well-typed terms applied to well-typed stacks are
  -- well-typed under a heap substitution.

  ‚ä¢‚¶Ö‚¶Ü : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
     ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚à∑ A
     ‚Üí Œî ‚ä¢ ‚¶Ö S ‚¶Ü t [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü Œµ ‚ä¢t = ‚ä¢t
  ‚ä¢‚¶Ö‚¶Ü {H} {S = e ‚àô S} {t} (‚ä¢e ‚àô ‚ä¢S) ‚ä¢t =
    ‚ä¢‚¶Ö‚¶Ü ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·µâ ‚ä¢e ‚ä¢t)

-- opaque

--   -- An inverse of the above property

--   ‚ä¢‚¶Ö‚¶Ü‚Åª¬π : ‚¶É T ‚Ñï-fullred ‚¶Ñ
--        ‚Üí Œµ ‚ä¢ ‚¶Ö S ‚¶Ü t [ H ]‚Çï ‚à∑ B
--        ‚Üí ‚àÉ Œª A ‚Üí H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B √ó Œµ ‚ä¢ t [ H ]‚Çï ‚à∑ A
--   ‚ä¢‚¶Ö‚¶Ü‚Åª¬π {S = Œµ} ‚ä¢St =
--     _ , Œµ , ‚ä¢St
--   ‚ä¢‚¶Ö‚¶Ü‚Åª¬π {S = e ‚àô S} ‚ä¢St =
--     case ‚ä¢‚¶Ö‚¶Ü‚Åª¬π {S = S} ‚ä¢St of Œª
--       (_ , ‚ä¢S , ‚ä¢et) ‚Üí
--     case ‚ä¢‚¶Ö‚¶Ü·µâ‚Åª¬π ‚ä¢et of Œª
--       (_ , ‚ä¢e , ‚ä¢t) ‚Üí
--     _ , ‚ä¢e ‚àô ‚ä¢S , ‚ä¢t

opaque

  -- Equal terms are equal when applied to eliminators under
  -- heap substitutions.

  ‚ä¢‚¶Ö‚¶Ü·µâ-cong : Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
           ‚Üí Œî ‚ä¢ ‚¶Ö e ‚¶Ü·µâ t [ H ]‚Çï ‚â° ‚¶Ö e ‚¶Ü·µâ u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (‚àò‚Çë ‚ä¢u _) t‚â°u =
    app-cong t‚â°u (refl ‚ä¢u)
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (fst‚Çë _ _) t‚â°u =
    fst-cong‚Ä≤ t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (snd‚Çë _ _) t‚â°u =
    snd-cong‚Ä≤ t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (prodrec‚Çë ‚ä¢v ‚ä¢A) t‚â°u =
    prodrec-cong‚Ä≤ (refl ‚ä¢A) t‚â°u (refl ‚ä¢v)
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) t‚â°u =
    natrec-cong‚Ä≤ (refl ‚ä¢A) (refl ‚ä¢z) (refl ‚ä¢s) t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑) t‚â°u =
    unitrec-cong‚Ä≤ (refl ‚ä¢A) t‚â°u (refl ‚ä¢v)
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (J‚Çë ‚ä¢u ‚ä¢B) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢v) ‚Üí
    J-cong‚Ä≤ (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢B) (refl ‚ä¢u) (refl ‚ä¢v) t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (K‚Çë ‚ä¢u ‚ä¢B ok) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , _) ‚Üí
    K-cong‚Ä≤ (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢B) (refl ‚ä¢u) t‚â°u ok
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong ([]-cong‚Çë ok) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢u) ‚Üí
    []-cong-cong (refl ‚ä¢A) (refl ‚ä¢t) (refl ‚ä¢u) t‚â°u ok
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong suc‚Çë t‚â°u =
    suc-cong t‚â°u
  ‚ä¢‚¶Ö‚¶Ü·µâ-cong (conv ‚ä¢e B‚â°B‚Ä≤) t‚â°u =
    conv (‚ä¢‚¶Ö‚¶Ü·µâ-cong ‚ä¢e t‚â°u) B‚â°B‚Ä≤

opaque

  -- Equal terms are equal when applied to stacks under
  -- heap substitutions.

  ‚ä¢‚¶Ö‚¶Ü-cong : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
          ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
          ‚Üí Œî ‚ä¢ ‚¶Ö S ‚¶Ü t [ H ]‚Çï ‚â° ‚¶Ö S ‚¶Ü u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü-cong Œµ t‚â°u = t‚â°u
  ‚ä¢‚¶Ö‚¶Ü-cong {H} {S = e ‚àô S} (‚ä¢e ‚àô ‚ä¢S) t‚â°u =
    ‚ä¢‚¶Ö‚¶Ü-cong ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·µâ-cong ‚ä¢e t‚â°u)

opaque

  -- Applying terms to eliminators respects reduction

  ‚ä¢‚¶Ö‚¶Ü·µâ-subst : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
            ‚Üí Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B
            ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚áí u [ H ]‚Çï ‚à∑ A
            ‚Üí Œî ‚ä¢ ‚¶Ö e ‚¶Ü·µâ t [ H ]‚Çï ‚áí ‚¶Ö e ‚¶Ü·µâ u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (‚àò‚Çë ‚ä¢u _) d =
    app-subst d ‚ä¢u
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (fst‚Çë _ _) d =
    fst-subst‚Ä≤ d
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (snd‚Çë _ _) d =
    snd-subst‚Ä≤ d
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (prodrec‚Çë ‚ä¢u ‚ä¢A) d =
    prodrec-subst‚Ä≤ ‚ä¢A ‚ä¢u d
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) d =
    natrec-subst ‚ä¢A ‚ä¢z ‚ä¢s d
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (unitrec‚Çë ‚ä¢u ‚ä¢A no-Œ∑) d =
    unitrec-subst‚Ä≤ ‚ä¢A ‚ä¢u d no-Œ∑
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (J‚Çë ‚ä¢u ‚ä¢B) d =
    J-subst‚Ä≤ ‚ä¢B ‚ä¢u d
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (K‚Çë ‚ä¢u ‚ä¢B ok) d =
    K-subst‚Ä≤ ‚ä¢B ‚ä¢u d ok
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst ([]-cong‚Çë ok) d =
    []-cong-subst‚Ä≤ d ok
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst ‚¶É (fr) ‚¶Ñ (suc‚Çë ‚¶É (¬¨fr) ‚¶Ñ) d =
    ‚ä•-elim (not-T-and-¬¨T‚Ä≤ ‚Ñï-fullred)
  ‚ä¢‚¶Ö‚¶Ü·µâ-subst (conv ‚ä¢e B‚â°B‚Ä≤) d =
    conv (‚ä¢‚¶Ö‚¶Ü·µâ-subst ‚ä¢e d) B‚â°B‚Ä≤

opaque

  -- Applying terms to stacks respects reduction

  ‚ä¢‚¶Ö‚¶Ü-subst : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
           ‚Üí Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œî ‚ä¢ (t [ H ]‚Çï) ‚áí (u [ H ]‚Çï) ‚à∑ A
           ‚Üí Œî ‚ä¢ ‚¶Ö S ‚¶Ü t [ H ]‚Çï ‚áí ‚¶Ö S ‚¶Ü u [ H ]‚Çï ‚à∑ B
  ‚ä¢‚¶Ö‚¶Ü-subst Œµ d = d
  ‚ä¢‚¶Ö‚¶Ü-subst (‚ä¢e ‚àô ‚ä¢S) d =
    ‚ä¢‚¶Ö‚¶Ü-subst ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·µâ-subst ‚ä¢e d)

opaque

  -- Conversion of the head term in eliminator typing

  ‚ä¢·µâ-conv‚Çú : Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B
           ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
           ‚Üí Œî ‚®æ H ‚ä¢·µâ e ‚ü® u ‚ü©‚à∑ A ‚Üù B
  ‚ä¢·µâ-conv‚Çú (‚àò‚Çë {A} {B} ‚ä¢v ‚ä¢B) t‚â°u =
    ‚àò‚Çë {A = A} {B} ‚ä¢v ‚ä¢B
  ‚ä¢·µâ-conv‚Çú (fst‚Çë ‚ä¢A ‚ä¢B) t‚â°u =
    fst‚Çë ‚ä¢A ‚ä¢B
  ‚ä¢·µâ-conv‚Çú (snd‚Çë ‚ä¢A ‚ä¢B) t‚â°u =
    conv (snd‚Çë ‚ä¢A ‚ä¢B)
      (substTypeEq (refl ‚ä¢B) (fst-cong‚Ä≤ (sym t‚â°u)))
  ‚ä¢·µâ-conv‚Çú (prodrec‚Çë {B} {C} ‚ä¢v ‚ä¢A) t‚â°u =
    conv (prodrec‚Çë {B = B} {C} ‚ä¢v ‚ä¢A)
      (substTypeEq (refl ‚ä¢A) (sym t‚â°u))
  ‚ä¢·µâ-conv‚Çú (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) t‚â°u =
    conv (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A)
      (substTypeEq (refl ‚ä¢A) (sym t‚â°u))
  ‚ä¢·µâ-conv‚Çú (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑) t‚â°u =
    conv (unitrec‚Çë ‚ä¢v ‚ä¢A no-Œ∑)
      (substTypeEq (refl ‚ä¢A) (sym t‚â°u))
  ‚ä¢·µâ-conv‚Çú {Œî} {H} {t} {u} (J‚Çë ‚ä¢u ‚ä¢B) t‚â°u =
    case inversion-Id (syntacticEqTerm t‚â°u .proj‚ÇÅ) of Œª
      (‚ä¢A , ‚ä¢t , ‚ä¢v) ‚Üí
    case PE.subst (_ ‚ä¢ _ ‚à∑_) (PE.sym (subst-id _)) ‚ä¢v of Œª
      ‚ä¢v‚Ä≤ ‚Üí
    case PE.subst (Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑_)
           (PE.sym (PE.cong‚ÇÇ (Œª A t ‚Üí Id A t _)
             (wk1-sgSubst _ _) (wk1-sgSubst _ _))) t‚â°u of Œª
      t‚â°u‚Ä≤ ‚Üí
    conv (J‚Çë ‚ä¢u ‚ä¢B)
      (substTypeEq‚ÇÇ (refl ‚ä¢B) (refl ‚ä¢v) (sym t‚â°u‚Ä≤))
  ‚ä¢·µâ-conv‚Çú {H} {t} {u} (K‚Çë ‚ä¢u ‚ä¢B ok) t‚â°u =
    conv (K‚Çë ‚ä¢u ‚ä¢B ok)
      (substTypeEq (refl ‚ä¢B) (sym t‚â°u))
  ‚ä¢·µâ-conv‚Çú {H} {t} {u} ([]-cong‚Çë ok) t‚â°u =
    []-cong‚Çë ok
  ‚ä¢·µâ-conv‚Çú suc‚Çë t‚â°u =
    suc‚Çë
  ‚ä¢·µâ-conv‚Çú (conv ‚ä¢e B‚â°B‚Ä≤) t‚â°u =
    conv (‚ä¢·µâ-conv‚Çú ‚ä¢e t‚â°u) B‚â°B‚Ä≤

opaque

  -- Conversion of the head term in stack typing

  ‚ä¢À¢-conv‚Çú : Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
          ‚Üí Œî ‚ä¢ t [ H ]‚Çï ‚â° u [ H ]‚Çï ‚à∑ A
          ‚Üí Œî ‚®æ H ‚ä¢ S ‚ü® u ‚ü©‚à∑ A ‚Üù B
  ‚ä¢À¢-conv‚Çú Œµ t‚â°u = Œµ
  ‚ä¢À¢-conv‚Çú (‚ä¢e ‚àô ‚ä¢S) t‚â°u =
    ‚ä¢·µâ-conv‚Çú ‚ä¢e t‚â°u ‚àô ‚ä¢À¢-conv‚Çú ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·µâ-cong ‚ä¢e t‚â°u)

opaque

  ‚ä¢whnf‚¶Ö‚¶Ü·µâ : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
          ‚Üí Œî ‚®æ H ‚ä¢·µâ e ‚ü® u ‚ü©‚à∑ A ‚Üù B
          ‚Üí ¬¨ Neutral t
          ‚Üí ¬¨ Whnf (‚¶Ö e ‚¶Ü·µâ t)
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (‚àò‚Çë _ _) ¬¨n (ne (‚àò‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (fst‚Çë _ _) ¬¨n (ne (fst‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (snd‚Çë _ _) ¬¨n (ne (snd‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (prodrec‚Çë _ _) ¬¨n (ne (prodrec‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (natrec‚Çë _ _ _) ¬¨n (ne (natrec‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (unitrec‚Çë _ _ _) ¬¨n (ne (unitrec‚Çô _ n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (J‚Çë _ _) ¬¨n (ne (J‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (K‚Çë _ _ _) ¬¨n (ne (K‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ ([]-cong‚Çë _) ¬¨n (ne ([]-cong‚Çô n)) = ¬¨n n
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ suc‚Çë ¬¨n w = not-T-and-¬¨T‚Ä≤ ‚Ñï-fullred
  ‚ä¢whnf‚¶Ö‚¶Ü·µâ (conv ‚ä¢e x) ¬¨n w = ‚ä¢whnf‚¶Ö‚¶Ü·µâ ‚ä¢e ¬¨n w

opaque

  ‚ä¢whnf‚¶Ö‚¶Ü : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
         ‚Üí Œî ‚®æ H ‚ä¢ e ‚àô S ‚ü® u ‚ü©‚à∑ A ‚Üù B
         ‚Üí ¬¨ Neutral t
         ‚Üí ¬¨ Whnf (‚¶Ö e ‚àô S ‚¶Ü t)
  ‚ä¢whnf‚¶Ö‚¶Ü (‚ä¢e ‚àô Œµ) n w = ‚ä¢whnf‚¶Ö‚¶Ü·µâ ‚ä¢e n w
  ‚ä¢whnf‚¶Ö‚¶Ü {e} (‚ä¢e ‚àô (‚ä¢e‚Ä≤ ‚àô ‚ä¢S)) n w =
    ‚ä¢whnf‚¶Ö‚¶Ü (‚ä¢e‚Ä≤ ‚àô ‚ä¢S) (¬¨‚¶Ö‚¶Ü·µâ-neutral e n) w

opaque

  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
                ‚Üí Œî ‚®æ H ‚ä¢·µâ e ‚ü® t ‚ü©‚à∑ A ‚Üù B
                ‚Üí NeutralAt x t
                ‚Üí NeutralAt x (‚¶Ö e ‚¶Ü·µâ t)
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (‚àò‚Çë _ _) n = ‚àò‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (fst‚Çë _ _) n = fst‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (snd‚Çë _ _) n = snd‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (prodrec‚Çë _ _) n = prodrec‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (natrec‚Çë _ _ _) n = natrec‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (unitrec‚Çë _ _ x) n = unitrec‚Çô x n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (J‚Çë _ _) n = J‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (K‚Çë _ _ _) n = K‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt ([]-cong‚Çë _) n = []-cong‚Çô n
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt suc‚Çë n = ‚ä•-elim (not-T-and-¬¨T‚Ä≤ ‚Ñï-fullred)
  ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt (conv ‚ä¢e x) n = ‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt ‚ä¢e n

opaque

  ‚ä¢‚¶Ö‚¶Ü-NeutralAt : ‚¶É T (not ‚Ñï-fullred) ‚¶Ñ
               ‚Üí Œî ‚®æ H ‚ä¢ S ‚ü® t ‚ü©‚à∑ A ‚Üù B
               ‚Üí NeutralAt x t
               ‚Üí NeutralAt x (‚¶Ö S ‚¶Ü t)
  ‚ä¢‚¶Ö‚¶Ü-NeutralAt Œµ n = n
  ‚ä¢‚¶Ö‚¶Ü-NeutralAt (‚ä¢e ‚àô ‚ä¢S) n = ‚ä¢‚¶Ö‚¶Ü-NeutralAt ‚ä¢S (‚ä¢‚¶Ö‚¶Ü·µâ-NeutralAt ‚ä¢e n)
