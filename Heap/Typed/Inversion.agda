------------------------------------------------------------------------
-- Inversion lemmata for Heap typing
------------------------------------------------------------------------

open import Graded.Modality
open import Definition.Typed.Restrictions
open import Tools.Bool

module Heap.Typed.Inversion
  {a} {M : Set a} {ùïÑ : Modality M}
  (TR : Type-restrictions ùïÑ)
  (‚Ñï-fullred : Bool)
  where

open Type-restrictions TR

open import Definition.Untyped M
open import Definition.Untyped.Properties M
open import Definition.Typed TR
open import Definition.Typed.Consequences.DerivedRules TR
open import Definition.Typed.Consequences.Injectivity TR
open import Definition.Typed.Consequences.Inversion TR
open import Definition.Typed.Consequences.Substitution TR
open import Definition.Typed.Consequences.Syntactic TR
import Graded.Derived.Erased.Untyped ùïÑ as E
open import Graded.Derived.Erased.Typed TR

open import Heap.Typed TR ‚Ñï-fullred
open import Heap.Untyped ùïÑ

open import Tools.Fin
open import Tools.Function
open import Tools.Product
import Tools.PropositionalEquality as PE
open import Tools.Sum hiding (sym)

private variable
  H : Heap _
  Œì : Con Term _
  t u v w z s A B C D F G : Term _
  p q r : M
  E : Env _ _
  S : Stack _
  e : Elim _
  s‚Ä≤ : Strength

opaque

  -- Inversion of application

  inversion-‚àò‚Çë : H ‚ä¢·µâ ‚àò‚Çë p u E ‚à∑ t ‚à∑ A ‚Üù B
               ‚Üí ‚àÉ‚ÇÉ Œª F G q ‚Üí Œµ ‚ä¢ wk E u [ H ]‚Çï ‚à∑ F
                 √ó A PE.‚â° Œ† p , q ‚ñ∑ F ‚ñπ G √ó Œµ ‚ä¢ B ‚â° G [ wk E u [ H ]‚Çï ]‚ÇÄ
  inversion-‚àò‚Çë (‚àò‚Çë ‚ä¢u ‚ä¢B) =
      _ , _ , _ , ‚ä¢u
    , PE.refl
    , refl (substType ‚ä¢B ‚ä¢u)
  inversion-‚àò‚Çë (conv ‚ä¢e B‚â°B‚Ä≤) =
    case inversion-‚àò‚Çë ‚ä¢e of Œª
      (F , G , q , ‚ä¢u , A‚â°Œ† , B‚â°) ‚Üí
    _ , _ , _ , ‚ä¢u , A‚â°Œ† , trans (sym B‚â°B‚Ä≤) B‚â°

opaque

  -- Inversion of fst

  inversion-fst‚Çë : H ‚ä¢·µâ fst‚Çë p ‚à∑ t ‚à∑ A ‚Üù B
                 ‚Üí ‚àÉ‚ÇÉ Œª F G q ‚Üí (Œµ ‚ä¢ F) √ó (Œµ ‚àô F ‚ä¢ G)
                   √ó A PE.‚â° Œ£À¢ p , q ‚ñ∑ F ‚ñπ G √ó Œµ ‚ä¢ B ‚â° F
  inversion-fst‚Çë (fst‚Çë ‚ä¢A ‚ä¢B) =
    _ , _ , _ , ‚ä¢A , ‚ä¢B , PE.refl , refl ‚ä¢A
  inversion-fst‚Çë (conv ‚ä¢e B‚â°B‚Ä≤) =
    case inversion-fst‚Çë ‚ä¢e of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , A‚â°Œ£ , B‚Ä≤‚â°) ‚Üí
    _ , _ , _ , ‚ä¢F , ‚ä¢G , A‚â°Œ£ , trans (sym B‚â°B‚Ä≤) B‚Ä≤‚â°

opaque

  -- Inversion of snd

  inversion-snd‚Çë : H ‚ä¢·µâ snd‚Çë p ‚à∑ t ‚à∑ A ‚Üù B
                 ‚Üí ‚àÉ‚ÇÉ Œª F G q ‚Üí (Œµ ‚ä¢ F) √ó (Œµ ‚àô F ‚ä¢ G)
                   √ó A PE.‚â° Œ£À¢ p , q ‚ñ∑ F ‚ñπ G
                   √ó (Œµ ‚ä¢ t [ H ]‚Çï ‚à∑ A ‚Üí Œµ ‚ä¢ B ‚â° G [ fst p t [ H ]‚Çï ]‚ÇÄ)
  inversion-snd‚Çë (snd‚Çë ‚ä¢A ‚ä¢B) =
    _ , _ , _ , ‚ä¢A , ‚ä¢B , PE.refl
      , Œª ‚ä¢t ‚Üí refl (substType ‚ä¢B (fst‚±º‚Ä≤ ‚ä¢t))
  inversion-snd‚Çë (conv ‚ä¢e B‚â°B‚Ä≤) =
    case inversion-snd‚Çë ‚ä¢e of Œª
      (F , G , q , ‚ä¢F , ‚ä¢G , A‚â°Œ£ , B‚â°Gt) ‚Üí
    _ , _ , _ , ‚ä¢F , ‚ä¢G , A‚â°Œ£
      , Œª ‚ä¢t ‚Üí trans (sym B‚â°B‚Ä≤) (B‚â°Gt ‚ä¢t)

opaque

  -- Inversion or prodrec

  inversion-prodrec‚Çë : H ‚ä¢·µâ prodrec‚Çë r p q A u E ‚à∑ t ‚à∑ B ‚Üù C
                     ‚Üí ‚àÉ‚ÇÉ Œª F G q‚Ä≤
                       ‚Üí Œµ ‚àô F ‚àô G ‚ä¢ wk (liftn E 2) u [ liftSubstn (toSubst‚Çï H) 2 ] ‚à∑ (wk (lift E) A [ H ]‚áë‚Çï [ prod ∑ p (var x1) (var x0) ]‚Üë¬≤)
                       √ó Œµ ‚àô Œ£ ∑ p , q‚Ä≤ ‚ñ∑ F ‚ñπ G ‚ä¢ wk (lift E) A [ H ]‚áë‚Çï
                       √ó B PE.‚â° Œ£ ∑ p , q‚Ä≤ ‚ñ∑ F ‚ñπ G
                       √ó (Œµ ‚ä¢ t [ H ]‚Çï ‚à∑ Œ£ ∑ p , q‚Ä≤ ‚ñ∑ F ‚ñπ G ‚Üí Œµ ‚ä¢ C ‚â° wk (lift E) A [ H ]‚áë‚Çï [ t [ H ]‚Çï ]‚ÇÄ)
  inversion-prodrec‚Çë (prodrec‚Çë ‚ä¢u ‚ä¢A) =
    _ , _ , _ , ‚ä¢u , ‚ä¢A , PE.refl , Œª ‚ä¢t ‚Üí refl (substType ‚ä¢A ‚ä¢t)
  inversion-prodrec‚Çë (conv ‚ä¢e ‚â°C) =
    case inversion-prodrec‚Çë ‚ä¢e of Œª
      (_ , _ , _ , ‚ä¢u , ‚ä¢A , B‚â° , C‚Ä≤‚â°) ‚Üí
    _ , _ , _ , ‚ä¢u , ‚ä¢A , B‚â° , Œª ‚ä¢t ‚Üí trans (sym ‚â°C) (C‚Ä≤‚â° ‚ä¢t)

opaque

  -- Inversion of natrec

  inversion-natrec‚Çë : H ‚ä¢·µâ natrec‚Çë p q r A z s E ‚à∑ t ‚à∑ B ‚Üù C
                    ‚Üí Œµ ‚ä¢ wk E z [ H ]‚Çï ‚à∑ wk (lift E) A [ H ]‚áë‚Çï [ zero ]‚ÇÄ
                    √ó Œµ ‚àô ‚Ñï ‚àô wk (lift E) A [ H ]‚áë‚Çï ‚ä¢ wk (liftn E 2) s [ H ]‚áë¬≤‚Çï ‚à∑ wk (lift E) A [ H ]‚áë‚Çï [ suc (var x1) ]‚Üë¬≤
                    √ó Œµ ‚àô ‚Ñï ‚ä¢ wk (lift E) A [ H ]‚áë‚Çï
                    √ó B PE.‚â° ‚Ñï
                    √ó (Œµ ‚ä¢ t [ H ]‚Çï ‚à∑ ‚Ñï ‚Üí Œµ ‚ä¢ C ‚â° wk (lift E) A [ H ]‚áë‚Çï [ t [ H ]‚Çï ]‚ÇÄ)
  inversion-natrec‚Çë (natrec‚Çë ‚ä¢z ‚ä¢s ‚ä¢A) =
    ‚ä¢z , ‚ä¢s , ‚ä¢A , PE.refl , Œª ‚ä¢t ‚Üí refl (substType ‚ä¢A ‚ä¢t)
  inversion-natrec‚Çë (conv ‚ä¢e ‚â°C) =
    case inversion-natrec‚Çë ‚ä¢e of Œª
      (‚ä¢z , ‚ä¢s , ‚ä¢A , B‚â° , C‚Ä≤‚â°) ‚Üí
    ‚ä¢z , ‚ä¢s , ‚ä¢A , B‚â° , Œª ‚ä¢t ‚Üí trans (sym ‚â°C) (C‚Ä≤‚â° ‚ä¢t)

opaque

  -- Inversion of unitrec

  inversion-unitrec‚Çë : H ‚ä¢·µâ unitrec‚Çë p q A u E ‚à∑ t ‚à∑ B ‚Üù C
                     ‚Üí Œµ ‚ä¢ wk E u [ H ]‚Çï ‚à∑ wk (lift E) A [ H ]‚áë‚Çï [ star ∑ ]‚ÇÄ
                     √ó (Œµ ‚àô Unit ∑ ‚ä¢ wk (lift E) A [ H ]‚áë‚Çï)
                     √ó B PE.‚â° Unit ∑
                     √ó (Œµ ‚ä¢ t [ H ]‚Çï ‚à∑ B ‚Üí Œµ ‚ä¢ C ‚â° (wk (lift E) A [ H ]‚áë‚Çï [ t [ H ]‚Çï ]‚ÇÄ))
  inversion-unitrec‚Çë {A} (unitrec‚Çë ‚ä¢u ‚ä¢A) =
    ‚ä¢u , ‚ä¢A , PE.refl
       , Œª ‚ä¢t ‚Üí refl (substType ‚ä¢A ‚ä¢t)
  inversion-unitrec‚Çë (conv ‚ä¢e ‚â°C) =
    case inversion-unitrec‚Çë ‚ä¢e of Œª
      (‚ä¢u , ‚ä¢A , B‚â° , C‚â°) ‚Üí
    ‚ä¢u , ‚ä¢A , B‚â° , Œª ‚ä¢t ‚Üí trans (sym ‚â°C) (C‚â° ‚ä¢t)

-- opaque

--   -- Inversion of emptyrec

--   inversion-emptyrec‚Çë : H ‚ä¢·µâ emptyrec‚Çë p A E ‚à∑ t ‚à∑ B ‚Üù C
--                       ‚Üí Œµ ‚ä¢ wk E A [ H ]‚Çï
--                       √ó B PE.‚â° Empty
--                       √ó (Œµ ‚ä¢ C ‚â° wk E A [ H ]‚Çï)
--   inversion-emptyrec‚Çë (emptyrec‚Çë ‚ä¢A) =
--     ‚ä¢A , PE.refl , refl ‚ä¢A
--   inversion-emptyrec‚Çë (conv ‚ä¢e ‚â°C) =
--     case inversion-emptyrec‚Çë ‚ä¢e of Œª
--       (‚ä¢A , B‚â° , C‚â°) ‚Üí
--     ‚ä¢A , B‚â° , trans (sym ‚â°C) C‚â°

opaque

  -- Inversion of J

  inversion-J‚Çë : H ‚ä¢·µâ J‚Çë p q A t B u v E ‚à∑ w ‚à∑ C ‚Üù D
               ‚Üí Œµ ‚ä¢ wk E u [ H ]‚Çï ‚à∑ wk (liftn E 2) B [ liftSubstn (toSubst‚Çï H) 2 ] [ wk E t [ H ]‚Çï , rfl ]‚ÇÅ‚ÇÄ
               √ó Œµ ‚àô wk E A [ H ]‚Çï ‚àô Id (wk1 (wk E A [ H ]‚Çï)) (wk1 (wk E t [ H ]‚Çï)) (var x0) ‚ä¢ wk (liftn E 2) B [ liftSubstn (toSubst‚Çï H) 2 ]
               √ó C PE.‚â° wk E (Id A t v) [ H ]‚Çï
               √ó (Œµ ‚ä¢ w [ H ]‚Çï ‚à∑ wk E (Id A t v) [ H ]‚Çï ‚Üí
                  Œµ ‚ä¢ D ‚â° wk (liftn E 2) B [ liftSubstn (toSubst‚Çï H) 2 ] [ wk E v [ H ]‚Çï , w [ H ]‚Çï ]‚ÇÅ‚ÇÄ)
  inversion-J‚Çë (J‚Çë ‚ä¢u ‚ä¢B) =
    ‚ä¢u , ‚ä¢B , PE.refl , Œª ‚ä¢w ‚Üí refl (J-result ‚ä¢B ‚ä¢w)
  inversion-J‚Çë (conv ‚ä¢e ‚â°D) =
    case inversion-J‚Çë ‚ä¢e of Œª
      (‚ä¢u , ‚ä¢B , C‚â° , D‚Ä≤‚â°) ‚Üí
    ‚ä¢u , ‚ä¢B , C‚â° , Œª ‚ä¢w ‚Üí trans (sym ‚â°D) (D‚Ä≤‚â° ‚ä¢w)

opaque

  -- Inversion of K

  inversion-K‚Çë : H ‚ä¢·µâ K‚Çë p A t B u E ‚à∑ v ‚à∑ C ‚Üù D
               ‚Üí Œµ ‚ä¢ wk E u [ H ]‚Çï ‚à∑ wk (lift E) B [ H ]‚áë‚Çï [ rfl ]‚ÇÄ
               √ó Œµ ‚àô wk E (Id A t t) [ H ]‚Çï ‚ä¢ wk (lift E) B [ H ]‚áë‚Çï
               √ó K-allowed
               √ó C PE.‚â° wk E (Id A t t) [ H ]‚Çï
               √ó (Œµ ‚ä¢ v [ H ]‚Çï ‚à∑ wk E (Id A t t) [ H ]‚Çï ‚Üí Œµ ‚ä¢ D ‚â° wk (lift E) B [ H ]‚áë‚Çï [ v [ H ]‚Çï ]‚ÇÄ)
  inversion-K‚Çë (K‚Çë ‚ä¢u ‚ä¢B ok) =
    ‚ä¢u , ‚ä¢B , ok , PE.refl , Œª ‚ä¢v ‚Üí refl (substType ‚ä¢B ‚ä¢v)
  inversion-K‚Çë (conv ‚ä¢e ‚â°D) =
    case inversion-K‚Çë ‚ä¢e of Œª
      (‚ä¢u , ‚ä¢B , ok , C‚â° , D‚Ä≤‚â°) ‚Üí
    ‚ä¢u , ‚ä¢B , ok , C‚â° , Œª ‚ä¢v ‚Üí trans (sym ‚â°D) (D‚Ä≤‚â° ‚ä¢v)

opaque

  -- Inversion of []-cong

  inversion-[]-cong‚Çë : H ‚ä¢·µâ []-cong‚Çë s‚Ä≤ A t u E ‚à∑ v ‚à∑ B ‚Üù C
                     ‚Üí let open E s‚Ä≤ in
                     []-cong-allowed s‚Ä≤
                     √ó B PE.‚â° wk E (Id A t u) [ H ]‚Çï
                     √ó (Œµ ‚ä¢ wk E t [ H ]‚Çï ‚à∑ wk E A [ H ]‚Çï ‚Üí
                        Œµ ‚ä¢ wk E u [ H ]‚Çï ‚à∑ wk E A [ H ]‚Çï ‚Üí
                        Œµ ‚ä¢ C ‚â° (wk E (Id (Erased A) ([ t ]) ([ u ])) [ H ]‚Çï))
  inversion-[]-cong‚Çë ([]-cong‚Çë ok) =
    ok , PE.refl
       , Œª ‚ä¢t ‚ä¢u ‚Üí refl (Id‚±º ([]‚±º ([]-cong‚ÜíErased ok) ‚ä¢t)
                             ([]‚±º ([]-cong‚ÜíErased ok) ‚ä¢u))
  inversion-[]-cong‚Çë (conv ‚ä¢e ‚â°C) =
    case inversion-[]-cong‚Çë ‚ä¢e of Œª
      (ok , B‚â° , C‚Ä≤‚â°) ‚Üí
    ok , B‚â° , Œª ‚ä¢t ‚ä¢u ‚Üí trans (sym ‚â°C) (C‚Ä≤‚â° ‚ä¢t ‚ä¢u)

opaque

  -- Inversion of suc

  inversion-suc‚Çë : H ‚ä¢·µâ suc‚Çë ‚à∑ t ‚à∑ A ‚Üù B
                 ‚Üí T ‚Ñï-fullred √ó A PE.‚â° ‚Ñï √ó Œµ ‚ä¢ B ‚â° ‚Ñï
  inversion-suc‚Çë (suc‚Çë ‚¶É (x) ‚¶Ñ) =
    x , PE.refl , refl (‚Ñï‚±º Œµ)
  inversion-suc‚Çë (conv ‚ä¢e ‚â°B) =
    case inversion-suc‚Çë ‚ä¢e of Œª
      (x , A‚â° , B‚Ä≤‚â°) ‚Üí
    x , A‚â° , trans (sym ‚â°B) B‚Ä≤‚â°
