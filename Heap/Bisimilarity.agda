open import Graded.Modality
open import Graded.Usage.Restrictions
open import Tools.Bool
open import Definition.Typed.Restrictions

module Heap.Bisimilarity
  {a} {M : Set a} {ùïÑ : Modality M}
  (UR : Usage-restrictions ùïÑ)
  (TR : Type-restrictions ùïÑ)
  (erased-heap : Bool)
  where

open Modality ùïÑ hiding (has-nr)
open Type-restrictions TR
open Usage-restrictions UR

open import Tools.Empty
open import Tools.Function
open import Tools.Product
open import Tools.PropositionalEquality as PE
open import Tools.Relation
open import Tools.Sum hiding (id)

open import Heap.Options
open import Heap.Untyped type-variant UR
open import Heap.Untyped.Properties type-variant UR
open import Heap.Usage type-variant UR erased-heap
open import Heap.Usage.Properties type-variant UR erased-heap
open import Heap.Normalization type-variant UR
import Heap.Reduction type-variant UR as R
import Heap.Reduction.Properties type-variant UR as RP

open import Definition.Untyped M
open import Definition.Untyped.Inversion M
open import Definition.Untyped.Neutral M type-variant
open import Definition.Untyped.Properties.Neutral M type-variant

open import Definition.Typed TR
open import Definition.Typed.Properties TR
open import Definition.Typed.RedSteps TR hiding (_‚á®*_)
open import Definition.Typed.Consequences.Canonicity TR
open import Definition.Typed.Consequences.Inversion TR
open import Definition.Typed.Consequences.Reduction TR

open import Graded.Context ùïÑ hiding (_‚ü®_‚ü©)
open import Graded.Mode ùïÑ
open import Graded.Modality.Properties.Subtraction semiring-with-meet
open import Graded.Restrictions ùïÑ

private variable
  s s‚Ä≤ : State _ _ _
  H H‚Ä≤ H‚Ä≥ : Heap _ _
  t t‚Ä≤ u u‚Ä≤ v w A B : Term _
  œÅ œÅ‚Ä≤ : Wk _ _
  S S‚Ä≤ : Stack _
  Œ≥ Œ¥ Œ∑ : Con‚Çò _
  Œì Œî : Con Term _
  m : Mode
  p q : M

-- Assumptions that are used to prove some bisimilarity properties
-- as well as some properties elsewhere that follow from them

record Assumptions : Set a where
  field
    subtraction-ok : Supports-subtraction
    erased-assumption : T (not erased-heap) ‚äé No-erased-matches‚Ä≤ type-variant UR
    Unit ∑-Œ∑‚Üí : ‚àÄ {p q} ‚Üí Unit ∑-Œ∑ ‚Üí Unitrec-allowed ùüô·µê p q ‚Üí p ‚â§ ùüò
    instance
      has-well-behaved-zero : Has-well-behaved-zero M semiring-with-meet
      nr-avail : Nr-available

  instance
    has-nr : Has-nr M semiring-with-meet
    has-nr = Modality.has-nr ùïÑ nr-avail

  field instance
    has-factoring-nr : Has-factoring-nr M semiring-with-meet

-- Bisimilarity between the tracking and non-tracking redutions
-- (with or without reduction to numerals).

module _ (‚Ñï-fullred : Bool) where

  private
    opts‚Çú opts‚Çô‚Çú : Options
    opts‚Çú = tracking-and-‚Ñï-fullred-if ‚Ñï-fullred
    opts‚Çô‚Çú = not-tracking-and-‚Ñï-fullred-if ‚Ñï-fullred
    module R‚Çú = R opts‚Çú
    module R‚Çô‚Çú = R opts‚Çô‚Çú

  open RP opts‚Çô‚Çú

  -- Most of the bisimilarity properties are proven (only) under
  -- the assumption that the nr-function is factoring

  module _ ‚¶É _ : Has-nr M semiring-with-meet ‚¶Ñ
           ‚¶É _ : Has-factoring-nr M semiring-with-meet ‚¶Ñ
           where

    opaque

      bisim‚ÇÅ‚Çô : s R‚Çú.‚áí‚Çô ‚ü® H , t , œÅ , S ‚ü©
              ‚Üí ‚àÉ Œª H‚Ä≤ ‚Üí s R‚Çô‚Çú.‚áí‚Çô ‚ü® H‚Ä≤ , t , œÅ , S ‚ü© √ó H ~ ∞ H‚Ä≤
      bisim‚ÇÅ‚Çô (R‚Çú.var‚Çï d)        = _ , R‚Çô‚Çú.var‚Çï‚Ä≤ (‚Ü¶[]‚Üí‚Ü¶ d) , ~ ∞-sym (update-~ ∞ d)
      bisim‚ÇÅ‚Çô R‚Çú.app‚Çï            = _ , R‚Çô‚Çú.app‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.fst‚Çï            = _ , R‚Çô‚Çú.fst‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.snd‚Çï            = _ , R‚Çô‚Çú.snd‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.prodrec‚Çï        = _ , R‚Çô‚Çú.prodrec‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.natrec‚Çï         = _ , R‚Çô‚Çú.natrec‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô (R‚Çú.unitrec‚Çï no-Œ∑) = _ , R‚Çô‚Çú.unitrec‚Çï no-Œ∑ , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.emptyrec‚Çï       = _ , R‚Çô‚Çú.emptyrec‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.J‚Çï              = _ , R‚Çô‚Çú.J‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.K‚Çï              = _ , R‚Çô‚Çú.K‚Çï , ~ ∞-refl
      bisim‚ÇÅ‚Çô R‚Çú.[]-cong‚Çï        = _ , R‚Çô‚Çú.[]-cong‚Çï , ~ ∞-refl

    opaque

      bisim‚ÇÅ·µ• : s R‚Çú.‚áí·µ• ‚ü® H , t , œÅ , S ‚ü©
              ‚Üí s R‚Çô‚Çú.‚áí·µ• ‚ü® H , t , œÅ , S ‚ü©
      bisim‚ÇÅ·µ• R‚Çú.lam‚Çï           = R‚Çô‚Çú.lam‚Çï
      bisim‚ÇÅ·µ• R‚Çú.prodÀ¢‚Çï‚ÇÅ        = R‚Çô‚Çú.prodÀ¢‚Çï‚ÇÅ
      bisim‚ÇÅ·µ• R‚Çú.prodÀ¢‚Çï‚ÇÇ        = R‚Çô‚Çú.prodÀ¢‚Çï‚ÇÇ
      bisim‚ÇÅ·µ• R‚Çú.prod ∑‚Çï         = R‚Çô‚Çú.prod ∑‚Çï
      bisim‚ÇÅ·µ• R‚Çú.zero‚Çï          = R‚Çô‚Çú.zero‚Çï
      bisim‚ÇÅ·µ• R‚Çú.suc‚Çï           = R‚Çô‚Çú.suc‚Çï
      bisim‚ÇÅ·µ• R‚Çú.star ∑‚Çï         = R‚Çô‚Çú.star ∑‚Çï
      bisim‚ÇÅ·µ• (R‚Çú.unitrec-Œ∑‚Çï Œ∑) = R‚Çô‚Çú.unitrec-Œ∑‚Çï Œ∑
      bisim‚ÇÅ·µ• R‚Çú.rfl‚Çï‚±º          = R‚Çô‚Çú.rfl‚Çï‚±º
      bisim‚ÇÅ·µ• R‚Çú.rfl‚Çï‚Çñ          = R‚Çô‚Çú.rfl‚Çï‚Çñ
      bisim‚ÇÅ·µ• R‚Çú.rfl‚Çï‚Çë          = R‚Çô‚Çú.rfl‚Çï‚Çë

    opaque

      bisim‚ÇÅ‚Çõ : s R‚Çú.‚áí‚Çõ ‚ü® H , t , œÅ , S ‚ü©
              ‚Üí s R‚Çô‚Çú.‚áí‚Çõ ‚ü® H , t , œÅ , S ‚ü©
      bisim‚ÇÅ‚Çõ (R‚Çú.suc‚Çï x) = R‚Çô‚Çú.suc‚Çï x
      bisim‚ÇÅ‚Çõ (R‚Çú.num‚Çï x) = R‚Çô‚Çú.num‚Çï x

    opaque

      bisim‚ÇÅ : s R‚Çú.‚áí ‚ü® H , t , œÅ , S ‚ü©
             ‚Üí ‚àÉ Œª H‚Ä≤ ‚Üí s R‚Çô‚Çú.‚áí ‚ü® H‚Ä≤ , t , œÅ , S ‚ü© √ó H ~ ∞ H‚Ä≤
      bisim‚ÇÅ (R‚Çú.‚áí‚Çô d) =
        case bisim‚ÇÅ‚Çô d of Œª
          (_ , d‚Ä≤ , H~H‚Ä≤) ‚Üí
        _ , R‚Çô‚Çú.‚áí‚Çô d‚Ä≤ , H~H‚Ä≤
      bisim‚ÇÅ (R‚Çú.‚áí·µ• d) =
        _ , R‚Çô‚Çú.‚áí·µ• (bisim‚ÇÅ·µ• d) , ~ ∞-refl
      bisim‚ÇÅ (R‚Çú.‚áí‚Çõ d) =
        _ , R‚Çô‚Çú.‚áí‚Çõ (bisim‚ÇÅ‚Çõ d) , ~ ∞-refl

    opaque

      bisim‚ÇÅ* : s R‚Çú.‚áí* ‚ü® H , t , œÅ , S ‚ü©
              ‚Üí ‚àÉ Œª H‚Ä≤ ‚Üí s R‚Çô‚Çú.‚áí* ‚ü® H‚Ä≤ , t , œÅ , S ‚ü© √ó H ~ ∞ H‚Ä≤
      bisim‚ÇÅ* R‚Çú.id =
        _ , R‚Çô‚Çú.id , ~ ∞-refl
      bisim‚ÇÅ* (x R‚Çú.‚á® d) =
        case bisim‚ÇÅ x of Œª
          (_ , x‚Ä≤ , H~H‚Ä≤) ‚Üí
        case bisim‚ÇÅ* d of Œª
          (_ , d‚Ä≤ , H~H‚Ä≥) ‚Üí
        case ~ ∞-‚áí* d‚Ä≤ H~H‚Ä≤ of Œª
          (_ , d‚Ä≥ , H~H‚Ä¥) ‚Üí
        _ , (x‚Ä≤ R‚Çô‚Çú.‚á® d‚Ä≥) , ~ ∞-trans H~H‚Ä≥ H~H‚Ä¥

    opaque

      bisim‚ÇÇ·µ• : ‚ü® H , t , œÅ , S ‚ü© R‚Çô‚Çú.‚áí·µ• ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
              ‚Üí ‚ü® H , t , œÅ , S ‚ü© R‚Çú.‚áí·µ• ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
      bisim‚ÇÇ·µ• R‚Çô‚Çú.lam‚Çï            = R‚Çú.lam‚Çï
      bisim‚ÇÇ·µ• R‚Çô‚Çú.prodÀ¢‚Çï‚ÇÅ         = R‚Çú.prodÀ¢‚Çï‚ÇÅ
      bisim‚ÇÇ·µ• R‚Çô‚Çú.prodÀ¢‚Çï‚ÇÇ         = R‚Çú.prodÀ¢‚Çï‚ÇÇ
      bisim‚ÇÇ·µ• R‚Çô‚Çú.prod ∑‚Çï          = R‚Çú.prod ∑‚Çï
      bisim‚ÇÇ·µ• R‚Çô‚Çú.zero‚Çï           = R‚Çú.zero‚Çï
      bisim‚ÇÇ·µ• R‚Çô‚Çú.suc‚Çï            = R‚Çú.suc‚Çï
      bisim‚ÇÇ·µ• R‚Çô‚Çú.star ∑‚Çï          = R‚Çú.star ∑‚Çï
      bisim‚ÇÇ·µ• (R‚Çô‚Çú.unitrec-Œ∑‚Çï Œ∑)  = R‚Çú.unitrec-Œ∑‚Çï Œ∑
      bisim‚ÇÇ·µ• R‚Çô‚Çú.rfl‚Çï‚±º           = R‚Çú.rfl‚Çï‚±º
      bisim‚ÇÇ·µ• R‚Çô‚Çú.rfl‚Çï‚Çñ           = R‚Çú.rfl‚Çï‚Çñ
      bisim‚ÇÇ·µ• R‚Çô‚Çú.rfl‚Çï‚Çë           = R‚Çú.rfl‚Çï‚Çë

    opaque

      bisim‚ÇÇ‚Çõ : ‚ü® H , t , œÅ , S ‚ü© R‚Çô‚Çú.‚áí‚Çõ ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
              ‚Üí ‚ü® H , t , œÅ , S ‚ü© R‚Çú.‚áí‚Çõ ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
      bisim‚ÇÇ‚Çõ (R‚Çô‚Çú.suc‚Çï x) = R‚Çú.suc‚Çï x
      bisim‚ÇÇ‚Çõ (R‚Çô‚Çú.num‚Çï x) = R‚Çú.num‚Çï x

  -- The proof of the other direction uses some additional assumptions

  module _ (As : Assumptions) where

    open Assumptions As

    open import Heap.Usage.Reduction type-variant UR erased-heap opts‚Çú Unit ∑-Œ∑‚Üí

    opaque

      bisim‚ÇÇ‚Çô : ‚ü® H , t , œÅ , S ‚ü© R‚Çô‚Çú.‚áí‚Çô ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
              ‚Üí H ~ ∞ H‚Ä≥
              ‚Üí Œ≥ ‚®æ Œ¥ ‚®æ Œ∑ ‚ñ∏[ m ] ‚ü® H‚Ä≥ , t , œÅ , S ‚ü©
              ‚Üí ‚àÉ Œª H‚Ä¥ ‚Üí ‚ü® H‚Ä≥ , t , œÅ , S ‚ü© R‚Çú.‚áí‚Çô ‚ü® H‚Ä¥ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü© √ó H‚Ä≤ ~ ∞ H‚Ä¥
      bisim‚ÇÇ‚Çô (R‚Çô‚Çú.var‚Çï‚Ä≤ d) H~H‚Ä≤ ‚ñ∏s =
        case ‚ñ∏‚Ü¶‚Üí‚Ü¶[] subtraction-ok (~ ∞-lookup H~H‚Ä≤ d) ‚ñ∏s .proj‚ÇÇ of Œª
          d‚Ä≤ ‚Üí
        _ , R‚Çú.var‚Çï d‚Ä≤ , ~ ∞-trans H~H‚Ä≤ (update-~ ∞ d‚Ä≤)
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.app‚Çï H~H‚Ä≤ _            = _ , R‚Çú.app‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.fst‚Çï H~H‚Ä≤ _            = _ , R‚Çú.fst‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.snd‚Çï H~H‚Ä≤ _            = _ , R‚Çú.snd‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.prodrec‚Çï H~H‚Ä≤ _        = _ , R‚Çú.prodrec‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.natrec‚Çï H~H‚Ä≤ _         = _ , R‚Çú.natrec‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô (R‚Çô‚Çú.unitrec‚Çï no-Œ∑) H~H‚Ä≤ _ = _ , R‚Çú.unitrec‚Çï no-Œ∑ , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.emptyrec‚Çï H~H‚Ä≤ _       = _ , R‚Çú.emptyrec‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.J‚Çï H~H‚Ä≤ _              = _ , R‚Çú.J‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.K‚Çï H~H‚Ä≤ _              = _ , R‚Çú.K‚Çï , H~H‚Ä≤
      bisim‚ÇÇ‚Çô R‚Çô‚Çú.[]-cong‚Çï H~H‚Ä≤ _        = _ , R‚Çú.[]-cong‚Çï , H~H‚Ä≤

    opaque

      bisim‚ÇÇ : ‚ü® H , t , œÅ , S ‚ü© R‚Çô‚Çú.‚áí ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
             ‚Üí H ~ ∞ H‚Ä≥
             ‚Üí Œ≥ ‚®æ Œ¥ ‚®æ Œ∑ ‚ñ∏[ m ] ‚ü® H‚Ä≥ , t , œÅ , S ‚ü©
             ‚Üí ‚àÉ Œª H‚Ä¥ ‚Üí ‚ü® H‚Ä≥ , t , œÅ , S ‚ü© R‚Çú.‚áí ‚ü® H‚Ä¥ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü© √ó H‚Ä≤ ~ ∞ H‚Ä¥
      bisim‚ÇÇ (R‚Çô‚Çú.‚áí‚Çô d) H~H‚Ä≤ ‚ñ∏s =
        case bisim‚ÇÇ‚Çô d H~H‚Ä≤ ‚ñ∏s of Œª
          (_ , d‚Ä≤ , H‚Ä≤~H‚Ä≥) ‚Üí
        _ , R‚Çú.‚áí‚Çô d‚Ä≤ , H‚Ä≤~H‚Ä≥
      bisim‚ÇÇ (R‚Çô‚Çú.‚áí·µ• d) H~H‚Ä≤ ‚ñ∏s =
        case ~ ∞-‚áí·µ• d H~H‚Ä≤ of Œª
          (_ , d‚Ä≤ , H‚Ä≤~H‚Ä≥) ‚Üí
        _ , R‚Çú.‚áí·µ• bisim‚ÇÇ·µ• d‚Ä≤ , H‚Ä≤~H‚Ä≥
      bisim‚ÇÇ (R‚Çô‚Çú.‚áí‚Çõ d) H~H‚Ä≤ ‚ñ∏s =
        case ~ ∞-‚áí‚Çõ d H~H‚Ä≤ of Œª
          d‚Ä≤ ‚Üí
        case ‚áí‚Çõ-Heap‚â° d of Œª {
          PE.refl ‚Üí
        _ , R‚Çú.‚áí‚Çõ bisim‚ÇÇ‚Çõ d‚Ä≤ , H~H‚Ä≤}

    opaque

      bisim‚ÇÇ* : ‚ü® H , t , œÅ , S ‚ü© R‚Çô‚Çú.‚áí* ‚ü® H‚Ä≤ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü©
              ‚Üí H ~ ∞ H‚Ä≥
              ‚Üí Œ≥ ‚®æ Œ¥ ‚®æ Œ∑ ‚ñ∏[ m ] ‚ü® H‚Ä≥ , t , œÅ , S ‚ü©
              ‚Üí ‚àÉ Œª H‚Ä¥ ‚Üí ‚ü® H‚Ä≥ , t , œÅ , S ‚ü© R‚Çú.‚áí* ‚ü® H‚Ä¥ , t‚Ä≤ , œÅ‚Ä≤ , S‚Ä≤ ‚ü© √ó H‚Ä≤ ~ ∞ H‚Ä¥
      bisim‚ÇÇ* R‚Çô‚Çú.id H~H‚Ä≤ ‚ñ∏s =
        _ , R‚Çú.id , H~H‚Ä≤
      bisim‚ÇÇ* (x R‚Çô‚Çú.‚á® d) H~H‚Ä≤ ‚ñ∏s =
        case bisim‚ÇÇ x H~H‚Ä≤ ‚ñ∏s of Œª
          (_ , x‚Ä≤ , H~H‚Ä≥) ‚Üí
        case ‚ñ∏-‚áí ‚ñ∏s x‚Ä≤ of Œª
          (_ , _ , _ , _ , ‚ñ∏s‚Ä≤) ‚Üí
        case bisim‚ÇÇ* d H~H‚Ä≥ ‚ñ∏s‚Ä≤ of Œª
          (_ , d‚Ä≤ , H~H‚Ä¥) ‚Üí
        _ , (x‚Ä≤ R‚Çú.‚á® d‚Ä≤) , H~H‚Ä¥

-- Bisimilarity between the call-by-name reduction and the
-- heap reduction without evaluation to numerals.

module _ where

  private
    opts‚Çú opts‚Çô‚Çú : Options
    opts‚Çú = tracking-and-‚Ñï-fullred-if false
    opts‚Çô‚Çú = not-tracking-and-‚Ñï-fullred-if false
    module R‚Çú = R opts‚Çú
    module R‚Çô‚Çú = R opts‚Çô‚Çú

  open RP opts‚Çô‚Çú
  open import Heap.Typed UR TR false
  open import Heap.Typed.Properties UR TR false
  open import Heap.Typed.Reduction UR TR opts‚Çô‚Çú

  -- Most of the bisimilarity properties are proven under
  -- the assumption that the nr function is factoring.

  module _ ‚¶É _ : Has-nr M semiring-with-meet ‚¶Ñ
           ‚¶É _ : Has-factoring-nr M semiring-with-meet ‚¶Ñ
           where

    opaque

      bisim‚ÇÉ : Œî ‚®æ Œì ‚ä¢ s ‚à∑ A ‚Üí s R‚Çô‚Çú.‚áí s‚Ä≤
             ‚Üí Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí* ‚¶Ö s‚Ä≤ ‚¶Ü ‚à∑ A
      bisim‚ÇÉ (_ , _ , ‚ä¢t , ‚ä¢S) (R‚Çô‚Çú.‚áí‚Çô d) =
        subst (_ ‚ä¢ _ ‚áí*_‚à∑ _) (‚áí‚Çô-‚¶Ö‚¶Ü-‚â° d) (id (‚ä¢‚¶Ö‚¶ÜÀ¢ ‚ä¢S ‚ä¢t))
      bisim‚ÇÉ ‚ä¢s (R‚Çô‚Çú.‚áí·µ• d) =
        redMany (‚áí·µ•‚Üí‚áí ‚ä¢s d)

    opaque

      bisim‚ÇÉ* : Œî ‚®æ Œì ‚ä¢ s ‚à∑ A ‚Üí s R‚Çô‚Çú.‚áí* s‚Ä≤
              ‚Üí Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí* ‚¶Ö s‚Ä≤ ‚¶Ü ‚à∑ A
      bisim‚ÇÉ* (_ , ‚ä¢H , ‚ä¢t , ‚ä¢S) R‚Çô‚Çú.id = id (‚ä¢‚¶Ö‚¶ÜÀ¢ ‚ä¢S ‚ä¢t)
      bisim‚ÇÉ* ‚ä¢s (x R‚Çô‚Çú.‚á® d) =
        case ‚ä¢‚Çõ-‚áí ‚ä¢s x of Œª
          (_ , _ , _ , ‚ä¢s‚Ä≤) ‚Üí
        (bisim‚ÇÉ ‚ä¢s x) ‚á®‚à∑* (bisim‚ÇÉ* ‚ä¢s‚Ä≤ d)

    opaque

      bisim‚ÇÑ·µ• : Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí u ‚à∑ A
              ‚Üí Normal s
              ‚Üí Œî ‚®æ Œì ‚ä¢ s ‚à∑ B
              ‚Üí ‚àÉ‚ÇÉ Œª m n (s‚Ä≤ : State _ m n) ‚Üí s R‚Çô‚Çú.‚áí·µ• s‚Ä≤ √ó u PE.‚â° ‚¶Ö s‚Ä≤ ‚¶Ü
      bisim‚ÇÑ·µ• {Œî} {s = ‚ü® H , t , œÅ , Œµ ‚ü©} d (val x) ‚ä¢s =
        case Value‚ÜíWhnf (substValue (toSubst‚Çï H) (wkValue œÅ x)) of Œª where
          (inj‚ÇÅ w) ‚Üí ‚ä•-elim (whnfRedTerm d w)
          (inj‚ÇÇ (_ , _ , _ , _ , _ , ‚â°ur , Œ∑)) ‚Üí
            case subst-unitrec {t = wk œÅ t} ‚â°ur of Œª where
              (inj‚ÇÅ (_ , ‚â°x)) ‚Üí case subst Value ‚â°x (wkValue œÅ x) of Œª ()
              (inj‚ÇÇ (_ , _ , _ , ‚â°ur‚Ä≤ , refl , refl , refl)) ‚Üí
                case wk-unitrec ‚â°ur‚Ä≤ of Œª {
                  (_ , _ , _ , refl , refl , refl , refl) ‚Üí
                _ , _ , _ , R‚Çô‚Çú.unitrec-Œ∑‚Çï Œ∑ , lemma Œ∑ d}
        where
        lemma : Unit ∑-Œ∑ ‚Üí Œî ‚ä¢ unitrec p q A u v ‚áí w ‚à∑ B ‚Üí w PE.‚â° v
        lemma Œ∑ (conv d x) = lemma Œ∑ d
        lemma Œ∑ (unitrec-subst _ _ _ _ no-Œ∑) = ‚ä•-elim (no-Œ∑ Œ∑)
        lemma Œ∑ (unitrec-Œ≤ _ _ _ no-Œ∑) = ‚ä•-elim (no-Œ∑ Œ∑)
        lemma Œ∑ (unitrec-Œ≤-Œ∑ _ _ _ _ _) = refl

      bisim‚ÇÑ·µ• {s = ‚ü® _ , _ , _ , e ‚àô S ‚ü©} d (val v) ‚ä¢s =
        case ‚ä¢Value-‚áí·µ• ‚ä¢s v of Œª
          (_ , _ , _ , d‚Ä≤) ‚Üí
        _ , _ , _ , d‚Ä≤ , whrDetTerm d (‚áí·µ•‚Üí‚áí ‚ä¢s d‚Ä≤)
      bisim‚ÇÑ·µ• d (var d‚Ä≤) (_ , _ , _ , ‚ä¢S) =
        ‚ä•-elim (neRedTerm d (NeutralAt‚ÜíNeutral (toSubst‚Çï-NeutralAt d‚Ä≤ (‚ä¢‚¶Ö‚¶ÜÀ¢-NeutralAt ‚ä¢S var))))

    opaque

      bisim‚ÇÑ : Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí u ‚à∑ A
             ‚Üí Œî ‚®æ Œì ‚ä¢ s ‚à∑ B
             ‚Üí ‚àÉ‚ÇÉ Œª m n (s‚Ä≤ : State _ m n) ‚Üí s R‚Çô‚Çú.‚áí* s‚Ä≤ √ó u PE.‚â° ‚¶Ö s‚Ä≤ ‚¶Ü
      bisim‚ÇÑ {s} d ‚ä¢s =
        case normalize‚Çõ s of Œª
          (_ , _ , n , d‚Ä≤) ‚Üí
        case ‚ä¢‚Çõ-‚áí‚Çô* ‚ä¢s d‚Ä≤ of Œª
          ‚ä¢s‚Ä≤ ‚Üí
        case bisim‚ÇÑ·µ• (PE.subst (Œª x ‚Üí _ ‚ä¢ x ‚áí _ ‚à∑ _) (‚áí‚Çô*-‚¶Ö‚¶Ü-‚â° d‚Ä≤) d) n ‚ä¢s‚Ä≤ of Œª
          (_ , _ , s‚Ä≤ , d‚Ä≥ , u‚â°) ‚Üí
        _ , _ , s‚Ä≤ , (‚áí‚Çô* d‚Ä≤ ‚á®* (R‚Çô‚Çú.‚áí·µ• d‚Ä≥) R‚Çô‚Çú.‚á® R‚Çô‚Çú.id) , u‚â°

    opaque

      bisim‚ÇÑ* : Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí* u ‚à∑ A
              ‚Üí Œî ‚®æ Œì ‚ä¢ s ‚à∑ B
              ‚Üí ‚àÉ‚ÇÉ Œª m n (s‚Ä≤ : State _ m n) ‚Üí s R‚Çô‚Çú.‚áí* s‚Ä≤ √ó u PE.‚â° ‚¶Ö s‚Ä≤ ‚¶Ü
      bisim‚ÇÑ* (id x) ‚ä¢s =
        _ , _ , _ , R‚Çô‚Çú.id , PE.refl
      bisim‚ÇÑ* (x ‚á® d) ‚ä¢s =
        case bisim‚ÇÑ x ‚ä¢s of Œª {
          (_ , _ , _ , x‚Ä≤ , PE.refl) ‚Üí
        case ‚ä¢‚Çõ-‚áí* ‚ä¢s x‚Ä≤ of Œª
          (_ , _ , _ , ‚ä¢s‚Ä≤) ‚Üí
        case bisim‚ÇÑ* d ‚ä¢s‚Ä≤ of Œª
          (_ , _ , _ , d‚Ä≤ , u‚â°) ‚Üí
        _ , _ , _ , x‚Ä≤ ‚á®* d‚Ä≤ , u‚â° }

    opaque

      bisim‚ÇÖ* : Œî ‚®æ Œì ‚ä¢ s ‚à∑ A ‚Üí s R‚Çú.‚áí* s‚Ä≤
              ‚Üí Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí* ‚¶Ö s‚Ä≤ ‚¶Ü ‚à∑ A
      bisim‚ÇÖ* {s‚Ä≤ = ‚ü® _ , t , œÅ , S ‚ü©} ‚ä¢s d =
        case bisim‚ÇÅ* false d of Œª
          (_ , d‚Ä≤ , H~H‚Ä≤) ‚Üí
        PE.subst (Œª x ‚Üí _ ‚ä¢ _ ‚áí* ‚¶Ö S ‚¶ÜÀ¢ (wk œÅ t) [ x ] ‚à∑ _)
          (PE.sym (~ ∞-subst H~H‚Ä≤)) (bisim‚ÇÉ* ‚ä¢s d‚Ä≤)

  -- The proof that the closure of the call-by-name reduction
  -- corresponds to the closure of the tracking reduction has
  -- some extra assumptions.

  module _ (As : Assumptions) where

    open Assumptions As

    opaque

      bisim‚ÇÜ* : Œî ‚ä¢ ‚¶Ö s ‚¶Ü ‚áí* u ‚à∑ A
              ‚Üí Œî ‚®æ Œì ‚ä¢ s ‚à∑ B
              ‚Üí Œ≥ ‚®æ Œ¥ ‚®æ Œ∑ ‚ñ∏[ m ] s
              ‚Üí ‚àÉ‚ÇÉ Œª m n (s‚Ä≤ : State _ m n) ‚Üí s R‚Çú.‚áí* s‚Ä≤ √ó u PE.‚â° ‚¶Ö s‚Ä≤ ‚¶Ü
      bisim‚ÇÜ* d ‚ä¢s ‚ñ∏s =
        case bisim‚ÇÑ* d ‚ä¢s of Œª
          (_ , _ , ‚ü® H , t , œÅ , S ‚ü© , d‚Ä≤ , u‚â°) ‚Üí
        case bisim‚ÇÇ* false As d‚Ä≤ ~ ∞-refl ‚ñ∏s of Œª
          (_ , d‚Ä≥ , H~H‚Ä≤) ‚Üí
        _ , _ , _ , d‚Ä≥
          , PE.trans u‚â° (cong (Œª x ‚Üí ‚¶Ö S ‚¶ÜÀ¢ (wk œÅ t) [ x ]) (~ ∞-subst H~H‚Ä≤))

-- Bisimilarity between redutions with and without reuction to numerals
-- (with or without resource tracking).

module _ ‚¶É _ : Has-nr M semiring-with-meet ‚¶Ñ
         ‚¶É _ : Has-factoring-nr M semiring-with-meet ‚¶Ñ
         (track-resources : Bool) where

  private
    opts‚Çõ opts‚Çô‚Çõ : Options
    opts‚Çõ = ‚Ñï-Fullred-and-tracking-if track-resources
    opts‚Çô‚Çõ = ¬¨‚Ñï-Fullred-and-tracking-if track-resources
    module R‚Çõ = R opts‚Çõ
    module R‚Çô‚Çõ = R opts‚Çô‚Çõ

  opaque

    bisim‚Çá‚Çô : s R‚Çô‚Çõ.‚áí‚Çô s‚Ä≤ ‚Üí s R‚Çõ.‚áí‚Çô s‚Ä≤
    bisim‚Çá‚Çô (R‚Çô‚Çõ.var‚Çï d) = R‚Çõ.var‚Çï d
    bisim‚Çá‚Çô (R‚Çô‚Çõ.var‚Çï‚Ä≤ d) = R‚Çõ.var‚Çï‚Ä≤ d
    bisim‚Çá‚Çô R‚Çô‚Çõ.app‚Çï = R‚Çõ.app‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.fst‚Çï = R‚Çõ.fst‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.snd‚Çï = R‚Çõ.snd‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.prodrec‚Çï = R‚Çõ.prodrec‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.natrec‚Çï = R‚Çõ.natrec‚Çï
    bisim‚Çá‚Çô (R‚Çô‚Çõ.unitrec‚Çï no-Œ∑) = R‚Çõ.unitrec‚Çï no-Œ∑
    bisim‚Çá‚Çô R‚Çô‚Çõ.emptyrec‚Çï = R‚Çõ.emptyrec‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.J‚Çï = R‚Çõ.J‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.K‚Çï = R‚Çõ.K‚Çï
    bisim‚Çá‚Çô R‚Çô‚Çõ.[]-cong‚Çï = R‚Çõ.[]-cong‚Çï

  opaque

    bisim‚Çá·µ• : s R‚Çô‚Çõ.‚áí·µ• s‚Ä≤ ‚Üí s R‚Çõ.‚áí·µ• s‚Ä≤
    bisim‚Çá·µ• R‚Çô‚Çõ.lam‚Çï = R‚Çõ.lam‚Çï
    bisim‚Çá·µ• R‚Çô‚Çõ.prodÀ¢‚Çï‚ÇÅ = R‚Çõ.prodÀ¢‚Çï‚ÇÅ
    bisim‚Çá·µ• R‚Çô‚Çõ.prodÀ¢‚Çï‚ÇÇ = R‚Çõ.prodÀ¢‚Çï‚ÇÇ
    bisim‚Çá·µ• R‚Çô‚Çõ.prod ∑‚Çï = R‚Çõ.prod ∑‚Çï
    bisim‚Çá·µ• R‚Çô‚Çõ.zero‚Çï = R‚Çõ.zero‚Çï
    bisim‚Çá·µ• R‚Çô‚Çõ.suc‚Çï = R‚Çõ.suc‚Çï
    bisim‚Çá·µ• R‚Çô‚Çõ.star ∑‚Çï = R‚Çõ.star ∑‚Çï
    bisim‚Çá·µ• (R‚Çô‚Çõ.unitrec-Œ∑‚Çï Œ∑) = R‚Çõ.unitrec-Œ∑‚Çï Œ∑
    bisim‚Çá·µ• R‚Çô‚Çõ.rfl‚Çï‚±º = R‚Çõ.rfl‚Çï‚±º
    bisim‚Çá·µ• R‚Çô‚Çõ.rfl‚Çï‚Çñ = R‚Çõ.rfl‚Çï‚Çñ
    bisim‚Çá·µ• R‚Çô‚Çõ.rfl‚Çï‚Çë = R‚Çõ.rfl‚Çï‚Çë

  opaque

    bisim‚Çá : s R‚Çô‚Çõ.‚áí s‚Ä≤ ‚Üí s R‚Çõ.‚áí s‚Ä≤
    bisim‚Çá (R‚Çô‚Çõ.‚áí‚Çô d) = R‚Çõ.‚áí‚Çô (bisim‚Çá‚Çô d)
    bisim‚Çá (R‚Çô‚Çõ.‚áí·µ• d) = R‚Çõ.‚áí·µ• (bisim‚Çá·µ• d)

  opaque

    bisim‚Çá* : s R‚Çô‚Çõ.‚áí* s‚Ä≤ ‚Üí s R‚Çõ.‚áí* s‚Ä≤
    bisim‚Çá* R‚Çô‚Çõ.id = R‚Çõ.id
    bisim‚Çá* (x R‚Çô‚Çõ.‚á® d) = (bisim‚Çá x) R‚Çõ.‚á® (bisim‚Çá* d)
